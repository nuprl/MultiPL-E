language: cs
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      int j = 0;\n                while (j < substring.Length && i + j < str.Length\
    \ && str[i + j] == substring[j]) {\n                    j++;\n               \
    \ }\n                if (j == substring.Length) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool match = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        match = false;\n                        break;\n\
    \                    }\n                }\n                if (match) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool isSubstring = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            isSubstring = false;\n                        break;\n          \
    \          }\n                }\n                if (isSubstring) {\n        \
    \            count++;\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <cb7545f2c8d64246bb3b2bf5911d3d80>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <cb7545f2c8d64246bb3b2bf5911d3d80>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <cb7545f2c8d64246bb3b2bf5911d3d80>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <cb7545f2c8d64246bb3b2bf5911d3d80>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool match = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        match = false;\n                        break;\n\
    \                    }\n                }\n                if (match) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool isMatch = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        isMatch = false;\n                        break;\n\
    \                    }\n                }\n                if (isMatch) {\n  \
    \                  count++;\n                }\n            }\n        }\n   \
    \     return count;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),\
    \ (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"\
    )) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        var count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str.Substring(i, substring.Length) ==\
    \ substring) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00010]\
    \ in <17f0bae7a8ea4e81aa013aa4324ed8bc>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00033] in <17f0bae7a8ea4e81aa013aa4324ed8bc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Index and length must refer to\
    \ a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00010]\
    \ in <17f0bae7a8ea4e81aa013aa4324ed8bc>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00033] in <17f0bae7a8ea4e81aa013aa4324ed8bc>:0 \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool match = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        match = false;\n                        break;\n\
    \                    }\n                }\n                if (match) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      int j = 0;\n                for (; j < substring.Length; j++) {\n     \
    \               if (str[i + j] != substring[j]) {\n                        break;\n\
    \                    }\n                }\n                if (j == substring.Length)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \        return count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),\
    \ (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"\
    )) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00023] in <ad14713143274ca0b3410c53e2c0bb87>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <ad14713143274ca0b3410c53e2c0bb87>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00023] in <ad14713143274ca0b3410c53e2c0bb87>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <ad14713143274ca0b3410c53e2c0bb87>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ <= str.Length - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                count++;\n            }\n        }\n      \
    \  return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      if (str.Substring(i, substring.Length) == substring) {\n              \
    \      count++;\n                }\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00026]\
    \ in <998cf70f64fe47a0ac3947fa3be5485f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00033] in <998cf70f64fe47a0ac3947fa3be5485f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Index and length must refer to\
    \ a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00026]\
    \ in <998cf70f64fe47a0ac3947fa3be5485f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00033] in <998cf70f64fe47a0ac3947fa3be5485f>:0 \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool match = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        match = false;\n                        break;\n\
    \                    }\n                }\n                if (match) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      if (i + substring.Length > str.Length) {\n                    break;\n\
    \                }\n                bool found = true;\n                for (int\
    \ j = 0; j < substring.Length; j++) {\n                    if (str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      int j = 0;\n                while (j < substring.Length && i + j < str.Length\
    \ && str[i + j] == substring[j]) {\n                    j++;\n               \
    \ }\n                if (j == substring.Length) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      if (i + substring.Length <= str.Length) {\n                    if (str.Substring(i,\
    \ substring.Length) == substring) {\n                        count++;\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      if (str.Substring(i, substring.Length) == substring) {\n              \
    \      count++;\n                }\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00026]\
    \ in <998cf70f64fe47a0ac3947fa3be5485f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00033] in <998cf70f64fe47a0ac3947fa3be5485f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Index and length must refer to\
    \ a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00026]\
    \ in <998cf70f64fe47a0ac3947fa3be5485f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00033] in <998cf70f64fe47a0ac3947fa3be5485f>:0 \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n\
    \    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"\
    ), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool match = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        match = false;\n                        break;\n\
    \                    }\n                }\n                if (match) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ <= str.Length - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                count++;\n            }\n        }\n      \
    \  return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ <= str.Length - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                count++;\n            }\n        }\n      \
    \  return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool match = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        match = false;\n                        break;\n\
    \                    }\n                }\n                if (match) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool match = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        match = false;\n                        break;\n\
    \                    }\n                }\n                if (match) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      int j = 0;\n                for (; j < substring.Length; j++) {\n     \
    \               if (str[i + j] != substring[j]) {\n                        break;\n\
    \                    }\n                }\n                if (j == substring.Length)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \        return count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),\
    \ (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"\
    )) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00023] in <ad14713143274ca0b3410c53e2c0bb87>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <ad14713143274ca0b3410c53e2c0bb87>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00023] in <ad14713143274ca0b3410c53e2c0bb87>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <ad14713143274ca0b3410c53e2c0bb87>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ <= str.Length - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                count++;\n            }\n        }\n      \
    \  return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ <= str.Length - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                count++;\n            }\n        }\n      \
    \  return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ <= str.Length - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                count++;\n            }\n        }\n      \
    \  return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool match = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        match = false;\n                        break;\n\
    \                    }\n                }\n                if (match) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ <= str.Length - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                count++;\n            }\n        }\n      \
    \  return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ <= str.Length - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                count++;\n            }\n        }\n      \
    \  return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      int j = 0;\n                while (j < substring.Length && i + j < str.Length\
    \ && str[i + j] == substring[j]) {\n                    j++;\n               \
    \ }\n                if (j == substring.Length) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool match = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        match = false;\n                        break;\n\
    \                    }\n                }\n                if (match) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      int j = 0;\n                for (; j < substring.Length; j++) {\n     \
    \               if (i + j >= str.Length || str[i + j] != substring[j]) {\n   \
    \                     break;\n                    }\n                }\n     \
    \           if (j == substring.Length) {\n                    count++;\n     \
    \           }\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\"), (\"\
    x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"\
    john doe\"), (\"john\")) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool match = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        match = false;\n                        break;\n\
    \                    }\n                }\n                if (match) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      int j = 0;\n                for (; j < substring.Length; j++) {\n     \
    \               if (str[i + j] != substring[j]) {\n                        break;\n\
    \                    }\n                }\n                if (j == substring.Length)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \        return count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),\
    \ (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"\
    )) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00023] in <ad14713143274ca0b3410c53e2c0bb87>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <ad14713143274ca0b3410c53e2c0bb87>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00023] in <ad14713143274ca0b3410c53e2c0bb87>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <ad14713143274ca0b3410c53e2c0bb87>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      if (str.Substring(i, substring.Length) == substring) {\n              \
    \      count++;\n                }\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00026]\
    \ in <998cf70f64fe47a0ac3947fa3be5485f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00033] in <998cf70f64fe47a0ac3947fa3be5485f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Index and length must refer to\
    \ a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00026]\
    \ in <998cf70f64fe47a0ac3947fa3be5485f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00033] in <998cf70f64fe47a0ac3947fa3be5485f>:0 \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool match = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        match = false;\n                        break;\n\
    \                    }\n                }\n                if (match) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ <= str.Length - substring.Length; i++) {\n            if (str.Substring(i, substring.Length)\
    \ == substring) {\n                count++;\n            }\n        }\n      \
    \  return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      int j = 0;\n                while (j < substring.Length && i + j < str.Length\
    \ && str[i + j] == substring[j]) {\n                    j++;\n               \
    \ }\n                if (j == substring.Length) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        int index = 0;\n\
    \        while ((index = str.IndexOf(substring, index)) != -1) {\n           \
    \ index += substring.Length;\n            count++;\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5a9952e71a3d464dbef8ae55d16e8186>:0 \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      int j = 0;\n                for (; j < substring.Length; j++) {\n     \
    \               if (str[i + j] != substring[j]) {\n                        break;\n\
    \                    }\n                }\n                if (j == substring.Length)\
    \ {\n                    count++;\n                }\n            }\n        }\n\
    \        return count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HowManyTimes((\"\"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"),\
    \ (\"cac\")) == (4L));\n    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\"\
    )) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00023] in <ad14713143274ca0b3410c53e2c0bb87>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <ad14713143274ca0b3410c53e2c0bb87>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00023] in <ad14713143274ca0b3410c53e2c0bb87>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <ad14713143274ca0b3410c53e2c0bb87>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool match = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        match = false;\n                        break;\n\
    \                    }\n                }\n                if (match) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool match = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        match = false;\n                        break;\n\
    \                    }\n                }\n                if (match) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      if (str.Substring(i, substring.Length) == substring) {\n              \
    \      count++;\n                }\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00026]\
    \ in <998cf70f64fe47a0ac3947fa3be5485f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00033] in <998cf70f64fe47a0ac3947fa3be5485f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Index and length must refer to\
    \ a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HowManyTimes (System.String str, System.String substring) [0x00026]\
    \ in <998cf70f64fe47a0ac3947fa3be5485f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00033] in <998cf70f64fe47a0ac3947fa3be5485f>:0 \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (str[i + j] != substring[j]) {\n            \
    \            found = false;\n                        break;\n                \
    \    }\n                }\n                if (found) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HowManyTimes (System.String str, System.String\
    \ substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.HowManyTimes (System.String str,\
    \ System.String substring) [0x00026] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0 \n\
    \  at Problem.Main (System.String[] args) [0x00033] in <8ef0f4ea9c4943b980d3bbd2e4a7d3ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        int n = str.Length;\n        int m = substring.Length;\n\
    \        long count = 0;\n        for (int i = 0; i <= n - m; i++) {\n       \
    \     bool match = true;\n            for (int j = 0; j < m; j++) {\n        \
    \        if (str[i + j] != substring[j]) {\n                    match = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (match) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    public static long HowManyTimes(string\
    \ str, string substring) {\n        long count = 0;\n        for (int i = 0; i\
    \ < str.Length; i++) {\n            if (str[i] == substring[0]) {\n          \
    \      bool found = true;\n                for (int j = 1; j < substring.Length;\
    \ j++) {\n                    if (i + j >= str.Length || str[i + j] != substring[j])\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n                if (found) {\n    \
    \                count++;\n                }\n            }\n        }\n     \
    \   return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HowManyTimes((\"\
    \"), (\"x\")) == (0L));\n    Debug.Assert(HowManyTimes((\"xyxyxyx\"), (\"x\"))\
    \ == (4L));\n    Debug.Assert(HowManyTimes((\"cacacacac\"), (\"cac\")) == (4L));\n\
    \    Debug.Assert(HowManyTimes((\"john doe\"), (\"john\")) == (1L));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976133
