language: cs
name: HumanEval_79_decimal_to_binary
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        var binary = Convert.ToString(decimalNum,\
    \ 2);\n        return \"db\" + binary + \"db\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\"\
    )));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n   \
    \ Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the decimal number to\
    \ a binary string\n        // and return the result.\n        // Your code here.\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23469ee1f91a4b4780e6552dd628a0b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23469ee1f91a4b4780e6552dd628a0b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0393222d1ad8449aaac01dba2a58c6d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0393222d1ad8449aaac01dba2a58c6d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa97519de5d84532a2dee7846958d70c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa97519de5d84532a2dee7846958d70c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return binary;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return binary;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        var binary = new StringBuilder();\n\
    \        binary.Append(\"db\");\n        while (decimalNum > 0) {\n          \
    \  binary.Append(decimalNum % 2);\n            decimalNum /= 2;\n        }\n \
    \       binary.Append(\"db\");\n        return binary.ToString();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23d503fdb8f5460085f0a4953678decd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23d503fdb8f5460085f0a4953678decd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return binary;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here.\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2157c34c3c44a6ab6c141c7aa0840c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2157c34c3c44a6ab6c141c7aa0840c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string result = \"\";\n        while\
    \ (decimalNum > 0) {\n            result = (decimalNum % 2).ToString() + result;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + result + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72db6eb764304fa2b8987e82c7e6f016>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // TODO: Implement this function\n\
    \        string binary = \"\";\n        while (decimalNum > 0) {\n           \
    \ binary = (decimalNum % 2).ToString() + binary;\n            decimalNum /= 2;\n\
    \        }\n        return \"db\" + binary + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d789ba62fb1242c8978c645731caeda4>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // convert the decimal number to\
    \ binary\n        string binary = Convert.ToString(decimalNum, 2);\n        //\
    \ add the 'db' characters\n        binary = \"db\" + binary + \"db\";\n      \
    \  return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        var sb = new StringBuilder();\n\
    \        sb.Append(\"db\");\n        while (decimalNum > 0) {\n            sb.Append(decimalNum\
    \ % 2);\n            decimalNum /= 2;\n        }\n        sb.Append(\"db\");\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <99e0b3bce9cd48e998c1030701125e33>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <99e0b3bce9cd48e998c1030701125e33>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa97519de5d84532a2dee7846958d70c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa97519de5d84532a2dee7846958d70c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the decimal number to\
    \ a binary number.\n        // Return the binary number as a string.\n       \
    \ // The string should start with 'db' and end with 'db'.\n        // Each character\
    \ in the string should be either '0' or '1'.\n        // The string should not\
    \ have any leading zeros.\n        // The string should not have any trailing\
    \ zeros.\n        // The string should not have any spaces.\n        // The string\
    \ should not have any commas.\n        // The string should not have any dashes.\n\
    \        // The string should not have any underscores.\n        // The string\
    \ should not have any colons.\n        // The string should not have any semicolons.\n\
    \        // The string should not have any periods.\n        // The string should\
    \ not have any apostrophes.\n        // The string should not have any quotation\
    \ marks.\n        // The string should not have any parentheses.\n        // The\
    \ string should not have any brackets.\n        // The string should not have\
    \ any braces.\n        // The string should not have any curly braces.\n     \
    \   // The string should not have any curly brackets.\n        // The string should\
    \ not have any angle brackets.\n        // The string should not have any less\
    \ than signs.\n        // The string should not have any greater than signs.\n\
    \        // The string should not have any equal signs.\n        // The string\
    \ should not have any plus signs.\n        // The string should not have any minus\
    \ signs.\n        // The string should not have any asterisks.\n        // The\
    \ string should not have any ampersands.\n        // The string should not have\
    \ any carets.\n        // The string should not have any percent signs.\n    \
    \    // The string should not have any dollar signs.\n        // The string should\
    \ not have any pound signs.\n        // The string should not have any at signs.\n\
    \        // The string should not have any exclamation points.\n        // The\
    \ string should not have any question marks.\n        // The string should not\
    \ have any backslashes.\n        // The string should not have any forward slashes.\n\
    \        // The string should not have any vertical bars.\n        // The string\
    \ should not have any tildes.\n        // The string should not have any pipes.\n\
    \        // The string should not have any backticks.\n        // The string\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzriwjs9m.cs(15,26): error CS0161: ''Problem.DecimalToBinary(long)'': not
    all code paths return a value

    '
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return binary;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the decimal number to\
    \ binary format.\n        // Return the binary number as a string.\n        //\
    \ The string should start with 'db' and end with 'db'.\n        // The string\
    \ should contain only '0' and '1' characters.\n        // The string should not\
    \ have any leading zeros.\n        // The string should not have any trailing\
    \ zeros.\n        // The string should not have any extra zeros.\n        // The\
    \ string should not have any extra characters.\n        // The string should not\
    \ have any spaces.\n        // The string should not have any new lines.\n   \
    \     // The string should not have any tabs.\n        // The string should not\
    \ have any carriage returns.\n        // The string should not have any line feeds.\n\
    \        // The string should not have any form feeds.\n        // The string\
    \ should not have any vertical tabs.\n        // The string should not have any\
    \ backspaces.\n        // The string should not have any other control characters.\n\
    \        // The string should not have any other characters.\n        // The string\
    \ should not have any other symbols.\n        // The string should not have any\
    \ other punctuation.\n        // The string should not have any other separators.\n\
    \        // The string should not have any other whitespace.\n        // The string\
    \ should not have any other formatting.\n        // The string should not have\
    \ any other non-printable characters.\n        // The string should not have any\
    \ other non-ASCII characters.\n        // The string should not have any other\
    \ non-Unicode characters.\n        // The string should not have any other non-UTF-8\
    \ characters.\n        // The string should not have any other non-UTF-16 characters.\n\
    \        // The string should not have any other non-UTF-32 characters.\n    \
    \    // The string should not have any other non-UTF-7 characters.\n        //\
    \ The string should not have any other non-UTF-1 characters.\n        // The string\
    \ should not have any other non-UTF-EBCDIC characters.\n        // The string\
    \ should not have any other non-SCSU characters.\n        // The string should\
    \ not have any other non-BOCU-1 characters.\n        // The string should not\
    \ have any other non-GB-18030 characters.\n        // The string should not have\
    \ any other non-Big5 characters\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvxqkkfla.cs(15,26): error CS0161: ''Problem.DecimalToBinary(long)'': not
    all code paths return a value

    '
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        var binary = new StringBuilder();\n\
    \        binary.Append(\"db\");\n        while (decimalNum > 0) {\n          \
    \  binary.Append(decimalNum % 2);\n            decimalNum /= 2;\n        }\n \
    \       binary.Append(\"db\");\n        return binary.ToString();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23d503fdb8f5460085f0a4953678decd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23d503fdb8f5460085f0a4953678decd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the decimal number to\
    \ a binary string\n        // and return the result.\n        return \"db\" +\
    \ Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string result = \"\";\n        while\
    \ (decimalNum > 0) {\n            result = (decimalNum % 2).ToString() + result;\n\
    \            decimalNum /= 2;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fdfacdd268a54935807bb6c3b2244f2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fdfacdd268a54935807bb6c3b2244f2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return binary;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        var sb = new StringBuilder();\n\
    \        sb.Append(\"db\");\n        while (decimalNum > 0) {\n            sb.Append(decimalNum\
    \ % 2);\n            decimalNum /= 2;\n        }\n        sb.Append(\"db\");\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <99e0b3bce9cd48e998c1030701125e33>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <99e0b3bce9cd48e998c1030701125e33>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the number to binary.\n\
    \        string binary = Convert.ToString(decimalNum, 2);\n        // Add the\
    \ extra characters.\n        binary = \"db\" + binary + \"db\";\n        // Return\
    \ the binary string.\n        return binary;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the decimal number to\
    \ binary format\n        string binary = Convert.ToString(decimalNum, 2);\n  \
    \      // Add the extra characters\n        binary = \"db\" + binary + \"db\"\
    ;\n        return binary;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        var binary = new StringBuilder();\n\
    \        binary.Append(\"db\");\n        while (decimalNum > 0) {\n          \
    \  binary.Append(decimalNum % 2);\n            decimalNum /= 2;\n        }\n \
    \       binary.Append(\"db\");\n        return binary.ToString();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23d503fdb8f5460085f0a4953678decd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23d503fdb8f5460085f0a4953678decd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here.\n      \
    \  return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <928796e7cc8a4d07b8ed75f68e6511e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <928796e7cc8a4d07b8ed75f68e6511e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the number to binary\n\
    \        // Return the binary number as a string\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here.\n      \
    \  return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <928796e7cc8a4d07b8ed75f68e6511e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <928796e7cc8a4d07b8ed75f68e6511e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the decimal number to\
    \ binary\n        // and return it as a string\n        // Your code here\n  \
    \      return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return binary;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        var binary = new StringBuilder();\n\
    \        binary.Append(\"db\");\n        while (decimalNum > 0) {\n          \
    \  binary.Append(decimalNum % 2);\n            decimalNum /= 2;\n        }\n \
    \       binary.Append(\"db\");\n        return binary.ToString();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23d503fdb8f5460085f0a4953678decd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23d503fdb8f5460085f0a4953678decd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        var sb = new StringBuilder();\n\
    \        sb.Append(\"db\");\n        while (decimalNum > 0) {\n            sb.Append(decimalNum\
    \ % 2);\n            decimalNum /= 2;\n        }\n        sb.Append(\"db\");\n\
    \        return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <99e0b3bce9cd48e998c1030701125e33>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <99e0b3bce9cd48e998c1030701125e33>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the number to binary\
    \ format\n        string binary = Convert.ToString(decimalNum, 2);\n        //\
    \ Add the extra characters\n        binary = \"db\" + binary + \"db\";\n     \
    \   return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the decimal number to\
    \ a binary string.\n        // The string should start with 'db' and end with\
    \ 'db'.\n        // The string should contain only '0' and '1' characters.\n \
    \       // The string should not contain any leading zeros.\n        // The string\
    \ should not contain any spaces.\n        // The string should not contain any\
    \ extra characters.\n        // The string should not contain any extra 'db' characters.\n\
    \        // The string should not contain any extra '0' characters.\n        //\
    \ The string should not contain any extra '1' characters.\n        // The string\
    \ should not contain any extra characters.\n        // The string should not contain\
    \ any extra 'db' characters.\n        // The string should not contain any extra\
    \ '0' characters.\n        // The string should not contain any extra '1' characters.\n\
    \        // The string should not contain any extra characters.\n        // The\
    \ string should not contain any extra 'db' characters.\n        // The string\
    \ should not contain any extra '0' characters.\n        // The string should not\
    \ contain any extra '1' characters.\n        // The string should not contain\
    \ any extra characters.\n        // The string should not contain any extra 'db'\
    \ characters.\n        // The string should not contain any extra '0' characters.\n\
    \        // The string should not contain any extra '1' characters.\n        //\
    \ The string should not contain any extra characters.\n        // The string should\
    \ not contain any extra 'db' characters.\n        // The string should not contain\
    \ any extra '0' characters.\n        // The string should not contain any extra\
    \ '1' characters.\n        // The string should not contain any extra characters.\n\
    \        // The string should not contain any extra 'db' characters.\n       \
    \ // The string should not contain any extra '0' characters.\n        // The string\
    \ should not contain any extra '1' characters.\n        // The string should not\
    \ contain any extra characters.\n        // The string should not contain any\
    \ extra 'db' characters.\n        // The string should not contain any extra '0'\
    \ characters.\n        // The string should not contain any extra '1' characters.\n\
    \        // The string should not contain any extra characters.\n        // The\
    \ string should not contain any extra 'db' characters.\n        // The string\
    \ should not contain any extra '0' characters.\n\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\"\
    )));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n   \
    \ Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiith4for.cs(15,26): error CS0161: ''Problem.DecimalToBinary(long)'': not
    all code paths return a value

    '
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the decimal number to\
    \ binary\n        // Return the binary number as a string\n        // Do not include\
    \ the 'db' characters\n        // Do not include any leading zeros\n        //\
    \ Example:\n        // decimalNum = 5\n        // return \"101\"\n        // decimalNum\
    \ = 12\n        // return \"1100\"\n        // decimalNum = 0\n        // return\
    \ \"0\"\n        // decimalNum = -1\n        // return \"11111111111111111111111111111111\"\
    \n        // decimalNum = -2\n        // return \"11111111111111111111111111111110\"\
    \n        // decimalNum = -3\n        // return \"11111111111111111111111111111101\"\
    \n        // decimalNum = -4\n        // return \"11111111111111111111111111111100\"\
    \n        // decimalNum = -5\n        // return \"11111111111111111111111111111011\"\
    \n        // decimalNum = -6\n        // return \"11111111111111111111111111111010\"\
    \n        // decimalNum = -7\n        // return \"11111111111111111111111111111001\"\
    \n        // decimalNum = -8\n        // return \"11111111111111111111111111111000\"\
    \n        // decimalNum = -9\n        // return \"11111111111111111111111111110111\"\
    \n        // decimalNum = -10\n        // return \"11111111111111111111111111110110\"\
    \n        // decimalNum = -11\n        // return \"11111111111111111111111111110101\"\
    \n        // decimalNum = -12\n        // return \"11111111111111111111111111110100\"\
    \n        // decimalNum = -13\n        // return \"11111111111111111111111111110011\"\
    \n        // decimalNum = -14\n        // return \"11111111111111111111111111110010\"\
    \n        // decimalNum = -15\n        // return \"11111111111111111111111111110001\"\
    \n        // decimalNum = -16\n        // return \"11111111111111111111111111110000\"\
    \n        // decimalNum = -17\n        // return \"11111111111111111111111111101111\"\
    \n        // decimalNum = -18\n        // return \"11111111111111111111111111101110\"\
    \n        // decimalNum = -19\n        // return \"111111111111111111111111\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpydeitxt4.cs(15,26): error CS0161: ''Problem.DecimalToBinary(long)'': not
    all code paths return a value

    '
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here.\n      \
    \  return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <928796e7cc8a4d07b8ed75f68e6511e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <928796e7cc8a4d07b8ed75f68e6511e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa97519de5d84532a2dee7846958d70c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa97519de5d84532a2dee7846958d70c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum != 0) {\n            binary = (decimalNum % 2) + binary;\n     \
    \       decimalNum /= 2;\n        }\n        return \"db\" + binary + \"db\";\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ef25472d67f4d5bac02c87655f9d965>:0 \n"
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string result = \"\";\n        while\
    \ (decimalNum > 0) {\n            result = (decimalNum % 2).ToString() + result;\n\
    \            decimalNum /= 2;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fdfacdd268a54935807bb6c3b2244f2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fdfacdd268a54935807bb6c3b2244f2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the decimal number to\
    \ binary format and return the result as a string.\n        // The string should\
    \ start with 'db' and end with 'db'.\n        // Each character in the string\
    \ should be '0' or '1'.\n        // The string should not have any leading zeros.\n\
    \        // If the decimal number is 0, the string should be 'db0db'.\n      \
    \  // If the decimal number is negative, the string should start with 'db1' instead\
    \ of 'db0'.\n        // If the decimal number is negative, the binary representation\
    \ should be the two's complement of the\n        // absolute value of the decimal\
    \ number.\n        // The two's complement of a binary number is the number you\
    \ get by inverting all the bits and adding 1.\n        // For example, the two's\
    \ complement of '101' is '010'.\n        // If the decimal number is negative,\
    \ the string should not have any leading zeros.\n        // If the decimal number\
    \ is negative, the string should not have any leading zeros.\n        // If the\
    \ decimal number is negative, the string should not have any leading zeros.\n\
    \        // If the decimal number is negative, the string should not have any\
    \ leading zeros.\n        // If the decimal number is negative, the string should\
    \ not have any leading zeros.\n        // If the decimal number is negative, the\
    \ string should not have any leading zeros.\n        // If the decimal number\
    \ is negative, the string should not have any leading zeros.\n        // If the\
    \ decimal number is negative, the string should not have any leading zeros.\n\
    \        // If the decimal number is negative, the string should not have any\
    \ leading zeros.\n        // If the decimal number is negative, the string should\
    \ not have any leading zeros.\n        // If the decimal number is negative, the\
    \ string should not have any leading zeros.\n        // If the decimal number\
    \ is negative, the string should not have any leading zeros.\n        // If the\
    \ decimal number is negative, the string should not have any leading zeros.\n\
    \        // If the decimal number is negative, the string should not have any\
    \ leading zeros.\n        // If the decimal number is negative, the string should\
    \ not have any leading zeros.\n        // If the decimal number is negative, the\
    \ string should not have any leading zeros.\n        // If the decimal number\
    \ is\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6tx02doi.cs(15,26): error CS0161: ''Problem.DecimalToBinary(long)'': not
    all code paths return a value

    '
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        var binary = new StringBuilder();\n\
    \        binary.Append(\"db\");\n        while (decimalNum > 0) {\n          \
    \  binary.Append(decimalNum % 2);\n            decimalNum /= 2;\n        }\n \
    \       binary.Append(\"db\");\n        return binary.ToString();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23d503fdb8f5460085f0a4953678decd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23d503fdb8f5460085f0a4953678decd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the decimal number to\
    \ binary\n        string binary = Convert.ToString(decimalNum, 2);\n        //\
    \ Add the extra characters\n        binary = \"db\" + binary + \"db\";\n     \
    \   return binary;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the number to binary\
    \ format.\n        // Return the string.\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        var binary = Convert.ToString(decimalNum,\
    \ 2);\n        return $\"db{binary}db\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here.\n      \
    \  return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        var binary = new StringBuilder();\n\
    \        binary.Append(\"db\");\n        while (decimalNum > 0) {\n          \
    \  binary.Append(decimalNum % 2);\n            decimalNum /= 2;\n        }\n \
    \       binary.Append(\"db\");\n        return binary.ToString();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23d503fdb8f5460085f0a4953678decd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23d503fdb8f5460085f0a4953678decd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string result = \"\";\n        while\
    \ (decimalNum > 0) {\n            result = (decimalNum % 2).ToString() + result;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + result + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72db6eb764304fa2b8987e82c7e6f016>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return binary;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binaryNum = \"\";\n     \
    \   while (decimalNum > 0) {\n            binaryNum = (decimalNum % 2).ToString()\
    \ + binaryNum;\n            decimalNum /= 2;\n        }\n        return binaryNum;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a0dcaac6e674289a76a68392ba177f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a0dcaac6e674289a76a68392ba177f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return binary;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the decimal number to\
    \ binary format.\n        // The result should be a string, with each character\
    \ representing a binary number.\n        // Each character in the string will\
    \ be '0' or '1'.\n        // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n        // The extra characters\
    \ are there to help with the format.\n        // Examples:\n        // DecimalToBinary(0)\
    \ -> \"db0db\"\n        // DecimalToBinary(1) -> \"db1db\"\n        // DecimalToBinary(2)\
    \ -> \"db10db\"\n        // DecimalToBinary(3) -> \"db11db\"\n        // DecimalToBinary(4)\
    \ -> \"db100db\"\n        // DecimalToBinary(5) -> \"db101db\"\n        // DecimalToBinary(6)\
    \ -> \"db110db\"\n        // DecimalToBinary(7) -> \"db111db\"\n        // DecimalToBinary(8)\
    \ -> \"db1000db\"\n        // DecimalToBinary(9) -> \"db1001db\"\n        // DecimalToBinary(10)\
    \ -> \"db1010db\"\n        // DecimalToBinary(11) -> \"db1011db\"\n        //\
    \ DecimalToBinary(12) -> \"db1100db\"\n        // DecimalToBinary(13) -> \"db1101db\"\
    \n        // DecimalToBinary(14) -> \"db1110db\"\n        // DecimalToBinary(15)\
    \ -> \"db1111db\"\n        // DecimalToBinary(16) -> \"db10000db\"\n        //\
    \ DecimalToBinary(17) -> \"db10001db\"\n        // DecimalToBinary(18) -> \"db10010db\"\
    \n        // DecimalToBinary(19) -> \"db10011db\"\n        // DecimalToBinary(20)\
    \ -> \"db10100db\"\n        // DecimalToBinary(21) -> \"db10101db\"\n        //\
    \ DecimalToBinary(22) -> \"db10110db\"\n        // DecimalToBinary(23) -> \"db10111db\"\
    \n        //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiizkcm31.cs(15,26): error CS0161: ''Problem.DecimalToBinary(long)'': not
    all code paths return a value

    '
  timestamp: 1659976162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return binary;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18ba66a307041efb87f98ca2b662ce1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the decimal number to\
    \ binary format.\n        // Return the binary number as a string.\n        //\
    \ The string should start with 'db' and end with 'db'.\n        // The string\
    \ should have each binary digit separated by a space.\n        // The string should\
    \ have no leading zeros.\n        // The string should have no spaces at the beginning\
    \ or end.\n        // The string should have no spaces after the last digit.\n\
    \        // The string should have no spaces before the first digit.\n       \
    \ // The string should have no spaces between the 'db' characters.\n        //\
    \ The string should have no spaces between the 'db' characters and the first digit.\n\
    \        // The string should have no spaces between the 'db' characters and the\
    \ last digit.\n        // The string should have no spaces between the 'db' characters\
    \ and the first digit.\n        // The string should have no spaces between the\
    \ 'db' characters and the last digit.\n        // The string should have no spaces\
    \ between the 'db' characters and the first digit.\n        // The string should\
    \ have no spaces between the 'db' characters and the last digit.\n        // The\
    \ string should have no spaces between the 'db' characters and the first digit.\n\
    \        // The string should have no spaces between the 'db' characters and the\
    \ last digit.\n        // The string should have no spaces between the 'db' characters\
    \ and the first digit.\n        // The string should have no spaces between the\
    \ 'db' characters and the last digit.\n        // The string should have no spaces\
    \ between the 'db' characters and the first digit.\n        // The string should\
    \ have no spaces between the 'db' characters and the last digit.\n        // The\
    \ string should have no spaces between the 'db' characters and the first digit.\n\
    \        // The string should have no spaces between the 'db' characters and the\
    \ last digit.\n        // The string should have no spaces between the 'db' characters\
    \ and the first digit.\n        // The string should have no spaces between the\
    \ 'db' characters and the last digit.\n        // The string should have no spaces\
    \ between the 'db' characters and the first digit.\n        // The string should\
    \ have no spaces between the 'db' characters and the last digit.\n        // The\
    \ string should have no spaces between the 'db' characters and the first digit.\n\
    \        // The string should have\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj1ujrfpb.cs(15,26): error CS0161: ''Problem.DecimalToBinary(long)'': not
    all code paths return a value

    '
  timestamp: 1659976162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        return \"db\" + Convert.ToString(decimalNum,\
    \ 2) + \"db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d431d8e5bee74154912f8825a0722ca2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Convert the decimal number to\
    \ binary\n        // Return the binary number as a string\n        // The string\
    \ should start with 'db' and end with 'db'\n        // The string should contain\
    \ only '0' and '1' characters\n        // The string should not have any leading\
    \ zeros\n        // The string should be the minimum length possible\n       \
    \ // The string should be the minimum length possible\n        // The string should\
    \ be the minimum length possible\n        // The string should be the minimum\
    \ length possible\n        // The string should be the minimum length possible\n\
    \        // The string should be the minimum length possible\n        // The string\
    \ should be the minimum length possible\n        // The string should be the minimum\
    \ length possible\n        // The string should be the minimum length possible\n\
    \        // The string should be the minimum length possible\n        // The string\
    \ should be the minimum length possible\n        // The string should be the minimum\
    \ length possible\n        // The string should be the minimum length possible\n\
    \        // The string should be the minimum length possible\n        // The string\
    \ should be the minimum length possible\n        // The string should be the minimum\
    \ length possible\n        // The string should be the minimum length possible\n\
    \        // The string should be the minimum length possible\n        // The string\
    \ should be the minimum length possible\n        // The string should be the minimum\
    \ length possible\n        // The string should be the minimum length possible\n\
    \        // The string should be the minimum length possible\n        // The string\
    \ should be the minimum length possible\n        // The string should be the minimum\
    \ length possible\n        // The string should be the minimum length possible\n\
    \        // The string should be the minimum length possible\n        // The string\
    \ should be the minimum length possible\n        // The string should be the minimum\
    \ length possible\n        // The string should be the minimum length possible\n\
    \        // The string should be the minimum length possible\n        // The string\
    \ should be the minimum length possible\n        // The string should be the minimum\
    \ length possible\n        // The string should be the minimum length possible\n\
    \        // The string should be the minimum length possible\n        // The string\
    \ should be the minimum length possible\n        // The string should be the minimum\
    \ length possible\n        // The string should be the minimum length possible\n\
    \        // The string should be the minimum length possible\n        // The string\
    \ should be the minimum length possible\n        // The string should be the minimum\
    \ length possible\n        // The string should be the\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp20oqw6e6.cs(15,26): error CS0161: ''Problem.DecimalToBinary(long)'': not
    all code paths return a value

    '
  timestamp: 1659976162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ string binary = \"\";\n        while (decimalNum > 0) {\n            binary\
    \ = (decimalNum % 2).ToString() + binary;\n            decimalNum /= 2;\n    \
    \    }\n        return \"db\" + binary + \"db\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\"\
    )));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n   \
    \ Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d51a54e067fe45d78bb1d244ce2da4ac>:0 \n"
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // TODO: Implement this function\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(DecimalToBinary((0L)).Equals((\"db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"\
    db100000db\")));\n    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\"\
    )));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"db1111db\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <816e896b58c746f193ec515a98fa7c12>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <816e896b58c746f193ec515a98fa7c12>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"db\" + Convert.ToString(decimalNum, 2) + \"db\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        string binary = \"\";\n        while\
    \ (decimalNum > 0) {\n            binary = (decimalNum % 2).ToString() + binary;\n\
    \            decimalNum /= 2;\n        }\n        return \"db\" + binary + \"\
    db\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b6ca2981cd54bc39b4c2a8a54e6f464>:0 \n"
  stdout: ''
  timestamp: 1659976161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given a number in decimal form and your task\
    \ is to convert it to\n    // binary format. The function should return a string,\
    \ with each character representing a binary\n    // number. Each character in\
    \ the string will be '0' or '1'.\n    // There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    public static string\
    \ DecimalToBinary(long decimalNum) {\n        // Your code goes here\n       \
    \ return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DecimalToBinary((0L)).Equals((\"\
    db0db\")));\n    Debug.Assert(DecimalToBinary((32L)).Equals((\"db100000db\")));\n\
    \    Debug.Assert(DecimalToBinary((103L)).Equals((\"db1100111db\")));\n    Debug.Assert(DecimalToBinary((15L)).Equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ee9d2cfb6674ef0b3dd4ca46efebdd4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976161
