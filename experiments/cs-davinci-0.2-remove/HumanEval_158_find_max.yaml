name: HumanEval_158_find_max
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that accepts a list of strings.\n    // The\
  \ list contains different words. Return the word with maximum number\n    // of\
  \ unique characters. If multiple strings have maximum number of unique\n    // characters,\
  \ return the one which comes first in lexicographical order.\n    public static\
  \ string FindMax(List<string> words) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
  }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
  }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"play\", (string)\"this\", (string)\"game\", (string)\"of\"\
  , (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
  \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\",\
  \ (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
  nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
  \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
  this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"\
  }))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
  play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
completions: ["        // TODO: Implement this function\n        return null;", " \
    \       // TODO: Implement this function.\n        return \"\";", "        //\
    \ TODO: Implement this function\n        return \"\";", "        // TODO: Implement\
    \ this function.\n        int max = 0;\n        string maxWord = \"\";\n     \
    \   foreach (string word in words) {\n            int unique = 0;\n          \
    \  foreach (char letter in word) {\n                if (!word.Contains(letter))\
    \ {\n                    unique++;\n                }\n            }\n       \
    \     if (unique > max) {\n                max = unique;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;", "        // TODO:\
    \ Implement this function.\n        return \"\";", "        // TODO: Implement\
    \ this function\n        return \"\";", "        // TODO: implement this function\n\
    \        return \"\";", "        // TODO: Implement this function\n        return\
    \ \"\";", "        // TODO: Implement this function\n        return null;", " \
    \       // TODO: Implement this function.\n        return \"\";", "        //\
    \ TODO: Implement this function\n        return \"\";", "        // TODO: Implement\
    \ this function.\n        return \"\";", '        return words.OrderBy(x => x.Distinct().Count()).Last();',
  "        int max = 0;\n        string maxWord = \"\";\n        foreach (string word\
    \ in words) {\n            int unique = 0;\n            foreach (char c in word)\
    \ {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n         \
    \           unique++;\n                }\n            }\n            if (unique\
    \ > max) {\n                max = unique;\n                maxWord = word;\n \
    \           }\n        }\n        return maxWord;", "        // TODO: Implement\
    \ this function\n        return \"\";", "        // TODO: Implement this function.\n\
    \        return \"\";", "        // TODO: Implement me\n        int max = 0;\n\
    \        string maxWord = \"\";\n        foreach (string word in words) {\n  \
    \          int unique = 0;\n            foreach (char c in word) {\n         \
    \       if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    unique++;\n\
    \                }\n            }\n            if (unique > max) {\n         \
    \       max = unique;\n                maxWord = word;\n            }\n      \
    \  }\n        return maxWord;", "        // TODO: implement this function\n  \
    \      return \"\";", "        // TODO: Implement this function.\n        return\
    \ \"\";", "        // TODO: Implement this function.\n        return \"\";", " \
    \       // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement this function\n        return \"\";", "        // TODO: Implement\
    \ this function.\n        return null;", "        // TODO: Implement this function.\n\
    \        return words.OrderBy(x => x.Distinct().Count()).Last();", "        //\
    \ TODO: Implement this method\n        return \"\";", "        // TODO: Implement\
    \ this function.\n        return null;", "        // TODO: Implement this function\n\
    \        return \"\";", "        // TODO: implement this function\n        return\
    \ \"\";", "        // TODO: Implement this function.\n        return \"\";", " \
    \       // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement this function.\n        return \"\";", "        // TODO: Implement\
    \ this function.\n        return null;", "        // TODO: Implement this function.\n\
    \        string max = \"\";\n        int max_count = 0;\n        foreach (string\
    \ word in words) {\n            HashSet<char> set = new HashSet<char>();\n   \
    \         foreach (char c in word) {\n                set.Add(c);\n          \
    \  }\n            if (set.Count > max_count) {\n                max = word;\n\
    \                max_count = set.Count;\n            }\n        }\n        return\
    \ max;", "        // TODO: Implement this function.\n        // Hint: You can\
    \ use the following helper function to count unique characters in a string.\n\
    \        // var uniqueChars = new HashSet<char>(word);\n        // return uniqueChars.Count;\n\
    \        int max = 0;\n        string result = \"\";\n        foreach (string\
    \ word in words) {\n            var uniqueChars = new HashSet<char>(word);\n \
    \           int count = uniqueChars.Count;\n            if (count > max) {\n \
    \               max = count;\n                result = word;\n            }\n\
    \        }\n        return result;", "        // TODO: Implement this function.\n\
    \        return \"\";", "        string max = \"\";\n        int maxUnique = 0;\n\
    \        foreach (string word in words) {\n            int unique = 0;\n     \
    \       foreach (char c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c))\
    \ {\n                    unique++;\n                }\n            }\n       \
    \     if (unique > maxUnique) {\n                max = word;\n               \
    \ maxUnique = unique;\n            }\n        }\n        return max;", "     \
    \   // TODO: Implement this function\n        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int unique =\
    \ 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    unique++;\n                }\n\
    \            }\n            if (unique > max) {\n                max = unique;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;",
  "        // TODO: Implement this function.\n        return null;", '        return
    words.OrderBy(x => x.Distinct().Count()).Last();', "        // TODO: Implement\
    \ this function.\n        return \"\";", "        // TODO: Implement this function.\n\
    \        return \"\";", "        // TODO: Implement this function.\n        return\
    \ \"\";", "        string max = \"\";\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = 0;\n            foreach (char\
    \ c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count > maxCount) {\n                max = word;\n                maxCount\
    \ = count;\n            }\n        }\n        return max;", "        // TODO:\
    \ Implement this function.\n        return \"\";", "        // TODO: Implement\
    \ this function\n        return \"\";", "        // TODO: Implement this function.\n\
    \        return \"\";", "        int max = 0;\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            int count = 0;\n      \
    \      foreach (char c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > max) {\n                max = count;\n                result\
    \ = word;\n            }\n        }\n        return result;", "        // TODO:\
    \ Implement this function.\n        return \"\";", "        // TODO: Implement\
    \ this function.\n        return \"\";", "        // TODO: Implement\n       \
    \ return \"\";", "        // TODO: Implement this function\n        return \"\"\
    ;", "        // TODO: Implement this function.\n        string max = \"\";\n \
    \       int max_count = 0;\n        foreach (string word in words) {\n       \
    \     int count = 0;\n            foreach (char c in word) {\n               \
    \ if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > max_count) {\n    \
    \            max = word;\n                max_count = count;\n            }\n\
    \        }\n        return max;", "        string max = \"\";\n        int maxCount\
    \ = 0;\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    count++;\n                }\n  \
    \          }\n            if (count > maxCount) {\n                max = word;\n\
    \                maxCount = count;\n            }\n        }\n        return max;",
  "        // TODO: Implement this function.\n        return \"\";", "        // TODO:\
    \ Implement this function\n        int max = 0;\n        string maxWord = \"\"\
    ;\n        foreach (string word in words) {\n            int count = 0;\n    \
    \        foreach (char c in word) {\n                if (!word.Contains(c)) {\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count > max) {\n                max = count;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;", "        // TODO: Implement\
    \ this function\n        return \"\";", "        // TODO: Implement this function.\n\
    \        return \"\";", "        int max = 0;\n        string maxWord = \"\";\n\
    \        foreach (string word in words) {\n            int unique = 0;\n     \
    \       foreach (char c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c))\
    \ {\n                    unique++;\n                }\n            }\n       \
    \     if (unique > max) {\n                max = unique;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;", "        // TODO:\
    \ Implement this function\n        return \"\";", "        // TODO: Implement\
    \ this function.\n        // You can add helper functions as needed.\n       \
    \ int max = 0;\n        string maxWord = \"\";\n        foreach (string word in\
    \ words) {\n            if (word.Distinct().Count() > max) {\n               \
    \ max = word.Distinct().Count();\n                maxWord = word;\n          \
    \  }\n        }\n        return maxWord;", "        // TODO: Implement this function\n\
    \        return \"\";", "        // TODO: Implement this function.\n        return\
    \ \"\";", "        // TODO: Implement this function\n        return \"\";", " \
    \       // TODO: Implement this function\n        return \"\";", "        int\
    \ max = 0;\n        string maxWord = \"\";\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max) {\n\
    \                max = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;", "        int max = 0;\n        string result\
    \ = \"\";\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    count++;\n                }\n  \
    \          }\n            if (count > max) {\n                max = count;\n \
    \               result = word;\n            }\n        }\n        return result;",
  "        // TODO: Implement this function.\n        return \"\";", "        // TODO:\
    \ Implement this function.\n        return \"\";", "        // TODO: Implement\
    \ this function.\n        return \"\";", "        // TODO: Implement this function.\n\
    \        return \"\";", "        // TODO: Implement this function.\n        return\
    \ null;", "        // TODO: Implement this function.\n        return \"\";", " \
    \       // TODO: Implement this function.\n        int max = 0;\n        string\
    \ result = \"\";\n        foreach (string word in words) {\n            int count\
    \ = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max) {\n                max = count;\n\
    \                result = word;\n            }\n        }\n        return result;",
  "        // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement this function.\n        return \"\";", "        // TODO: Implement\
    \ this function\n        return \"\";", "        // TODO: Implement this function\n\
    \        return \"\";", "        // TODO: Implement this function\n        return\
    \ null;", "        // TODO: Implement this function.\n        return \"\";", " \
    \       // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement this function.\n        return null;", "        // TODO: Implement\
    \ this function\n        return \"\";", "        string max = \"\";\n        int\
    \ maxCount = 0;\n        foreach (string word in words) {\n            int count\
    \ = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > maxCount) {\n                max = word;\n\
    \                maxCount = count;\n            }\n        }\n        return max;",
  "        // TODO: Implement this function.\n        int max = 0;\n        string\
    \ maxWord = \"\";\n        foreach (string word in words) {\n            int count\
    \ = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max) {\n                max = count;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;",
  "        string max = words[0];\n        int maxCount = CountUnique(max);\n    \
    \    for (int i = 1; i < words.Count; i++) {\n            string word = words[i];\n\
    \            int count = CountUnique(word);\n            if (count > maxCount\
    \ || (count == maxCount && word.CompareTo(max) < 0)) {\n                max =\
    \ word;\n                maxCount = count;\n            }\n        }\n       \
    \ return max;", "        // TODO: Implement this function.\n        return \"\"\
    ;", "        // TODO: Implement this function\n        return \"\";", "      \
    \  // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement this function.\n        string max = \"\";\n        int maxCount =\
    \ 0;\n        foreach (string word in words) {\n            int count = 0;\n \
    \           foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    count++;\n                }\n  \
    \          }\n            if (count > maxCount) {\n                maxCount =\
    \ count;\n                max = word;\n            }\n        }\n        return\
    \ max;", "        // TODO: Implement this function.\n        int max = 0;\n  \
    \      string maxWord = \"\";\n        foreach (string word in words) {\n    \
    \        int count = 0;\n            foreach (char c in word) {\n            \
    \    if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > max) {\n          \
    \      max = count;\n                maxWord = word;\n            }\n        }\n\
    \        return maxWord;", "        // TODO: Implement this function.\n      \
    \  return null;", "        // TODO: Implement this function\n        return \"\
    \";", "        // TODO: Implement this function\n        return \"\";", "    \
    \    // TODO: Implement this function\n        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            if (word.Length\
    \ > max) {\n                max = word.Length;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;", "        // TODO: Implement\n\
    \        return \"\";", "        // TODO: Implement this function.\n        return\
    \ \"\";", "        // TODO: Implement this function.\n        return null;", " \
    \       // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement this function\n        return \"\";", "        // TODO: Implement\
    \ this function\n        int max = 0;\n        string result = \"\";\n       \
    \ foreach (string word in words) {\n            int count = 0;\n            foreach\
    \ (char c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > max) {\n                max = count;\n                result\
    \ = word;\n            }\n        }\n        return result;", "        // TODO:\
    \ Implement this function\n        return \"\";", "        // TODO: Implement\
    \ this function.\n        // Hint: You can use the following code to sort a list\
    \ of strings.\n        // words.Sort();\n        // Hint: You can use the following\
    \ code to get the length of a string.\n        // int len = word.Length;\n   \
    \     // Hint: You can use the following code to get the character at a given\n\
    \        // index of a string.\n        // char c = word[i];\n        // Hint:\
    \ You can use the following code to convert a character to lowercase.\n      \
    \  // char lower = char.ToLower(c);\n        // Hint: You can use the following\
    \ code to check if a character is a letter.\n        // bool isLetter = char.IsLetter(c);\n\
    \        // Hint: You can use the following code to get the number of unique characters\n\
    \        // in a string.\n        // int numUnique = word.Distinct().Count();\n\
    \        // Hint: You can use the following code to get the number of occurrences\
    \ of a\n        // character in a string.\n        // int numOccurrences = word.Count(c\
    \ => c == 'a');\n        // Hint: You can use the following code to get the index\
    \ of the first occurrence\n        // of a character in a string.\n        //\
    \ int index = word.IndexOf('a');\n        // Hint: You can use the following code\
    \ to get the index of the last occurrence\n        // of a character in a string.\n\
    \        // int index = word.LastIndexOf('a');\n        // Hint: You can use the\
    \ following code to get the substring of a string.\n        // string sub = word.Substring(startIndex,\
    \ length);\n        // Hint: You can use the following code to check if a string\
    \ contains a substring.\n        // bool contains = word.Contains(\"sub\");\n\
    \        // Hint: You can use the following code to check if a string starts with\
    \ a substring.\n        // bool startsWith = word.StartsWith(\"sub\");\n     \
    \   // Hint: You can use the following code to check if a string ends with a substring.\n\
    \        // bool endsWith = word.EndsWith(\"sub\");\n        // Hint: You can\
    \ use the following code to check if a string is", "        // TODO: Implement\
    \ this function\n        return null;", "        // TODO: Implement this function.\n\
    \        int max = 0;\n        string maxWord = \"\";\n        foreach (string\
    \ word in words) {\n            int unique = 0;\n            foreach (char c in\
    \ word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n   \
    \                 unique++;\n                }\n            }\n            if\
    \ (unique > max) {\n                max = unique;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;", "        // TODO: implement\
    \ this function\n        return \"\";", "        // TODO: Implement this function.\n\
    \        return \"\";", "        // TODO: Implement this function\n        return\
    \ \"\";", "        // TODO: Implement this function\n        return \"\";", " \
    \       // TODO: Implement this function.\n        int max = 0;\n        string\
    \ result = \"\";\n        foreach (string word in words) {\n            int count\
    \ = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max) {\n                max = count;\n\
    \                result = word;\n            }\n        }\n        return result;",
  "        // TODO: Implement this function.\n        return \"\";", "        // TODO:\
    \ Implement this function\n        return \"\";", "        // TODO: Implement\
    \ this function\n        return \"\";", "        // TODO: Implement this function\n\
    \        return \"\";", "        // TODO: implement this function\n        return\
    \ \"\";", "        // TODO: Implement this function.\n        return \"\";", " \
    \       // TODO: Implement this function.\n        string max = words[0];\n  \
    \      int maxUnique = 0;\n        for (int i = 0; i < words.Count; i++) {\n \
    \           int unique = 0;\n            for (int j = 0; j < words[i].Length;\
    \ j++) {\n                if (words[i].IndexOf(words[i][j]) == words[i].LastIndexOf(words[i][j]))\
    \ {\n                    unique++;\n                }\n            }\n       \
    \     if (unique > maxUnique) {\n                maxUnique = unique;\n       \
    \         max = words[i];\n            }\n        }\n        return max;", " \
    \       // TODO: Implement this function.\n        // You can add additional functions\
    \ as needed.\n        return \"\";", "        // TODO: implement\n        return\
    \ \"\";", "        // TODO: Implement this function\n        return \"\";", " \
    \       // TODO: Implement this function.\n        return \"\";", "        //\
    \ TODO: implement this function\n        return \"\";", "        // TODO: Implement\
    \ this function.\n        int max = 0;\n        string maxWord = \"\";\n     \
    \   foreach (string word in words) {\n            int count = 0;\n           \
    \ foreach (char c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > max) {\n                max = count;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;", "        // TODO:\
    \ Implement this function\n        return \"\";", "        // TODO: Implement\
    \ this function\n        return \"\";", "        string max = \"\";\n        int\
    \ max_count = 0;\n        foreach (string word in words) {\n            int count\
    \ = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        // TODO: Implement this function.\n        return \"\";", " \
    \       int max = 0;\n        string maxWord = \"\";\n        foreach (string\
    \ word in words) {\n            if (word.Length > max) {\n                max\
    \ = word.Length;\n                maxWord = word;\n            }\n        }\n\
    \        return maxWord;", "        // TODO: implement this function\n       \
    \ return \"\";", "        // TODO: Implement this function.\n        return \"\
    \";", "        // TODO: Implement this method.\n        return \"\";", "     \
    \   // TODO: Implement this function.\n        return null;", "        // TODO:\
    \ Implement this function.\n        return null;", "        string max = \"\"\
    ;\n        int maxCount = 0;\n        foreach (string word in words) {\n     \
    \       int count = 0;\n            foreach (char c in word) {\n             \
    \   if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           max = word;\n                maxCount = count;\n            }\n  \
    \      }\n        return max;", "        // TODO: Implement this function\n  \
    \      return \"\";", "        // TODO: Implement this function\n        return\
    \ \"\";", "        // TODO: Implement this function.\n        return \"\";", " \
    \       string max = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n   \
    \                 count++;\n                }\n            }\n            if (count\
    \ > maxCount) {\n                max = word;\n                maxCount = count;\n\
    \            }\n        }\n        return max;", "        // TODO: Implement this\
    \ function\n        return null;", "        // TODO: Implement this function\n\
    \        return \"\";", "        // TODO: implement this function\n        return\
    \ \"\";", "        // TODO: Implement this function\n        return \"\";", " \
    \       // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement this function.\n        string max = \"\";\n        int max_count\
    \ = 0;\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                if (word.IndexOf(c) ==\
    \ word.LastIndexOf(c)) {\n                    count++;\n                }\n  \
    \          }\n            if (count > max_count) {\n                max = word;\n\
    \                max_count = count;\n            }\n        }\n        return\
    \ max;", "        // TODO: Implement this function.\n        return null;", " \
    \       // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement this function\n        return \"\";", "        // TODO: Implement\
    \ this function.\n        return \"\";", "        // TODO: Implement this function\n\
    \        return \"\";", "        // TODO: Implement this function.\n        int\
    \ max = 0;\n        string maxWord = \"\";\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > max) {\n\
    \                max = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;", "        // TODO: Implement this function\n\
    \        return \"\";", "        // TODO: Implement this function.\n        return\
    \ \"\";", "        // TODO: Implement\n        return \"\";", "        string\
    \ max = \"\";\n        int maxCount = 0;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                 \
    \   count++;\n                }\n            }\n            if (count > maxCount)\
    \ {\n                max = word;\n                maxCount = count;\n        \
    \    }\n        }\n        return max;", "        // TODO: Implement this function.\n\
    \        return \"\";", "        // TODO: Implement your solution here.\n    \
    \    return \"\";", "        // TODO: implement this function\n        return\
    \ null;", "        // TODO: Implement this function.\n        // Hint: Use a dictionary\
    \ to count the number of unique characters in\n        // each word.\n       \
    \ int max = 0;\n        string maxWord = \"\";\n        foreach (string word in\
    \ words) {\n            int count = 0;\n            Dictionary<char, int> dict\
    \ = new Dictionary<char, int>();\n            foreach (char c in word) {\n   \
    \             if (!dict.ContainsKey(c)) {\n                    dict.Add(c, 1);\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count > max) {\n                max = count;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;", "        // TODO: Implement\
    \ this function\n        return \"\";", "        string max = \"\";\n        int\
    \ maxCount = 0;\n        foreach (string word in words) {\n            int count\
    \ = 0;\n            foreach (char c in word) {\n                if (word.IndexOf(c)\
    \ == word.LastIndexOf(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count > maxCount) {\n                max = word;\n\
    \                maxCount = count;\n            }\n        }\n        return max;",
  "        // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement this function.\n        return \"\";", "        // TODO: Implement\
    \ this function\n        return \"\";", "        // TODO: Implement this function\n\
    \        return \"\";", "        // TODO: Implement this function.\n        return\
    \ \"\";", "        string max = \"\";\n        int maxUnique = 0;\n        foreach\
    \ (string word in words) {\n            int unique = 0;\n            foreach (char\
    \ c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n\
    \                    unique++;\n                }\n            }\n           \
    \ if (unique > maxUnique) {\n                max = word;\n                maxUnique\
    \ = unique;\n            }\n        }\n        return max;", "        // TODO:\
    \ Implement this function.\n        return \"\";", "        int max = 0;\n   \
    \     string maxWord = \"\";\n        foreach (string word in words) {\n     \
    \       int count = 0;\n            foreach (char c in word) {\n             \
    \   count += 1;\n            }\n            if (count > max) {\n             \
    \   max = count;\n                maxWord = word;\n            }\n        }\n\
    \        return maxWord;", "        // TODO: Implement this function.\n      \
    \  return \"\";", "        // Implement me!\n        return null;", "        //\
    \ TODO: Implement this function\n        string max = \"\";\n        int max_count\
    \ = 0;\n        foreach (string word in words) {\n            HashSet<char> unique\
    \ = new HashSet<char>();\n            foreach (char c in word) {\n           \
    \     unique.Add(c);\n            }\n            if (unique.Count > max_count)\
    \ {\n                max = word;\n                max_count = unique.Count;\n\
    \            }\n        }\n        return max;", "        // TODO: Implement this\
    \ function.\n        return \"\";", "        // TODO: Implement this function.\n\
    \        return \"\";", "        // TODO: Implement this function\n        return\
    \ \"\";", "        string max = \"\";\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = 0;\n            foreach (char\
    \ c in word) {\n                if (word.IndexOf(c) == word.LastIndexOf(c)) {\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count > maxCount) {\n                max = word;\n                maxCount\
    \ = count;\n            }\n        }\n        return max;", "        // TODO:\
    \ Implement this function.\n        return \"\";", "        // TODO: implement\
    \ this function\n        return \"\";", "        // TODO: Implement this function.\n\
    \        return \"\";", "        // TODO: Implement this function\n        return\
    \ \"\";", "        // TODO: Implement this function\n        return null;", " \
    \       // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement this function\n        return null;", "        string max = \"\";\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = 0;\n            foreach (char c in word) {\n               \
    \ if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           max = word;\n                maxCount = count;\n            }\n  \
    \      }\n        return max;", '        return words.OrderBy(x => x.Distinct().Count()).Last();',
  "        // TODO: Implement this function\n        return null;", "        // TODO:\
    \ Implement this function.\n        return \"\";", "        // TODO: Implement\
    \ this function\n        return \"\";", "        // TODO: Implement this function\n\
    \        return \"\";", "        // Implement this function\n        return \"\
    \";", "        // TODO: Implement this function.\n        // Hint: You can use\
    \ a dictionary to count the number of unique characters\n        // in a string.\n\
    \        int max = 0;\n        string maxWord = \"\";\n        foreach (string\
    \ word in words) {\n            if (word.Length > max) {\n                max\
    \ = word.Length;\n                maxWord = word;\n            }\n        }\n\
    \        return maxWord;", "        // TODO: Implement this function\n       \
    \ return \"\";", "        // TODO: implement this function\n        return \"\"\
    ;", "        // TODO: Implement this function.\n        int max = 0;\n       \
    \ string maxWord = \"\";\n        foreach (string word in words) {\n         \
    \   int count = 0;\n            for (int i = 0; i < word.Length; i++) {\n    \
    \            if (word.IndexOf(word[i]) == i) {\n                    count++;\n\
    \                }\n            }\n            if (count > max) {\n          \
    \      max = count;\n                maxWord = word;\n            }\n        }\n\
    \        return maxWord;", "        // TODO: Implement this function.\n      \
    \  return \"\";", "        // TODO: Implement this function\n        return \"\
    \";", "        // TODO: Implement this function.\n        int max = 0;\n     \
    \   string maxWord = \"\";\n        foreach (string word in words) {\n       \
    \     int count = 0;\n            foreach (char c in word) {\n               \
    \ if (word.IndexOf(c) == word.LastIndexOf(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > max) {\n          \
    \      max = count;\n                maxWord = word;\n            }\n        }\n\
    \        return maxWord;", '        return words.Aggregate((a, b) => a.Distinct().Count()
    > b.Distinct().Count() ? a : b);', "        // TODO: Implement this function.\n\
    \        return \"\";", "        // TODO: Implement this function\n        return\
    \ \"\";", "        // TODO: Implement this function.\n        return \"\";", " \
    \       // TODO: Implement this function\n        return null;"]
stop_tokens:
- "\n    }\n"
