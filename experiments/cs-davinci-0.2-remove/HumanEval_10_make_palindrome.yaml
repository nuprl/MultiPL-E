name: HumanEval_10_make_palindrome
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Find the shortest palindrome that begins with a supplied string.\n\
  \    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied\
  \ string that is a palindrome.\n    // - Append to the end of the string reverse\
  \ of a string prefix that comes before the palindromic suffix.\n    public static\
  \ string MakePalindrome(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MakePalindrome((\"\
  \")).Equals((\"\")));\n    Debug.Assert(MakePalindrome((\"x\")).Equals((\"x\")));\n\
  \    Debug.Assert(MakePalindrome((\"xyz\")).Equals((\"xyzyx\")));\n    Debug.Assert(MakePalindrome((\"\
  xyx\")).Equals((\"xyx\")));\n    Debug.Assert(MakePalindrome((\"jerry\")).Equals((\"\
  jerryrrej\")));\n    }\n\n}\n"
completions: ["        int n = str.Length;\n        int[] z = new int[n];\n      \
    \  z[0] = 0;\n        for (int i = 1, l = 0, r = 0; i < n; i++) {\n          \
    \  if (i <= r) {\n                z[i] = Math.Min(r - i + 1, z[i - l]);\n    \
    \        }\n            while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n\
    \                z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n\
    \                l = i;\n                r = i + z[i] - 1;\n            }\n  \
    \      }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n      \
    \      if (z[i] == n - i) {\n                max = i;\n            }\n       \
    \ }\n        return str + new string(str.Substring(0, n - max).Reverse().ToArray());",
  "        var n = str.Length;\n        var z = new int[n];\n        var l = 0;\n\
    \        var r = 0;\n        for (var i = 1; i < n; i++) {\n            if (i\
    \ <= r) {\n                z[i] = Math.Min(r - i + 1, z[i - l]);\n           \
    \ }\n            while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n      \
    \          z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n     \
    \           l = i;\n                r = i + z[i] - 1;\n            }\n       \
    \ }\n        var max = 0;\n        var maxi = 0;\n        for (var i = 1; i <\
    \ n; i++) {\n            if (z[i] > max) {\n                max = z[i];\n    \
    \            maxi = i;\n            }\n        }\n        var prefix = str.Substring(0,\
    \ maxi);\n        var suffix = str.Substring(maxi, max);\n        var rev = new\
    \ string(prefix.Reverse().ToArray());\n        return str + rev;", "        var\
    \ sb = new StringBuilder(str);\n        var rev = new StringBuilder(str).ToString().Reverse().ToArray();\n\
    \        var s = str + new string(rev);\n        var z = ZAlgorithm(s);\n    \
    \    var max = 0;\n        for (int i = str.Length; i < z.Length; i++) {\n   \
    \         if (z[i] > max) {\n                max = z[i];\n            }\n    \
    \    }\n        sb.Append(new string(rev.Take(str.Length - max).ToArray()));\n\
    \        return sb.ToString();", "        int n = str.Length;\n        int[] p\
    \ = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n\
    \        }\n        int c = 0;\n        for (int i = 1; i < n; i++) {\n      \
    \      int j = p[i - c - 1];\n            while (j > 0 && str[i] != str[c - j])\
    \ {\n                j = p[j - 1];\n            }\n            if (str[i] == str[c\
    \ - j]) {\n                j++;\n            }\n            p[i - c] = j;\n  \
    \          if (i + j - 1 > c) {\n                c = i;\n            }\n     \
    \   }\n        int l = n - p[n - c - 1];\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = l - 1; i >= 0; i--) {\n            sb.Append(str[i]);\n\
    \        }\n        sb.Append(str);\n        return sb.ToString();", "       \
    \ int n = str.Length;\n        int[] p = new int[n];\n        for (int i = 0;\
    \ i < n; i++) {\n            p[i] = 0;\n        }\n        for (int i = 1; i <\
    \ n; i++) {\n            int j = p[i - 1];\n            while (j > 0 && str[i]\
    \ != str[j]) {\n                j = p[j - 1];\n            }\n            if (str[i]\
    \ == str[j]) {\n                j++;\n            }\n            p[i] = j;\n \
    \       }\n        int palindromeLength = p[n - 1];\n        string prefix = str.Substring(0,\
    \ n - palindromeLength);\n        StringBuilder sb = new StringBuilder();\n  \
    \      for (int i = prefix.Length - 1; i >= 0; i--) {\n            sb.Append(prefix[i]);\n\
    \        }\n        sb.Append(str);\n        return sb.ToString();", "       \
    \ int n = str.Length;\n        int[] p = new int[n];\n        for (int i = 0;\
    \ i < n; i++) {\n            p[i] = 0;\n        }\n        for (int i = 1; i <\
    \ n; i++) {\n            int j = p[i - 1];\n            while (j > 0 && str[i]\
    \ != str[j]) {\n                j = p[j - 1];\n            }\n            if (str[i]\
    \ == str[j]) {\n                j++;\n            }\n            p[i] = j;\n \
    \       }\n        int suffixLength = p[n - 1];\n        string prefix = str.Substring(0,\
    \ n - suffixLength);\n        string reversedPrefix = new string(prefix.Reverse().ToArray());\n\
    \        return str + reversedPrefix;", "        int n = str.Length;\n       \
    \ int[] palindrome = new int[n];\n        int center = 0, right = 0;\n       \
    \ for (int i = 1; i < n; i++) {\n            if (i > right) {\n              \
    \  palindrome[i] = 0;\n            } else {\n                int mirror = 2 *\
    \ center - i;\n                palindrome[i] = Math.Min(right - i, palindrome[mirror]);\n\
    \            }\n            while (i - palindrome[i] - 1 >= 0 && i + palindrome[i]\
    \ + 1 < n && str[i - palindrome[i] - 1] == str[i + palindrome[i] + 1]) {\n   \
    \             palindrome[i]++;\n            }\n            if (i + palindrome[i]\
    \ > right) {\n                center = i;\n                right = i + palindrome[i];\n\
    \            }\n        }\n        int maxPalindrome = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (palindrome[i] > palindrome[maxPalindrome])\
    \ {\n                maxPalindrome = i;\n            }\n        }\n        string\
    \ prefix = str.Substring(0, maxPalindrome - palindrome[maxPalindrome]);\n    \
    \    string suffix = str.Substring(maxPalindrome + palindrome[maxPalindrome]);\n\
    \        return str + Reverse(suffix) + Reverse(prefix);", "        var sb = new\
    \ StringBuilder(str);\n        var rev = new StringBuilder(str);\n        rev.Reverse();\n\
    \        var s = sb.ToString();\n        var r = rev.ToString();\n        var\
    \ n = s.Length;\n        var z = new int[n];\n        for (int i = 1, l = 0, r\
    \ = 0; i < n; i++) {\n            if (i <= r)\n                z[i] = Math.Min(r\
    \ - i + 1, z[i - l]);\n            while (i + z[i] < n && s[z[i]] == s[i + z[i]])\n\
    \                z[i]++;\n            if (i + z[i] - 1 > r) {\n              \
    \  l = i;\n                r = i + z[i] - 1;\n            }\n        }\n     \
    \   var max = 0;\n        for (int i = 0; i < n; i++)\n            if (z[i] ==\
    \ n - i && i > max)\n                max = i;\n        sb.Append(r.Substring(max\
    \ + 1));\n        return sb.ToString();", "        var rev = new string(str.Reverse().ToArray());\n\
    \        var s = str + \"#\" + rev;\n        var z = ZAlgorithm(s);\n        var\
    \ longestPalindrome = z.Max();\n        var longestPalindromeIndex = z.ToList().IndexOf(longestPalindrome);\n\
    \        var prefix = str.Substring(0, str.Length - longestPalindromeIndex);\n\
    \        var revPrefix = new string(prefix.Reverse().ToArray());\n        return\
    \ prefix + revPrefix + str;", "        var s = str + '\\0' + new string(str.Reverse().ToArray());\n\
    \        var z = new int[s.Length];\n        for (int i = 1, l = 0, r = 0; i <\
    \ s.Length; i++) {\n            if (i <= r)\n                z[i] = Math.Min(r\
    \ - i + 1, z[i - l]);\n            while (i + z[i] < s.Length && s[z[i]] == s[i\
    \ + z[i]])\n                z[i]++;\n            if (i + z[i] - 1 > r) {\n   \
    \             l = i;\n                r = i + z[i] - 1;\n            }\n     \
    \   }\n        var prefix = str.Substring(0, str.Length - z[s.Length - str.Length\
    \ - 1]);\n        return str + new string(prefix.Reverse().ToArray());", "   \
    \     int n = str.Length;\n        int[] z = new int[n];\n        int l = 0, r\
    \ = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r) {\n   \
    \             z[i] = Math.Min(r - i + 1, z[i - l]);\n            }\n         \
    \   while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n                z[i]++;\n\
    \            }\n            if (i + z[i] - 1 > r) {\n                l = i;\n\
    \                r = i + z[i] - 1;\n            }\n        }\n        int max\
    \ = 0;\n        for (int i = 1; i < n; i++) {\n            if (z[i] == n - i &&\
    \ i > max) {\n                max = i;\n            }\n        }\n        return\
    \ str + new string(str.Substring(0, n - max).Reverse().ToArray());", "       \
    \ var n = str.Length;\n        var rev = str.Reverse().ToArray();\n        var\
    \ pal = new int[n];\n        for (int i = 0; i < n; i++) {\n            pal[i]\
    \ = 0;\n        }\n        for (int i = 0; i < n; i++) {\n            if (str[i]\
    \ == rev[0]) {\n                pal[i] = 1;\n            }\n        }\n      \
    \  for (int i = 1; i < n; i++) {\n            if (str[i] == rev[i]) {\n      \
    \          pal[i] = pal[i - 1] + 1;\n            }\n        }\n        var max\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            if (pal[i] > max) {\n\
    \                max = pal[i];\n            }\n        }\n        var prefix =\
    \ str.Substring(0, n - max);\n        var revPrefix = prefix.Reverse().ToArray();\n\
    \        return str + new string(revPrefix);", "        int n = str.Length;\n\
    \        int[] p = new int[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      p[i] = 0;\n        }\n        int c = 0;\n        for (int i = 1; i < n;\
    \ i++) {\n            int j = p[i - c - 1];\n            while (j > 0 && str[i]\
    \ != str[c - j]) {\n                j = p[j - 1];\n            }\n           \
    \ if (str[i] == str[c - j]) {\n                j++;\n            }\n         \
    \   p[i - c] = j;\n            if (i + j - 1 > c) {\n                c = i;\n\
    \            }\n        }\n        int l = n - p[n - c - 1];\n        return str\
    \ + new string(str.Substring(0, l).Reverse().ToArray());", "        int n = str.Length;\n\
    \        int[] p = new int[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      p[i] = 0;\n        }\n        int c = 0;\n        for (int i = 1; i < n;\
    \ i++) {\n            int j = p[i - c - 1];\n            while (j > 0 && str[i]\
    \ != str[c - j]) {\n                j = p[j - 1];\n            }\n           \
    \ if (str[i] == str[c - j]) {\n                j++;\n            }\n         \
    \   p[i - c] = j;\n            if (i + j - 1 > c) {\n                c = i;\n\
    \            }\n        }\n        int l = n - p[n - c - 1];\n        return str\
    \ + new string(str.Substring(0, l).Reverse().ToArray());", "        int n = str.Length;\n\
    \        int[] p = new int[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      p[i] = -1;\n        }\n        int c = 0;\n        for (int i = 1; i <\
    \ n; i++) {\n            int j = p[i - c - 1];\n            while (j != -1 &&\
    \ str[i] != str[c - j - 1]) {\n                j = p[j];\n            }\n    \
    \        if (j == -1 && str[i] != str[c - j - 1]) {\n                p[i - c]\
    \ = -1;\n            } else {\n                p[i - c] = j + 1;\n           \
    \ }\n            if (i + p[i - c] > c + p[c - c]) {\n                c = i;\n\
    \            }\n        }\n        return str + new string(str.Substring(0, n\
    \ - p[n - c] - 1).Reverse().ToArray());", "        int n = str.Length;\n     \
    \   int[] p = new int[n];\n        int c = 0;\n        for (int i = 1; i < n;\
    \ i++) {\n            int j = p[i - c - 1];\n            while (j != -1 && str[i]\
    \ != str[c - j - 1]) {\n                j = p[j];\n            }\n           \
    \ if (j == -1 && str[i] != str[c - j - 1]) {\n                p[i - c] = -1;\n\
    \            } else {\n                p[i - c] = j + 1;\n            }\n    \
    \        if (i + p[i - c] > c + p[c - c]) {\n                c = i;\n        \
    \    }\n        }\n        int l = p[n - c - 1];\n        string suffix = str.Substring(c\
    \ - l, l);\n        string prefix = str.Substring(0, c - l);\n        return str\
    \ + new string(prefix.Reverse().ToArray());", "        var rev = new string(str.Reverse().ToArray());\n\
    \        var s = str + '#' + rev;\n        var z = ZFunction(s);\n        var\
    \ longestPalindrome = z.Max();\n        var prefix = str.Substring(0, str.Length\
    \ - longestPalindrome);\n        return str + new string(prefix.Reverse().ToArray());",
  "        var s = str + '\\0' + new string(str.Reverse().ToArray());\n        var\
    \ z = new int[s.Length];\n        z[0] = 0;\n        int l = 0, r = 0;\n     \
    \   for (int i = 1; i < s.Length; i++) {\n            z[i] = i > r ? 0 : Math.Min(r\
    \ - i + 1, z[i - l]);\n            while (i + z[i] < s.Length && s[z[i]] == s[i\
    \ + z[i]]) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        var prefix = str.Substring(0, str.Length - z[s.Length\
    \ - 1]);\n        return prefix + str;", "        int n = str.Length;\n      \
    \  int[] p = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i]\
    \ = 0;\n        }\n        int c = 0;\n        for (int i = 1; i < n; i++) {\n\
    \            int j = p[i - c - 1];\n            while (j != 0 && str[i] != str[c\
    \ - j]) {\n                j = p[j - 1];\n            }\n            if (str[i]\
    \ == str[c - j]) {\n                j++;\n            }\n            p[i - c]\
    \ = j;\n            if (i + j - 1 > c) {\n                c = i;\n           \
    \ }\n        }\n        int l = n - p[n - c - 1];\n        return str + new string(str.Substring(0,\
    \ l).Reverse().ToArray());", "        int n = str.Length;\n        int[] z = new\
    \ int[n];\n        z[0] = n;\n        int l = 0, r = 0;\n        for (int i =\
    \ 1; i < n; i++) {\n            if (i <= r)\n                z[i] = Math.Min(r\
    \ - i + 1, z[i - l]);\n            while (i + z[i] < n && str[z[i]] == str[i +\
    \ z[i]])\n                z[i]++;\n            if (i + z[i] - 1 > r) {\n     \
    \           l = i;\n                r = i + z[i] - 1;\n            }\n       \
    \ }\n        int p = n - z[n - 1];\n        return str + str.Substring(p).Reverse();",
  "        int n = str.Length;\n        int[] p = new int[n];\n        for (int i\
    \ = 0; i < n; i++) {\n            p[i] = -1;\n        }\n        int c = 0;\n\
    \        int r = 0;\n        for (int i = 1; i < n; i++) {\n            int i_mirror\
    \ = 2 * c - i;\n            if (r > i) {\n                p[i] = Math.Min(r -\
    \ i, p[i_mirror]);\n            }\n            while (i + 1 + p[i] < n && i -\
    \ 1 - p[i] >= 0 && str[i + 1 + p[i]] == str[i - 1 - p[i]]) {\n               \
    \ p[i]++;\n            }\n            if (i + p[i] > r) {\n                c =\
    \ i;\n                r = i + p[i];\n            }\n        }\n        int max_len\
    \ = 0;\n        int center_index = 0;\n        for (int i = 1; i < n; i++) {\n\
    \            if (i + p[i] == n) {\n                if (p[i] > max_len) {\n   \
    \                 max_len = p[i];\n                    center_index = i;\n   \
    \             }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = center_index - max_len - 1; i >= 0; i--) {\n           \
    \ sb.Append(str[i]);\n        }\n        sb.Append(str);\n        return sb.ToString();",
  "        var n = str.Length;\n        var z = new int[n];\n        z[0] = 0;\n \
    \       for (int i = 1, l = 0, r = 0; i < n; i++) {\n            if (i <= r) {\n\
    \                z[i] = Math.Min(r - i + 1, z[i - l]);\n            }\n      \
    \      while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n                z[i]++;\n\
    \            }\n            if (i + z[i] - 1 > r) {\n                l = i;\n\
    \                r = i + z[i] - 1;\n            }\n        }\n        var suffix\
    \ = str.Substring(n - z[n - 1]);\n        var prefix = str.Substring(0, n - z[n\
    \ - 1]);\n        var reverse = new string(prefix.Reverse().ToArray());\n    \
    \    return reverse + str + suffix;", "        int n = str.Length;\n        int[]\
    \ p = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n\
    \        }\n        int c = 0;\n        for (int i = 1; i < n; i++) {\n      \
    \      int j = p[i - c - 1];\n            while (j > 0 && str[i] != str[c - j])\
    \ {\n                j = p[j - 1];\n            }\n            if (str[i] == str[c\
    \ - j]) {\n                j++;\n            }\n            p[i - c] = j;\n  \
    \          if (i + j - 1 > c) {\n                c = i;\n            }\n     \
    \   }\n        int l = n - p[n - c - 1];\n        return str + Reverse(str.Substring(0,\
    \ l));", "        int n = str.Length;\n        int[] p = new int[n];\n       \
    \ p[0] = 0;\n        int k = 0;\n        for (int i = 1; i < n; i++) {\n     \
    \       while (k > 0 && str[k] != str[i]) {\n                k = p[k - 1];\n \
    \           }\n            if (str[k] == str[i]) {\n                k++;\n   \
    \         }\n            p[i] = k;\n        }\n        string prefix = str.Substring(0,\
    \ n - p[n - 1]);\n        return str + new string(prefix.Reverse().ToArray());",
  "        int n = str.Length;\n        int[] z = new int[n];\n        z[0] = n;\n\
    \        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n          \
    \  if (i <= r) {\n                z[i] = Math.Min(r - i + 1, z[i - l]);\n    \
    \        }\n            while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n\
    \                z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n\
    \                l = i;\n                r = i + z[i] - 1;\n            }\n  \
    \      }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n      \
    \      if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        return str + new string(str.Substring(0, n - max).Reverse().ToArray());",
  "        int n = str.Length;\n        int[] p = new int[n];\n        for (int i\
    \ = 0; i < n; i++) {\n            p[i] = 0;\n        }\n        int l = 0;\n \
    \       for (int i = 1; i < n; i++) {\n            while (l > 0 && str[l] != str[i])\
    \ {\n                l = p[l - 1];\n            }\n            if (str[l] == str[i])\
    \ {\n                l++;\n            }\n            p[i] = l;\n        }\n \
    \       StringBuilder sb = new StringBuilder();\n        for (int i = n - 1; i\
    \ >= p[n - 1]; i--) {\n            sb.Append(str[i]);\n        }\n        sb.Append(str);\n\
    \        return sb.ToString();", "        int n = str.Length;\n        int[] p\
    \ = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n\
    \        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0;\
    \ j <= i; j++) {\n                if (str[i - j] == str[i + j]) {\n          \
    \          p[i] = j;\n                } else {\n                    break;\n \
    \               }\n            }\n        }\n        int max = 0;\n        int\
    \ maxi = 0;\n        for (int i = 0; i < n; i++) {\n            if (p[i] > max)\
    \ {\n                max = p[i];\n                maxi = i;\n            }\n \
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = maxi - max + 1; i < n; i++) {\n            sb.Append(str[i]);\n        }\n\
    \        for (int i = 0; i < maxi - max; i++) {\n            sb.Append(str[i]);\n\
    \        }\n        return sb.ToString();", "        var sb = new StringBuilder(str);\n\
    \        var prefix = str.Substring(0, str.Length - LongestPalindromeSuffix(str));\n\
    \        sb.Append(new string(prefix.Reverse().ToArray()));\n        return sb.ToString();",
  "        var s = str + '\\0' + new string(str.Reverse().ToArray());\n        var\
    \ z = new int[s.Length];\n        for (int i = 1, l = 0, r = 0; i < s.Length;\
    \ i++) {\n            if (i <= r)\n                z[i] = Math.Min(r - i + 1,\
    \ z[i - l]);\n            while (i + z[i] < s.Length && s[z[i]] == s[i + z[i]])\n\
    \                z[i]++;\n            if (i + z[i] - 1 > r) {\n              \
    \  l = i;\n                r = i + z[i] - 1;\n            }\n        }\n     \
    \   return str.Substring(0, str.Length - z[s.Length - 1]) + str;", "        var\
    \ rev = new string(str.Reverse().ToArray());\n        var s = str + \"#\" + rev;\n\
    \        var z = ZAlgorithm(s);\n        var max = 0;\n        var maxIndex =\
    \ 0;\n        for (var i = 0; i < z.Length; i++) {\n            if (z[i] > max)\
    \ {\n                max = z[i];\n                maxIndex = i;\n            }\n\
    \        }\n        var prefix = str.Substring(0, str.Length - max);\n       \
    \ var revPrefix = new string(prefix.Reverse().ToArray());\n        return prefix\
    \ + revPrefix;", "        int n = str.Length;\n        int[] p = new int[n];\n\
    \        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n        }\n   \
    \     int c = 0;\n        int r = 0;\n        for (int i = 1; i < n; i++) {\n\
    \            int i_mirror = 2 * c - i;\n            if (r > i) {\n           \
    \     p[i] = Math.Min(r - i, p[i_mirror]);\n            }\n            while (i\
    \ + 1 + p[i] < n && i - 1 - p[i] >= 0 && str[i + 1 + p[i]] == str[i - 1 - p[i]])\
    \ {\n                p[i]++;\n            }\n            if (i + p[i] > r) {\n\
    \                c = i;\n                r = i + p[i];\n            }\n      \
    \  }\n        int max_len = 0;\n        int center_index = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (i + p[i] == n) {\n                if (p[i]\
    \ > max_len) {\n                    max_len = p[i];\n                    center_index\
    \ = i;\n                }\n            }\n        }\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = n - max_len - 1; i >= 0; i--) {\n\
    \            sb.Append(str[i]);\n        }\n        sb.Append(str);\n        return\
    \ sb.ToString();", "        var sb = new StringBuilder(str);\n        var rev\
    \ = new StringBuilder(str);\n        rev.Reverse();\n        var s = str + rev.ToString();\n\
    \        var z = new int[s.Length];\n        z[0] = s.Length;\n        var l =\
    \ 0;\n        var r = 0;\n        for (int i = 1; i < s.Length; i++) {\n     \
    \       if (i > r) {\n                l = r = i;\n                while (r < s.Length\
    \ && s[r - l] == s[r]) {\n                    r++;\n                }\n      \
    \          z[i] = r - l;\n                r--;\n            } else {\n       \
    \         int k = i - l;\n                if (z[k] < r - i + 1) {\n          \
    \          z[i] = z[k];\n                } else {\n                    l = i;\n\
    \                    while (r < s.Length && s[r - l] == s[r]) {\n            \
    \            r++;\n                    }\n                    z[i] = r - l;\n\
    \                    r--;\n                }\n            }\n        }\n     \
    \   var max = 0;\n        var maxi = 0;\n        for (int i = str.Length + 1;\
    \ i < s.Length; i++) {\n            if (z[i] == i) {\n                max = z[i];\n\
    \                maxi = i;\n                break;\n            }\n        }\n\
    \        sb.Append(str.Substring(0, str.Length - max));\n        sb.Reverse();\n\
    \        return sb.ToString();", "        int n = str.Length;\n        int[] z\
    \ = new int[n];\n        z[0] = 0;\n        int l = 0, r = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (i > r) {\n                l = r = i;\n\
    \                while (r < n && str[r - l] == str[r]) {\n                   \
    \ r++;\n                }\n                z[i] = r - l;\n                r--;\n\
    \            } else {\n                int k = i - l;\n                if (z[k]\
    \ < r - i + 1) {\n                    z[i] = z[k];\n                } else {\n\
    \                    l = i;\n                    while (r < n && str[r - l] ==\
    \ str[r]) {\n                        r++;\n                    }\n           \
    \         z[i] = r - l;\n                    r--;\n                }\n       \
    \     }\n        }\n        int max = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (z[i] == i) {\n                max = i;\n            }\n \
    \       }\n        return str + new string(str.Substring(0, n - max).Reverse().ToArray());",
  "        int n = str.Length;\n        int[] p = new int[n];\n        int c = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            if (i > c + p[c]) {\n    \
    \            int j = 0;\n                while (i + j < n && str[i + j] == str[j])\
    \ j++;\n                p[i] = j;\n                c = i;\n            } else\
    \ {\n                int j = c + p[c] - i;\n                if (p[i - c] < j)\
    \ {\n                    p[i] = p[i - c];\n                } else {\n        \
    \            int k = j;\n                    while (i + k < n && str[i + k] ==\
    \ str[k]) k++;\n                    p[i] = k;\n                    c = i;\n  \
    \              }\n            }\n        }\n        int max = 0;\n        for\
    \ (int i = 0; i < n; i++) {\n            if (p[i] > max) {\n                max\
    \ = p[i];\n            }\n        }\n        return str + new string(str.Substring(0,\
    \ n - max).Reverse().ToArray());", "        var rev = new string(str.Reverse().ToArray());\n\
    \        var s = str + \"#\" + rev;\n        var z = ZAlgorithm(s);\n        var\
    \ longestPalindrome = z.Max();\n        var prefix = str.Substring(0, str.Length\
    \ - longestPalindrome);\n        var revPrefix = new string(prefix.Reverse().ToArray());\n\
    \        return str + revPrefix;", "        int n = str.Length;\n        int[]\
    \ p = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n\
    \        }\n        for (int i = 1; i < n; i++) {\n            int j = p[i - 1];\n\
    \            while (j > 0 && str[i] != str[j]) {\n                j = p[j - 1];\n\
    \            }\n            if (str[i] == str[j]) {\n                j++;\n  \
    \          }\n            p[i] = j;\n        }\n        int l = p[n - 1];\n  \
    \      string prefix = str.Substring(0, n - l);\n        string suffix = str.Substring(n\
    \ - l);\n        return suffix + Reverse(prefix);", "        int n = str.Length;\n\
    \        int[] p = new int[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      p[i] = 0;\n        }\n        int c = 0;\n        int r = 0;\n        for\
    \ (int i = 1; i < n; i++) {\n            if (i > r) {\n                c = i;\n\
    \                r = i;\n            }\n            int mirror = 2 * c - i;\n\
    \            if (mirror >= 0 && mirror < n && p[mirror] < r - i) {\n         \
    \       p[i] = p[mirror];\n            } else {\n                int j = r + 1;\n\
    \                while (j < n && 2 * i - j >= 0 && str[j] == str[2 * i - j]) {\n\
    \                    j++;\n                }\n                p[i] = j - i;\n\
    \                c = i;\n                r = j - 1;\n            }\n        }\n\
    \        int max = 0;\n        int maxi = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            if (p[i] > max) {\n                max = p[i];\n            \
    \    maxi = i;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = maxi + max; i < n; i++) {\n            sb.Append(str[i]);\n\
    \        }\n        for (int i = 0; i < maxi - max; i++) {\n            sb.Append(str[i]);\n\
    \        }\n        return sb.ToString();", "        int n = str.Length;\n   \
    \     int[] p = new int[n];\n        for (int i = 0; i < n; i++) {\n         \
    \   p[i] = 0;\n        }\n        for (int i = 1; i < n; i++) {\n            int\
    \ j = p[i - 1];\n            while (j > 0 && str[i] != str[j]) {\n           \
    \     j = p[j - 1];\n            }\n            if (str[i] == str[j]) {\n    \
    \            j++;\n            }\n            p[i] = j;\n        }\n        int\
    \ suffixLen = p[n - 1];\n        string prefix = str.Substring(0, n - suffixLen);\n\
    \        string reversedPrefix = new string(prefix.Reverse().ToArray());\n   \
    \     return reversedPrefix + str;", "        if (str.Length == 0) {\n       \
    \     return str;\n        }\n        int[] z = ZAlgorithm(str);\n        int\
    \ n = str.Length;\n        int i = 0;\n        for (i = n - 1; i >= 0; i--) {\n\
    \            if (z[i] == n - i) {\n                break;\n            }\n   \
    \     }\n        string prefix = str.Substring(0, i);\n        string suffix =\
    \ str.Substring(i);\n        return suffix + Reverse(prefix);", "        int n\
    \ = str.Length;\n        int[] p = new int[n];\n        for (int i = 0; i < n;\
    \ i++) {\n            p[i] = -1;\n        }\n        int c = 0;\n        int r\
    \ = 0;\n        for (int i = 1; i < n; i++) {\n            int iMirror = 2 * c\
    \ - i;\n            if (r > i) {\n                p[i] = Math.Min(r - i, p[iMirror]);\n\
    \            }\n            while (i + 1 + p[i] < n && i - 1 - p[i] >= 0 && str[i\
    \ + 1 + p[i]] == str[i - 1 - p[i]]) {\n                p[i]++;\n            }\n\
    \            if (i + p[i] > r) {\n                c = i;\n                r =\
    \ i + p[i];\n            }\n        }\n        int maxLen = 0;\n        int centerIndex\
    \ = 0;\n        for (int i = 1; i < n; i++) {\n            if (i + p[i] == n)\
    \ {\n                if (p[i] > maxLen) {\n                    maxLen = p[i];\n\
    \                    centerIndex = i;\n                }\n            }\n    \
    \    }\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ centerIndex - maxLen - 1; i >= 0; i--) {\n            sb.Append(str[i]);\n \
    \       }\n        sb.Append(str);\n        return sb.ToString();", "        var\
    \ n = str.Length;\n        var z = new int[n];\n        z[0] = 0;\n        for\
    \ (int i = 1, l = 0, r = 0; i < n; i++) {\n            if (i <= r)\n         \
    \       z[i] = Math.Min(r - i + 1, z[i - l]);\n            while (i + z[i] < n\
    \ && str[z[i]] == str[i + z[i]])\n                z[i]++;\n            if (i +\
    \ z[i] - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n\
    \            }\n        }\n        var sb = new StringBuilder(str);\n        for\
    \ (int i = n - 1; i >= 0; i--) {\n            if (z[i] == n - i) {\n         \
    \       sb.Append(str.Substring(0, i));\n                break;\n            }\n\
    \        }\n        return sb.ToString();", "        var s = str + '\\0' + new\
    \ string(str.Reverse().ToArray());\n        var z = new int[s.Length];\n     \
    \   z[0] = 0;\n        int l = 0, r = 0;\n        for (int i = 1; i < s.Length;\
    \ i++) {\n            if (i > r) {\n                l = r = i;\n             \
    \   while (r < s.Length && s[r - l] == s[r]) r++;\n                z[i] = r -\
    \ l;\n                r--;\n            } else {\n                int k = i -\
    \ l;\n                if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n\
    \                } else {\n                    l = i;\n                    while\
    \ (r < s.Length && s[r - l] == s[r]) r++;\n                    z[i] = r - l;\n\
    \                    r--;\n                }\n            }\n        }\n     \
    \   var len = str.Length;\n        var palindrome = str.Substring(0, len - z[s.Length\
    \ - 1]) + str;\n        return palindrome;", "        var sb = new StringBuilder(str);\n\
    \        var rev = new StringBuilder(str);\n        rev.Reverse();\n        var\
    \ s = sb.ToString() + rev.ToString();\n        var z = ZAlgorithm(s);\n      \
    \  var n = str.Length;\n        var max = 0;\n        for (int i = n; i < s.Length;\
    \ i++) {\n            if (z[i] == n) {\n                max = n;\n           \
    \ }\n        }\n        sb.Append(rev.ToString().Substring(0, n - max));\n   \
    \     return sb.ToString();", "        var n = str.Length;\n        var z = new\
    \ int[n];\n        var l = 0;\n        var r = 0;\n        for (var i = 1; i <\
    \ n; i++) {\n            if (i <= r) {\n                z[i] = Math.Min(r - i\
    \ + 1, z[i - l]);\n            }\n            while (i + z[i] < n && str[z[i]]\
    \ == str[i + z[i]]) {\n                z[i]++;\n            }\n            if\
    \ (i + z[i] - 1 > r) {\n                l = i;\n                r = i + z[i] -\
    \ 1;\n            }\n        }\n        var max = 0;\n        var maxi = 0;\n\
    \        for (var i = 1; i < n; i++) {\n            if (z[i] > max) {\n      \
    \          max = z[i];\n                maxi = i;\n            }\n        }\n\
    \        var sb = new StringBuilder();\n        for (var i = maxi - max + 1; i\
    \ < maxi; i++) {\n            sb.Append(str[i]);\n        }\n        sb.Append(str);\n\
    \        return sb.ToString();", "        int n = str.Length;\n        int[] p\
    \ = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n\
    \        }\n        int c = 0;\n        for (int i = 1; i < n; i++) {\n      \
    \      int j = c;\n            while (j > 0 && str[i] != str[j]) {\n         \
    \       j = p[j - 1];\n            }\n            if (str[i] == str[j]) {\n  \
    \              j++;\n            }\n            p[i] = j;\n            if (j >\
    \ 0) {\n                c = i;\n            }\n        }\n        int l = p[n\
    \ - 1];\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ n - l - 1; i >= 0; i--) {\n            sb.Append(str[i]);\n        }\n     \
    \   sb.Append(str);\n        return sb.ToString();", "        var sb = new StringBuilder(str);\n\
    \        var sb2 = new StringBuilder();\n        var palindrome = FindPalindrome(str);\n\
    \        sb2.Append(str.Substring(0, str.Length - palindrome.Length));\n     \
    \   sb2.Append(new string(sb2.ToString().Reverse().ToArray()));\n        sb.Append(sb2.ToString());\n\
    \        return sb.ToString();", "        var strLen = str.Length;\n        var\
    \ suffix = new int[strLen];\n        suffix[0] = 0;\n        for (int i = 1; i\
    \ < strLen; i++) {\n            var j = suffix[i - 1];\n            while (j >\
    \ 0 && str[i] != str[j]) {\n                j = suffix[j - 1];\n            }\n\
    \            if (str[i] == str[j]) {\n                j++;\n            }\n  \
    \          suffix[i] = j;\n        }\n        var prefixLen = strLen - suffix[strLen\
    \ - 1];\n        var prefix = str.Substring(0, prefixLen);\n        var reversePrefix\
    \ = new string(prefix.Reverse().ToArray());\n        return reversePrefix + str;",
  "        var sb = new StringBuilder(str);\n        var rev = new StringBuilder(str);\n\
    \        rev.Reverse();\n        var s = sb.ToString();\n        var r = rev.ToString();\n\
    \        var n = s.Length;\n        var z = new int[n];\n        for (int i =\
    \ 1, l = 0, r = 0; i < n; ++i) {\n            if (i <= r)\n                z[i]\
    \ = Math.Min(r - i + 1, z[i - l]);\n            while (i + z[i] < n && s[z[i]]\
    \ == s[i + z[i]])\n                ++z[i];\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        var p = z[0];\n        for (int i = 1; i < n; ++i)\n     \
    \       if (z[i] == n - i && i + z[i] == n) {\n                p = i;\n      \
    \          break;\n            }\n        sb.Append(r.Substring(p));\n       \
    \ return sb.ToString();", "        var n = str.Length;\n        var z = new int[n];\n\
    \        z[0] = 0;\n        var l = 0;\n        var r = 0;\n        for (var i\
    \ = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.Min(z[i\
    \ - l], r - i + 1);\n            }\n            while (i + z[i] < n && str[z[i]]\
    \ == str[i + z[i]]) {\n                z[i]++;\n            }\n            if\
    \ (i + z[i] - 1 > r) {\n                l = i;\n                r = i + z[i] -\
    \ 1;\n            }\n        }\n        var max = 0;\n        var maxi = 0;\n\
    \        for (var i = 1; i < n; i++) {\n            if (z[i] == i) {\n       \
    \         max = i;\n                maxi = i;\n            }\n        }\n    \
    \    var sb = new StringBuilder();\n        for (var i = n - 1; i >= maxi; i--)\
    \ {\n            sb.Append(str[i]);\n        }\n        sb.Append(str);\n    \
    \    return sb.ToString();", "        var palindrome = FindLongestPalindrome(str);\n\
    \        var prefix = str.Substring(0, str.Length - palindrome.Length);\n    \
    \    var reverse = new string(prefix.Reverse().ToArray());\n        return prefix\
    \ + palindrome + reverse;", "        int n = str.Length;\n        int[] z = new\
    \ int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n\
    \            if (i <= r)\n                z[i] = Math.Min(r - i + 1, z[i - l]);\n\
    \            while (i + z[i] < n && str[z[i]] == str[i + z[i]])\n            \
    \    z[i]++;\n            if (i + z[i] - 1 > r) {\n                l = i;\n  \
    \              r = i + z[i] - 1;\n            }\n        }\n        int p = n\
    \ - z[n - 1];\n        return str + str.Substring(p).Reverse();", "        int\
    \ n = str.Length;\n        int[] p = new int[n];\n        for (int i = 0; i <\
    \ n; i++) {\n            p[i] = 0;\n        }\n        int c = 0;\n        for\
    \ (int i = 1; i < n; i++) {\n            int j = p[i - c - 1];\n            while\
    \ (j > 0 && str[i] != str[c - j]) {\n                j = p[j - 1];\n         \
    \   }\n            if (str[i] == str[c - j]) {\n                j++;\n       \
    \     }\n            p[i - c] = j;\n            if (i + j - 1 > c) {\n       \
    \         c = i;\n            }\n        }\n        int l = n - p[n - c - 1];\n\
    \        return str + Reverse(str.Substring(0, l));", "        int n = str.Length;\n\
    \        int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.Min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && str[z[i]]\
    \ == str[i + z[i]]) {\n                z[i]++;\n            }\n            if\
    \ (i + z[i] - 1 > r) {\n                l = i;\n                r = i + z[i] -\
    \ 1;\n            }\n        }\n        int max = 0;\n        for (int i = 1;\
    \ i < n; i++) {\n            if (z[i] == n - i && z[i] > max) {\n            \
    \    max = z[i];\n            }\n        }\n        return str + new string(str.Substring(0,\
    \ n - max).Reverse().ToArray());", "        int n = str.Length;\n        int[]\
    \ z = new int[n];\n        z[0] = n;\n        int l = 0, r = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (i > r) {\n                l = r = i;\n\
    \                while (r < n && str[r - l] == str[r]) r++;\n                z[i]\
    \ = r - l;\n                r--;\n            } else {\n                int k\
    \ = i - l;\n                if (z[k] < r - i + 1) {\n                    z[i]\
    \ = z[k];\n                } else {\n                    l = i;\n            \
    \        while (r < n && str[r - l] == str[r]) r++;\n                    z[i]\
    \ = r - l;\n                    r--;\n                }\n            }\n     \
    \   }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n         \
    \   if (z[i] == i) {\n                max = i;\n            }\n        }\n   \
    \     string prefix = str.Substring(0, n - max);\n        return str + new string(prefix.Reverse().ToArray());",
  "        var sb = new StringBuilder(str);\n        var rev = new StringBuilder(str);\n\
    \        rev.Reverse();\n        var s = str + rev.ToString();\n        var z\
    \ = new int[s.Length];\n        z[0] = s.Length;\n        int l = 0, r = 0;\n\
    \        for (int i = 1; i < s.Length; i++) {\n            if (i > r) {\n    \
    \            l = r = i;\n                while (r < s.Length && s[r - l] == s[r])\
    \ r++;\n                z[i] = r - l;\n                r--;\n            } else\
    \ {\n                int k = i - l;\n                if (z[k] < r - i + 1) {\n\
    \                    z[i] = z[k];\n                } else {\n                \
    \    l = i;\n                    while (r < s.Length && s[r - l] == s[r]) r++;\n\
    \                    z[i] = r - l;\n                    r--;\n               \
    \ }\n            }\n        }\n        var max = 0;\n        for (int i = str.Length\
    \ + 1; i < s.Length; i++) {\n            if (z[i] == i - str.Length) {\n     \
    \           max = i - str.Length;\n            }\n        }\n        sb.Append(str.Substring(max));\n\
    \        return sb.ToString();", "        int n = str.Length;\n        int[] p\
    \ = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n\
    \        }\n        for (int i = 1; i < n; i++) {\n            int j = p[i - 1];\n\
    \            while (j > 0 && str[i] != str[j]) {\n                j = p[j - 1];\n\
    \            }\n            if (str[i] == str[j]) {\n                j++;\n  \
    \          }\n            p[i] = j;\n        }\n        int suffixLen = p[n -\
    \ 1];\n        string prefix = str.Substring(0, n - suffixLen);\n        string\
    \ suffix = str.Substring(n - suffixLen);\n        string prefixReverse = new string(prefix.Reverse().ToArray());\n\
    \        return prefixReverse + str + suffix;", "        int n = str.Length;\n\
    \        int[] p = new int[n];\n        for (int i = 1; i < n; i++) {\n      \
    \      int j = p[i - 1];\n            while (j > 0 && str[i] != str[j]) {\n  \
    \              j = p[j - 1];\n            }\n            if (str[i] == str[j])\
    \ {\n                j++;\n            }\n            p[i] = j;\n        }\n \
    \       int len = n - p[n - 1];\n        return str + new string(str.Substring(0,\
    \ len).Reverse().ToArray());", "        int n = str.Length;\n        int[] p =\
    \ new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n\
    \        }\n        int c = 0;\n        for (int i = 1; i < n; i++) {\n      \
    \      int j = p[i - c - 1];\n            while (j > 0 && str[i] != str[c - j])\
    \ {\n                j = p[j - 1];\n            }\n            if (str[i] == str[c\
    \ - j]) {\n                j++;\n            }\n            p[i - c] = j;\n  \
    \          if (i + j - 1 > c) {\n                c = i;\n            }\n     \
    \   }\n        int l = n - p[n - c - 1];\n        return str + new string(str.Take(l).Reverse().ToArray());",
  "        int n = str.Length;\n        int[] p = new int[n];\n        for (int i\
    \ = 0; i < n; i++) {\n            p[i] = 0;\n        }\n        int c = 0;\n \
    \       for (int i = 1; i < n; i++) {\n            int j = p[i - c - 1];\n   \
    \         while (j > 0 && str[i] != str[c - j]) {\n                j = p[j - 1];\n\
    \            }\n            if (str[i] == str[c - j]) {\n                j++;\n\
    \            }\n            p[i - c] = j;\n            if (i + j - 1 > c) {\n\
    \                c = i;\n            }\n        }\n        int l = n - p[n - c\
    \ - 1];\n        string s = str.Substring(0, l);\n        return str + new string(s.Reverse().ToArray());",
  "        int n = str.Length;\n        int[] z = new int[n];\n        z[0] = 0;\n\
    \        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n          \
    \  if (i <= r) {\n                z[i] = Math.Min(r - i + 1, z[i - l]);\n    \
    \        }\n            while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n\
    \                z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n\
    \                l = i;\n                r = i + z[i] - 1;\n            }\n  \
    \      }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n      \
    \      if (z[i] == n - i && i > max) {\n                max = i;\n           \
    \ }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < n - max; i++) {\n            sb.Append(str[i]);\n        }\n    \
    \    for (int i = n - 1; i >= max; i--) {\n            sb.Append(str[i]);\n  \
    \      }\n        return sb.ToString();", "        if (str.Length == 0) {\n  \
    \          return str;\n        }\n        int[] z = new int[str.Length];\n  \
    \      z[0] = 0;\n        int l = 0, r = 0;\n        for (int i = 1; i < str.Length;\
    \ i++) {\n            if (i <= r) {\n                z[i] = Math.Min(r - i + 1,\
    \ z[i - l]);\n            }\n            while (i + z[i] < str.Length && str[z[i]]\
    \ == str[i + z[i]]) {\n                z[i]++;\n            }\n            if\
    \ (i + z[i] - 1 > r) {\n                l = i;\n                r = i + z[i] -\
    \ 1;\n            }\n        }\n        int max = 0;\n        for (int i = 1;\
    \ i < str.Length; i++) {\n            if (z[i] == i) {\n                max =\
    \ i;\n            }\n        }\n        return str + new string(str.Take(str.Length\
    \ - max).Reverse().ToArray());", "        var sb = new StringBuilder(str);\n \
    \       var rev = new StringBuilder(str);\n        rev.Reverse();\n        var\
    \ len = str.Length;\n        var z = new int[len * 2 + 1];\n        for (int i\
    \ = 0; i < len; i++) {\n            z[i + len + 1] = rev[i];\n        }\n    \
    \    z[len] = '#';\n        for (int i = 0; i < len; i++) {\n            z[i]\
    \ = str[i];\n        }\n        int l = 0, r = 0;\n        for (int i = 1; i <\
    \ len * 2 + 1; i++) {\n            if (i > r) {\n                l = r = i;\n\
    \                while (r < len * 2 + 1 && z[r - l] == z[r]) {\n             \
    \       r++;\n                }\n                z[i] = r - l;\n             \
    \   r--;\n            } else {\n                int k = i - l;\n             \
    \   if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n              \
    \  } else {\n                    l = i;\n                    while (r < len *\
    \ 2 + 1 && z[r - l] == z[r]) {\n                        r++;\n               \
    \     }\n                    z[i] = r - l;\n                    r--;\n       \
    \         }\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = len + 1; i < len * 2 + 1; i++) {\n            if (z[i] > max) {\n      \
    \          max = z[i];\n            }\n        }\n        sb.Append(rev.ToString().Substring(0,\
    \ len - max));\n        return sb.ToString();", "        // Find the longest palindromic\
    \ suffix.\n        int i = str.Length - 1;\n        while (i >= 0) {\n       \
    \     if (IsPalindrome(str, i)) {\n                break;\n            }\n   \
    \         i--;\n        }\n        // Append reverse of the prefix to the end\
    \ of the string.\n        return str + Reverse(str.Substring(0, str.Length - i\
    \ - 1));", "        var sb = new StringBuilder(str);\n        var rev = new StringBuilder(str);\n\
    \        rev.Reverse();\n        var s = sb.ToString();\n        var r = rev.ToString();\n\
    \        var n = s.Length;\n        var z = new int[n];\n        for (int i =\
    \ 1, l = 0, r = 0; i < n; ++i) {\n            if (i <= r)\n                z[i]\
    \ = Math.Min(r - i + 1, z[i - l]);\n            while (i + z[i] < n && s[z[i]]\
    \ == s[i + z[i]])\n                ++z[i];\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        var max = 0;\n        for (int i = 1; i < n; ++i)\n      \
    \      if (z[i] == n - i && max < z[i])\n                max = z[i];\n       \
    \ sb.Append(r.Substring(max));\n        return sb.ToString();", "        int n\
    \ = str.Length;\n        int[] p = new int[n];\n        for (int i = 0; i < n;\
    \ i++) {\n            p[i] = 0;\n        }\n        int c = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            int j = c;\n            while (j > 0 && str[i]\
    \ != str[j]) {\n                j = p[j - 1];\n            }\n            if (str[i]\
    \ == str[j]) {\n                j++;\n            }\n            p[i] = j;\n \
    \           if (j > 0) {\n                c = i;\n            }\n        }\n \
    \       int l = n - p[n - 1];\n        return str + new string(str.Substring(0,\
    \ l).Reverse().ToArray());", "        int n = str.Length;\n        int[] z = new\
    \ int[n];\n        z[0] = n;\n        int l = 0, r = 0;\n        for (int i =\
    \ 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.Min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && str[z[i]]\
    \ == str[i + z[i]]) {\n                z[i]++;\n            }\n            if\
    \ (i + z[i] - 1 > r) {\n                l = i;\n                r = i + z[i] -\
    \ 1;\n            }\n        }\n        int longest = 0;\n        for (int i =\
    \ 1; i < n; i++) {\n            if (z[i] == i) {\n                longest = i;\n\
    \            }\n        }\n        return str + new string(str.Substring(0, n\
    \ - longest).Reverse().ToArray());", "        int n = str.Length;\n        int[]\
    \ z = new int[n];\n        z[0] = 0;\n        for (int i = 1, l = 0, r = 0; i\
    \ < n; i++) {\n            if (i <= r) {\n                z[i] = Math.Min(r -\
    \ i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && str[z[i]]\
    \ == str[i + z[i]]) {\n                z[i]++;\n            }\n            if\
    \ (i + z[i] - 1 > r) {\n                l = i;\n                r = i + z[i] -\
    \ 1;\n            }\n        }\n        int max = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            if (z[i] == n - i) {\n                max = Math.Max(max,\
    \ z[i]);\n            }\n        }\n        return str + new string(str.Substring(0,\
    \ n - max).Reverse().ToArray());", "        var len = str.Length;\n        var\
    \ suffix = new int[len];\n        for (int i = 0; i < len; i++) {\n          \
    \  suffix[i] = 0;\n        }\n        for (int i = 1; i < len; i++) {\n      \
    \      var j = suffix[i - 1];\n            while (j > 0 && str[i] != str[j]) {\n\
    \                j = suffix[j - 1];\n            }\n            if (str[i] ==\
    \ str[j]) {\n                j++;\n            }\n            suffix[i] = j;\n\
    \        }\n        var prefix = str.Substring(0, len - suffix[len - 1]);\n  \
    \      var revPrefix = new string(prefix.Reverse().ToArray());\n        return\
    \ revPrefix + str;", "        int n = str.Length;\n        int[] p = new int[n];\n\
    \        for (int i = 1; i < n; i++) {\n            int j = p[i - 1];\n      \
    \      while (j > 0 && str[i] != str[j]) {\n                j = p[j - 1];\n  \
    \          }\n            if (str[i] == str[j]) {\n                j++;\n    \
    \        }\n            p[i] = j;\n        }\n        int suffixLen = n - p[n\
    \ - 1];\n        return str + new string(str.Substring(0, suffixLen).Reverse().ToArray());",
  "        int n = str.Length;\n        int[] p = new int[n];\n        for (int i\
    \ = 0; i < n; i++) {\n            p[i] = 0;\n        }\n        for (int i = 1;\
    \ i < n; i++) {\n            int j = p[i - 1];\n            while (j > 0 && str[i]\
    \ != str[j]) {\n                j = p[j - 1];\n            }\n            if (str[i]\
    \ == str[j]) {\n                j++;\n            }\n            p[i] = j;\n \
    \       }\n        int suffixLen = p[n - 1];\n        string prefix = str.Substring(0,\
    \ n - suffixLen);\n        string reversedPrefix = new string(prefix.Reverse().ToArray());\n\
    \        return str + reversedPrefix;", "        int n = str.Length;\n       \
    \ int[] p = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i]\
    \ = 0;\n        }\n        for (int i = 1; i < n; i++) {\n            int j =\
    \ p[i - 1];\n            while (j > 0 && str[i] != str[j]) {\n               \
    \ j = p[j - 1];\n            }\n            if (str[i] == str[j]) {\n        \
    \        j++;\n            }\n            p[i] = j;\n        }\n        int suffixLen\
    \ = p[n - 1];\n        string prefix = str.Substring(0, n - suffixLen);\n    \
    \    string reversePrefix = new string(prefix.Reverse().ToArray());\n        return\
    \ str + reversePrefix;", "        int n = str.Length;\n        int[] p = new int[n];\n\
    \        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n        }\n   \
    \     for (int i = 1; i < n; i++) {\n            int j = p[i - 1];\n         \
    \   while (j > 0 && str[i] != str[j]) {\n                j = p[j - 1];\n     \
    \       }\n            if (str[i] == str[j]) {\n                j++;\n       \
    \     }\n            p[i] = j;\n        }\n        int prefix_len = n - p[n -\
    \ 1];\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0;\
    \ i < prefix_len; i++) {\n            sb.Append(str[i]);\n        }\n        sb.Append(str);\n\
    \        return sb.ToString();", "        int n = str.Length;\n        int[] p\
    \ = new int[n];\n        for (int i = 1; i < n; i++) {\n            int j = p[i\
    \ - 1];\n            while (j > 0 && str[i] != str[j])\n                j = p[j\
    \ - 1];\n            if (str[i] == str[j])\n                j++;\n           \
    \ p[i] = j;\n        }\n        int prefixLen = n - p[n - 1];\n        return\
    \ str + str.Substring(prefixLen).Reverse().ToString();", "        var sb = new\
    \ StringBuilder(str);\n        var rev = new StringBuilder(str);\n        rev.Reverse();\n\
    \        var s = sb.ToString();\n        var r = rev.ToString();\n        var\
    \ n = s.Length;\n        var z = new int[n];\n        z[0] = n;\n        int l\
    \ = 0, rr = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= rr)\
    \ {\n                z[i] = Math.Min(rr - i + 1, z[i - l]);\n            }\n \
    \           while (i + z[i] < n && s[z[i]] == s[i + z[i]]) {\n               \
    \ z[i]++;\n            }\n            if (i + z[i] - 1 > rr) {\n             \
    \   l = i;\n                rr = i + z[i] - 1;\n            }\n        }\n   \
    \     var max = 0;\n        for (int i = 1; i < n; i++) {\n            if (z[i]\
    \ == i) {\n                max = i;\n            }\n        }\n        sb.Append(r.Substring(max));\n\
    \        return sb.ToString();", "        var sb = new StringBuilder(str);\n \
    \       var rev = new StringBuilder(str);\n        rev.Reverse();\n        var\
    \ s = sb.ToString();\n        var r = rev.ToString();\n        var n = s.Length;\n\
    \        var z = new int[n];\n        z[0] = n;\n        var l = 0;\n        var\
    \ rr = 0;\n        for (var i = 1; i < n; i++) {\n            if (i > rr) {\n\
    \                l = rr = i;\n                while (rr < n && s[rr] == s[rr -\
    \ l]) {\n                    rr++;\n                }\n                z[i] =\
    \ rr - l;\n                rr--;\n            } else {\n                var k\
    \ = i - l;\n                if (z[k] < rr - i + 1) {\n                    z[i]\
    \ = z[k];\n                } else {\n                    l = i;\n            \
    \        while (rr < n && s[rr] == s[rr - l]) {\n                        rr++;\n\
    \                    }\n                    z[i] = rr - l;\n                 \
    \   rr--;\n                }\n            }\n        }\n        var max = 0;\n\
    \        var maxi = 0;\n        for (var i = 0; i < n; i++) {\n            if\
    \ (z[i] > max) {\n                max = z[i];\n                maxi = i;\n   \
    \         }\n        }\n        sb.Append(r.Substring(0, n - maxi - max));\n \
    \       return sb.ToString();", "        var sb = new StringBuilder(str);\n  \
    \      var suffix = FindLongestPalindromeSuffix(str);\n        var prefix = str.Substring(0,\
    \ str.Length - suffix.Length);\n        sb.Append(new string(prefix.Reverse().ToArray()));\n\
    \        return sb.ToString();", "        int n = str.Length;\n        int[] p\
    \ = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n\
    \        }\n        int c = 0;\n        for (int i = 1; i < n; i++) {\n      \
    \      int j = c;\n            while (j > 0 && str[i] != str[j]) {\n         \
    \       j = p[j - 1];\n            }\n            if (str[i] == str[j]) {\n  \
    \              j++;\n            }\n            p[i] = j;\n            if (j >\
    \ 0) {\n                c = i;\n            }\n        }\n        string prefix\
    \ = str.Substring(0, c - p[c] + 1);\n        string suffix = str.Substring(c -\
    \ p[c] + 1);\n        return str + new string(suffix.Reverse().ToArray()) + prefix;",
  "        int n = str.Length;\n        int[] p = new int[n];\n        for (int i\
    \ = 1; i < n; i++) {\n            int j = p[i - 1];\n            while (j > 0\
    \ && str[i] != str[j]) {\n                j = p[j - 1];\n            }\n     \
    \       if (str[i] == str[j]) {\n                j++;\n            }\n       \
    \     p[i] = j;\n        }\n        int palLen = p[n - 1];\n        string prefix\
    \ = str.Substring(0, n - palLen);\n        return str + new string(prefix.Reverse().ToArray());",
  "        var n = str.Length;\n        var z = new int[n];\n        z[0] = 0;\n \
    \       for (int i = 1, l = 0, r = 0; i < n; i++) {\n            if (i <= r) {\n\
    \                z[i] = Math.Min(r - i + 1, z[i - l]);\n            }\n      \
    \      while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n                z[i]++;\n\
    \            }\n            if (i + z[i] - 1 > r) {\n                l = i;\n\
    \                r = i + z[i] - 1;\n            }\n        }\n        var longestPalindrome\
    \ = z.Max();\n        var prefix = str.Substring(0, n - longestPalindrome);\n\
    \        var reversedPrefix = new string(prefix.Reverse().ToArray());\n      \
    \  return reversedPrefix + str;", "        int n = str.Length;\n        int[]\
    \ p = new int[n];\n        p[0] = 0;\n        int k = 0;\n        for (int i =\
    \ 1; i < n; i++) {\n            while (k > 0 && str[k] != str[i])\n          \
    \      k = p[k - 1];\n            if (str[k] == str[i])\n                k++;\n\
    \            p[i] = k;\n        }\n        int l = n - p[n - 1];\n        return\
    \ str + Reverse(str.Substring(0, l));", "        int n = str.Length;\n       \
    \ int[] p = new int[n];\n        int i = 0, j = 1;\n        while (j < n) {\n\
    \            if (str[i] == str[j]) {\n                p[j] = i + 1;\n        \
    \        i++;\n                j++;\n            } else {\n                if\
    \ (i == 0) {\n                    p[j] = 0;\n                    j++;\n      \
    \          } else {\n                    i = p[i - 1];\n                }\n  \
    \          }\n        }\n        int k = n - p[n - 1];\n        return str + new\
    \ string(str.Substring(0, k).Reverse().ToArray());", "        var n = str.Length;\n\
    \        var z = new int[n];\n        z[0] = 0;\n        for (int i = 1, l = 0,\
    \ r = 0; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.Min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && str[z[i]]\
    \ == str[i + z[i]]) {\n                z[i]++;\n            }\n            if\
    \ (i + z[i] - 1 > r) {\n                l = i;\n                r = i + z[i] -\
    \ 1;\n            }\n        }\n        var lp = z[n - 1];\n        var sb = new\
    \ StringBuilder(str);\n        for (int i = lp; i < n; i++) {\n            sb.Append(str[i]);\n\
    \        }\n        return sb.ToString();", "        int n = str.Length;\n   \
    \     int[] z = new int[n];\n        z[0] = n;\n        int l = 0, r = 0;\n  \
    \      for (int i = 1; i < n; i++) {\n            if (i > r) {\n             \
    \   l = r = i;\n                while (r < n && str[r - l] == str[r]) r++;\n \
    \               z[i] = r - l;\n                r--;\n            } else {\n  \
    \              int k = i - l;\n                if (z[k] < r - i + 1) {\n     \
    \               z[i] = z[k];\n                } else {\n                    l\
    \ = i;\n                    while (r < n && str[r - l] == str[r]) r++;\n     \
    \               z[i] = r - l;\n                    r--;\n                }\n \
    \           }\n        }\n        int max = 0;\n        for (int i = 1; i < n;\
    \ i++) {\n            if (z[i] == i) {\n                max = i;\n           \
    \ }\n        }\n        return str + new string(str.Take(n - max).Reverse().ToArray());",
  "        var sb = new StringBuilder(str);\n        var prefix = str.Substring(0,\
    \ str.Length - LongestPalindromeSuffix(str));\n        sb.Append(new string(prefix.Reverse().ToArray()));\n\
    \        return sb.ToString();", "        int n = str.Length;\n        int[] p\
    \ = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = 1;\n\
    \        }\n        for (int i = 1; i < n; i++) {\n            int j = i - 1;\n\
    \            while (j >= 0 && str[i] != str[j]) {\n                j--;\n    \
    \        }\n            if (j >= 0) {\n                p[i] = p[j] + 1;\n    \
    \        }\n        }\n        int max = 0;\n        int maxi = 0;\n        for\
    \ (int i = 0; i < n; i++) {\n            if (p[i] > max) {\n                max\
    \ = p[i];\n                maxi = i;\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < n - max; i++) {\n   \
    \         sb.Append(str[i]);\n        }\n        for (int i = n - 1; i >= maxi\
    \ + 1; i--) {\n            sb.Append(str[i]);\n        }\n        return sb.ToString();",
  "        var n = str.Length;\n        var z = new int[n];\n        z[0] = n;\n \
    \       var l = 0;\n        var r = 0;\n        for (var i = 1; i < n; i++) {\n\
    \            if (i > r) {\n                l = r = i;\n                while (r\
    \ < n && str[r - l] == str[r]) {\n                    r++;\n                }\n\
    \                z[i] = r - l;\n                r--;\n            } else {\n \
    \               var k = i - l;\n                if (z[k] < r - i + 1) {\n    \
    \                z[i] = z[k];\n                } else {\n                    l\
    \ = i;\n                    while (r < n && str[r - l] == str[r]) {\n        \
    \                r++;\n                    }\n                    z[i] = r - l;\n\
    \                    r--;\n                }\n            }\n        }\n     \
    \   var max = 0;\n        var maxIndex = 0;\n        for (var i = 1; i < n; i++)\
    \ {\n            if (z[i] == i) {\n                max = z[i];\n             \
    \   maxIndex = i;\n            }\n        }\n        var prefix = str.Substring(0,\
    \ n - maxIndex);\n        var reverse = new string(prefix.Reverse().ToArray());\n\
    \        return str + reverse;", "        int n = str.Length;\n        int[] p\
    \ = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n\
    \        }\n        int l = 0;\n        int r = -1;\n        for (int i = 0; i\
    \ < n; i++) {\n            int k = (i > r) ? 1 : Math.Min(p[l + r - i], r - i\
    \ + 1);\n            while (i + k < n && i - k >= 0 && str[i + k] == str[i - k])\
    \ {\n                k++;\n            }\n            p[i] = k--;\n          \
    \  if (i + k > r) {\n                l = i - k;\n                r = i + k;\n\
    \            }\n        }\n        int max = 0;\n        int maxi = 0;\n     \
    \   for (int i = 0; i < n; i++) {\n            if (p[i] > max) {\n           \
    \     max = p[i];\n                maxi = i;\n            }\n        }\n     \
    \   string prefix = str.Substring(0, maxi - max + 1);\n        string suffix =\
    \ str.Substring(maxi + max);\n        return str + new string(suffix.Reverse().ToArray())\
    \ + prefix;", "        var n = str.Length;\n        var z = new int[n];\n    \
    \    z[0] = 0;\n        for (int i = 1, l = 0, r = 0; i < n; i++) {\n        \
    \    if (i <= r) {\n                z[i] = Math.Min(r - i + 1, z[i - l]);\n  \
    \          }\n            while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n\
    \                z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n\
    \                l = i;\n                r = i + z[i] - 1;\n            }\n  \
    \      }\n        var suffix = str.Substring(n - z[n - 1]);\n        var prefix\
    \ = str.Substring(0, n - z[n - 1]);\n        var reverse = new string(prefix.Reverse().ToArray());\n\
    \        return reverse + str + suffix;", "        int n = str.Length;\n     \
    \   int[] p = new int[n];\n        for (int i = 0; i < n; i++) {\n           \
    \ p[i] = 0;\n        }\n        int c = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            int j = p[i - c - 1];\n            while (j > 0 && str[i] !=\
    \ str[c - j]) {\n                j = p[j - 1];\n            }\n            if\
    \ (str[i] == str[c - j]) {\n                j++;\n            }\n            p[i\
    \ - c] = j;\n            if (i + j - 1 > c) {\n                c = i;\n      \
    \      }\n        }\n        int l = n - p[n - c - 1];\n        string suffix\
    \ = str.Substring(l);\n        string prefix = str.Substring(0, l);\n        return\
    \ str + new string(prefix.Reverse().ToArray());", "        int n = str.Length;\n\
    \        int[] p = new int[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      p[i] = 0;\n        }\n        for (int i = 1; i < n; i++) {\n         \
    \   int j = p[i - 1];\n            while (j > 0 && str[i] != str[j]) {\n     \
    \           j = p[j - 1];\n            }\n            if (str[i] == str[j]) {\n\
    \                j++;\n            }\n            p[i] = j;\n        }\n     \
    \   int suffixLength = p[n - 1];\n        string prefix = str.Substring(0, n -\
    \ suffixLength);\n        return str + Reverse(prefix);", "        var sb = new\
    \ StringBuilder(str);\n        var prefix = str.Substring(0, str.Length - FindLongestPalindromeSuffix(str));\n\
    \        sb.Append(new string(prefix.Reverse().ToArray()));\n        return sb.ToString();",
  "        int n = str.Length;\n        int[] p = new int[n];\n        for (int i\
    \ = 0; i < n; i++) {\n            p[i] = 0;\n        }\n        for (int i = 1;\
    \ i < n; i++) {\n            int j = p[i - 1];\n            while (j > 0 && str[i]\
    \ != str[j]) {\n                j = p[j - 1];\n            }\n            if (str[i]\
    \ == str[j]) {\n                j++;\n            }\n            p[i] = j;\n \
    \       }\n        int prefixLength = n - p[n - 1];\n        string prefix = str.Substring(0,\
    \ prefixLength);\n        string suffix = str.Substring(prefixLength);\n     \
    \   return str + Reverse(suffix) + Reverse(prefix);", "        int n = str.Length;\n\
    \        int[] z = new int[n];\n        z[0] = n;\n        int l = 0, r = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            if (i > r) {\n           \
    \     l = r = i;\n                while (r < n && str[r - l] == str[r]) r++;\n\
    \                z[i] = r - l;\n                r--;\n            } else {\n \
    \               int k = i - l;\n                if (z[k] < r - i + 1) {\n    \
    \                z[i] = z[k];\n                } else {\n                    l\
    \ = i;\n                    while (r < n && str[r - l] == str[r]) r++;\n     \
    \               z[i] = r - l;\n                    r--;\n                }\n \
    \           }\n        }\n        int max = 0;\n        for (int i = 1; i < n;\
    \ i++) {\n            if (z[i] == i) {\n                max = i;\n           \
    \ }\n        }\n        return str + new string(str.Substring(0, n - max).Reverse().ToArray());",
  "        var rev = new string(str.Reverse().ToArray());\n        var s = str + \"\
    #\" + rev;\n        var z = Z(s);\n        var max = 0;\n        for (int i =\
    \ str.Length + 1; i < z.Length; i++) {\n            if (z[i] == str.Length) {\n\
    \                max = i;\n            }\n        }\n        var prefix = str.Substring(0,\
    \ str.Length - (max - str.Length - 1));\n        return str + new string(prefix.Reverse().ToArray());",
  "        int n = str.Length;\n        int[] p = new int[n];\n        int c = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            if (i > c + p[c]) {\n    \
    \            int j = 0;\n                while (i + j < n && str[i + j] == str[j])\
    \ {\n                    j++;\n                }\n                p[i] = j;\n\
    \                c = i;\n            } else {\n                int j = c + p[c]\
    \ - i;\n                if (p[i - c] < j) {\n                    p[i] = p[i -\
    \ c];\n                } else {\n                    int k = 0;\n            \
    \        while (i + k < n && str[i + k] == str[j + k]) {\n                   \
    \     k++;\n                    }\n                    p[i] = j + k;\n       \
    \             c = i;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        for (int i = 0; i < n; i++) {\n            if (p[i] == i +\
    \ 1) {\n                max = i + 1;\n            }\n        }\n        return\
    \ str + new string(str.Substring(0, n - max).Reverse().ToArray());", "       \
    \ int n = str.Length;\n        int[] p = new int[n];\n        for (int i = 0;\
    \ i < n; i++) {\n            p[i] = 0;\n        }\n        // Find the longest\
    \ palindromic suffix.\n        for (int i = 1; i < n; i++) {\n            int\
    \ j = p[i - 1];\n            while (j > 0 && str[i] != str[j]) {\n           \
    \     j = p[j - 1];\n            }\n            if (str[i] == str[j]) {\n    \
    \            j++;\n            }\n            p[i] = j;\n        }\n        //\
    \ Append reverse of the prefix to the end of the string.\n        int prefixLen\
    \ = n - p[n - 1];\n        StringBuilder sb = new StringBuilder(str);\n      \
    \  for (int i = prefixLen - 1; i >= 0; i--) {\n            sb.Append(str[i]);\n\
    \        }\n        return sb.ToString();", "        int n = str.Length;\n   \
    \     int[] z = new int[n];\n        z[0] = n;\n        int l = 0, r = 0;\n  \
    \      for (int i = 1; i < n; i++) {\n            if (i <= r)\n              \
    \  z[i] = Math.Min(r - i + 1, z[i - l]);\n            while (i + z[i] < n && str[z[i]]\
    \ == str[i + z[i]])\n                z[i]++;\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        int palindromeEnd = 0;\n        for (int i = 1; i < n; i++)\n\
    \            if (z[i] == i)\n                palindromeEnd = i;\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = n - 1; i >= palindromeEnd; i--)\n\
    \            sb.Append(str[i]);\n        sb.Append(str);\n        return sb.ToString();",
  "        var sb = new StringBuilder(str);\n        var rev = new StringBuilder(str);\n\
    \        rev.Reverse();\n        var s = sb.ToString();\n        var r = rev.ToString();\n\
    \        var n = s.Length;\n        var z = new int[n];\n        for (int i =\
    \ 1, l = 0, r = 0; i < n; i++) {\n            if (i <= r)\n                z[i]\
    \ = Math.Min(r - i + 1, z[i - l]);\n            while (i + z[i] < n && s[z[i]]\
    \ == s[i + z[i]])\n                z[i]++;\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        var max = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        if (z[i] == n - i && z[i] > max)\n                max = z[i];\n     \
    \   }\n        sb.Append(r.Substring(max));\n        return sb.ToString();", " \
    \       int n = str.Length;\n        int[] p = new int[n];\n        for (int i\
    \ = 0; i < n; i++) {\n            p[i] = 0;\n        }\n        for (int i = 1;\
    \ i < n; i++) {\n            int j = p[i - 1];\n            while (j > 0 && str[i]\
    \ != str[j]) {\n                j = p[j - 1];\n            }\n            if (str[i]\
    \ == str[j]) {\n                j++;\n            }\n            p[i] = j;\n \
    \       }\n        int l = p[n - 1];\n        string prefix = str.Substring(0,\
    \ n - l);\n        return str + Reverse(prefix);", "        int n = str.Length;\n\
    \        int[] p = new int[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      p[i] = 0;\n        }\n        for (int i = 1; i < n; i++) {\n         \
    \   int j = p[i - 1];\n            while (j > 0 && str[i] != str[j]) {\n     \
    \           j = p[j - 1];\n            }\n            if (str[i] == str[j]) {\n\
    \                j++;\n            }\n            p[i] = j;\n        }\n     \
    \   int suffixLength = p[n - 1];\n        string prefix = str.Substring(0, n -\
    \ suffixLength);\n        string reversedPrefix = new string(prefix.Reverse().ToArray());\n\
    \        return str + reversedPrefix;", "        var n = str.Length;\n       \
    \ var z = new int[n];\n        var l = 0;\n        var r = 0;\n        for (var\
    \ i = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.Min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && str[z[i]]\
    \ == str[i + z[i]]) {\n                z[i]++;\n            }\n            if\
    \ (i + z[i] - 1 > r) {\n                l = i;\n                r = i + z[i] -\
    \ 1;\n            }\n        }\n        var prefix = str.Substring(0, n - z[n\
    \ - 1]);\n        var suffix = new string(prefix.Reverse().ToArray());\n     \
    \   return str + suffix;", "        int n = str.Length;\n        int[] p = new\
    \ int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = i;\n    \
    \    }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <\
    \ i; j++) {\n                if (str[i] == str[j]) {\n                    p[i]\
    \ = Math.Min(p[i], p[j] + i - j - 1);\n                }\n            }\n    \
    \    }\n        return str + new string(str.Substring(0, p[n - 1] + 1).Reverse().ToArray());",
  "        var sb = new StringBuilder(str);\n        var rev = new StringBuilder(str);\n\
    \        rev.Reverse();\n        var s = str + rev.ToString();\n        var z\
    \ = ZAlgorithm(s);\n        var zmax = z.Max();\n        var zmaxpos = z.ToList().IndexOf(zmax);\n\
    \        var prefix = str.Substring(0, str.Length - zmaxpos);\n        sb.Append(new\
    \ string(prefix.Reverse().ToArray()));\n        return sb.ToString();", "    \
    \    var n = str.Length;\n        var z = new int[n];\n        z[0] = n;\n   \
    \     var l = 0;\n        var r = 0;\n        for (var i = 1; i < n; i++) {\n\
    \            if (i <= r) {\n                z[i] = Math.Min(r - i + 1, z[i - l]);\n\
    \            }\n            while (i + z[i] < n && str[z[i]] == str[i + z[i]])\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        var suffix = str.Substring(n - z[n - 1]);\n        var prefix\
    \ = str.Substring(0, n - z[n - 1]);\n        return suffix + new string(prefix.Reverse().ToArray());",
  "        var sb = new StringBuilder(str);\n        var rev = new StringBuilder(str);\n\
    \        rev.Reverse();\n        var s = sb.ToString();\n        var r = rev.ToString();\n\
    \        var n = s.Length;\n        var z = new int[n];\n        z[0] = n;\n \
    \       var l = 0;\n        var rr = 0;\n        for (var i = 1; i < n; i++) {\n\
    \            if (i > rr) {\n                l = rr = i;\n                while\
    \ (rr < n && s[rr] == s[rr - l]) {\n                    rr++;\n              \
    \  }\n                z[i] = rr - l;\n                rr--;\n            } else\
    \ {\n                var k = i - l;\n                if (z[k] < rr - i + 1) {\n\
    \                    z[i] = z[k];\n                } else {\n                \
    \    l = i;\n                    while (rr < n && s[rr] == s[rr - l]) {\n    \
    \                    rr++;\n                    }\n                    z[i] =\
    \ rr - l;\n                    rr--;\n                }\n            }\n     \
    \   }\n        var max = 0;\n        var maxi = 0;\n        for (var i = 1; i\
    \ < n; i++) {\n            if (z[i] == i) {\n                max = z[i];\n   \
    \             maxi = i;\n            }\n        }\n        sb.Append(r.Substring(maxi\
    \ + 1));\n        return sb.ToString();", "        int n = str.Length;\n     \
    \   int[] z = new int[n];\n        z[0] = n;\n        int l = 0, r = 0;\n    \
    \    for (int i = 1; i < n; i++) {\n            if (i > r) {\n               \
    \ l = r = i;\n                while (r < n && str[r - l] == str[r]) r++;\n   \
    \             z[i] = r - l;\n                r--;\n            } else {\n    \
    \            int k = i - l;\n                if (z[k] < r - i + 1) {\n       \
    \             z[i] = z[k];\n                } else {\n                    l =\
    \ i;\n                    while (r < n && str[r - l] == str[r]) r++;\n       \
    \             z[i] = r - l;\n                    r--;\n                }\n   \
    \         }\n        }\n        int max = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (z[i] == i) {\n                max = i;\n            }\n \
    \       }\n        string prefix = str.Substring(0, n - max);\n        return\
    \ str + Reverse(prefix);", "        var rev = new string(str.Reverse().ToArray());\n\
    \        var str2 = str + \"#\" + rev;\n        var z = ZFunction(str2);\n   \
    \     var max = 0;\n        var maxi = 0;\n        for (int i = 0; i < z.Length;\
    \ i++) {\n            if (z[i] > max) {\n                max = z[i];\n       \
    \         maxi = i;\n            }\n        }\n        var prefix = str.Substring(0,\
    \ str.Length - max);\n        var revprefix = new string(prefix.Reverse().ToArray());\n\
    \        return prefix + revprefix + str;", "        var sb = new StringBuilder(str);\n\
    \        var rev = new StringBuilder(str);\n        rev.Reverse();\n        var\
    \ s = sb.ToString();\n        var r = rev.ToString();\n        var n = s.Length;\n\
    \        var z = new int[n];\n        z[0] = n;\n        var l = 0;\n        var\
    \ rr = 0;\n        for (var i = 1; i < n; i++) {\n            if (i > rr) {\n\
    \                l = rr = i;\n                while (rr < n && s[rr] == s[rr -\
    \ l]) {\n                    rr++;\n                }\n                z[i] =\
    \ rr - l;\n                rr--;\n            } else {\n                var k\
    \ = i - l;\n                if (z[k] < rr - i + 1) {\n                    z[i]\
    \ = z[k];\n                } else {\n                    l = i;\n            \
    \        while (rr < n && s[rr] == s[rr - l]) {\n                        rr++;\n\
    \                    }\n                    z[i] = rr - l;\n                 \
    \   rr--;\n                }\n            }\n        }\n        var max = 0;\n\
    \        var maxi = 0;\n        for (var i = 1; i < n; i++) {\n            if\
    \ (z[i] == i) {\n                max = i;\n                maxi = i;\n       \
    \     }\n        }\n        sb.Append(r.Substring(maxi));\n        return sb.ToString();",
  "        int n = str.Length;\n        int[] p = new int[n];\n        for (int i\
    \ = 0; i < n; i++) {\n            p[i] = 0;\n        }\n        int c = 0;\n \
    \       for (int i = 1; i < n; i++) {\n            int j = p[i - c - 1];\n   \
    \         while (j > 0 && str[i] != str[c - j]) {\n                j = p[j - 1];\n\
    \            }\n            if (str[i] == str[c - j]) {\n                j++;\n\
    \            }\n            p[i - c] = j;\n            if (i + j - 1 > c) {\n\
    \                c = i;\n            }\n        }\n        int l = n - p[n - c\
    \ - 1];\n        return str + new string(str.Substring(0, l).Reverse().ToArray());",
  "        int n = str.Length;\n        int[] z = new int[n];\n        int l = 0,\
    \ r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i > r) {\n  \
    \              l = r = i;\n                while (r < n && str[r - l] == str[r])\
    \ r++;\n                z[i] = r - l; r--;\n            } else {\n           \
    \     int k = i - l;\n                if (z[k] < r - i + 1) z[i] = z[k];\n   \
    \             else {\n                    l = i;\n                    while (r\
    \ < n && str[r - l] == str[r]) r++;\n                    z[i] = r - l; r--;\n\
    \                }\n            }\n        }\n        int max = 0;\n        for\
    \ (int i = 1; i < n; i++) {\n            if (z[i] == i) max = i;\n        }\n\
    \        return str + new string(str.Substring(0, n - max).Reverse().ToArray());",
  "        int n = str.Length;\n        int[] p = new int[n];\n        int c = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            int j = p[i - c - 1];\n  \
    \          while (j != -1 && str[i] != str[c - j - 1]) {\n                j =\
    \ p[j];\n            }\n            if (j == -1 && str[i] != str[c - j - 1]) {\n\
    \                p[i - c] = -1;\n            } else {\n                p[i - c]\
    \ = j + 1;\n            }\n            if (i + p[i - c] > c + p[c - c]) {\n  \
    \              c = i;\n            }\n        }\n        int l = n - p[n - c -\
    \ 1] - 1;\n        return str + new string(str.Substring(0, l).Reverse().ToArray());",
  "        var sb = new StringBuilder(str);\n        var rev = new StringBuilder(str);\n\
    \        rev.Reverse();\n        var s = sb.ToString();\n        var r = rev.ToString();\n\
    \        var n = s.Length;\n        var z = new int[n];\n        z[0] = 0;\n \
    \       for (int i = 1, l = 0, r = 0; i < n; i++) {\n            if (i <= r) {\n\
    \                z[i] = Math.Min(r - i + 1, z[i - l]);\n            }\n      \
    \      while (i + z[i] < n && s[z[i]] == s[i + z[i]]) {\n                z[i]++;\n\
    \            }\n            if (i + z[i] - 1 > r) {\n                l = i;\n\
    \                r = i + z[i] - 1;\n            }\n        }\n        var max\
    \ = 0;\n        for (int i = 1; i < n; i++) {\n            if (z[i] > z[max])\
    \ {\n                max = i;\n            }\n        }\n        sb.Append(r.Substring(z[max]));\n\
    \        return sb.ToString();", "        var n = str.Length;\n        var z =\
    \ new int[n];\n        z[0] = 0;\n        var l = 0;\n        var r = 0;\n   \
    \     for (var i = 1; i < n; i++) {\n            if (i > r) {\n              \
    \  l = r = i;\n                while (r < n && str[r - l] == str[r]) {\n     \
    \               r++;\n                }\n                z[i] = r - l;\n     \
    \           r--;\n            } else {\n                var k = i - l;\n     \
    \           if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n      \
    \          } else {\n                    l = i;\n                    while (r\
    \ < n && str[r - l] == str[r]) {\n                        r++;\n             \
    \       }\n                    z[i] = r - l;\n                    r--;\n     \
    \           }\n            }\n        }\n        var suffix = str.Substring(n\
    \ - z[n - 1]);\n        var prefix = str.Substring(0, n - z[n - 1]);\n       \
    \ var rev = new string(prefix.Reverse().ToArray());\n        return rev + str\
    \ + suffix;", "        var sb = new StringBuilder(str);\n        var rev = new\
    \ StringBuilder(str);\n        rev.Reverse();\n        var s = sb.ToString();\n\
    \        var r = rev.ToString();\n        var n = s.Length;\n        var z = new\
    \ int[n];\n        z[0] = n;\n        var l = 0;\n        var rr = 0;\n      \
    \  for (var i = 1; i < n; i++) {\n            if (i > rr) {\n                l\
    \ = rr = i;\n                while (rr < n && s[rr] == s[rr - l]) {\n        \
    \            rr++;\n                }\n                z[i] = rr - l;\n      \
    \          rr--;\n            } else {\n                var k = i - l;\n     \
    \           if (z[k] < rr - i + 1) {\n                    z[i] = z[k];\n     \
    \           } else {\n                    l = i;\n                    while (rr\
    \ < n && s[rr] == s[rr - l]) {\n                        rr++;\n              \
    \      }\n                    z[i] = rr - l;\n                    rr--;\n    \
    \            }\n            }\n        }\n        var max = 0;\n        var maxi\
    \ = 0;\n        for (var i = 1; i < n; i++) {\n            if (z[i] == i) {\n\
    \                max = z[i];\n                maxi = i;\n            }\n     \
    \   }\n        sb.Append(r.Substring(0, n - maxi));\n        return sb.ToString();",
  "        int n = str.Length;\n        int[] p = new int[n];\n        for (int i\
    \ = 0; i < n; i++) {\n            p[i] = 0;\n        }\n        int c = 0;\n \
    \       for (int i = 1; i < n; i++) {\n            if (i >= c + p[c]) {\n    \
    \            int l = i - c;\n                while (c - l >= 0 && i + l < n &&\
    \ str[c - l] == str[i + l]) {\n                    l++;\n                }\n \
    \               p[i] = l;\n                c = i;\n            } else {\n    \
    \            int j = c - (i - c);\n                if (p[j] < c + p[c] - i) {\n\
    \                    p[i] = p[j];\n                } else {\n                \
    \    int l = c + p[c] - i;\n                    while (c - l >= 0 && i + l < n\
    \ && str[c - l] == str[i + l]) {\n                        l++;\n             \
    \       }\n                    p[i] = l;\n                    c = i;\n       \
    \         }\n            }\n        }\n        int max = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            if (p[i] > p[max]) {\n                max\
    \ = i;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = max + p[max]; i < n; i++) {\n            sb.Append(str[i]);\n\
    \        }\n        for (int i = 0; i < max - p[max]; i++) {\n            sb.Append(str[i]);\n\
    \        }\n        return sb.ToString();", "        var n = str.Length;\n   \
    \     var z = new int[n];\n        z[0] = 0;\n        for (int i = 1, l = 0, r\
    \ = 0; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.Min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && str[z[i]]\
    \ == str[i + z[i]]) {\n                z[i]++;\n            }\n            if\
    \ (i + z[i] - 1 > r) {\n                l = i;\n                r = i + z[i] -\
    \ 1;\n            }\n        }\n        var max = 0;\n        for (int i = 1;\
    \ i < n; i++) {\n            if (z[i] == n - i) {\n                max = Math.Max(max,\
    \ z[i]);\n            }\n        }\n        var sb = new StringBuilder(str);\n\
    \        for (int i = n - max - 1; i >= 0; i--) {\n            sb.Append(str[i]);\n\
    \        }\n        return sb.ToString();", "        int n = str.Length;\n   \
    \     int[] p = new int[n];\n        for (int i = 0; i < n; i++) {\n         \
    \   p[i] = 0;\n        }\n        int c = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            int j = p[i - c - 1];\n            while (j > 0 && str[i] !=\
    \ str[c - j]) {\n                j = p[j - 1];\n            }\n            if\
    \ (str[i] == str[c - j]) {\n                j++;\n            }\n            p[i\
    \ - c] = j;\n            if (i + j - 1 > c) {\n                c = i;\n      \
    \      }\n        }\n        int l = n - p[n - c - 1];\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = l - 1; i >= 0; i--) {\n    \
    \        sb.Append(str[i]);\n        }\n        sb.Append(str);\n        return\
    \ sb.ToString();", "        int n = str.Length;\n        int[] p = new int[n];\n\
    \        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n        }\n   \
    \     for (int i = 1; i < n; i++) {\n            int j = p[i - 1];\n         \
    \   while (j > 0 && str[i] != str[j]) {\n                j = p[j - 1];\n     \
    \       }\n            if (str[i] == str[j]) {\n                j++;\n       \
    \     }\n            p[i] = j;\n        }\n        int suffixLen = p[n - 1];\n\
    \        string prefix = str.Substring(0, n - suffixLen);\n        string suffix\
    \ = str.Substring(n - suffixLen);\n        return str + new string(prefix.Reverse().ToArray());",
  "        int n = str.Length;\n        int[] z = new int[n];\n        z[0] = n;\n\
    \        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n          \
    \  if (i > r) {\n                l = r = i;\n                while (r < n && str[r\
    \ - l] == str[r]) r++;\n                z[i] = r - l;\n                r--;\n\
    \            } else {\n                int k = i - l;\n                if (z[k]\
    \ < r - i + 1) {\n                    z[i] = z[k];\n                } else {\n\
    \                    l = i;\n                    while (r < n && str[r - l] ==\
    \ str[r]) r++;\n                    z[i] = r - l;\n                    r--;\n\
    \                }\n            }\n        }\n        int max = 0;\n        for\
    \ (int i = 1; i < n; i++) {\n            if (z[i] == i) {\n                max\
    \ = i;\n            }\n        }\n        return str + new string(str.Substring(0,\
    \ n - max).Reverse().ToArray());", "        var n = str.Length;\n        var z\
    \ = new int[n];\n        z[0] = 0;\n        for (int i = 1, l = 0, r = 0; i <\
    \ n; i++) {\n            if (i <= r) {\n                z[i] = Math.Min(r - i\
    \ + 1, z[i - l]);\n            }\n            while (i + z[i] < n && str[z[i]]\
    \ == str[i + z[i]]) {\n                z[i]++;\n            }\n            if\
    \ (i + z[i] - 1 > r) {\n                l = i;\n                r = i + z[i] -\
    \ 1;\n            }\n        }\n        var max = 0;\n        for (int i = 1;\
    \ i < n; i++) {\n            if (z[i] == n - i) {\n                max = i;\n\
    \            }\n        }\n        var prefix = str.Substring(0, max);\n     \
    \   var suffix = str.Substring(max, n - max);\n        var reverse = new string(suffix.Reverse().ToArray());\n\
    \        return prefix + reverse;", "        int n = str.Length;\n        int[]\
    \ p = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n\
    \        }\n        int c = 0;\n        for (int i = 1; i < n; i++) {\n      \
    \      int j = p[i - c - 1];\n            while (j > 0 && str[i] != str[c - j])\
    \ {\n                j = p[j - 1];\n            }\n            if (str[i] == str[c\
    \ - j]) {\n                j++;\n            }\n            p[i - c] = j;\n  \
    \          if (i + j - 1 > c) {\n                c = i;\n            }\n     \
    \   }\n        int l = n - p[n - c - 1];\n        return str + new string(str.Substring(0,\
    \ l).Reverse().ToArray());", "        var n = str.Length;\n        var z = new\
    \ int[n];\n        z[0] = n;\n        var l = 0;\n        var r = 0;\n       \
    \ for (var i = 1; i < n; i++) {\n            if (i > r) {\n                l =\
    \ r = i;\n                while (r < n && str[r - l] == str[r]) {\n          \
    \          r++;\n                }\n                z[i] = r - l;\n          \
    \      r--;\n            } else {\n                var k = i - l;\n          \
    \      if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n           \
    \     } else {\n                    l = i;\n                    while (r < n &&\
    \ str[r - l] == str[r]) {\n                        r++;\n                    }\n\
    \                    z[i] = r - l;\n                    r--;\n               \
    \ }\n            }\n        }\n        var prefix = str.Substring(0, n - z[n -\
    \ 1]);\n        var suffix = str.Substring(n - z[n - 1]);\n        return prefix\
    \ + new string(suffix.Reverse().ToArray()) + suffix;", "        int n = str.Length;\n\
    \        int[] p = new int[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      p[i] = 0;\n        }\n        int c = 0;\n        for (int i = 1; i < n;\
    \ i++) {\n            int j = p[i - c - 1];\n            while (j > 0 && str[i]\
    \ != str[c - j]) {\n                j = p[j - 1];\n            }\n           \
    \ if (str[i] == str[c - j]) {\n                j++;\n            }\n         \
    \   p[i - c] = j;\n            if (i + j - 1 > c) {\n                c = i;\n\
    \            }\n        }\n        int l = n - p[n - c - 1];\n        string prefix\
    \ = str.Substring(0, l);\n        string suffix = str.Substring(l);\n        return\
    \ suffix + new string(prefix.Reverse().ToArray());", "        int n = str.Length;\n\
    \        int[] p = new int[n];\n        int i = 0, j = 1;\n        while (j <\
    \ n) {\n            if (str[i] == str[j]) {\n                p[j] = i + 1;\n \
    \               i++;\n                j++;\n            } else {\n           \
    \     if (i == 0) {\n                    p[j] = 0;\n                    j++;\n\
    \                } else {\n                    i = p[i - 1];\n               \
    \ }\n            }\n        }\n        int prefixLen = n - p[n - 1];\n       \
    \ return str + new string(str.Substring(0, prefixLen).Reverse().ToArray());",
  "        int n = str.Length;\n        int[] z = new int[n];\n        z[0] = n;\n\
    \        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n          \
    \  if (i <= r) {\n                z[i] = Math.Min(r - i + 1, z[i - l]);\n    \
    \        }\n            while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n\
    \                z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n\
    \                l = i;\n                r = i + z[i] - 1;\n            }\n  \
    \      }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n      \
    \      if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        string prefix = str.Substring(0, n - max);\n        return str + new\
    \ string(prefix.Reverse().ToArray());", "        int n = str.Length;\n       \
    \ int[] z = new int[n];\n        z[0] = n;\n        int l = 0, r = 0;\n      \
    \  for (int i = 1; i < n; i++) {\n            if (i > r) {\n                l\
    \ = r = i;\n                while (r < n && str[r - l] == str[r]) r++;\n     \
    \           z[i] = r - l;\n                r--;\n            } else {\n      \
    \          int k = i - l;\n                if (z[k] < r - i + 1) z[i] = z[k];\n\
    \                else {\n                    l = i;\n                    while\
    \ (r < n && str[r - l] == str[r]) r++;\n                    z[i] = r - l;\n  \
    \                  r--;\n                }\n            }\n        }\n       \
    \ int max = 0;\n        for (int i = 1; i < n; i++) {\n            if (z[i] ==\
    \ i) max = i;\n        }\n        string prefix = str.Substring(0, n - max);\n\
    \        return str + new string(prefix.Reverse().ToArray());", "        if (str.Length\
    \ == 0) {\n            return \"\";\n        }\n        int[] z = ZFunction(str);\n\
    \        int i = 0;\n        while (i < str.Length && z[i] == str.Length - i)\
    \ {\n            i++;\n        }\n        if (i == str.Length) {\n           \
    \ return str;\n        }\n        string prefix = str.Substring(0, i);\n     \
    \   string suffix = str.Substring(i);\n        string reversedPrefix = new string(prefix.Reverse().ToArray());\n\
    \        return reversedPrefix + suffix;", "        if (str.Length == 0) {\n \
    \           return str;\n        }\n        int n = str.Length;\n        int[]\
    \ z = new int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (i <= r) {\n                z[i] = Math.Min(r - i + 1, z[i\
    \ - l]);\n            }\n            while (i + z[i] < n && str[z[i]] == str[i\
    \ + z[i]]) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            if (z[i] == n - i) {\n                max = Math.Max(max, z[i]);\n\
    \            }\n        }\n        return str + str.Substring(0, n - max).Reverse().ToString();",
  "        int n = str.Length;\n        int[] p = new int[n];\n        int i = 0,\
    \ j = 1;\n        while (j < n) {\n            if (str[i] == str[j]) {\n     \
    \           p[j] = i + 1;\n                i++;\n                j++;\n      \
    \      } else {\n                if (i == 0) {\n                    p[j] = 0;\n\
    \                    j++;\n                } else {\n                    i = p[i\
    \ - 1];\n                }\n            }\n        }\n        int k = n - p[n\
    \ - 1];\n        return str + new string(str.Take(k).Reverse().ToArray());", " \
    \       var sb = new StringBuilder(str);\n        var rev = new StringBuilder(str);\n\
    \        rev.Reverse();\n        var s = sb.ToString();\n        var r = rev.ToString();\n\
    \        var n = s.Length;\n        var z = new int[n];\n        for (int i =\
    \ 1, l = 0, r = 0; i < n; ++i) {\n            if (i <= r)\n                z[i]\
    \ = Math.Min(r - i + 1, z[i - l]);\n            while (i + z[i] < n && s[z[i]]\
    \ == s[i + z[i]])\n                ++z[i];\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        var max = 0;\n        for (int i = 1; i < n; ++i)\n      \
    \      if (z[i] == n - i && i > max)\n                max = i;\n        sb.Append(r.Substring(max));\n\
    \        return sb.ToString();", "        var rev = new string(str.Reverse().ToArray());\n\
    \        var s = str + \"#\" + rev;\n        var z = ZAlgorithm(s);\n        var\
    \ max = 0;\n        var maxi = 0;\n        for (int i = str.Length + 1; i < z.Length;\
    \ i++) {\n            if (z[i] == i - str.Length) {\n                if (z[i]\
    \ > max) {\n                    max = z[i];\n                    maxi = i;\n \
    \               }\n            }\n        }\n        var prefix = str.Substring(0,\
    \ str.Length - max);\n        return prefix + str;", "        var n = str.Length;\n\
    \        var z = new int[n];\n        z[0] = n;\n        var l = 0;\n        var\
    \ r = 0;\n        for (var i = 1; i < n; i++) {\n            if (i > r) {\n  \
    \              l = r = i;\n                while (r < n && str[r - l] == str[r])\
    \ {\n                    r++;\n                }\n                z[i] = r - l;\n\
    \                r--;\n            } else {\n                var k = i - l;\n\
    \                if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n \
    \               } else {\n                    l = i;\n                    while\
    \ (r < n && str[r - l] == str[r]) {\n                        r++;\n          \
    \          }\n                    z[i] = r - l;\n                    r--;\n  \
    \              }\n            }\n        }\n        var prefix = str.Substring(0,\
    \ n - z[n - 1]);\n        var suffix = new string(prefix.Reverse().ToArray());\n\
    \        return str + suffix;", "        int n = str.Length;\n        int[] p\
    \ = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n\
    \        }\n        for (int i = 1; i < n; i++) {\n            int j = p[i - 1];\n\
    \            while (j > 0 && str[i] != str[j]) {\n                j = p[j - 1];\n\
    \            }\n            if (str[i] == str[j]) {\n                j++;\n  \
    \          }\n            p[i] = j;\n        }\n        int suffixLen = p[n -\
    \ 1];\n        string prefix = str.Substring(0, n - suffixLen);\n        string\
    \ suffix = str.Substring(n - suffixLen);\n        string prefixRev = new string(prefix.Reverse().ToArray());\n\
    \        return prefixRev + suffix;", "        var s = str + '\\0' + new string(str.Reverse().ToArray());\n\
    \        var z = new int[s.Length];\n        for (int i = 1, l = 0, r = 0; i <\
    \ s.Length; i++) {\n            if (i <= r)\n                z[i] = Math.Min(r\
    \ - i + 1, z[i - l]);\n            while (i + z[i] < s.Length && s[z[i]] == s[i\
    \ + z[i]])\n                z[i]++;\n            if (i + z[i] - 1 > r) {\n   \
    \             l = i;\n                r = i + z[i] - 1;\n            }\n     \
    \   }\n        return str.Substring(0, str.Length - z[s.Length - 1]) + str;",
  "        var sb = new StringBuilder(str);\n        var rev = new StringBuilder(str);\n\
    \        rev.Reverse();\n        var s = sb.ToString();\n        var r = rev.ToString();\n\
    \        var n = s.Length;\n        var z = new int[n];\n        for (int i =\
    \ 1, l = 0, r = 0; i < n; ++i) {\n            if (i <= r)\n                z[i]\
    \ = Math.Min(r - i + 1, z[i - l]);\n            while (i + z[i] < n && s[z[i]]\
    \ == s[i + z[i]])\n                ++z[i];\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        var max = 0;\n        for (int i = 1; i < n; ++i)\n      \
    \      if (z[i] == n - i && i > max)\n                max = i;\n        sb.Append(r.Substring(max));\n\
    \        return sb.ToString();", "        int n = str.Length;\n        int[] z\
    \ = new int[n];\n        z[0] = n;\n        int l = 0, r = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (i <= r)\n                z[i] = Math.Min(r\
    \ - i + 1, z[i - l]);\n            while (i + z[i] < n && str[z[i]] == str[i +\
    \ z[i]])\n                z[i]++;\n            if (i + z[i] - 1 > r) {\n     \
    \           l = i;\n                r = i + z[i] - 1;\n            }\n       \
    \ }\n        int palindromeEnd = 0;\n        for (int i = 1; i < n; i++)\n   \
    \         if (z[i] == i)\n                palindromeEnd = i;\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = n - 1; i >= palindromeEnd; i--)\n\
    \            sb.Append(str[i]);\n        sb.Append(str);\n        return sb.ToString();",
  "        var n = str.Length;\n        var z = new int[n];\n        z[0] = n;\n \
    \       var l = 0;\n        var r = 0;\n        for (var i = 1; i < n; i++) {\n\
    \            if (i > r) {\n                l = r = i;\n                while (r\
    \ < n && str[r - l] == str[r]) {\n                    r++;\n                }\n\
    \                z[i] = r - l;\n                r--;\n            } else {\n \
    \               var k = i - l;\n                if (z[k] < r - i + 1) {\n    \
    \                z[i] = z[k];\n                } else {\n                    l\
    \ = i;\n                    while (r < n && str[r - l] == str[r]) {\n        \
    \                r++;\n                    }\n                    z[i] = r - l;\n\
    \                    r--;\n                }\n            }\n        }\n     \
    \   var max = 0;\n        var maxi = 0;\n        for (var i = 1; i < n; i++) {\n\
    \            if (z[i] == i) {\n                max = i;\n                maxi\
    \ = i;\n            }\n        }\n        var sb = new StringBuilder();\n    \
    \    for (var i = maxi - 1; i >= 0; i--) {\n            sb.Append(str[i]);\n \
    \       }\n        sb.Append(str);\n        return sb.ToString();", "        var\
    \ n = str.Length;\n        var z = new int[n];\n        z[0] = 0;\n        for\
    \ (int i = 1, l = 0, r = 0; i < n; i++) {\n            if (i <= r) {\n       \
    \         z[i] = Math.Min(r - i + 1, z[i - l]);\n            }\n            while\
    \ (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n                z[i]++;\n  \
    \          }\n            if (i + z[i] - 1 > r) {\n                l = i;\n  \
    \              r = i + z[i] - 1;\n            }\n        }\n        var prefix\
    \ = str.Substring(0, n - z[n - 1]);\n        var suffix = str.Substring(n - z[n\
    \ - 1]);\n        var reversed = new string(prefix.Reverse().ToArray());\n   \
    \     return reversed + suffix;", "        var n = str.Length;\n        var z\
    \ = new int[n];\n        z[0] = 0;\n        for (int i = 1, l = 0, r = 0; i <\
    \ n; i++) {\n            if (i <= r)\n                z[i] = Math.Min(r - i +\
    \ 1, z[i - l]);\n            while (i + z[i] < n && str[z[i]] == str[i + z[i]])\n\
    \                z[i]++;\n            if (i + z[i] - 1 > r) {\n              \
    \  l = i;\n                r = i + z[i] - 1;\n            }\n        }\n     \
    \   var max = 0;\n        for (int i = 1; i < n; i++)\n            if (z[i] ==\
    \ n - i && z[i] > max)\n                max = z[i];\n        var sb = new StringBuilder(str);\n\
    \        for (int i = n - max - 1; i >= 0; i--)\n            sb.Append(str[i]);\n\
    \        return sb.ToString();", "        int n = str.Length;\n        int[] p\
    \ = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n\
    \        }\n        for (int i = 1; i < n; i++) {\n            int j = p[i - 1];\n\
    \            while (j > 0 && str[i] != str[j]) {\n                j = p[j - 1];\n\
    \            }\n            if (str[i] == str[j]) {\n                j++;\n  \
    \          }\n            p[i] = j;\n        }\n        int k = n - p[n - 1];\n\
    \        return str + new string(str.Substring(0, k).Reverse().ToArray());", " \
    \       int n = str.Length;\n        int[] p = new int[n];\n        p[0] = 0;\n\
    \        int k = 0;\n        for (int i = 1; i < n; i++) {\n            while\
    \ (k > 0 && str[k] != str[i]) {\n                k = p[k - 1];\n            }\n\
    \            if (str[k] == str[i]) {\n                k++;\n            }\n  \
    \          p[i] = k;\n        }\n        int l = n - p[n - 1];\n        return\
    \ str + new string(str.Substring(0, l).Reverse().ToArray());", "        int n\
    \ = str.Length;\n        int[] p = new int[n];\n        for (int i = 0; i < n;\
    \ i++) {\n            p[i] = 0;\n        }\n        for (int i = 1; i < n; i++)\
    \ {\n            int j = p[i - 1];\n            while (j > 0 && str[i] != str[j])\
    \ {\n                j = p[j - 1];\n            }\n            if (str[i] == str[j])\
    \ {\n                j++;\n            }\n            p[i] = j;\n        }\n \
    \       int suffix = p[n - 1];\n        string prefix = str.Substring(0, n - suffix);\n\
    \        string reverse = new string(prefix.Reverse().ToArray());\n        return\
    \ str + reverse;", "        int n = str.Length;\n        int[] z = new int[n];\n\
    \        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n          \
    \  if (i > r) {\n                l = r = i;\n                while (r < n && str[r\
    \ - l] == str[r]) r++;\n                z[i] = r - l; r--;\n            } else\
    \ {\n                int k = i - l;\n                if (z[k] < r - i + 1) z[i]\
    \ = z[k];\n                else {\n                    l = i;\n              \
    \      while (r < n && str[r - l] == str[r]) r++;\n                    z[i] =\
    \ r - l; r--;\n                }\n            }\n        }\n        int max =\
    \ 0;\n        for (int i = 1; i < n; i++) {\n            if (z[i] == i) max =\
    \ i;\n        }\n        return str + new string(str.Substring(0, n - max).Reverse().ToArray());",
  "        int n = str.Length;\n        int[] p = new int[n];\n        for (int i\
    \ = 0; i < n; i++) {\n            p[i] = 0;\n        }\n        int c = 0;\n \
    \       for (int i = 1; i < n; i++) {\n            int j = p[i - c - 1];\n   \
    \         while (j > 0 && str[i] != str[c - j]) {\n                j = p[j - 1];\n\
    \            }\n            if (str[i] == str[c - j]) {\n                j++;\n\
    \            }\n            p[i - c] = j;\n            if (i + j - 1 > c) {\n\
    \                c = i;\n            }\n        }\n        int l = n - p[n - c\
    \ - 1];\n        string prefix = str.Substring(0, l);\n        string suffix =\
    \ str.Substring(l);\n        return suffix + new string(prefix.Reverse().ToArray());",
  "        var sb = new StringBuilder(str);\n        var rev = new StringBuilder(str);\n\
    \        rev.Reverse();\n        var s = sb.ToString();\n        var r = rev.ToString();\n\
    \        var n = s.Length;\n        var z = new int[n];\n        for (int i =\
    \ 1, l = 0, r = 0; i < n; ++i) {\n            if (i <= r)\n                z[i]\
    \ = Math.Min(r - i + 1, z[i - l]);\n            while (i + z[i] < n && s[z[i]]\
    \ == s[i + z[i]])\n                ++z[i];\n            if (i + z[i] - 1 > r)\
    \ {\n                l = i;\n                r = i + z[i] - 1;\n            }\n\
    \        }\n        var max = 0;\n        for (int i = 1; i < n; ++i)\n      \
    \      if (z[i] == n - i && max < z[i])\n                max = z[i];\n       \
    \ sb.Append(r.Substring(max));\n        return sb.ToString();", "        int n\
    \ = str.Length;\n        int[] p = new int[n];\n        int c = 0;\n        for\
    \ (int i = 1; i < n; i++) {\n            if (i > c + p[c]) {\n               \
    \ p[i] = 0;\n            } else {\n                p[i] = Math.Min(p[2 * c - i],\
    \ c + p[c] - i);\n            }\n            while (i - p[i] - 1 >= 0 && i + p[i]\
    \ + 1 < n && str[i - p[i] - 1] == str[i + p[i] + 1]) {\n                p[i]++;\n\
    \            }\n            if (i + p[i] > c + p[c]) {\n                c = i;\n\
    \            }\n        }\n        int max = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            if (p[i] == i) {\n                max = i;\n           \
    \ }\n        }\n        return str + new string(str.Substring(0, n - max - 1).Reverse().ToArray());",
  "        int n = str.Length;\n        int[] p = new int[n];\n        for (int i\
    \ = 0; i < n; i++) {\n            p[i] = 0;\n        }\n        int c = 0;\n \
    \       for (int i = 1; i < n; i++) {\n            int j = c;\n            while\
    \ (j > 0 && str[i] != str[j]) {\n                j = p[j - 1];\n            }\n\
    \            if (str[i] == str[j]) {\n                j++;\n            }\n  \
    \          p[i] = j;\n            if (j > 0) {\n                c = i;\n     \
    \       }\n        }\n        int l = p[n - 1];\n        return str + Reverse(str.Substring(0,\
    \ n - l));", "        int n = str.Length;\n        int[] z = new int[n];\n   \
    \     z[0] = 0;\n        int l = 0, r = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            if (i <= r) {\n                z[i] = Math.Min(r - i + 1, z[i\
    \ - l]);\n            }\n            while (i + z[i] < n && str[z[i]] == str[i\
    \ + z[i]]) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        int max = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            if (z[i] == n - i) {\n                max = z[i];\n         \
    \       break;\n            }\n        }\n        string prefix = str.Substring(0,\
    \ n - max);\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = prefix.Length - 1; i >= 0; i--) {\n            sb.Append(prefix[i]);\n \
    \       }\n        return str + sb.ToString();", "        int n = str.Length;\n\
    \        int[] p = new int[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      p[i] = 0;\n        }\n        int mx = 0, id = 0;\n        for (int i =\
    \ 1; i < n; i++) {\n            p[i] = mx > i ? Math.Min(p[2 * id - i], mx - i)\
    \ : 1;\n            while (i + p[i] < n && i - p[i] >= 0 && str[i + p[i]] == str[i\
    \ - p[i]]) {\n                p[i]++;\n            }\n            if (i + p[i]\
    \ > mx) {\n                mx = i + p[i];\n                id = i;\n         \
    \   }\n        }\n        int maxLen = 0, centerIndex = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (i - p[i] == 0) {\n                maxLen\
    \ = p[i];\n                centerIndex = i;\n            }\n        }\n      \
    \  string add = \"\";\n        for (int i = centerIndex - maxLen - 1; i >= 0;\
    \ i--) {\n            add += str[i];\n        }\n        return str + add;", " \
    \       var sb = new StringBuilder(str);\n        var rev = new StringBuilder(str);\n\
    \        rev.Reverse();\n        var s = sb.ToString();\n        var r = rev.ToString();\n\
    \        var n = s.Length;\n        var z = new int[n];\n        z[0] = 0;\n \
    \       var l = 0;\n        var rr = 0;\n        for (var i = 1; i < n; i++) {\n\
    \            if (i <= rr) {\n                z[i] = Math.Min(rr - i + 1, z[i -\
    \ l]);\n            }\n            while (i + z[i] < n && s[z[i]] == s[i + z[i]])\
    \ {\n                z[i]++;\n            }\n            if (i + z[i] - 1 > rr)\
    \ {\n                l = i;\n                rr = i + z[i] - 1;\n            }\n\
    \        }\n        var max = 0;\n        var maxi = 0;\n        for (var i =\
    \ 0; i < n; i++) {\n            if (z[i] > max) {\n                max = z[i];\n\
    \                maxi = i;\n            }\n        }\n        var prefix = s.Substring(0,\
    \ maxi);\n        var suffix = s.Substring(maxi + max);\n        var revPrefix\
    \ = new StringBuilder(prefix);\n        revPrefix.Reverse();\n        sb.Append(revPrefix);\n\
    \        sb.Append(suffix);\n        return sb.ToString();", "        int n =\
    \ str.Length;\n        int[] p = new int[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            p[i] = 0;\n        }\n        int mx = 0, id = 0;\n        for\
    \ (int i = 1; i < n; i++) {\n            if (mx > i) {\n                p[i] =\
    \ Math.Min(p[2 * id - i], mx - i);\n            } else {\n                p[i]\
    \ = 1;\n            }\n            while (i - p[i] >= 0 && i + p[i] < n && str[i\
    \ - p[i]] == str[i + p[i]]) {\n                p[i]++;\n            }\n      \
    \      if (i + p[i] > mx) {\n                mx = i + p[i];\n                id\
    \ = i;\n            }\n        }\n        int maxLen = 0, centerIndex = 0;\n \
    \       for (int i = 1; i < n; i++) {\n            if (i - p[i] == 0) {\n    \
    \            maxLen = p[i];\n                centerIndex = i;\n            }\n\
    \        }\n        string prefix = str.Substring(maxLen);\n        prefix = new\
    \ string(prefix.Reverse().ToArray());\n        return prefix + str;", "      \
    \  var sb = new StringBuilder(str);\n        var rev = new StringBuilder(str);\n\
    \        rev.Reverse();\n        var len = str.Length;\n        var prefix = rev.ToString().Substring(0,\
    \ len - GetPalindromeLength(str));\n        sb.Append(prefix);\n        return\
    \ sb.ToString();", "        var n = str.Length;\n        var z = new int[n];\n\
    \        z[0] = 0;\n        for (int i = 1, l = 0, r = 0; i < n; i++) {\n    \
    \        if (i <= r)\n                z[i] = Math.Min(r - i + 1, z[i - l]);\n\
    \            while (i + z[i] < n && str[z[i]] == str[i + z[i]])\n            \
    \    z[i]++;\n            if (i + z[i] - 1 > r) {\n                l = i;\n  \
    \              r = i + z[i] - 1;\n            }\n        }\n        var sb = new\
    \ StringBuilder(str);\n        for (int i = n - 1; i >= 0; i--) {\n          \
    \  if (z[i] == n - i) {\n                for (int j = 0; j < i; j++)\n       \
    \             sb.Append(str[j]);\n                break;\n            }\n    \
    \    }\n        return sb.ToString();", "        var n = str.Length;\n       \
    \ var z = new int[n];\n        z[0] = n;\n        var l = 0;\n        var r =\
    \ 0;\n        for (var i = 1; i < n; i++) {\n            if (i <= r) {\n     \
    \           z[i] = Math.Min(r - i + 1, z[i - l]);\n            }\n           \
    \ while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n                z[i]++;\n\
    \            }\n            if (i + z[i] - 1 > r) {\n                l = i;\n\
    \                r = i + z[i] - 1;\n            }\n        }\n        var max\
    \ = 0;\n        var maxi = 0;\n        for (var i = 0; i < n; i++) {\n       \
    \     if (z[i] == n - i && z[i] > max) {\n                max = z[i];\n      \
    \          maxi = i;\n            }\n        }\n        var sb = new StringBuilder();\n\
    \        for (var i = n - 1; i >= max; i--) {\n            sb.Append(str[i]);\n\
    \        }\n        sb.Append(str);\n        return sb.ToString();", "       \
    \ int n = str.Length;\n        int[] z = new int[n];\n        z[0] = n;\n    \
    \    int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if\
    \ (i <= r) {\n                z[i] = Math.Min(r - i + 1, z[i - l]);\n        \
    \    }\n            while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n   \
    \             z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n  \
    \              l = i;\n                r = i + z[i] - 1;\n            }\n    \
    \    }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n        \
    \    if (z[i] == i) {\n                max = i;\n            }\n        }\n  \
    \      return str + new string(str.Substring(0, n - max).Reverse().ToArray());",
  "        var sb = new StringBuilder(str);\n        var rev = new StringBuilder(str);\n\
    \        rev.Reverse();\n        var suffix = new StringBuilder();\n        var\
    \ prefix = new StringBuilder();\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            suffix.Append(str[i]);\n            prefix.Append(rev[i]);\n\
    \            if (suffix.ToString() == prefix.ToString()) {\n                sb.Append(prefix.ToString().Substring(1));\n\
    \                sb.Reverse();\n                sb.Append(prefix.ToString().Substring(1));\n\
    \                return sb.ToString();\n            }\n        }\n        return\
    \ sb.ToString();", "        int n = str.Length;\n        int[] p = new int[n];\n\
    \        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n        }\n   \
    \     for (int i = 1; i < n; i++) {\n            int j = p[i - 1];\n         \
    \   while (j > 0 && str[i] != str[j]) {\n                j = p[j - 1];\n     \
    \       }\n            if (str[i] == str[j]) {\n                j++;\n       \
    \     }\n            p[i] = j;\n        }\n        int l = p[n - 1];\n       \
    \ string prefix = str.Substring(0, n - l);\n        string suffix = str.Substring(n\
    \ - l);\n        return suffix + Reverse(prefix);", "        int n = str.Length;\n\
    \        int[] p = new int[n];\n        p[0] = 0;\n        int k = 0;\n      \
    \  for (int i = 1; i < n; i++) {\n            while (k > 0 && str[k] != str[i])\
    \ {\n                k = p[k - 1];\n            }\n            if (str[k] == str[i])\
    \ {\n                k++;\n            }\n            p[i] = k;\n        }\n \
    \       string prefix = str.Substring(0, n - p[n - 1]);\n        return str +\
    \ Reverse(prefix);", "        int n = str.Length;\n        int[] z = new int[n];\n\
    \        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n          \
    \  if (i <= r) {\n                z[i] = Math.Min(r - i + 1, z[i - l]);\n    \
    \        }\n            while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n\
    \                z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n\
    \                l = i;\n                r = i + z[i] - 1;\n            }\n  \
    \      }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n      \
    \      if (z[i] == n - i && z[i] > max) {\n                max = z[i];\n     \
    \       }\n        }\n        return str + new string(str.Substring(0, n - max).Reverse().ToArray());",
  "        int n = str.Length;\n        int[] p = new int[n];\n        for (int i\
    \ = 0; i < n; i++) {\n            p[i] = 0;\n        }\n        int c = 0;\n \
    \       for (int i = 1; i < n; i++) {\n            int j = p[i - c - 1];\n   \
    \         while (j > 0 && str[i] != str[c - j]) {\n                j = p[j - 1];\n\
    \            }\n            if (str[i] == str[c - j]) {\n                j++;\n\
    \            }\n            p[i - c] = j;\n            if (i + j - 1 > c) {\n\
    \                c = i;\n            }\n        }\n        int l = n - p[n - c\
    \ - 1];\n        return str + new string(str.Substring(0, l).Reverse().ToArray());",
  "        int n = str.Length;\n        int[] z = new int[n];\n        z[0] = n;\n\
    \        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n          \
    \  if (i <= r) {\n                z[i] = Math.Min(r - i + 1, z[i - l]);\n    \
    \        }\n            while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n\
    \                z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n\
    \                l = i;\n                r = i + z[i] - 1;\n            }\n  \
    \      }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n      \
    \      if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        return str + str.Substring(max).Reverse().ToString();", "        var\
    \ rev = str.Reverse().ToArray();\n        var s = str + '\\0' + new string(rev);\n\
    \        var z = Z(s);\n        var max = 0;\n        for (int i = str.Length\
    \ + 1; i < z.Length; i++) {\n            if (z[i] == i - str.Length) {\n     \
    \           max = i - str.Length;\n            }\n        }\n        var prefix\
    \ = str.Substring(0, str.Length - max);\n        return str + new string(prefix.Reverse().ToArray());",
  "        int n = str.Length;\n        int[] p = new int[n];\n        for (int i\
    \ = 0; i < n; i++) {\n            p[i] = i;\n        }\n        Array.Sort(p,\
    \ (a, b) => str[a].CompareTo(str[b]));\n        int[] c = new int[n];\n      \
    \  c[p[0]] = 0;\n        for (int i = 1; i < n; i++) {\n            if (str[p[i]]\
    \ == str[p[i - 1]]) {\n                c[p[i]] = c[p[i - 1]];\n            } else\
    \ {\n                c[p[i]] = c[p[i - 1]] + 1;\n            }\n        }\n  \
    \      int[] cnt = new int[n];\n        int[] pn = new int[n];\n        int[]\
    \ cn = new int[n];\n        for (int h = 0; (1 << h) < n; h++) {\n           \
    \ for (int i = 0; i < n; i++) {\n                pn[i] = p[i] - (1 << h);\n  \
    \              if (pn[i] < 0) {\n                    pn[i] += n;\n           \
    \     }\n            }\n            Array.Fill(cnt, 0);\n            for (int\
    \ i = 0; i < n; i++) {\n                cnt[c[pn[i]]]++;\n            }\n    \
    \        for (int i = 1; i < n; i++) {\n                cnt[i] += cnt[i - 1];\n\
    \            }\n            for (int i = n - 1; i >= 0; i--) {\n             \
    \   p[--cnt[c[pn[i]]]] = pn[i];\n            }\n            cn[p[0]] = 0;\n  \
    \          for (int i = 1; i < n; i++) {\n                int mid1 = (p[i] + (1\
    \ << h)) % n;\n                int mid2 = (p[i - 1] + (1 << h)) % n;\n       \
    \         if (c[p[i]] == c[p[i - 1]] && c[", "        var sb = new StringBuilder(str);\n\
    \        var rev = new StringBuilder(str);\n        rev.Reverse();\n        var\
    \ s = sb.ToString();\n        var r = rev.ToString();\n        var n = s.Length;\n\
    \        var z = new int[n];\n        for (int i = 1, l = 0, r = 0; i < n; ++i)\
    \ {\n            if (i <= r)\n                z[i] = Math.Min(r - i + 1, z[i -\
    \ l]);\n            while (i + z[i] < n && s[z[i]] == s[i + z[i]])\n         \
    \       ++z[i];\n            if (i + z[i] - 1 > r) {\n                l = i;\n\
    \                r = i + z[i] - 1;\n            }\n        }\n        var max\
    \ = 0;\n        for (int i = 1; i < n; ++i)\n            if (z[i] == n - i &&\
    \ i > max)\n                max = i;\n        sb.Append(r.Substring(max));\n \
    \       return sb.ToString();", "        int n = str.Length;\n        int[] z\
    \ = new int[n];\n        z[0] = 0;\n        int l = 0, r = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.Min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && str[z[i]]\
    \ == str[i + z[i]]) {\n                z[i]++;\n            }\n            if\
    \ (i + z[i] - 1 > r) {\n                l = i;\n                r = i + z[i] -\
    \ 1;\n            }\n        }\n        int max = 0;\n        for (int i = 1;\
    \ i < n; i++) {\n            if (z[i] == n - i && z[i] > max) {\n            \
    \    max = z[i];\n            }\n        }\n        return str + new string(str.Substring(0,\
    \ n - max).Reverse().ToArray());", "        int n = str.Length;\n        int[]\
    \ p = new int[n];\n        p[0] = 0;\n        int k = 0;\n        for (int i =\
    \ 1; i < n; i++) {\n            while (k > 0 && str[k] != str[i]) {\n        \
    \        k = p[k - 1];\n            }\n            if (str[k] == str[i]) {\n \
    \               k++;\n            }\n            p[i] = k;\n        }\n      \
    \  int l = n - p[n - 1];\n        return str + new string(str.Substring(0, l).Reverse().ToArray());",
  "        int n = str.Length;\n        int[] z = new int[n];\n        z[0] = 0;\n\
    \        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n          \
    \  if (i <= r) {\n                z[i] = Math.Min(r - i + 1, z[i - l]);\n    \
    \        }\n            while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n\
    \                z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n\
    \                l = i;\n                r = i + z[i] - 1;\n            }\n  \
    \      }\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n      \
    \      if (i + z[i] == n) {\n                max = Math.Max(max, z[i]);\n    \
    \        }\n        }\n        string prefix = str.Substring(0, n - max);\n  \
    \      return str + new string(prefix.Reverse().ToArray());", "        var sb\
    \ = new StringBuilder(str);\n        var rev = new StringBuilder(str);\n     \
    \   rev.Reverse();\n        var s = sb.ToString() + rev.ToString();\n        var\
    \ z = ZAlgorithm(s);\n        var max = 0;\n        for (int i = str.Length; i\
    \ < z.Length; i++) {\n            if (z[i] == str.Length) {\n                max\
    \ = Math.Max(max, z[i]);\n            }\n        }\n        return str.Substring(0,\
    \ str.Length - max) + str;", "        var sb = new StringBuilder(str);\n     \
    \   var rev = new StringBuilder(str);\n        rev.Reverse();\n        var n =\
    \ str.Length;\n        var z = new int[2 * n + 1];\n        z[0] = 0;\n      \
    \  z[1] = 0;\n        int l = 0, r = 0;\n        for (int i = 2; i < 2 * n + 1;\
    \ i++) {\n            if (i > r) {\n                l = r = i;\n             \
    \   while (r < 2 * n + 1 && sb[(r - 1) / 2] == rev[(r - 1) / 2]) {\n         \
    \           r++;\n                }\n                z[i] = r - l;\n         \
    \       r--;\n            } else {\n                int k = i - l;\n         \
    \       if (z[k] < r - i + 1) {\n                    z[i] = z[k];\n          \
    \      } else {\n                    l = i;\n                    while (r < 2\
    \ * n + 1 && sb[(r - 1) / 2] == rev[(r - 1) / 2]) {\n                        r++;\n\
    \                    }\n                    z[i] = r - l;\n                  \
    \  r--;\n                }\n            }\n        }\n        var max = 0;\n \
    \       var maxi = 0;\n        for (int i = 1; i < 2 * n + 1; i++) {\n       \
    \     if (z[i] > max) {\n                max = z[i];\n                maxi = i;\n\
    \            }\n        }\n        var prefix = str.Substring(0, (maxi - max)\
    \ / 2);\n        var revprefix = new StringBuilder(prefix);\n        revprefix.Reverse();\n\
    \        return prefix + revprefix.ToString() + str;", "        var sb = new StringBuilder(str);\n\
    \        var rev = new StringBuilder(str);\n        rev.Reverse();\n        var\
    \ s = sb.ToString();\n        var r = rev.ToString();\n        var n = s.Length;\n\
    \        var z = new int[n];\n        for (int i = 1, l = 0, r = 0; i < n; ++i)\
    \ {\n            if (i <= r)\n                z[i] = Math.Min(r - i + 1, z[i -\
    \ l]);\n            while (i + z[i] < n && s[z[i]] == s[i + z[i]])\n         \
    \       ++z[i];\n            if (i + z[i] - 1 > r) {\n                l = i;\n\
    \                r = i + z[i] - 1;\n            }\n        }\n        var len\
    \ = 0;\n        for (int i = 1; i < n; ++i)\n            if (z[i] == n - i &&\
    \ (n - i) % 2 == 1) {\n                len = n - i;\n                break;\n\
    \            }\n        sb.Append(r.Substring(0, n - len));\n        return sb.ToString();",
  "        int n = str.Length;\n        int[] z = new int[n];\n        z[0] = n;\n\
    \        int l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n          \
    \  if (i <= r) {\n                z[i] = Math.Min(r - i + 1, z[i - l]);\n    \
    \        }\n            while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n\
    \                z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n\
    \                l = i;\n                r = i + z[i] - 1;\n            }\n  \
    \      }\n        int max = 0;\n        for (int i = 1; i < n; i++) {\n      \
    \      if (z[i] == i) {\n                max = i;\n            }\n        }\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = n - 1;\
    \ i >= max; i--) {\n            sb.Append(str[i]);\n        }\n        sb.Append(str);\n\
    \        return sb.ToString();", "        var sb = new StringBuilder(str);\n \
    \       var prefix = str.Substring(0, str.Length - LongestPalindromeSuffix(str));\n\
    \        sb.Append(new string(prefix.Reverse().ToArray()));\n        return sb.ToString();",
  "        int n = str.Length;\n        int[] z = new int[n];\n        int l = 0,\
    \ r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r) {\n \
    \               z[i] = Math.Min(r - i + 1, z[i - l]);\n            }\n       \
    \     while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n                z[i]++;\n\
    \            }\n            if (i + z[i] - 1 > r) {\n                l = i;\n\
    \                r = i + z[i] - 1;\n            }\n        }\n        int longest\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            if (i + z[i] == n)\
    \ {\n                longest = z[i];\n            }\n        }\n        return\
    \ str + Reverse(str.Substring(0, n - longest));", "        int n = str.Length;\n\
    \        int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.Min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && str[z[i]]\
    \ == str[i + z[i]]) {\n                z[i]++;\n            }\n            if\
    \ (i + z[i] - 1 > r) {\n                l = i;\n                r = i + z[i] -\
    \ 1;\n            }\n        }\n        int max = 0;\n        for (int i = 0;\
    \ i < n; i++) {\n            if (z[i] == n - i) {\n                max = z[i];\n\
    \                break;\n            }\n        }\n        return str + new string(str.Substring(0,\
    \ n - max).Reverse().ToArray());", "        var n = str.Length;\n        var z\
    \ = new int[n];\n        var l = 0;\n        var r = 0;\n        for (var i =\
    \ 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.Min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && str[z[i]]\
    \ == str[i + z[i]]) {\n                z[i]++;\n            }\n            if\
    \ (i + z[i] - 1 > r) {\n                l = i;\n                r = i + z[i] -\
    \ 1;\n            }\n        }\n        var max = 0;\n        var maxi = 0;\n\
    \        for (var i = 0; i < n; i++) {\n            if (z[i] > max) {\n      \
    \          max = z[i];\n                maxi = i;\n            }\n        }\n\
    \        var sb = new StringBuilder();\n        for (var i = maxi - max + 1; i\
    \ < maxi; i++) {\n            sb.Append(str[i]);\n        }\n        sb.Append(str);\n\
    \        return sb.ToString();", "        int n = str.Length;\n        int[] z\
    \ = new int[n];\n        z[0] = n;\n        int l = 0, r = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.Min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && str[z[i]]\
    \ == str[i + z[i]]) {\n                z[i]++;\n            }\n            if\
    \ (i + z[i] - 1 > r) {\n                l = i;\n                r = i + z[i] -\
    \ 1;\n            }\n        }\n        int len = n - z[n - 1];\n        return\
    \ str + new string(str.Substring(0, len).Reverse().ToArray());", "        var\
    \ sb = new StringBuilder(str);\n        var rev = new StringBuilder(str);\n  \
    \      rev.Reverse();\n        var s = sb.ToString();\n        var r = rev.ToString();\n\
    \        var n = s.Length;\n        var z = new int[n];\n        for (int i =\
    \ 1, l = 0, r = 0; i < n; i++) {\n            if (i <= r) {\n                z[i]\
    \ = Math.Min(r - i + 1, z[i - l]);\n            }\n            while (i + z[i]\
    \ < n && s[z[i]] == s[i + z[i]]) {\n                z[i]++;\n            }\n \
    \           if (i + z[i] - 1 > r) {\n                l = i;\n                r\
    \ = i + z[i] - 1;\n            }\n        }\n        var max = 0;\n        for\
    \ (int i = 1; i < n; i++) {\n            if (z[i] == n - i && max < z[i]) {\n\
    \                max = z[i];\n            }\n        }\n        sb.Append(r.Substring(0,\
    \ n - max));\n        return sb.ToString();", "        int n = str.Length;\n \
    \       int[] z = new int[n];\n        z[0] = 0;\n        int l = 0, r = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            if (i > r) {\n           \
    \     l = r = i;\n                while (r < n && str[r - l] == str[r]) r++;\n\
    \                z[i] = r - l;\n                r--;\n            } else {\n \
    \               int k = i - l;\n                if (z[k] < r - i + 1) {\n    \
    \                z[i] = z[k];\n                } else {\n                    l\
    \ = i;\n                    while (r < n && str[r - l] == str[r]) r++;\n     \
    \               z[i] = r - l;\n                    r--;\n                }\n \
    \           }\n        }\n        int max = 0;\n        for (int i = 1; i < n;\
    \ i++) {\n            if (z[i] == i) {\n                max = i;\n           \
    \ }\n        }\n        return str + new string(str.Substring(0, n - max).Reverse().ToArray());",
  "        int n = str.Length;\n        int[] p = new int[n];\n        for (int i\
    \ = 1; i < n; i++) {\n            int j = p[i - 1];\n            while (j > 0\
    \ && str[i] != str[j])\n                j = p[j - 1];\n            if (str[i]\
    \ == str[j])\n                j++;\n            p[i] = j;\n        }\n       \
    \ int prefixLen = n - p[n - 1];\n        return str + new string(str.Substring(0,\
    \ prefixLen).Reverse().ToArray());", "        int n = str.Length;\n        int[]\
    \ p = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n\
    \        }\n        int center = 0;\n        int right = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            int mirror = 2 * center - i;\n           \
    \ if (right > i) {\n                p[i] = Math.Min(right - i, p[mirror]);\n \
    \           }\n            while (i + p[i] + 1 < n && i - p[i] - 1 >= 0 && str[i\
    \ + p[i] + 1] == str[i - p[i] - 1]) {\n                p[i]++;\n            }\n\
    \            if (i + p[i] > right) {\n                center = i;\n          \
    \      right = i + p[i];\n            }\n        }\n        int maxLen = 0;\n\
    \        int centerIndex = 0;\n        for (int i = 1; i < n; i++) {\n       \
    \     if (i - p[i] == 0) {\n                if (p[i] > maxLen) {\n           \
    \         maxLen = p[i];\n                    centerIndex = i;\n             \
    \   }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        sb.Append(str.Substring(maxLen + 1));\n        for (int i = maxLen -\
    \ 1; i >= 0; i--) {\n            sb.Append(str[i]);\n        }\n        return\
    \ sb.ToString();", "        var sb = new StringBuilder(str);\n        var suffix\
    \ = FindPalindromeSuffix(str);\n        sb.Append(new string(suffix.Reverse().ToArray()));\n\
    \        return sb.ToString();", "        int n = str.Length;\n        int[] z\
    \ = new int[n];\n        z[0] = 0;\n        int l = 0, r = 0;\n        for (int\
    \ i = 1; i < n; i++) {\n            if (i <= r) {\n                z[i] = Math.Min(r\
    \ - i + 1, z[i - l]);\n            }\n            while (i + z[i] < n && str[z[i]]\
    \ == str[i + z[i]]) {\n                z[i]++;\n            }\n            if\
    \ (i + z[i] - 1 > r) {\n                l = i;\n                r = i + z[i] -\
    \ 1;\n            }\n        }\n        int max = 0;\n        for (int i = 1;\
    \ i < n; i++) {\n            if (z[i] == n - i && i > max) {\n               \
    \ max = i;\n            }\n        }\n        return str + new string(str.Substring(0,\
    \ n - max).Reverse().ToArray());", "        int n = str.Length;\n        int[]\
    \ p = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n\
    \        }\n        int c = 0;\n        for (int i = 1; i < n; i++) {\n      \
    \      if (i <= c + p[c]) {\n                p[i] = Math.Min(p[2 * c - i], c +\
    \ p[c] - i);\n            }\n            while (i - p[i] - 1 >= 0 && i + p[i]\
    \ + 1 < n && str[i - p[i] - 1] == str[i + p[i] + 1]) {\n                p[i]++;\n\
    \            }\n            if (i + p[i] > c + p[c]) {\n                c = i;\n\
    \            }\n        }\n        int max = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            if (p[i] > p[max]) {\n                max = i;\n       \
    \     }\n        }\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = max + p[max] + 1; i < n; i++) {\n            sb.Append(str[i]);\n \
    \       }\n        for (int i = 0; i < max - p[max]; i++) {\n            sb.Append(str[i]);\n\
    \        }\n        return sb.ToString();", "        int n = str.Length;\n   \
    \     int[] z = new int[n];\n        z[0] = 0;\n        int l = 0, r = 0;\n  \
    \      for (int i = 1; i < n; i++) {\n            if (i <= r) {\n            \
    \    z[i] = Math.Min(r - i + 1, z[i - l]);\n            }\n            while (i\
    \ + z[i] < n && str[z[i]] == str[i + z[i]]) {\n                z[i]++;\n     \
    \       }\n            if (i + z[i] - 1 > r) {\n                l = i;\n     \
    \           r = i + z[i] - 1;\n            }\n        }\n        int max = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            if (z[i] == n - i && i > max)\
    \ {\n                max = i;\n            }\n        }\n        string prefix\
    \ = str.Substring(0, max);\n        string suffix = str.Substring(max);\n    \
    \    return suffix + new string(prefix.Reverse().ToArray());", "        int n\
    \ = str.Length;\n        int[] z = new int[n];\n        z[0] = n;\n        int\
    \ l = 0, r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r)\
    \ {\n                z[i] = Math.Min(r - i + 1, z[i - l]);\n            }\n  \
    \          while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n            \
    \    z[i]++;\n            }\n            if (i + z[i] - 1 > r) {\n           \
    \     l = i;\n                r = i + z[i] - 1;\n            }\n        }\n  \
    \      int max = 0;\n        for (int i = 1; i < n; i++) {\n            if (z[i]\
    \ == i) {\n                max = i;\n            }\n        }\n        return\
    \ str + new string(str.Substring(0, n - max).Reverse().ToArray());", "       \
    \ var sb = new StringBuilder(str);\n        var prefix = str.Substring(0, str.Length\
    \ - LongestPalindromeSuffix(str));\n        sb.Append(new string(prefix.Reverse().ToArray()));\n\
    \        return sb.ToString();", "        var strRev = new string(str.Reverse().ToArray());\n\
    \        var strRevPrefix = strRev.Substring(0, str.Length);\n        var strRevPostfix\
    \ = strRev.Substring(str.Length);\n        var strPrefix = str.Substring(0, str.Length);\n\
    \        var strPostfix = str.Substring(str.Length);\n        var strPrefixPalindrome\
    \ = strPrefix + strRevPostfix;\n        var strPostfixPalindrome = strRevPrefix\
    \ + strPostfix;\n        return strPrefixPalindrome.Length < strPostfixPalindrome.Length\
    \ ? strPrefixPalindrome : strPostfixPalindrome;", "        if (str.Length == 0)\
    \ {\n            return \"\";\n        }\n        var s = str + '\\0' + new string(str.Reverse().ToArray());\n\
    \        var z = new int[s.Length];\n        z[0] = s.Length;\n        int l =\
    \ 0, r = 0;\n        for (int i = 1; i < s.Length; i++) {\n            if (i >\
    \ r) {\n                l = r = i;\n                while (r < s.Length && s[r\
    \ - l] == s[r]) {\n                    r++;\n                }\n             \
    \   z[i] = r - l;\n                r--;\n            } else {\n              \
    \  int k = i - l;\n                if (z[k] < r - i + 1) {\n                 \
    \   z[i] = z[k];\n                } else {\n                    l = i;\n     \
    \               while (r < s.Length && s[r - l] == s[r]) {\n                 \
    \       r++;\n                    }\n                    z[i] = r - l;\n     \
    \               r--;\n                }\n            }\n        }\n        int\
    \ max = 0;\n        for (int i = str.Length + 1; i < s.Length; i++) {\n      \
    \      if (z[i] == i - str.Length) {\n                max = Math.Max(max, z[i]);\n\
    \            }\n        }\n        return str.Substring(0, str.Length - max) +\
    \ new string(str.Reverse().ToArray());", "        var rev = new string(str.Reverse().ToArray());\n\
    \        var s = str + \"#\" + rev;\n        var z = ZAlgorithm(s);\n        var\
    \ max = 0;\n        var maxi = 0;\n        for (int i = str.Length + 1; i < z.Length;\
    \ i++) {\n            if (z[i] > max) {\n                max = z[i];\n       \
    \         maxi = i;\n            }\n        }\n        var prefix = str.Substring(0,\
    \ str.Length - max);\n        return prefix + str;", "        var rev = str.Reverse().ToArray();\n\
    \        var s = str + new string(rev);\n        var z = ZFunction(s);\n     \
    \   var max = 0;\n        for (int i = str.Length; i < z.Length; i++) {\n    \
    \        if (z[i] == i - str.Length) {\n                max = i - str.Length;\n\
    \            }\n        }\n        return str + new string(rev.Take(str.Length\
    \ - max).Reverse());", "        int n = str.Length;\n        int[] p = new int[n];\n\
    \        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n        }\n   \
    \     int c = 0;\n        for (int i = 1; i < n; i++) {\n            int j = p[i\
    \ - c - 1];\n            while (j > 0 && str[i] != str[c - j]) {\n           \
    \     j = p[j - 1];\n            }\n            if (str[i] == str[c - j]) {\n\
    \                j++;\n            }\n            p[i - c] = j;\n            if\
    \ (i + j - 1 > c) {\n                c = i;\n            }\n        }\n      \
    \  int l = n - p[n - c - 1];\n        return str + new string(str.Substring(0,\
    \ l).Reverse().ToArray());", "        var sb = new StringBuilder(str);\n     \
    \   var rev = new StringBuilder(str);\n        rev.Reverse();\n        var strrev\
    \ = rev.ToString();\n        var strrevrev = new StringBuilder(strrev);\n    \
    \    strrevrev.Reverse();\n        var strrevrevstr = strrevrev.ToString();\n\
    \        var strrevrevstrrev = new StringBuilder(strrevrevstr);\n        strrevrevstrrev.Reverse();\n\
    \        var strrevrevstrrevstr = strrevrevstrrev.ToString();\n        var strrevrevstrrevstrrev\
    \ = new StringBuilder(strrevrevstrrevstr);\n        strrevrevstrrevstrrev.Reverse();\n\
    \        var strrevrevstrrevstrrevstr = strrevrevstrrevstrrev.ToString();\n  \
    \      var strrevrevstrrevstrrevstrrev = new StringBuilder(strrevrevstrrevstrrevstr);\n\
    \        strrevrevstrrevstrrevstrrev.Reverse();\n        var strrevrevstrrevstrrevstrrevstr\
    \ = strrevrevstrrevstrrevstrrev.ToString();\n        var strrevrevstrrevstrrevstrrevstrrev\
    \ = new StringBuilder(strrevrevstrrevstrrevstrrevstr);\n        strrevrevstrrevstrrevstrrevstrrev.Reverse();\n\
    \        var strrevrevstrrevstrrevstrrevstrrevstr = strrevrevstrrevstrrevstrrevstrrev.ToString();\n\
    \        var strrevrevstrrevstrrevstrrevstrrevstrrev = new StringBuilder(strrevrevstrrevstrrevstrrevstrrevstr);\n\
    \        strrevrevstrrevstrrevstrrevstrrevstrrev.Reverse();\n        var strrevrevstrrevstrrevstrrevstrrevstrrevstr\
    \ = strrevrevstrrevstrrevstrrevstrrevstrrev.ToString();\n        var strrevrevstrrevstrrevstrrevstrrevstrrevstrrev\
    \ = new StringBuilder(strrevrevstrrevstrrevstrrevstrrevstrrevstr);\n        strrevrevstrrevstrrevstrrevstrrevstrrevstrrev.Reverse();\n\
    \        var strrevrevstrrevstrrevstrrevstrrevstrrevstrrevstr = strrevrevstrrevstr",
  "        int n = str.Length;\n        int[] p = new int[n];\n        p[0] = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            int j = p[i - 1];\n      \
    \      while (j > 0 && str[i] != str[j])\n                j = p[j - 1];\n    \
    \        if (str[i] == str[j])\n                j++;\n            p[i] = j;\n\
    \        }\n        int suffix_len = n - p[n - 1];\n        return str + str.Substring(suffix_len).Reverse().ToString();",
  "        var rev = str.Reverse().ToArray();\n        var s = str + new string(rev);\n\
    \        var z = ZAlgorithm(s);\n        var max = 0;\n        for (int i = str.Length\
    \ + 1; i < s.Length; i++) {\n            if (z[i] == i - str.Length) {\n     \
    \           max = i - str.Length;\n            }\n        }\n        return str\
    \ + new string(rev.Take(str.Length - max).Reverse());", "        // Find the longest\
    \ palindromic suffix.\n        var suffix = LongestPalindromicSuffix(str);\n \
    \       // Reverse the prefix.\n        var prefix = new string(str.Take(str.Length\
    \ - suffix.Length).Reverse().ToArray());\n        // Append the prefix to the\
    \ end of the string.\n        return str + prefix;", "        int n = str.Length;\n\
    \        int[] z = new int[n];\n        z[0] = 0;\n        int l = 0, r = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            if (i <= r) {\n          \
    \      z[i] = Math.Min(r - i + 1, z[i - l]);\n            }\n            while\
    \ (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n                z[i]++;\n  \
    \          }\n            if (i + z[i] - 1 > r) {\n                l = i;\n  \
    \              r = i + z[i] - 1;\n            }\n        }\n        int max =\
    \ 0;\n        for (int i = 0; i < n; i++) {\n            if (i + z[i] == n) {\n\
    \                max = Math.Max(max, z[i]);\n            }\n        }\n      \
    \  StringBuilder sb = new StringBuilder();\n        for (int i = n - max - 1;\
    \ i >= 0; i--) {\n            sb.Append(str[i]);\n        }\n        sb.Append(str);\n\
    \        return sb.ToString();", "        int n = str.Length;\n        int[] p\
    \ = new int[n];\n        for (int i = 0; i < n; i++) {\n            p[i] = 0;\n\
    \        }\n        for (int i = 1; i < n; i++) {\n            int j = p[i - 1];\n\
    \            while (j > 0 && str[i] != str[j]) {\n                j = p[j - 1];\n\
    \            }\n            if (str[i] == str[j]) {\n                j++;\n  \
    \          }\n            p[i] = j;\n        }\n        int suffixLength = p[n\
    \ - 1];\n        string prefix = str.Substring(0, n - suffixLength);\n       \
    \ string suffix = str.Substring(n - suffixLength);\n        string reversePrefix\
    \ = new string(prefix.Reverse().ToArray());\n        return reversePrefix + suffix;",
  "        int n = str.Length;\n        int[] z = new int[n];\n        int l = 0,\
    \ r = 0;\n        for (int i = 1; i < n; i++) {\n            if (i <= r) {\n \
    \               z[i] = Math.Min(r - i + 1, z[i - l]);\n            }\n       \
    \     while (i + z[i] < n && str[z[i]] == str[i + z[i]]) {\n                z[i]++;\n\
    \            }\n            if (i + z[i] - 1 > r) {\n                l = i;\n\
    \                r = i + z[i] - 1;\n            }\n        }\n        int max\
    \ = 0;\n        for (int i = 1; i < n; i++) {\n            if (z[i] == n - i)\
    \ {\n                max = Math.Max(max, z[i]);\n            }\n        }\n  \
    \      StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n\
    \ - max; i++) {\n            sb.Append(str[i]);\n        }\n        for (int i\
    \ = n - 1; i >= max; i--) {\n            sb.Append(str[i]);\n        }\n     \
    \   return sb.ToString();", "        var n = str.Length;\n        var z = new\
    \ int[n];\n        z[0] = 0;\n        for (int i = 1, l = 0, r = 0; i < n; i++)\
    \ {\n            if (i <= r) {\n                z[i] = Math.Min(r - i + 1, z[i\
    \ - l]);\n            }\n            while (i + z[i] < n && str[z[i]] == str[i\
    \ + z[i]]) {\n                z[i]++;\n            }\n            if (i + z[i]\
    \ - 1 > r) {\n                l = i;\n                r = i + z[i] - 1;\n    \
    \        }\n        }\n        var prefix = str.Substring(0, n - z[n - 1]);\n\
    \        var suffix = str.Substring(n - z[n - 1]);\n        return suffix + new\
    \ string(prefix.Reverse().ToArray());", "        int n = str.Length;\n       \
    \ int[] z = new int[n];\n        int l = 0, r = 0;\n        for (int i = 1; i\
    \ < n; i++) {\n            if (i <= r)\n                z[i] = Math.Min(r - i\
    \ + 1, z[i - l]);\n            while (i + z[i] < n && str[z[i]] == str[i + z[i]])\n\
    \                z[i]++;\n            if (i + z[i] - 1 > r) {\n              \
    \  l = i;\n                r = i + z[i] - 1;\n            }\n        }\n     \
    \   int max = 0;\n        for (int i = 1; i < n; i++)\n            if (z[i] ==\
    \ n - i)\n                max = Math.Max(max, z[i]);\n        return str + str.Substring(max).Reverse();"]
stop_tokens:
- "\n    }\n"
