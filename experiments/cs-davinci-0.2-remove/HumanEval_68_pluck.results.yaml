language: cs
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var min = arr.Where(x
    => x % 2 == 0).Min();\n        var minIndex = arr.IndexOf(min);\n        return
    new List<long> { min, minIndex };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20494c8e6f2244c28e844864e307cde1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20494c8e6f2244c28e844864e307cde1>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck
    (System.Collections.Generic.List`1[T] arr) [0x00026] in <20494c8e6f2244c28e844864e307cde1>:0
    \n  at Prob"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var min = arr.Where(x
    => x % 2 == 0).Min();\n        var idx = arr.IndexOf(min);\n        return new
    List<long> { min, idx };\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <272e8993b5444b35b05dc7b5dbeffac4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <272e8993b5444b35b05dc7b5dbeffac4>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck
    (System.Collections.Generic.List`1[T] arr) [0x00026] in <272e8993b5444b35b05dc7b5dbeffac4>:0
    \n  at Prob"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) return new List<long>();\n        long min = long.MaxValue;\n        int minIndex
    = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %
    2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) return new List<long>();\n
    \       return new List<long> { min, minIndex };\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4d5ad6a245c4f3fa782980b2ac6e00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4d5ad6a245c4f3fa782980b2ac6e00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var min = arr.Where(x
    => x % 2 == 0).Min();\n        var index = arr.IndexOf(min);\n        return new
    List<long> { min, index };\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <539ff9e70b044e6f88dcc8ecf5807e5b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <539ff9e70b044e6f88dcc8ecf5807e5b>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck
    (System.Collections.Generic.List`1[T] arr) [0x00026] in <539ff9e70b044e6f88dcc8ecf5807e5b>:0
    \n  at Prob"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Write your code
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // TODO: Implement
    your solution here\n        return new List<long>();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <baceff0bc0134e6f8b439a974663ee7c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <baceff0bc0134e6f8b439a974663ee7c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr.Min();\n
    \       if (min % 2 == 0) {\n            return new List<long> { min, arr.IndexOf(min)
    };\n        }\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <337b001a916b4112bd38e03885776818>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <337b001a916b4112bd38e03885776818>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8da0274166349ad9a6d3dc1de506f53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8da0274166349ad9a6d3dc1de506f53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <42903f4eb9674a25be1a003145b9155d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <42903f4eb9674a25be1a003145b9155d>:0
    \n"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Write your code
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) return new List<long>();\n        long minEven = long.MaxValue;\n        long
    minEvenIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven = arr[i];\n                minEvenIndex
    = i;\n            }\n        }\n        if (minEvenIndex == -1) return new List<long>();\n
    \       return new List<long> { minEven, minEvenIndex };\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6ca910554a046a6998fe97ae0d9424f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6ca910554a046a6998fe97ae0d9424f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0
    \n"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var min = arr.Where(x
    => x % 2 == 0).Min();\n        var idx = arr.IndexOf(min);\n        return new
    List<long> { min, idx };\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <272e8993b5444b35b05dc7b5dbeffac4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <272e8993b5444b35b05dc7b5dbeffac4>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck
    (System.Collections.Generic.List`1[T] arr) [0x00026] in <272e8993b5444b35b05dc7b5dbeffac4>:0
    \n  at Prob"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        return arr.Select((x,
    i) => new { x, i }).Where(x => x.x % 2 == 0).OrderBy(x => x.x).ThenBy(x => x.i).Select(x
    => new List<long> { x.x, x.i }).FirstOrDefault() ?? new List<long>();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9bc28c1ed5734cfd928925063d0cc0b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9bc28c1ed5734cfd928925063d0cc0b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecfd919535be49aa80dd7049109593c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecfd919535be49aa80dd7049109593c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = long.MaxValue;\n
    \       long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f119c417cde4f85bb019d4518f55ba0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f119c417cde4f85bb019d4518f55ba0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var min = arr.Where(x
    => x % 2 == 0).Min();\n        var index = arr.IndexOf(min);\n        return new
    List<long> { min, index };\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <539ff9e70b044e6f88dcc8ecf5807e5b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <539ff9e70b044e6f88dcc8ecf5807e5b>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck
    (System.Collections.Generic.List`1[T] arr) [0x00026] in <539ff9e70b044e6f88dcc8ecf5807e5b>:0
    \n  at Prob"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long minEven =
    long.MaxValue;\n        long minEvenIndex = -1;\n        for (int i = 0; i < arr.Count;
    i++) {\n            if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven
    = arr[i];\n                minEvenIndex = i;\n            }\n        }\n        if
    (minEvenIndex == -1) {\n            return new List<long>();\n        }\n        return
    new List<long> { minEven, minEvenIndex };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3db36609fc914ed6a414ca9acf451a23>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3db36609fc914ed6a414ca9acf451a23>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        return arr.Select((x,
    i) => new { x, i }).Where(x => x.x % 2 == 0).OrderBy(x => x.x).ThenBy(x => x.i).Select(x
    => new List<long> { x.x, x.i }).FirstOrDefault() ?? new List<long>();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9bc28c1ed5734cfd928925063d0cc0b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9bc28c1ed5734cfd928925063d0cc0b8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59e9e2ae213541858ada00b6a3e36798>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59e9e2ae213541858ada00b6a3e36798>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr.Min();\n
    \       if (min % 2 == 0) {\n            return new List<long> { min, arr.IndexOf(min)
    };\n        }\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <337b001a916b4112bd38e03885776818>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <337b001a916b4112bd38e03885776818>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Write your code
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr.Min();\n
    \       if (min % 2 == 0) {\n            return new List<long> { min, arr.IndexOf(min)
    };\n        }\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <337b001a916b4112bd38e03885776818>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <337b001a916b4112bd38e03885776818>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0
    \n"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = long.MaxValue;\n
    \       long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f119c417cde4f85bb019d4518f55ba0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f119c417cde4f85bb019d4518f55ba0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79fc8b1513d54780b07a351e6691cc24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79fc8b1513d54780b07a351e6691cc24>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59e9e2ae213541858ada00b6a3e36798>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59e9e2ae213541858ada00b6a3e36798>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr.Min();\n
    \       if (min % 2 == 0) {\n            return new List<long>() { min, arr.IndexOf(min)
    };\n        }\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <969f40460eda457fbad185aed88fc723>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <969f40460eda457fbad185aed88fc723>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) return new List<long>();\n        long min = long.MaxValue;\n        long minIndex
    = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %
    2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) return new List<long>();\n
    \       return new List<long> { min, minIndex };\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12c40521df544266beb548d2fb42755a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12c40521df544266beb548d2fb42755a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0
    \n"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Write your code
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = arr.Where(x => x % 2 == 0).Min();\n        if
    (min == 0) {\n            result.Add(min);\n            result.Add(arr.IndexOf(min));\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36c6b7c4f0c7421bb6cd69a8fc5ffc19>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36c6b7c4f0c7421bb6cd69a8fc5ffc19>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck
    (System.Collections.Generic.List`1[T] arr) [0x0002c] in <36c6b7c4f0c7421bb6cd69a8fc5ffc19>:0
    \n  at Prob"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c7be442e00d47a981b95daf73fda7f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c7be442e00d47a981b95daf73fda7f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) return new List<long>();\n        long min = long.MaxValue;\n        int index
    = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %
    2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) return new List<long>();\n
    \       return new List<long> { min, index };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e32d4456d1545fe99f30dc5304436f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6e32d4456d1545fe99f30dc5304436f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var min = arr.Where(x
    => x % 2 == 0).Min();\n        var index = arr.IndexOf(min);\n        if (index
    == -1) {\n            return new List<long>();\n        }\n        return new
    List<long> { min, index };\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f14de3be133f449caa5da2d28636f661>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f14de3be133f449caa5da2d28636f661>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck
    (System.Collections.Generic.List`1[T] arr) [0x00026] in <f14de3be133f449caa5da2d28636f661>:0
    \n  at Prob"
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) return new List<long>();\n        long min = arr.Min();\n        if (min %
    2 == 1) return new List<long>();\n        int minIndex = arr.IndexOf(min);\n        return
    new List<long> { min, minIndex };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1545dc0cf76e45b8aa87e46e4fa9e900>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1545dc0cf76e45b8aa87e46e4fa9e900>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) return new List<long>();\n        long min = arr.Min();\n        if (min %
    2 == 1) return new List<long>();\n        return new List<long>() { min, arr.IndexOf(min)
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <424ffdd9b760467ba95e2c95f4faf08a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <424ffdd9b760467ba95e2c95f4faf08a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Write your code
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0
    \n"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Write your code
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // TODO: Implement
    your solution here.\n        return new List<long>();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86637ca8077745a3963ce790361e03ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <86637ca8077745a3963ce790361e03ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var min = arr.Where(x
    => x % 2 == 0).Min();\n        var minIndex = arr.IndexOf(min);\n        return
    new List<long> { min, minIndex };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20494c8e6f2244c28e844864e307cde1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20494c8e6f2244c28e844864e307cde1>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck
    (System.Collections.Generic.List`1[T] arr) [0x00026] in <20494c8e6f2244c28e844864e307cde1>:0
    \n  at Prob"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr.Min();\n
    \       if (min % 2 == 0) {\n            return new List<long> { min, arr.IndexOf(min)
    };\n        }\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <337b001a916b4112bd38e03885776818>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <337b001a916b4112bd38e03885776818>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecfd919535be49aa80dd7049109593c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecfd919535be49aa80dd7049109593c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) return new List<long>();\n        long min = long.MaxValue;\n        int minIndex
    = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %
    2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) return new List<long>();\n
    \       return new List<long> { min, minIndex };\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4d5ad6a245c4f3fa782980b2ac6e00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4d5ad6a245c4f3fa782980b2ac6e00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n
    \       }\n        long smallestEven = arr[0];\n        int smallestEvenIndex
    = 0;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)
    {\n            if (arr[i] % 2 == 0) {\n                if (!found) {\n                    smallestEven
    = arr[i];\n                    smallestEvenIndex = i;\n                    found
    = true;\n                } else {\n                    if (arr[i] < smallestEven)
    {\n                        smallestEven = arr[i];\n                        smallestEvenIndex
    = i;\n                    }\n                }\n            }\n        }\n        if
    (found) {\n            result.Add(smallestEven);\n            result.Add(smallestEvenIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71a421daffd542bd9b5065b1049b82bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71a421daffd542bd9b5065b1049b82bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var result = new
    List<long>();\n        if (arr.Count == 0) {\n            return result;\n        }\n
    \       var minEven = arr.Where(x => x % 2 == 0).Min();\n        var minEvenIndex
    = arr.IndexOf(minEven);\n        result.Add(minEven);\n        result.Add(minEvenIndex);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <13aa5c13870e4248b8ee44aecf91067f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <13aa5c13870e4248b8ee44aecf91067f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0
    \n"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <2e50af2754d943a0b67d0d7ab1de88e8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <2e50af2754d943a0b67d0d7ab1de88e8>:0
    \n"
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0
    \n"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) return new List<long>();\n        long min = arr.Min();\n        if (min %
    2 == 1) return new List<long>();\n        return new List<long> { min, arr.IndexOf(min)
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5417855b5bd14f72bb7ffd5e6f90818a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5417855b5bd14f72bb7ffd5e6f90818a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c7be442e00d47a981b95daf73fda7f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c7be442e00d47a981b95daf73fda7f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr.Min();\n
    \       if (min % 2 == 0) {\n            return new List<long> { min, arr.IndexOf(min)
    };\n        }\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <337b001a916b4112bd38e03885776818>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <337b001a916b4112bd38e03885776818>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0
    \n"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) return new List<long>();\n        long min = arr.Min();\n        if (min %
    2 == 1) return new List<long>();\n        int minIndex = arr.IndexOf(min);\n        return
    new List<long> { min, minIndex };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1545dc0cf76e45b8aa87e46e4fa9e900>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1545dc0cf76e45b8aa87e46e4fa9e900>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecfd919535be49aa80dd7049109593c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecfd919535be49aa80dd7049109593c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8da0274166349ad9a6d3dc1de506f53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8da0274166349ad9a6d3dc1de506f53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <42903f4eb9674a25be1a003145b9155d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <42903f4eb9674a25be1a003145b9155d>:0
    \n"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecfd919535be49aa80dd7049109593c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecfd919535be49aa80dd7049109593c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) return new List<long>();\n        long min = long.MaxValue;\n        int minIndex
    = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %
    2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) return new List<long>();\n
    \       return new List<long> { min, minIndex };\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4d5ad6a245c4f3fa782980b2ac6e00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4d5ad6a245c4f3fa782980b2ac6e00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var result = new
    List<long>();\n        if (arr.Count == 0) {\n            return result;\n        }\n
    \       var min = arr.Min();\n        if (min % 2 == 0) {\n            result.Add(min);\n
    \           result.Add(arr.IndexOf(min));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <056a87f347e148a1bbcbcbbbeecfe594>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <056a87f347e148a1bbcbcbbbeecfe594>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8da0274166349ad9a6d3dc1de506f53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8da0274166349ad9a6d3dc1de506f53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0
    \n"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Write your code
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) return new List<long>();\n        long min = arr.Min();\n        if (min %
    2 == 1) return new List<long>();\n        int index = arr.IndexOf(min);\n        return
    new List<long> { min, index };\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1e7efe39fce4443bfbcda027d245d70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1e7efe39fce4443bfbcda027d245d70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr.Min();\n
    \       if (min % 2 == 0) {\n            return new List<long> { min, arr.IndexOf(min)
    };\n        }\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]
    % 2 == 0) {\n                return new List<long> { arr[i], i };\n            }\n
    \       }\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d3def3057e44bab939bd490582c3d4e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d3def3057e44bab939bd490582c3d4e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <61e893d0ffb0439dadfd104b23b11a20>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <61e893d0ffb0439dadfd104b23b11a20>:0
    \n"
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecfd919535be49aa80dd7049109593c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ecfd919535be49aa80dd7049109593c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = long.MaxValue;\n
    \       long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (min == long.MaxValue) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c91485ec20a4cab9218bba028373d94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c91485ec20a4cab9218bba028373d94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8da0274166349ad9a6d3dc1de506f53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8da0274166349ad9a6d3dc1de506f53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = -1;\n
    \       long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0) {\n                if (min == -1 || arr[i] < min) {\n                    min
    = arr[i];\n                    minIndex = i;\n                }\n            }\n
    \       }\n        if (min == -1) {\n            return new List<long>();\n        }\n
    \       return new List<long> { min, minIndex };\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d96f8a4a546749dc87d8ee774f6b67da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d96f8a4a546749dc87d8ee774f6b67da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0
    \n"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr.Min();\n
    \       if (min % 2 == 0) {\n            return new List<long>() { min, arr.IndexOf(min)
    };\n        }\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <969f40460eda457fbad185aed88fc723>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <969f40460eda457fbad185aed88fc723>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <42903f4eb9674a25be1a003145b9155d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <42903f4eb9674a25be1a003145b9155d>:0
    \n"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8da0274166349ad9a6d3dc1de506f53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8da0274166349ad9a6d3dc1de506f53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var min = arr.Where(x
    => x % 2 == 0).Min();\n        var index = arr.IndexOf(min);\n        return new
    List<long> { min, index };\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <539ff9e70b044e6f88dcc8ecf5807e5b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <539ff9e70b044e6f88dcc8ecf5807e5b>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck
    (System.Collections.Generic.List`1[T] arr) [0x00026] in <539ff9e70b044e6f88dcc8ecf5807e5b>:0
    \n  at Prob"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Write your code
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <42903f4eb9674a25be1a003145b9155d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <42903f4eb9674a25be1a003145b9155d>:0
    \n"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <e021566b868046278f4de1615027d137>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <e021566b868046278f4de1615027d137>:0
    \n"
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0
    \n"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) return new List<long>();\n        long minEven = long.MaxValue;\n        int
    minEvenIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven = arr[i];\n                minEvenIndex
    = i;\n            }\n        }\n        if (minEvenIndex == -1) return new List<long>();\n
    \       return new List<long>() { minEven, minEvenIndex };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a91e4b463cf04a579dcccee9a1f3f896>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a91e4b463cf04a579dcccee9a1f3f896>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr.Min();\n
    \       if (min % 2 == 0) {\n            return new List<long> { min, arr.IndexOf(min)
    };\n        }\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <337b001a916b4112bd38e03885776818>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <337b001a916b4112bd38e03885776818>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr.Min();\n
    \       if (min % 2 == 0) {\n            return new List<long> { min, arr.IndexOf(min)
    };\n        }\n        return new List<long>();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <337b001a916b4112bd38e03885776818>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <337b001a916b4112bd38e03885776818>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) return new List<long>();\n        long min = long.MaxValue;\n        int minIndex
    = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %
    2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) return new List<long>();\n
    \       return new List<long> { min, minIndex };\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4d5ad6a245c4f3fa782980b2ac6e00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4d5ad6a245c4f3fa782980b2ac6e00c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f69cda50e9934d3fa3d639a743abf374>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c7be442e00d47a981b95daf73fda7f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3c7be442e00d47a981b95daf73fda7f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) return new List<long>();\n        long min = arr.Min(x => x);\n        if (min
    % 2 == 1) return new List<long>();\n        long minEven = arr.Where(x => x %
    2 == 0).Min(x => x);\n        long index = arr.IndexOf(minEven);\n        return
    new List<long> { minEven, index };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5ce20aeecd54fb69db7380f7e621787>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5ce20aeecd54fb69db7380f7e621787>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976186
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0
    \n"
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8d9560a6403d40cb8bcca543d8739098>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c710ee0aa829498296cbf83e86512eca>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Write your code
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <742e6196e5d945ecaac31d5d634c0051>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976185
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given an array representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest
    even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:
    2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n
    \   // Example 4:\n    // Explanation: 0 is the smallest value, but  there are
    two zeros,\n    // so we will choose the first zero, which has the smallest index.\n
    \   // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <a5f8448561ca4d8691d96812527393ea>:0
    \n"
  stdout: ''
  timestamp: 1659976185
