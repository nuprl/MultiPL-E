name: HumanEval_58_common
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique common elements for two lists.\n    public\
  \ static List<long> Common(List<long> l1, List<long> l2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Common((new\
  \ List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L,\
  \ (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L,\
  \ (long)9L, (long)653L, (long)121L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)5L, (long)653L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)5L,\
  \ (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(Common((new List<long>(new\
  \ long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,\
  \ (long)8L})), (new List<long>())).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        l1.Sort();\n        l2.Sort();\n        int i1 = 0;\n     \
    \   int i2 = 0;\n        List<long> result = new List<long>();\n        while\
    \ (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n  \
    \              result.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return result;",
  "        var l = new List<long>();\n        foreach (var x in l1) {\n          \
    \  if (l2.Contains(x)) {\n                l.Add(x);\n            }\n        }\n\
    \        l.Sort();\n        return l;", "        List<long> result = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while (i1 < l1.Count && i2\
    \ < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while\
    \ (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n  \
    \              result.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return result;",
  "        var l = new List<long>();\n        foreach (var e in l1) {\n          \
    \  if (l2.Contains(e)) {\n                l.Add(e);\n            }\n        }\n\
    \        l.Sort();\n        return l;", "        List<long> res = new List<long>();\n\
    \        int i1 = 0, i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n     \
    \           i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return res;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var e in l1) {\n            if (l2.Contains(e)) {\n        \
    \        l.Add(e);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        List<long> common\
    \ = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while\
    \ (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n  \
    \              common.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return common;",
  "        var l = new List<long>();\n        foreach (var x in l1) {\n          \
    \  if (l2.Contains(x)) {\n                l.Add(x);\n            }\n        }\n\
    \        l.Sort();\n        return l;", "        var l = new List<long>();\n \
    \       foreach (var x in l1) {\n            if (l2.Contains(x)) {\n         \
    \       l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        List<long> result = new List<long>();\n        int i1 = 0;\n \
    \       int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n      \
    \      if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n        \
    \        i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return result;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var n in l1) {\n \
    \           if (l2.Contains(n)) {\n                l.Add(n);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        l1.Sort();\n     \
    \   l2.Sort();\n        int i1 = 0;\n        int i2 = 0;\n        List<long> result\
    \ = new List<long>();\n        while (i1 < l1.Count && i2 < l2.Count) {\n    \
    \        if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n      \
    \          i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return result;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        List<long> result = new List<long>();\n        int i1 = 0;\n \
    \       int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n      \
    \      if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n        \
    \        i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return result;", "        var c = new List<long>();\n\
    \        int i1 = 0, i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                c.Add(l1[i1]);\n       \
    \         i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return c;", "        var l = new List<long>();\n\
    \        foreach (var e in l1) {\n            if (l2.Contains(e)) {\n        \
    \        l.Add(e);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        List<long> result = new List<long>();\n        int i1 = 0;\n \
    \       int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n      \
    \      if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n        \
    \        i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return result;", "        List<long> common = new\
    \ List<long>();\n        foreach (long x in l1) {\n            if (l2.Contains(x))\
    \ {\n                common.Add(x);\n            }\n        }\n        common.Sort();\n\
    \        return common;", "        List<long> res = new List<long>();\n      \
    \  int i1 = 0, i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n   \
    \         if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n        \
    \        i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return res;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        List<long> res = new List<long>();\n        int i1 = 0, i2 = 0;\n\
    \        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2])\
    \ {\n                res.Add(l1[i1]);\n                i1++;\n               \
    \ i2++;\n            } else if (l1[i1] < l2[i2]) {\n                i1++;\n  \
    \          } else {\n                i2++;\n            }\n        }\n       \
    \ return res;", "        var l = new List<long>();\n        var i1 = 0;\n    \
    \    var i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n         \
    \   if (l1[i1] == l2[i2]) {\n                l.Add(l1[i1]);\n                i1++;\n\
    \                i2++;\n            } else if (l1[i1] < l2[i2]) {\n          \
    \      i1++;\n            } else {\n                i2++;\n            }\n   \
    \     }\n        return l;", "        var l = new List<long>();\n        foreach\
    \ (var e in l1) {\n            if (l2.Contains(e)) {\n                l.Add(e);\n\
    \            }\n        }\n        l.Sort();\n        return l;", "        var\
    \ l = new List<long>();\n        foreach (var x in l1) {\n            if (l2.Contains(x))\
    \ {\n                l.Add(x);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        var l = new List<long>();\n        foreach (var\
    \ x in l1) {\n            if (l2.Contains(x)) {\n                l.Add(x);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        var\
    \ l = new List<long>();\n        foreach (var x in l1) {\n            if (l2.Contains(x))\
    \ {\n                l.Add(x);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        List<long> result = new List<long>();\n        int\
    \ i1 = 0;\n        int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count)\
    \ {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return result;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        l1.Sort();\n        l2.Sort();\n        int i1 = 0;\n        int i2 =\
    \ 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                l.Add(l1[i1]);\n                i1++;\n      \
    \          i2++;\n            } else if (l1[i1] < l2[i2]) {\n                i1++;\n\
    \            } else {\n                i2++;\n            }\n        }\n     \
    \   return l;", "        List<long> result = new List<long>();\n        int i1\
    \ = 0;\n        int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n  \
    \              i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return result;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var e in l1) {\n            if (l2.Contains(e)) {\n        \
    \        l.Add(e);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var v in l1) {\n \
    \           if (l2.Contains(v)) {\n                l.Add(v);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        List<long> result\
    \ = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while\
    \ (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n  \
    \              result.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return result;",
  "        List<long> res = new List<long>();\n        foreach (long x in l1) {\n\
    \            if (l2.Contains(x)) {\n                res.Add(x);\n            }\n\
    \        }\n        res.Sort();\n        return res;", "        var l = new List<long>();\n\
    \        foreach (var i in l1) {\n            if (l2.Contains(i)) {\n        \
    \        l.Add(i);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        List<long> result\
    \ = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while\
    \ (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n  \
    \              result.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return result;",
  "        var l = new List<long>();\n        foreach (var x in l1) {\n          \
    \  if (l2.Contains(x)) {\n                l.Add(x);\n            }\n        }\n\
    \        l.Sort();\n        return l;", "        var l = new List<long>();\n \
    \       foreach (var x in l1) {\n            if (l2.Contains(x)) {\n         \
    \       l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        l1.Sort();\n        l2.Sort();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        List<long> result = new List<long>();\n        while (i1 <\
    \ l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n        \
    \        result.Add(l1[i1]);\n                i1++;\n                i2++;\n \
    \           } else if (l1[i1] < l2[i2]) {\n                i1++;\n           \
    \ } else {\n                i2++;\n            }\n        }\n        return result;",
  "        var l = new List<long>();\n        foreach (var x in l1) {\n          \
    \  if (l2.Contains(x)) {\n                l.Add(x);\n            }\n        }\n\
    \        l.Sort();\n        return l;", "        var l = new List<long>();\n \
    \       foreach (var x in l1) {\n            if (l2.Contains(x)) {\n         \
    \       l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var s1 = new HashSet<long>(l1);\n\
    \        var s2 = new HashSet<long>(l2);\n        s1.IntersectWith(s2);\n    \
    \    var res = new List<long>(s1);\n        res.Sort();\n        return res;",
  "        var l = new List<long>();\n        foreach (var x in l1) {\n          \
    \  if (l2.Contains(x)) {\n                l.Add(x);\n            }\n        }\n\
    \        l.Sort();\n        return l;", "        var l = new List<long>();\n \
    \       foreach (var x in l1) {\n            if (l2.Contains(x)) {\n         \
    \       l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        int i1 = 0, i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                l.Add(l1[i1]);\n       \
    \         i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return l;", "        List<long> common = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while (i1 < l1.Count && i2\
    \ < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n                common.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return common;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        int i1 = 0, i2 = 0;\n     \
    \   while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2])\
    \ {\n                l.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return l;",
  "        var l = new List<long>();\n        foreach (var x in l1) {\n          \
    \  if (l2.Contains(x)) {\n                l.Add(x);\n            }\n        }\n\
    \        l.Sort();\n        return l;", "        var l = new List<long>();\n \
    \       foreach (var x in l1) {\n            if (l2.Contains(x)) {\n         \
    \       l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var e in l1) {\n \
    \           if (l2.Contains(e)) {\n                l.Add(e);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        List<long> common\
    \ = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while\
    \ (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n  \
    \              common.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return common;",
  "        var l = new List<long>();\n        var i1 = 0;\n        var i2 = 0;\n \
    \       while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2])\
    \ {\n                l.Add(l1[i1]);\n                i1++;\n                i2++;\n\
    \            } else if (l1[i1] < l2[i2]) {\n                i1++;\n          \
    \  } else {\n                i2++;\n            }\n        }\n        return l;",
  "        var s1 = new HashSet<long>(l1);\n        var s2 = new HashSet<long>(l2);\n\
    \        s1.IntersectWith(s2);\n        var l = new List<long>(s1);\n        l.Sort();\n\
    \        return l;", "        l1.Sort();\n        l2.Sort();\n        int i1 =\
    \ 0;\n        int i2 = 0;\n        List<long> result = new List<long>();\n   \
    \     while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2])\
    \ {\n                result.Add(l1[i1]);\n                i1++;\n            \
    \    i2++;\n            } else if (l1[i1] < l2[i2]) {\n                i1++;\n\
    \            } else {\n                i2++;\n            }\n        }\n     \
    \   return result;", "        var l = new List<long>();\n        if (l1.Count\
    \ == 0 || l2.Count == 0) return l;\n        l1.Sort();\n        l2.Sort();\n \
    \       int i1 = 0, i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                l.Add(l1[i1]);\n       \
    \         i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return l;", "        var l = new List<long>();\n\
    \        int i1 = 0, i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                l.Add(l1[i1]);\n       \
    \         i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return l;", "        var c = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        c.Add(x);\n            }\n        }\n        c.Sort();\n        return\
    \ c;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var res = new List<long>();\n\
    \        var i1 = 0;\n        var i2 = 0;\n        while (i1 < l1.Count && i2\
    \ < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;", "        var l = new List<long>();\n\
    \        int i1 = 0, i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                l.Add(l1[i1]);\n       \
    \         i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        l1.Sort();\n        l2.Sort();\n        var l = new List<long>();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        while (i1 < l1.Count && i2\
    \ < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n                l.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var e in l1) {\n            if (l2.Contains(e)) {\n        \
    \        l.Add(e);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var c = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                c.Add(x);\n            }\n\
    \        }\n        c.Sort();\n        return c;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var c = new List<long>();\n\
    \        int i1 = 0, i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                c.Add(l1[i1]);\n       \
    \         i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return c;", "        l1.Sort();\n        l2.Sort();\n\
    \        var i1 = 0;\n        var i2 = 0;\n        var result = new List<long>();\n\
    \        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2])\
    \ {\n                result.Add(l1[i1]);\n                i1++;\n            \
    \    i2++;\n            } else if (l1[i1] < l2[i2]) {\n                i1++;\n\
    \            } else {\n                i2++;\n            }\n        }\n     \
    \   return result;", "        var l = new List<long>();\n        foreach (var\
    \ x in l1) {\n            if (l2.Contains(x)) {\n                l.Add(x);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        List<long>\
    \ result = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n     \
    \   while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2])\
    \ {\n                result.Add(l1[i1]);\n                i1++;\n            \
    \    i2++;\n            } else if (l1[i1] < l2[i2]) {\n                i1++;\n\
    \            } else {\n                i2++;\n            }\n        }\n     \
    \   return result;", "        List<long> res = new List<long>();\n        int\
    \ i1 = 0, i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n        \
    \    if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n             \
    \   i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2]) {\n\
    \                i1++;\n            } else {\n                i2++;\n        \
    \    }\n        }\n        return res;", "        List<long> res = new List<long>();\n\
    \        int i1 = 0, i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n     \
    \           i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return res;", "        List<long> res = new List<long>();\n\
    \        int i1 = 0, i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n     \
    \           i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return res;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var common = new List<long>();\n        int i1 = 0, i2 = 0;\n\
    \        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2])\
    \ {\n                common.Add(l1[i1]);\n                i1++;\n            \
    \    i2++;\n            } else if (l1[i1] < l2[i2]) {\n                i1++;\n\
    \            } else {\n                i2++;\n            }\n        }\n     \
    \   return common;", "        var l = new List<long>();\n        foreach (var\
    \ x in l1) {\n            if (l2.Contains(x)) {\n                l.Add(x);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        var\
    \ l = new List<long>();\n        foreach (var x in l1) {\n            if (l2.Contains(x))\
    \ {\n                l.Add(x);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        List<long> res = new List<long>();\n        int\
    \ i1 = 0, i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n        \
    \    if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n             \
    \   i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2]) {\n\
    \                i1++;\n            } else {\n                i2++;\n        \
    \    }\n        }\n        return res;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var e in l1) {\n \
    \           if (l2.Contains(e)) {\n                l.Add(e);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        l1.Sort();\n     \
    \   l2.Sort();\n        int i1 = 0;\n        int i2 = 0;\n        List<long> res\
    \ = new List<long>();\n        while (i1 < l1.Count && i2 < l2.Count) {\n    \
    \        if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n         \
    \       i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return res;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        List<long> res = new List<long>();\n        int i1 = 0, i2 = 0;\n\
    \        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2])\
    \ {\n                res.Add(l1[i1]);\n                i1++;\n               \
    \ i2++;\n            } else if (l1[i1] < l2[i2]) {\n                i1++;\n  \
    \          } else {\n                i2++;\n            }\n        }\n       \
    \ return res;", "        var l = new List<long>();\n        foreach (var x in\
    \ l1) {\n            if (l2.Contains(x)) {\n                l.Add(x);\n      \
    \      }\n        }\n        l.Sort();\n        return l;", "        var l = new\
    \ List<long>();\n        foreach (var x in l1) {\n            if (l2.Contains(x))\
    \ {\n                l.Add(x);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        var l = new List<long>();\n        foreach (var\
    \ x in l1) {\n            if (l2.Contains(x)) {\n                l.Add(x);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        var\
    \ l = new List<long>();\n        foreach (var x in l1) {\n            if (l2.Contains(x))\
    \ {\n                l.Add(x);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        var l = new List<long>();\n        foreach (var\
    \ x in l1) {\n            if (l2.Contains(x)) {\n                l.Add(x);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        l1.Sort();\n\
    \        l2.Sort();\n        int i1 = 0;\n        int i2 = 0;\n        List<long>\
    \ result = new List<long>();\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n  \
    \              i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return result;", "        l1.Sort();\n        l2.Sort();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        List<long> common = new List<long>();\n\
    \        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2])\
    \ {\n                common.Add(l1[i1]);\n                i1++;\n            \
    \    i2++;\n            } else if (l1[i1] < l2[i2]) {\n                i1++;\n\
    \            } else {\n                i2++;\n            }\n        }\n     \
    \   return common;", "        var l = new List<long>();\n        foreach (var\
    \ x in l1) {\n            if (l2.Contains(x)) {\n                l.Add(x);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        var\
    \ l = new List<long>();\n        foreach (var e in l1) {\n            if (l2.Contains(e))\
    \ {\n                l.Add(e);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        var l = new List<long>();\n        foreach (var\
    \ e in l1) {\n            if (l2.Contains(e)) {\n                l.Add(e);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        var\
    \ l = new List<long>();\n        foreach (var x in l1) {\n            if (l2.Contains(x))\
    \ {\n                l.Add(x);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        var l = new List<long>();\n        foreach (var\
    \ x in l1) {\n            if (l2.Contains(x)) {\n                l.Add(x);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        var\
    \ l = new List<long>();\n        foreach (var x in l1) {\n            if (l2.Contains(x))\
    \ {\n                l.Add(x);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        var l = new List<long>();\n        foreach (var\
    \ x in l1) {\n            if (l2.Contains(x)) {\n                l.Add(x);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        var\
    \ l = new List<long>();\n        foreach (var x in l1) {\n            if (l2.Contains(x))\
    \ {\n                l.Add(x);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        List<long> res = new List<long>();\n        int\
    \ i1 = 0, i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n        \
    \    if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n             \
    \   i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2]) {\n\
    \                i1++;\n            } else {\n                i2++;\n        \
    \    }\n        }\n        return res;", "        l1.Sort();\n        l2.Sort();\n\
    \        int i1 = 0;\n        int i2 = 0;\n        List<long> result = new List<long>();\n\
    \        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2])\
    \ {\n                result.Add(l1[i1]);\n                i1++;\n            \
    \    i2++;\n            } else if (l1[i1] < l2[i2]) {\n                i1++;\n\
    \            } else {\n                i2++;\n            }\n        }\n     \
    \   return result;", "        var l = new List<long>();\n        foreach (var\
    \ x in l1) {\n            if (l2.Contains(x)) {\n                l.Add(x);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        var\
    \ l = new List<long>();\n        foreach (var x in l1) {\n            if (l2.Contains(x))\
    \ {\n                l.Add(x);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        var l = new List<long>();\n        foreach (var\
    \ e in l1) {\n            if (l2.Contains(e)) {\n                l.Add(e);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        var\
    \ l = new List<long>();\n        foreach (var x in l1) {\n            if (l2.Contains(x))\
    \ {\n                l.Add(x);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        var l = new List<long>();\n        foreach (var\
    \ x in l1) {\n            if (l2.Contains(x)) {\n                l.Add(x);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        var\
    \ l = new List<long>();\n        foreach (var x in l1) {\n            if (l2.Contains(x))\
    \ {\n                l.Add(x);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        l1.Sort();\n        l2.Sort();\n        List<long>\
    \ common = new List<long>();\n        int i1 = 0;\n        int i2 = 0;\n     \
    \   while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2])\
    \ {\n                common.Add(l1[i1]);\n                i1++;\n            \
    \    i2++;\n            } else if (l1[i1] < l2[i2]) {\n                i1++;\n\
    \            } else {\n                i2++;\n            }\n        }\n     \
    \   return common;", "        var l = new List<long>();\n        foreach (var\
    \ x in l1) {\n            if (l2.Contains(x)) {\n                l.Add(x);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        var\
    \ l = new List<long>();\n        foreach (var x in l1) {\n            if (l2.Contains(x))\
    \ {\n                l.Add(x);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        var l = new List<long>();\n        foreach (var\
    \ x in l1) {\n            if (l2.Contains(x)) {\n                l.Add(x);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        var\
    \ l = new List<long>();\n        foreach (var x in l1) {\n            if (l2.Contains(x))\
    \ {\n                l.Add(x);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        var l = new List<long>();\n        foreach (var\
    \ v in l1) {\n            if (l2.Contains(v)) {\n                l.Add(v);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        var\
    \ l = new List<long>();\n        l1.Sort();\n        l2.Sort();\n        int i1\
    \ = 0;\n        int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                l.Add(l1[i1]);\n       \
    \         i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return l;", "        List<long> res = new List<long>();\n\
    \        int i1 = 0, i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n     \
    \           i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return res;", "        var l = new List<long>();\n\
    \        foreach (var e in l1) {\n            if (l2.Contains(e)) {\n        \
    \        l.Add(e);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        List<long> res = new List<long>();\n        int i1 = 0, i2 = 0;\n\
    \        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2])\
    \ {\n                res.Add(l1[i1]);\n                i1++;\n               \
    \ i2++;\n            } else if (l1[i1] < l2[i2]) {\n                i1++;\n  \
    \          } else {\n                i2++;\n            }\n        }\n       \
    \ return res;", "        var l = new List<long>();\n        foreach (var x in\
    \ l1) {\n            if (l2.Contains(x)) {\n                l.Add(x);\n      \
    \      }\n        }\n        l.Sort();\n        return l;", "        var l = new\
    \ List<long>();\n        foreach (var x in l1) {\n            if (l2.Contains(x))\
    \ {\n                l.Add(x);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        var l = new List<long>();\n        foreach (var\
    \ x in l1) {\n            if (l2.Contains(x)) {\n                l.Add(x);\n \
    \           }\n        }\n        l.Sort();\n        return l;", "        l1.Sort();\n\
    \        l2.Sort();\n        int i1 = 0;\n        int i2 = 0;\n        List<long>\
    \ common = new List<long>();\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                common.Add(l1[i1]);\n  \
    \              i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return common;", "        var c = new List<long>();\n\
    \        int i1 = 0, i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n\
    \            if (l1[i1] == l2[i2]) {\n                c.Add(l1[i1]);\n       \
    \         i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return c;", "        var s1 = new HashSet<long>(l1);\n\
    \        var s2 = new HashSet<long>(l2);\n        s1.IntersectWith(s2);\n    \
    \    var l = new List<long>(s1);\n        l.Sort();\n        return l;", "   \
    \     var l = new List<long>();\n        foreach (var e in l1) {\n           \
    \ if (l2.Contains(e)) {\n                l.Add(e);\n            }\n        }\n\
    \        l.Sort();\n        return l;", "        var l = new List<long>();\n \
    \       foreach (var x in l1) {\n            if (l2.Contains(x)) {\n         \
    \       l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        l1.Sort();\n        l2.Sort();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        List<long> result = new List<long>();\n        while (i1 <\
    \ l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n        \
    \        result.Add(l1[i1]);\n                i1++;\n                i2++;\n \
    \           } else if (l1[i1] < l2[i2]) {\n                i1++;\n           \
    \ } else {\n                i2++;\n            }\n        }\n        return result;",
  "        var l = new List<long>();\n        int i1 = 0, i2 = 0;\n        while (i1\
    \ < l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n      \
    \          l.Add(l1[i1]);\n                i1++;\n                i2++;\n    \
    \        } else if (l1[i1] < l2[i2]) {\n                i1++;\n            } else\
    \ {\n                i2++;\n            }\n        }\n        return l;", "  \
    \      l1.Sort();\n        l2.Sort();\n        int i1 = 0;\n        int i2 = 0;\n\
    \        List<long> result = new List<long>();\n        while (i1 < l1.Count &&\
    \ i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return result;", "        var l = new List<long>();\n\
    \        foreach (var e in l1) {\n            if (l2.Contains(e)) {\n        \
    \        l.Add(e);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        List<long> common = new List<long>();\n        int i1 = 0;\n \
    \       int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n      \
    \      if (l1[i1] == l2[i2]) {\n                common.Add(l1[i1]);\n        \
    \        i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return common;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var s1 = new HashSet<long>(l1);\n\
    \        var s2 = new HashSet<long>(l2);\n        s1.IntersectWith(s2);\n    \
    \    var l = new List<long>(s1);\n        l.Sort();\n        return l;", "   \
    \     var l = new List<long>();\n        foreach (var x in l1) {\n           \
    \ if (l2.Contains(x)) {\n                l.Add(x);\n            }\n        }\n\
    \        l.Sort();\n        return l;", "        var l = new List<long>();\n \
    \       foreach (var x in l1) {\n            if (l2.Contains(x)) {\n         \
    \       l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        l1.Sort();\n        l2.Sort();\n        int i1 = 0;\n        int\
    \ i2 = 0;\n        List<long> result = new List<long>();\n        while (i1 <\
    \ l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n        \
    \        result.Add(l1[i1]);\n                i1++;\n                i2++;\n \
    \           } else if (l1[i1] < l2[i2]) {\n                i1++;\n           \
    \ } else {\n                i2++;\n            }\n        }\n        return result;",
  "        var l = new List<long>();\n        foreach (var x in l1) {\n          \
    \  if (l2.Contains(x)) {\n                l.Add(x);\n            }\n        }\n\
    \        l.Sort();\n        return l;", "        var l = new List<long>();\n \
    \       var s = new HashSet<long>();\n        foreach (var e in l1) {\n      \
    \      if (l2.Contains(e)) {\n                if (!s.Contains(e)) {\n        \
    \            s.Add(e);\n                    l.Add(e);\n                }\n   \
    \         }\n        }\n        l.Sort();\n        return l;", "        var l\
    \ = new List<long>();\n        foreach (var x in l1) {\n            if (l2.Contains(x))\
    \ {\n                l.Add(x);\n            }\n        }\n        l.Sort();\n\
    \        return l;", "        List<long> result = new List<long>();\n        int\
    \ i1 = 0;\n        int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count)\
    \ {\n            if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return result;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var e in l1) {\n \
    \           if (l2.Contains(e)) {\n                l.Add(e);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        List<long> res = new\
    \ List<long>();\n        int i1 = 0, i2 = 0;\n        while (i1 < l1.Count &&\
    \ i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;", "        l1.Sort();\n       \
    \ l2.Sort();\n        int i1 = 0;\n        int i2 = 0;\n        List<long> result\
    \ = new List<long>();\n        while (i1 < l1.Count && i2 < l2.Count) {\n    \
    \        if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n      \
    \          i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return result;", "        var res = new List<long>();\n\
    \        var i1 = 0;\n        var i2 = 0;\n        while (i1 < l1.Count && i2\
    \ < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n                res.Add(l1[i1]);\n\
    \                i1++;\n                i2++;\n            } else if (l1[i1] <\
    \ l2[i2]) {\n                i1++;\n            } else {\n                i2++;\n\
    \            }\n        }\n        return res;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        List<long> result = new List<long>();\n        int i1 = 0;\n \
    \       int i2 = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n      \
    \      if (l1[i1] == l2[i2]) {\n                result.Add(l1[i1]);\n        \
    \        i1++;\n                i2++;\n            } else if (l1[i1] < l2[i2])\
    \ {\n                i1++;\n            } else {\n                i2++;\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        int i1 = 0;\n        int i2 = 0;\n        while (i1 <\
    \ l1.Count && i2 < l2.Count) {\n            if (l1[i1] == l2[i2]) {\n        \
    \        result.Add(l1[i1]);\n                i1++;\n                i2++;\n \
    \           } else if (l1[i1] < l2[i2]) {\n                i1++;\n           \
    \ } else {\n                i2++;\n            }\n        }\n        return result;",
  "        var l = new List<long>();\n        foreach (var x in l1) {\n          \
    \  if (l2.Contains(x)) {\n                l.Add(x);\n            }\n        }\n\
    \        l.Sort();\n        return l;", "        var l = new List<long>();\n \
    \       foreach (var x in l1) {\n            if (l2.Contains(x)) {\n         \
    \       l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var e in l1) {\n \
    \           if (l2.Contains(e)) {\n                l.Add(e);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var x in l1) {\n \
    \           if (l2.Contains(x)) {\n                l.Add(x);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        foreach (var e in l1) {\n \
    \           if (l2.Contains(e)) {\n                l.Add(e);\n            }\n\
    \        }\n        l.Sort();\n        return l;", "        var l = new List<long>();\n\
    \        foreach (var x in l1) {\n            if (l2.Contains(x)) {\n        \
    \        l.Add(x);\n            }\n        }\n        l.Sort();\n        return\
    \ l;", "        var l = new List<long>();\n        var i1 = 0;\n        var i2\
    \ = 0;\n        while (i1 < l1.Count && i2 < l2.Count) {\n            if (l1[i1]\
    \ == l2[i2]) {\n                l.Add(l1[i1]);\n                i1++;\n      \
    \          i2++;\n            } else if (l1[i1] < l2[i2]) {\n                i1++;\n\
    \            } else {\n                i2++;\n            }\n        }\n     \
    \   return l;"]
stop_tokens:
- "\n    }\n"
