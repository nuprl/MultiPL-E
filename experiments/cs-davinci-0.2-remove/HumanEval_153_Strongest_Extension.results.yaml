language: cs
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        double max_strength = 0;\n        string strongest_extension
    = \"\";\n        foreach (string extension in extensions) {\n            double
    strength = 0;\n            foreach (char c in extension) {\n                if
    (Char.IsUpper(c)) {\n                    strength += 1;\n                } else
    {\n                    strength -= 1;\n                }\n            }\n            if
    (strength > max_strength) {\n                max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832c8250715940da8a61528e866fb30c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <832c8250715940da8a61528e866fb30c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest_extension = \"\";\n        double strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            double strength
    = 0;\n            for (int i = 0; i < extension.Length; i++) {\n                if
    (Char.IsUpper(extension[i])) {\n                    strength += 1;\n                }
    else {\n                    strength -= 1;\n                }\n            }\n
    \           if (strength > strongest_strength) {\n                strongest_strength
    = strength;\n                strongest_extension = extension;\n            }\n
    \       }\n        return class_name + \".\" + strongest_extension;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <652460ca502c4de5a4972cea471f80fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <652460ca502c4de5a4972cea471f80fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest = \"\";\n        double strength = 0;\n
    \       foreach (string ext in extensions) {\n            int cap = 0;\n            int
    sm = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))
    {\n                    cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            double curr_strength = (double)cap
    - (double)sm;\n            if (curr_strength > strength) {\n                strength
    = curr_strength;\n                strongest = ext;\n            }\n        }\n
    \       return class_name + \".\" + strongest;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <026e7797135f4a1090afb651ea8bd8df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <026e7797135f4a1090afb651ea8bd8df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest = \"\";\n        double strength = 0;\n
    \       foreach (string ext in extensions) {\n            double st = 0;\n            foreach
    (char c in ext) {\n                if (char.IsUpper(c)) {\n                    st++;\n
    \               } else {\n                    st--;\n                }\n            }\n
    \           if (st > strength) {\n                strength = st;\n                strongest
    = ext;\n            }\n        }\n        return class_name + \".\" + strongest;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cbb717552e1f48858cedc1f8671375dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cbb717552e1f48858cedc1f8671375dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest = \"\";\n        double strength = 0;\n
    \       foreach (string ext in extensions) {\n            int caps = 0;\n            int
    smalls = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))
    {\n                    caps++;\n                } else {\n                    smalls++;\n
    \               }\n            }\n            double str = (double)caps - (double)smalls;\n
    \           if (str > strength) {\n                strength = str;\n                strongest
    = ext;\n            }\n        }\n        return class_name + \".\" + strongest;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7de9d0786cb344dd99cdd6cbd663ec2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7de9d0786cb344dd99cdd6cbd663ec2c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        double max = 0;\n        string max_ext = \"\";\n        foreach
    (string ext in extensions) {\n            double strength = 0;\n            for
    (int i = 0; i < ext.Length; i++) {\n                if (char.IsUpper(ext[i]))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > max) {\n                max
    = strength;\n                max_ext = ext;\n            }\n        }\n        return
    class_name + \".\" + max_ext;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <964d211613b04d8283e487c7a4efa750>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <964d211613b04d8283e487c7a4efa750>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        var max_strength = extensions.Select(ext => {\n            var
    caps = ext.Count(c => char.IsUpper(c));\n            var smalls = ext.Count(c
    => char.IsLower(c));\n            return caps - smalls;\n        }).Max();\n        var
    strongest = extensions.First(ext => {\n            var caps = ext.Count(c => char.IsUpper(c));\n
    \           var smalls = ext.Count(c => char.IsLower(c));\n            return
    caps - smalls == max_strength;\n        });\n        return class_name + \".\"
    + strongest;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        int max = 0;\n        string strongest = \"\";\n        foreach
    (string ext in extensions) {\n            int cap = 0;\n            int sm = 0;\n
    \           foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n
    \                   cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            if (cap - sm > max) {\n                max
    = cap - sm;\n                strongest = ext;\n            }\n        }\n        return
    class_name + \".\" + strongest;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f53cba47492f4f27b422f61142b400fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f53cba47492f4f27b422f61142b400fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here.\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc293dec4bee4f2ba36cbe2bd9ea0ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc293dec4bee4f2ba36cbe2bd9ea0ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest = \"\";\n        double strength = 0;\n
    \       foreach (string ext in extensions) {\n            double curr = 0;\n            for
    (int i = 0; i < ext.Length; i++) {\n                if (char.IsUpper(ext[i]))
    {\n                    curr++;\n                } else {\n                    curr--;\n
    \               }\n            }\n            if (curr > strength) {\n                strength
    = curr;\n                strongest = ext;\n            }\n        }\n        return
    class_name + \".\" + strongest;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dab22f6a3b5b4faeac3edc78e719acc3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dab22f6a3b5b4faeac3edc78e719acc3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest = \"\";\n        double strongest_strength
    = 0;\n        foreach (string ext in extensions) {\n            double strength
    = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > strongest_strength)
    {\n                strongest = ext;\n                strongest_strength = strength;\n
    \           }\n        }\n        return class_name + \".\" + strongest;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <212190ca3af94ad28a21cd3ac7b4e562>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <212190ca3af94ad28a21cd3ac7b4e562>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        int max_strength = 0;\n        string strongest_extension
    = \"\";\n        foreach (string extension in extensions) {\n            int strength
    = 0;\n            for (int i = 0; i < extension.Length; i++) {\n                if
    (Char.IsUpper(extension[i])) {\n                    strength++;\n                }
    else {\n                    strength--;\n                }\n            }\n            if
    (strength > max_strength) {\n                max_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83e6244b8c094148ad1dc3f0c51e5170>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83e6244b8c094148ad1dc3f0c51e5170>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        int max = 0;\n        string result = \"\";\n        foreach
    (string ext in extensions) {\n            int cap = 0;\n            int sm = 0;\n
    \           foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n
    \                   cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            if (cap - sm > max) {\n                max
    = cap - sm;\n                result = ext;\n            }\n        }\n        return
    class_name + \".\" + result;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e3e0545ca5a4dee91a1e9d2ee1dd65d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e3e0545ca5a4dee91a1e9d2ee1dd65d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest_extension = \"\";\n        double strength
    = 0;\n        foreach (string extension in extensions) {\n            double current_strength
    = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    current_strength++;\n                } else {\n                    current_strength--;\n
    \               }\n            }\n            if (current_strength > strength)
    {\n                strength = current_strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70e9fc44885a4c7a84e7a25f1cc275f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70e9fc44885a4c7a84e7a25f1cc275f4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a8b9a7ce8ad490296a6f108f0be1199>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a8b9a7ce8ad490296a6f108f0be1199>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        string strongestExtension =
    \"\";\n        double strongestStrength = 0;\n        foreach (string extension
    in extensions) {\n            double strength = 0;\n            for (int i = 0;
    i < extension.Length; i++) {\n                if (Char.IsUpper(extension[i]))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > strongestStrength)
    {\n                strongestStrength = strength;\n                strongestExtension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongestExtension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c2861a683914b93a54c3c331c113d43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4c2861a683914b93a54c3c331c113d43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest = \"\";\n        double strength = -1;\n
    \       foreach (string ext in extensions) {\n            int cap = 0;\n            int
    sm = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))
    {\n                    cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            double curr_strength = (double)cap
    / sm;\n            if (curr_strength > strength) {\n                strength =
    curr_strength;\n                strongest = ext;\n            }\n        }\n        return
    class_name + \".\" + strongest;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <452a47548b1a4c87bfd58fec4dc31180>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <452a47548b1a4c87bfd58fec4dc31180>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new
    string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e43e4009f78a4805aaad53c9abc0fe72>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e43e4009f78a4805aaad53c9abc0fe72>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest = \"\";\n        double strongest_strength
    = 0;\n        foreach (string ext in extensions) {\n            double strength
    = 0;\n            foreach (char c in ext) {\n                if (Char.IsUpper(c))
    {\n                    strength += 1;\n                } else {\n                    strength
    -= 1;\n                }\n            }\n            if (strength > strongest_strength)
    {\n                strongest = ext;\n                strongest_strength = strength;\n
    \           }\n        }\n        return class_name + \".\" + strongest;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1b54bd5bd6d4aee9c5fd4f33cf66940>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1b54bd5bd6d4aee9c5fd4f33cf66940>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new
    string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e43e4009f78a4805aaad53c9abc0fe72>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e43e4009f78a4805aaad53c9abc0fe72>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        int max = 0;\n        string strongest = \"\";\n        foreach
    (string ext in extensions) {\n            int cap = 0;\n            int sm = 0;\n
    \           foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n
    \                   cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            if (cap - sm > max) {\n                max
    = cap - sm;\n                strongest = ext;\n            }\n        }\n        return
    class_name + \".\" + strongest;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f53cba47492f4f27b422f61142b400fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f53cba47492f4f27b422f61142b400fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        int max = 0;\n        string result = \"\";\n        foreach
    (string s in extensions) {\n            int caps = 0;\n            int small =
    0;\n            foreach (char c in s) {\n                if (char.IsUpper(c))
    {\n                    caps++;\n                } else {\n                    small++;\n
    \               }\n            }\n            if (caps - small > max) {\n                max
    = caps - small;\n                result = s;\n            }\n        }\n        return
    class_name + \".\" + result;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b43dc34d9b74430a876938671e437d43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b43dc34d9b74430a876938671e437d43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        var strongest = extensions.Select(e
    => new {\n            Name = e,\n            Strength = e.Count(c => char.IsUpper(c))
    - e.Count(c => char.IsLower(c))\n        }).OrderByDescending(e => e.Strength).ThenBy(e
    => e.Name).First();\n        return class_name + \".\" + strongest.Name;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fffd07984d5a4c00a3d389c5f096e28d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fffd07984d5a4c00a3d389c5f096e28d>:0
    \n"
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest = \"\";\n        double strength = 0;\n
    \       foreach (string ext in extensions) {\n            double curr_strength
    = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))
    {\n                    curr_strength++;\n                } else {\n                    curr_strength--;\n
    \               }\n            }\n            if (curr_strength > strength) {\n
    \               strength = curr_strength;\n                strongest = ext;\n
    \           }\n        }\n        return class_name + \".\" + strongest;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d3e0d303358441e8447360e74fdf8e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d3e0d303358441e8447360e74fdf8e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest = \"\";\n        double strength = 0;\n
    \       foreach (string extension in extensions) {\n            double current_strength
    = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    current_strength++;\n                } else {\n                    current_strength--;\n
    \               }\n            }\n            if (current_strength > strength)
    {\n                strength = current_strength;\n                strongest = extension;\n
    \           }\n        }\n        return class_name + \".\" + strongest;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1a27a9e89e14bfca7e341f10ff17e02>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1a27a9e89e14bfca7e341f10ff17e02>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        int max = 0;\n        string strongest = \"\";\n        foreach
    (string s in extensions) {\n            int cap = 0;\n            int sm = 0;\n
    \           foreach (char c in s) {\n                if (char.IsUpper(c)) {\n
    \                   cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            if (cap - sm > max) {\n                max
    = cap - sm;\n                strongest = s;\n            }\n        }\n        return
    class_name + \".\" + strongest;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01c117cf6c054ace9e8d03d287052aea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <01c117cf6c054ace9e8d03d287052aea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest = \"\";\n        double strength = 0;\n
    \       foreach (string ext in extensions) {\n            double curr_strength
    = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))
    {\n                    curr_strength++;\n                } else {\n                    curr_strength--;\n
    \               }\n            }\n            if (curr_strength > strength) {\n
    \               strength = curr_strength;\n                strongest = ext;\n
    \           }\n        }\n        return class_name + \".\" + strongest;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d3e0d303358441e8447360e74fdf8e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d3e0d303358441e8447360e74fdf8e3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new
    string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e43e4009f78a4805aaad53c9abc0fe72>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e43e4009f78a4805aaad53c9abc0fe72>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest_extension = \"\";\n        float strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            float strength
    = 0;\n            foreach (char c in extension) {\n                if (Char.IsUpper(c))
    {\n                    strength += 1;\n                } else {\n                    strength
    -= 1;\n                }\n            }\n            if (strength > strongest_strength)
    {\n                strongest_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0461027a464049c0857a742c11ab703c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0461027a464049c0857a742c11ab703c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest = \"\";\n        double strength = -1;\n
    \       foreach (string ext in extensions) {\n            int cap = 0;\n            int
    sm = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))
    {\n                    cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            double curr_strength = (double)cap
    - (double)sm;\n            if (curr_strength > strength) {\n                strength
    = curr_strength;\n                strongest = ext;\n            }\n        }\n
    \       return class_name + \".\" + strongest;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new
    List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f68620c135e44c2b841f8ffd172304a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f68620c135e44c2b841f8ffd172304a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        int max = 0;\n        string
    result = \"\";\n        foreach (string ext in extensions) {\n            int
    cap = 0;\n            int sm = 0;\n            foreach (char c in ext) {\n                if
    (char.IsUpper(c)) {\n                    cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            if (cap - sm > max) {\n                max
    = cap - sm;\n                result = ext;\n            }\n        }\n        return
    class_name + \".\" + result;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61c157f4ea58401496f5b49de41684df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <61c157f4ea58401496f5b49de41684df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here.\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc293dec4bee4f2ba36cbe2bd9ea0ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dc293dec4bee4f2ba36cbe2bd9ea0ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest = \"\";\n        double strength = 0;\n
    \       foreach (string ext in extensions) {\n            double cap = 0;\n            double
    sm = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))
    {\n                    cap++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            double s = cap - sm;\n            if
    (s > strength) {\n                strength = s;\n                strongest = ext;\n
    \           }\n        }\n        return class_name + \".\" + strongest;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad73d436ba9d4a82b70e783999aa2df9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ad73d436ba9d4a82b70e783999aa2df9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest = \"\";\n        double strength = 0;\n
    \       foreach (string ext in extensions) {\n            int caps = 0;\n            int
    sm = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))
    {\n                    caps++;\n                } else {\n                    sm++;\n
    \               }\n            }\n            double str = (double)caps - (double)sm;\n
    \           if (str > strength) {\n                strength = str;\n                strongest
    = ext;\n            }\n        }\n        return class_name + \".\" + strongest;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1af75d43ca914139876277ef40fd19af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1af75d43ca914139876277ef40fd19af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return null;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0002e] in <9f1bd61215db4a638b7770a788297d46>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0002e] in <9f1bd61215db4a638b7770a788297d46>:0
    \n"
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        double strength = 0;\n        string strongest = \"\";\n
    \       foreach (string extension in extensions) {\n            int caps = 0;\n
    \           int smalls = 0;\n            foreach (char c in extension) {\n                if
    (char.IsUpper(c)) {\n                    caps++;\n                } else {\n                    smalls++;\n
    \               }\n            }\n            double curr_strength = caps - smalls;\n
    \           if (curr_strength > strength) {\n                strength = curr_strength;\n
    \               strongest = extension;\n            }\n        }\n        return
    class_name + \".\" + strongest;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed2fac881d82450c800fbe59d70e3bc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed2fac881d82450c800fbe59d70e3bc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1173c7bf59b54d7e8fced79984955163>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        var strongest = extensions.Select(x
    => new {\n            name = x,\n            strength = x.Count(y => char.IsUpper(y))
    - x.Count(y => char.IsLower(y))\n        }).OrderByDescending(x => x.strength).ThenBy(x
    => x.name).First();\n        return class_name + \".\" + strongest.name;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <658cbe0167a84e8ba4ebaf2939857870>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <658cbe0167a84e8ba4ebaf2939857870>:0
    \n"
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest = \"\";\n        double strongest_strength
    = -1;\n        foreach (string ext in extensions) {\n            double strength
    = 0;\n            for (int i = 0; i < ext.Length; i++) {\n                if (Char.IsUpper(ext[i]))
    {\n                    strength++;\n                } else {\n                    strength--;\n
    \               }\n            }\n            if (strength > strongest_strength)
    {\n                strongest = ext;\n                strongest_strength = strength;\n
    \           }\n        }\n        return class_name + \".\" + strongest;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <000d7b5bf8164ebcbeb0d4c49e26b941>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <000d7b5bf8164ebcbeb0d4c49e26b941>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest_extension = \"\";\n        double strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            double strength
    = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))
    {\n                    strength += 1;\n                } else {\n                    strength
    -= 1;\n                }\n            }\n            if (strength > strongest_strength)
    {\n                strongest_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd547a518ac44bd6a77da0fa78705790>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cd547a518ac44bd6a77da0fa78705790>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest_extension = \"\";\n        double strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            int capital_letters
    = 0;\n            int small_letters = 0;\n            foreach (char c in extension)
    {\n                if (Char.IsUpper(c)) {\n                    capital_letters++;\n
    \               } else {\n                    small_letters++;\n                }\n
    \           }\n            double strength = (double)capital_letters - (double)small_letters;\n
    \           if (strength > strongest_strength) {\n                strongest_strength
    = strength;\n                strongest_extension = extension;\n            }\n
    \       }\n        return class_name + \".\" + strongest_extension;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55b9df5566c6458cad8daefecce3644a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55b9df5566c6458cad8daefecce3644a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest = \"\";\n        double strength = 0;\n
    \       foreach (string ext in extensions) {\n            int cap = 0;\n            int
    sm = 0;\n            foreach (char c in ext) {\n                if (c >= 'A' &&
    c <= 'Z') {\n                    cap++;\n                } else if (c >= 'a' &&
    c <= 'z') {\n                    sm++;\n                }\n            }\n            double
    str = (double)cap - (double)sm;\n            if (str > strength) {\n                strength
    = str;\n                strongest = ext;\n            }\n        }\n        return
    class_name + \".\" + strongest;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"tEN\",
    (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4678f1aa80141708f2eed5678a65ea3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4678f1aa80141708f2eed5678a65ea3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code goes here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <46efd4c866aa4c8aa91bcb70336460e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        return \"\";\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <029fea881f474d3da72b662f9ee1ebf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Write your code here\n        // To print results to
    the standard output you can use Console.WriteLine()\n        // Example:\n        //
    Console.WriteLine(\"Hello world!\");\n        string strongestExtension = \"\";\n
    \       double strength = 0;\n        foreach (string extension in extensions)
    {\n            double currentStrength = 0;\n            for (int i = 0; i < extension.Length;
    i++) {\n                if (Char.IsUpper(extension[i])) {\n                    currentStrength++;\n
    \               } else {\n                    currentStrength--;\n                }\n
    \           }\n            if (currentStrength > strength) {\n                strength
    = currentStrength;\n                strongestExtension = extension;\n            }\n
    \       }\n        return class_name + \".\" + strongestExtension;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06f7559dfcc74889abbb39a10738c454>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <06f7559dfcc74889abbb39a10738c454>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        string strongest_extension = \"\";\n        double strongest_strength
    = 0;\n        foreach (string extension in extensions) {\n            int caps
    = 0;\n            int smalls = 0;\n            foreach (char c in extension) {\n
    \               if (char.IsUpper(c)) {\n                    caps++;\n                }
    else {\n                    smalls++;\n                }\n            }\n            double
    strength = (double)caps - (double)smalls;\n            if (strength > strongest_strength)
    {\n                strongest_strength = strength;\n                strongest_extension
    = extension;\n            }\n        }\n        return class_name + \".\" + strongest_extension;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f883908c1074b46aba90010668fdfc3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6f883908c1074b46aba90010668fdfc3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976639
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // You will be given the name of a class (a string) and a list
    of extensions.\n    // The extensions are to be used to load additional classes
    to the class. The\n    // strength of the extension is as follows: Let CAP be
    the number of the uppercase\n    // letters in the extension's name, and let SM
    be the number of lowercase letters \n    // in the extension's name, the strength
    is given by the fraction CAP - SM. \n    // You should find the strongest extension
    and return a string in this \n    // format: ClassName.StrongestExtensionName.\n
    \   // If there are two or more extensions with the same strength, you should\n
    \   // choose the one that comes first in the list.\n    // For example, if you
    are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',
    'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since
    'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    //
    Example:\n    public static string StrongestExtension(string class_name, List<string>
    extensions) {\n        // Your code here\n        return \"\";\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"),
    (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n
    \   Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new string[]{(string)\"nani\",
    (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n
    \   Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new string[]{(string)\"t\",
    (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\",
    (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"K\"),
    (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"t234An\",
    (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"__HAHA\"),
    (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\",
    (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"),
    (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"WorkOut\",
    (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\")));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"),
    (new List<string>(new string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\",
    (string)\"WoW\"}))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"_\"),
    (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"_.Bb\")));\n
    \   Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new string[]{(string)\"671235\",
    (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f43386113c3c458ca99ed2effb4d39ec>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659976638
