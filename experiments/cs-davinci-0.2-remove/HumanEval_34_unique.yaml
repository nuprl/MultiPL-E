name: HumanEval_34_unique
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique elements in a list\n    public static List<long>\
  \ Unique(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Unique((new\
  \ List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L,\
  \ (long)9L, (long)0L, (long)123L}))).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))));\n    }\n\n}\n"
completions: ['        return l.Distinct().OrderBy(x => x).ToList();', "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] == l[i - 1])\
    \ {\n                l.RemoveAt(i);\n                i--;\n            }\n   \
    \     }\n        return l;", "        var u = new List<long>();\n        foreach\
    \ (var x in l) {\n            if (!u.Contains(x)) {\n                u.Add(x);\n\
    \            }\n        }\n        u.Sort();\n        return u;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int j = 0;\n        for (int i = 1; i < l.Count; i++) {\n           \
    \ if (l[i] != l[j]) {\n                j++;\n                l[j] = l[i];\n  \
    \          }\n        }\n        j++;\n        return l.GetRange(0, j);", "  \
    \      l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n    \
    \        if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n           \
    \ } else {\n                i++;\n            }\n        }\n        return l;",
  "        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n            if\
    \ (l[i] == l[i - 1]) {\n                l.RemoveAt(i);\n                i--;\n\
    \            }\n        }\n        return l;", "        l.Sort();\n        int\
    \ i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1])\
    \ {\n                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", "        l.Sort();\n        int\
    \ i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1])\
    \ {\n                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", "        l.Sort();\n        int\
    \ i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1])\
    \ {\n                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", "        List<long> u = new List<long>();\n\
    \        foreach (long x in l) {\n            if (!u.Contains(x)) {\n        \
    \        u.Add(x);\n            }\n        }\n        u.Sort();\n        return\
    \ u;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n     \
    \       if (l[i] == l[i - 1]) {\n                l.RemoveAt(i);\n            \
    \    i--;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] == l[i - 1])\
    \ {\n                l.RemoveAt(i);\n                i--;\n            }\n   \
    \     }\n        return l;", "        l.Sort();\n        int i = 0;\n        while\
    \ (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        List<long> u = new List<long>();\n        foreach (long\
    \ x in l) {\n            if (!u.Contains(x)) {\n                u.Add(x);\n  \
    \          }\n        }\n        u.Sort();\n        return u;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        return l.Distinct().ToList();", "        l.Sort();\n        int i = 0;\n\
    \        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n    \
    \            l.RemoveAt(i);\n            } else {\n                i++;\n    \
    \        }\n        }\n        return l;", "        l.Sort();\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] == l[i - 1]) {\n          \
    \      l.RemoveAt(i);\n                i--;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        List<long> u = new List<long>();\n        foreach (long\
    \ x in l) {\n            if (!u.Contains(x)) {\n                u.Add(x);\n  \
    \          }\n        }\n        u.Sort();\n        return u;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        var u = new List<long>();\n        long last = 0;\n        foreach (var\
    \ x in l) {\n            if (x != last) {\n                u.Add(x);\n       \
    \         last = x;\n            }\n        }\n        return u;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] == l[i - 1])\
    \ {\n                l.RemoveAt(i);\n                i--;\n            }\n   \
    \     }\n        return l;", "        l.Sort();\n        int i = 0;\n        while\
    \ (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        List<long> ret = new List<long>();\n        foreach (long\
    \ x in l) {\n            if (!ret.Contains(x)) {\n                ret.Add(x);\n\
    \            }\n        }\n        ret.Sort();\n        return ret;", "      \
    \  l.Sort();\n        int i = 0;\n        while (i < l.Count - 1) {\n        \
    \    if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n            } else\
    \ {\n                i++;\n            }\n        }\n        return l;", "   \
    \     List<long> u = new List<long>();\n        foreach (long x in l) {\n    \
    \        if (!u.Contains(x)) {\n                u.Add(x);\n            }\n   \
    \     }\n        u.Sort();\n        return u;", "        List<long> u = new List<long>();\n\
    \        foreach (long x in l) {\n            if (!u.Contains(x)) {\n        \
    \        u.Add(x);\n            }\n        }\n        u.Sort();\n        return\
    \ u;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        List<long> u = new List<long>();\n        long\
    \ last = -1;\n        foreach (long i in l) {\n            if (i != last) {\n\
    \                u.Add(i);\n                last = i;\n            }\n       \
    \ }\n        return u;", "        l.Sort();\n        int i = 0;\n        while\
    \ (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        List<long> u = new List<long>();\n        foreach (long\
    \ x in l) {\n            if (!u.Contains(x)) {\n                u.Add(x);\n  \
    \          }\n        }\n        u.Sort();\n        return u;", "        List<long>\
    \ u = new List<long>();\n        foreach (long x in l) {\n            if (!u.Contains(x))\
    \ {\n                u.Add(x);\n            }\n        }\n        u.Sort();\n\
    \        return u;", "        l.Sort();\n        int i = 0;\n        while (i\
    \ < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n\
    \            if (l[i] == l[i - 1]) {\n                l.RemoveAt(i);\n       \
    \         i--;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int j = 0;\n        for (int i = 1; i < l.Count; i++) {\n           \
    \ if (l[i] != l[j]) {\n                j++;\n                l[j] = l[i];\n  \
    \          }\n        }\n        return l.GetRange(0, j + 1);", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        List<long>\
    \ u = new List<long>();\n        foreach (long x in l) {\n            if (!u.Contains(x))\
    \ {\n                u.Add(x);\n            }\n        }\n        u.Sort();\n\
    \        return u;", "        l.Sort();\n        int i = 0;\n        while (i\
    \ < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        for (int i = 1; i < l.Count; i++) {\n\
    \            if (l[i] == l[i - 1]) {\n                l.RemoveAt(i);\n       \
    \         i--;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] == l[i - 1])\
    \ {\n                l.RemoveAt(i);\n                i--;\n            }\n   \
    \     }\n        return l;", "        l.Sort();\n        int i = 0;\n        while\
    \ (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        List<long> u = new List<long>();\n        foreach (long\
    \ x in l) {\n            if (!u.Contains(x)) {\n                u.Add(x);\n  \
    \          }\n        }\n        u.Sort();\n        return u;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        List<long>\
    \ u = new List<long>();\n        foreach (long x in l) {\n            if (!u.Contains(x))\
    \ {\n                u.Add(x);\n            }\n        }\n        u.Sort();\n\
    \        return u;", "        List<long> u = new List<long>();\n        foreach\
    \ (long x in l) {\n            if (!u.Contains(x)) {\n                u.Add(x);\n\
    \            }\n        }\n        u.Sort();\n        return u;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] == l[i - 1])\
    \ {\n                l.RemoveAt(i);\n                i--;\n            }\n   \
    \     }\n        return l;", "        l.Sort();\n        int i = 0;\n        while\
    \ (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        List<long> u = new List<long>();\n        foreach (long\
    \ x in l) {\n            if (!u.Contains(x)) {\n                u.Add(x);\n  \
    \          }\n        }\n        u.Sort();\n        return u;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        var u = new List<long>();\n        if (l.Count > 0) {\n            u.Add(l[0]);\n\
    \            for (int i = 1; i < l.Count; i++) {\n                if (l[i] !=\
    \ l[i - 1]) {\n                    u.Add(l[i]);\n                }\n         \
    \   }\n        }\n        return u;", "        l.Sort();\n        int i = 0;\n\
    \        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n    \
    \            l.RemoveAt(i);\n            } else {\n                i++;\n    \
    \        }\n        }\n        return l;", "        l.Sort();\n        int i =\
    \ 0;\n        while (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n\
    \                l.RemoveAt(i);\n            } else {\n                i++;\n\
    \            }\n        }\n        return l;", "        List<long> u = new List<long>();\n\
    \        foreach (long x in l) {\n            if (!u.Contains(x)) {\n        \
    \        u.Add(x);\n            }\n        }\n        u.Sort();\n        return\
    \ u;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count - 1)\
    \ {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n   \
    \         } else {\n                i++;\n            }\n        }\n        return\
    \ l;", "        l.Sort();\n        var u = new List<long>();\n        long prev\
    \ = -1;\n        foreach (var x in l) {\n            if (x != prev) {\n      \
    \          u.Add(x);\n                prev = x;\n            }\n        }\n  \
    \      return u;", "        l.Sort();\n        int i = 0;\n        while (i <\
    \ l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        l.Sort();\n        int i = 0;\n        while (i < l.Count\
    \ - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        List<long> u = new List<long>();\n        foreach (long\
    \ x in l) {\n            if (!u.Contains(x)) {\n                u.Add(x);\n  \
    \          }\n        }\n        u.Sort();\n        return u;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count) {\n            int j = i + 1;\n\
    \            while (j < l.Count && l[i] == l[j]) {\n                l.RemoveAt(j);\n\
    \            }\n            i = j;\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] == l[i - 1])\
    \ {\n                l.RemoveAt(i);\n                i--;\n            }\n   \
    \     }\n        return l;", "        l.Sort();\n        int i = 0;\n        while\
    \ (i < l.Count - 1) {\n            if (l[i] == l[i + 1]) {\n                l.RemoveAt(i);\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  return l;", "        List<long> u = new List<long>();\n        foreach (long\
    \ x in l) {\n            if (!u.Contains(x)) {\n                u.Add(x);\n  \
    \          }\n        }\n        u.Sort();\n        return u;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;", "        l.Sort();\n\
    \        int i = 0;\n        while (i < l.Count - 1) {\n            if (l[i] ==\
    \ l[i + 1]) {\n                l.RemoveAt(i);\n            } else {\n        \
    \        i++;\n            }\n        }\n        return l;"]
stop_tokens:
- "\n    }\n"
