name: HumanEval_145_order_by_points
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function which sorts the given list of integers\n  \
  \  // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original list.\n    // For example:\n    public static List<long>\
  \ OrderByPoints(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
  \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
  \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
  \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
  \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
  \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
  \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
  \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
  \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
  \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
  \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
  \ (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,\
  \ (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,\
  \ (long)6L}))));\n    }\n\n}\n"
completions: ["        // Write your code here\n        return nums;", "        //\
    \ your code here\n        return nums;", "        // your code here\n        return\
    \ nums;", "        // TODO: implement this function\n        return nums;", " \
    \       // your code here\n        return nums;", "        // your code here\n\
    \        return nums;", "        // your code here\n        return nums;", " \
    \       // TODO: implement\n        return null;", "        return nums.Select((x,\
    \ i) => new { x, i })\n            .OrderBy(x => x.x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum())\n\
    \            .ThenBy(x => x.i)\n            .Select(x => x.x)\n            .ToList();",
  "        // your code goes here\n        return nums;", "        // TODO: implement\
    \ this function\n        return nums;", "        // Write your code here\n   \
    \     return nums;", "        // TODO: implement this function\n        return\
    \ nums;", "        // your code here\n        return nums;", "        // your\
    \ code goes here\n        return nums;", "        // TODO: implement this function\n\
    \        //throw new NotImplementedException();\n        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement this function\n        return nums;", "        // TODO:\
    \ implement this function\n        return nums;", "        // your code here\n\
    \        return nums;", "        // TODO: implement this function\n        return\
    \ nums;", "        // your code here\n        return nums;", "        // your\
    \ code here\n        return nums;", "        // your code here\n        return\
    \ nums;", "        // TODO: implement this function\n        return nums;", " \
    \       // TODO: implement this function\n        return null;", "        // your\
    \ code here\n        return nums;", "        var dict = new Dictionary<long, List<long>>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            var sum = 0;\n  \
    \          var num = nums[i];\n            while (num > 0) {\n               \
    \ sum += num % 10;\n                num /= 10;\n            }\n            if\
    \ (!dict.ContainsKey(sum)) {\n                dict[sum] = new List<long>();\n\
    \            }\n            dict[sum].Add(nums[i]);\n        }\n        var res\
    \ = new List<long>();\n        foreach (var kvp in dict.OrderBy(kvp => kvp.Key))\
    \ {\n            res.AddRange(kvp.Value);\n        }\n        return res;", " \
    \       // your code here\n        return nums;", "        // your code here\n\
    \        return nums;", "        // Write your code here\n        return nums;",
  "        // your code here\n        return nums;", "        // your code here\n\
    \        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y =>\
    \ y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // your code goes\
    \ here\n        var result = nums.Select((x, i) => new { Index = i, Value = x,\
    \ Sum = x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum() }).OrderBy(x\
    \ => x.Sum).ThenBy(x => x.Index).Select(x => x.Value).ToList();\n        return\
    \ result;", "        // your code goes here\n        return nums;", "        //\
    \ Write your code here\n        return nums;", "        // your code here\n  \
    \      return nums;", "        var result = new List<long>();\n        var dict\
    \ = new Dictionary<long, long>();\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            var sum = 0;\n            var num = nums[i];\n            while\
    \ (num > 0) {\n                sum += num % 10;\n                num /= 10;\n\
    \            }\n            dict.Add(i, sum);\n        }\n        var sortedDict\
    \ = dict.OrderBy(x => x.Value).ToDictionary(x => x.Key, x => x.Value);\n     \
    \   foreach (var item in sortedDict) {\n            result.Add(nums[(int)item.Key]);\n\
    \        }\n        return result;", "        // your code here\n        return\
    \ nums;", "        // your code here\n        return nums;", "        var result\
    \ = new List<long>();\n        var dict = new Dictionary<long, List<long>>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            var sum = GetSumOfDigits(nums[i]);\n\
    \            if (!dict.ContainsKey(sum)) {\n                dict[sum] = new List<long>();\n\
    \            }\n            dict[sum].Add(nums[i]);\n        }\n        var keys\
    \ = dict.Keys.ToList();\n        keys.Sort();\n        foreach (var key in keys)\
    \ {\n            dict[key].Sort();\n            result.AddRange(dict[key]);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  return nums;", "        // your code here\n        return nums;", "       \
    \ // your code here\n        return nums;", "        return nums.OrderBy(x =>\
    \ x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", '        return
    nums.OrderBy(x => x.ToString().Select(y => int.Parse(y.ToString())).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        // Write your code here\n        return\
    \ nums;", "        var result = nums.Select((x, i) => new { x, i }).OrderBy(x\
    \ => x.x.ToString().Sum(y => y - '0')).ThenBy(x => x.i).Select(x => x.x).ToList();\n\
    \        return result;", "        // TODO: implement this function\n        return\
    \ nums;", "        // your code here\n        return nums;", "        // your\
    \ code here\n        return nums;", "        // your code here\n        return\
    \ nums;", "        // your code goes here\n        return nums;", "        return\
    \ nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        var result = new List<long>();\n        var dict = new Dictionary<long,\
    \ long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var sum\
    \ = 0;\n            var num = nums[i];\n            while (num > 0) {\n      \
    \          sum += num % 10;\n                num /= 10;\n            }\n     \
    \       if (!dict.ContainsKey(sum)) {\n                dict.Add(sum, i);\n   \
    \         }\n        }\n        var keys = dict.Keys.ToList();\n        keys.Sort();\n\
    \        foreach (var key in keys) {\n            result.Add(nums[dict[key]]);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y => y -\
    \ '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // your code here\n\
    \        return nums;", "        var result = nums.Select((n, i) => new { n, i\
    \ }).OrderBy(x => x.n).ThenBy(x => x.i).Select(x => x.n).ToList();\n        return\
    \ result;", "        // Write your code here\n        return nums;", "       \
    \ // TODO: implement this function\n        return nums;", "        // TODO: implement\
    \ this function\n        return nums;", "        // your code here\n        return\
    \ nums;", "        // your code here\n        return nums;", "        var dict\
    \ = new Dictionary<long, long>();\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            var sum = 0;\n            var num = nums[i];\n            while\
    \ (num > 0) {\n                sum += num % 10;\n                num /= 10;\n\
    \            }\n            dict[nums[i]] = sum;\n        }\n        var sorted\
    \ = dict.OrderBy(x => x.Value).ThenBy(x => x.Key).Select(x => x.Key).ToList();\n\
    \        return sorted;", "        // Write your code here\n        return nums;",
  "        // your code here\n        return nums;", "        // Write your code here\n\
    \        return nums;", "        // your code goes here\n        return nums;",
  "        // Write your code here\n        return nums;", "        // TODO: implement\
    \ this function\n        return nums;", "        // your code here\n        return\
    \ nums;", "        return nums.OrderBy(x => x.ToString().Select(c => c - '0').Sum()).ThenBy(x\
    \ => nums.IndexOf(x)).ToList();", "        // your code here\n        return nums;",
  "        // your code goes here\n        return nums;", "        // your code here\n\
    \        return nums;", "        // your code goes here\n        return nums;",
  "        // your code here\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // your code here\n        return nums;", "        // your code here\n\
    \        return nums;", "        // TODO: implement this function\n        return\
    \ nums;", "        // your code here\n        return nums;", "        // TODO:\
    \ implement this function\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // your code here\n        return nums;", "        // your code here\n\
    \        return nums;", '        return nums.OrderBy(x => x.ToString().Select(y
    => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();', " \
    \       // your code goes here\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement this function\n        return null;", "        // your\
    \ code goes here\n        return nums;", "        var result = nums.Select((x,\
    \ i) => new { x, i }).OrderBy(x => x.x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x\
    \ => x.i).Select(x => x.x).ToList();\n        return result;", "        // your\
    \ code here\n        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO: implement\
    \ this function\n        return nums;", "        // TODO: implement this function\n\
    \        return nums;", "        // your code goes here\n        return nums;",
  "        // TODO: Implement this function\n        //throw new NotImplementedException();\n\
    \        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x =>\
    \ nums.IndexOf(x)).ToList();", "        // TODO: Implement this function\n   \
    \     return nums;", "        // your code here\n        return nums;", '        return
    nums.OrderBy(x => x.ToString().Select(y => (int)y - 48).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        // your code here\n        return nums;", "        // TODO: implement this\
    \ function\n        return nums;", "        // your code here\n        return\
    \ nums;", '        // your code here', "        return nums.OrderBy(x => x.ToString().Sum(c\
    \ => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        var list = new List<long>();\n        var dict = new Dictionary<long, long>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            var sum = SumOfDigits(nums[i]);\n\
    \            if (!dict.ContainsKey(sum)) {\n                dict.Add(sum, nums[i]);\n\
    \            } else {\n                dict[sum] = Math.Min(dict[sum], nums[i]);\n\
    \            }\n        }\n        var sorted = dict.Keys.ToList();\n        sorted.Sort();\n\
    \        foreach (var key in sorted) {\n            list.Add(dict[key]);\n   \
    \     }\n        return list;", "        // TODO: implement your solution here\n\
    \        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y =>\
    \ y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO: implement\
    \ this function\n        return nums;", "        // your code here\n        return\
    \ nums;", "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x\
    \ => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO: implement\
    \ this function\n        return nums;", "        var result = new List<long>();\n\
    \        var dict = new Dictionary<long, long>();\n        for (int i = 0; i <\
    \ nums.Count; i++) {\n            var sum = SumDigits(nums[i]);\n            if\
    \ (!dict.ContainsKey(sum)) {\n                dict.Add(sum, nums[i]);\n      \
    \      } else {\n                dict[sum] = Math.Min(dict[sum], nums[i]);\n \
    \           }\n        }\n        var keys = dict.Keys.ToList();\n        keys.Sort();\n\
    \        foreach (var key in keys) {\n            result.Add(dict[key]);\n   \
    \     }\n        return result;", "        // your code here\n        return nums;",
  "        // your code here\n        return nums;", "        // Write your code here\n\
    \        return nums;", "        // TODO: implement this function\n        return\
    \ nums;", "        var dict = new Dictionary<long, long>();\n        for (int\
    \ i = 0; i < nums.Count; i++) {\n            long sum = 0;\n            long n\
    \ = nums[i];\n            while (n > 0) {\n                sum += n % 10;\n  \
    \              n /= 10;\n            }\n            dict[sum] = i;\n        }\n\
    \        var ordered = dict.OrderBy(x => x.Key).ToList();\n        var result\
    \ = new List<long>();\n        foreach (var item in ordered) {\n            result.Add(nums[item.Value]);\n\
    \        }\n        return result;", "        // TODO: Implement this function\n\
    \        return nums;", "        // your code here\n        return nums;", " \
    \       // your code here\n        return nums;", "        // your code here\n\
    \        return nums;", "        // TODO: Implement this function\n        return\
    \ nums;", "        // TODO: implement this function\n        return nums;", " \
    \       return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  '        return nums.OrderBy(x => x.ToString().Select(y => long.Parse(y.ToString())).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        // your code goes here\n        return\
    \ nums;", "        // your code here\n        return nums;", "        // your\
    \ code here\n        return nums;", "        // your code goes here\n        return\
    \ nums;", "        // your code here\n        return nums;", "        // TODO:\
    \ implement\n        return nums;", "        // TODO: implement this function\n\
    \        return nums;", "        // your code here\n        return nums;", " \
    \       // TODO: implement this function\n        return nums;", "        // TODO:\
    \ implement this function\n        return nums;", "        // Write your code\
    \ here\n        return nums;", "        // Write your code here\n        return\
    \ nums;", "        // Write your code here\n        return nums;", "        //\
    \ your code goes here\n        return nums;", "        // Write your code here\n\
    \        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y =>\
    \ y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO: implement\n\
    \        return nums;", "        // TODO: implement this function\n        return\
    \ nums;", "        // your code here\n        return nums;", "        // TODO:\
    \ implement this function\n        return nums;", "        // TODO: implement\
    \ this function\n        return nums;", "        // Write your code here\n   \
    \     return nums;", "        // TODO: implement this function\n        return\
    \ nums;", "        // your code here\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // your code here\n        return nums;", "        // your code here\n\
    \        return nums;", "        // TODO: implement this function\n        return\
    \ nums;", "        // TODO: implement this function\n        return nums;", " \
    \       // your code here\n        return nums;", "        // Write your code\
    \ here\n        return nums;", "        // TODO: implement this function\n   \
    \     return nums;", "        // your code here\n        return nums;", "    \
    \    // your code here\n        return nums;", "        // your code here\n  \
    \      return nums;", "        // your code goes here\n        return nums;",
  "        // your code here\n        return nums;", "        // your code here\n\
    \        return nums;", "        // your code here\n        return nums;", " \
    \       // your code here\n        return nums;", "        // your code goes here\n\
    \        return nums;", "        // Write your code here\n        return nums;",
  "        return nums.OrderBy(x => x.ToString().Select(y => y - '0').Sum()).ThenBy(x\
    \ => nums.IndexOf(x)).ToList();", "        // your code goes here\n        return\
    \ nums;", "        // your code here\n        return nums;", "        // your\
    \ code here\n        return nums;", "        // your code here\n        return\
    \ nums;", "        // your code goes here\n        return nums;", "        //\
    \ your code here\n        return nums;", '        return nums.OrderBy(x => x.ToString().Select(y
    => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();', " \
    \       // your code here\n        return nums;", "        // TODO: implement\
    \ this function\n        //throw new NotImplementedException();\n        return\
    \ nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // your code here\n        return nums;", "        // your code here\n\
    \        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y =>\
    \ y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // your code here\n\
    \        return nums;", "        var result = nums.Select((x, i) => new { x, i\
    \ }).OrderBy(x => x.x.ToString().Sum(c => c - '0')).ThenBy(x => x.i).Select(x\
    \ => x.x).ToList();\n        return result;", "        // your code here\n   \
    \     return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y => y\
    \ - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // your code here\n\
    \        return nums;", "        // your code here\n        return nums;", " \
    \       return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement this function\n        return null;", "        // your\
    \ code here\n        return nums;", "        // TODO: Implement this function\n\
    \        return nums;", "        var result = new List<long>();\n        var dict\
    \ = new Dictionary<long, long>();\n        foreach (var num in nums) {\n     \
    \       var sum = SumDigits(num);\n            if (!dict.ContainsKey(sum)) {\n\
    \                dict.Add(sum, num);\n            }\n        }\n        var sorted\
    \ = dict.OrderBy(x => x.Key).ToList();\n        foreach (var item in sorted) {\n\
    \            result.Add(item.Value);\n        }\n        return result;", "  \
    \      // TODO: implement this function\n        return null;", "        // your\
    \ code goes here\n        return nums;"]
stop_tokens:
- "\n    }\n"
