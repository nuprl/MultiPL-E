name: HumanEval_94_skjkasdkd
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of integers.\n    // You need to find the\
  \ largest prime value and return the sum of its digits.\n    // Examples:\n    public\
  \ static long Skjkasdkd(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)0L, (long)3L, (long)2L, (long)1L, (long)3L, (long)5L,\
  \ (long)7L, (long)4L, (long)5L, (long)5L, (long)5L, (long)2L, (long)181L, (long)32L,\
  \ (long)4L, (long)32L, (long)3L, (long)2L, (long)32L, (long)324L, (long)4L, (long)3L})))\
  \ == (10L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)0L,\
  \ (long)1L, (long)8L, (long)2L, (long)4597L, (long)2L, (long)1L, (long)3L, (long)40L,\
  \ (long)1L, (long)2L, (long)1L, (long)2L, (long)4L, (long)2L, (long)5L, (long)1L})))\
  \ == (25L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)1L, (long)32L, (long)5107L, (long)34L, (long)83278L, (long)109L, (long)163L,\
  \ (long)23L, (long)2323L, (long)32L, (long)30L, (long)1L, (long)9L, (long)3L})))\
  \ == (13L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)724L,\
  \ (long)32L, (long)71L, (long)99L, (long)32L, (long)6L, (long)0L, (long)5L, (long)91L,\
  \ (long)83L, (long)0L, (long)5L, (long)6L}))) == (11L));\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)0L, (long)81L, (long)12L, (long)3L, (long)1L, (long)21L})))\
  \ == (3L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)8L,\
  \ (long)1L, (long)2L, (long)1L, (long)7L}))) == (7L));\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)8191L}))) == (19L));\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)8191L, (long)123456L, (long)127L, (long)7L}))) ==\
  \ (19L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)127L, (long)97L,\
  \ (long)8192L}))) == (10L));\n    }\n\n}\n"
completions: ['        return 0;', "        // your code here\n        return 0;",
  "        // Your code goes here.\n        return 0;", '        return 0;', "   \
    \     long max = lst.Max();\n        long sum = 0;\n        for (long i = max;\
    \ i > 1; i--) {\n            if (isPrime(i)) {\n                sum = sumDigits(i);\n\
    \                break;\n            }\n        }\n        return sum;", "   \
    \     // Your code here\n        return 0;", "        // your code here\n    \
    \    return 0;", "        long max = lst.Max();\n        long maxPrime = 0;\n\
    \        for (long i = max; i > 0; i--) {\n            if (IsPrime(i)) {\n   \
    \             maxPrime = i;\n                break;\n            }\n        }\n\
    \        return SumDigits(maxPrime);", "        // your code here\n        return\
    \ 0;", "        // Your code here\n        return 0;", "        // Your code here\n\
    \        return 0;", "        // Write your code here\n        return 0;", " \
    \       // Write your code here\n        long max = 0;\n        foreach (long\
    \ i in lst)\n        {\n            if (i > max)\n            {\n            \
    \    max = i;\n            }\n        }\n        long prime = 0;\n        for\
    \ (long i = max; i > 1; i--)\n        {\n            bool isPrime = true;\n  \
    \          for (long j = 2; j <= Math.Sqrt(i); j++)\n            {\n         \
    \       if (i % j == 0)\n                {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime)\n            {\n                prime = i;\n                break;\n\
    \            }\n        }\n        long sum = 0;\n        while (prime > 0)\n\
    \        {\n            sum += prime % 10;\n            prime /= 10;\n       \
    \ }\n        return sum;", "        // Your code here.\n        return 0;", " \
    \       // Write your code here\n        return 0;", "        long max = lst.Max();\n\
    \        long sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n\
    \            max /= 10;\n        }\n        return sum;", "        long max =\
    \ lst.Max();\n        long sum = 0;\n        while (max > 0) {\n            sum\
    \ += max % 10;\n            max /= 10;\n        }\n        return sum;", "   \
    \     long max = lst.Max();\n        long sum = 0;\n        while (max > 0) {\n\
    \            sum += max % 10;\n            max /= 10;\n        }\n        return\
    \ sum;", "        // Write your code here\n        return 0;", "        return\
    \ lst.Max().ToString().Sum(x => x - '0');", "        long max = lst.Max();\n \
    \       long sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n       \
    \     if (lst[i] == max) {\n                while (max > 0) {\n              \
    \      sum += max % 10;\n                    max /= 10;\n                }\n \
    \           }\n        }\n        return sum;", "        // Write your code here\n\
    \        long max = lst.Max();\n        long sum = 0;\n        while (max > 0)\n\
    \        {\n            sum += max % 10;\n            max /= 10;\n        }\n\
    \        return sum;", "        // Your code goes here.\n        return 0;", " \
    \       // Your code goes here.\n        return 0;", "        // your code here\n\
    \        return 0;", "        long max = lst.Max();\n        long sum = 0;\n \
    \       while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        long max = lst.Max();\n        long\
    \ sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n        \
    \    max /= 10;\n        }\n        return sum;", "        // Write your code\
    \ here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n\
    \        long max = 0;\n        foreach (long i in lst)\n        {\n         \
    \   if (i > max)\n            {\n                max = i;\n            }\n   \
    \     }\n        long sum = 0;\n        while (max > 0)\n        {\n         \
    \   sum += max % 10;\n            max /= 10;\n        }\n        return sum;",
  "        // Your code here\n        return 0;", "        long max = lst.Max();\n\
    \        long sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n\
    \            max /= 10;\n        }\n        return sum;", "        // Your code\
    \ goes here.\n        return 0;", "        long max = lst.Max();\n        long\
    \ sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n        \
    \    max /= 10;\n        }\n        return sum;", "        // Write your code\
    \ here\n        return 0;", "        // Your code here.\n        return 0;", " \
    \       // Your code goes here.\n        return 0;", "        // Your code goes\
    \ here.\n        return 0;", "        long max = lst.Max();\n        long sum\
    \ = 0;\n        while (max > 0) {\n            sum += max % 10;\n            max\
    \ /= 10;\n        }\n        return sum;", "        // Write your code here\n\
    \        return 0;", "        long largestPrime = 0;\n        foreach (long num\
    \ in lst) {\n            if (IsPrime(num)) {\n                if (num > largestPrime)\
    \ {\n                    largestPrime = num;\n                }\n            }\n\
    \        }\n        return SumDigits(largestPrime);", "        long max = lst.Max();\n\
    \        long sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n\
    \            max /= 10;\n        }\n        return sum;", "        // Your code\
    \ goes here.\n        return 0;", "        // Write your code here\n        //\
    \ To debug: Console.Error.WriteLine(\"Debug messages...\");\n        long max\
    \ = lst.Max();\n        long maxPrime = 0;\n        for (long i = max; i > 0;\
    \ i--) {\n            if (IsPrime(i)) {\n                maxPrime = i;\n     \
    \           break;\n            }\n        }\n        return maxPrime.ToString().Select(x\
    \ => long.Parse(x.ToString())).Sum();", "        // Your code goes here.\n   \
    \     long max = lst.Max();\n        long sum = 0;\n        while (max > 0)\n\
    \        {\n            sum += max % 10;\n            max /= 10;\n        }\n\
    \        return sum;", "        long max = lst.Max();\n        long sum = 0;\n\
    \        while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        // Write your code here\n        return\
    \ 0;", "        long max = 0;\n        foreach (long i in lst) {\n           \
    \ if (i > max) {\n                max = i;\n            }\n        }\n       \
    \ long maxPrime = 0;\n        for (long i = max; i > 0; i--) {\n            if\
    \ (IsPrime(i)) {\n                maxPrime = i;\n                break;\n    \
    \        }\n        }\n        long sum = 0;\n        while (maxPrime > 0) {\n\
    \            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n \
    \       return sum;", "        // Your code goes here\n        return 0;", " \
    \       // Your code goes here.\n        return 0;", "        long max = lst.Max();\n\
    \        long sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n\
    \            max /= 10;\n        }\n        return sum;", "        // Your code\
    \ goes here.\n        return 0;", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (i > max) {\n                max = i;\n        \
    \    }\n        }\n        long maxPrime = 0;\n        for (long i = max; i >\
    \ 0; i--) {\n            if (IsPrime(i)) {\n                maxPrime = i;\n  \
    \              break;\n            }\n        }\n        long sum = 0;\n     \
    \   while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime\
    \ /= 10;\n        }\n        return sum;", "        // Write your code here\n\
    \        return 0;", "        // your code goes here\n        return 0;", "  \
    \      // Your code goes here.\n        return 0;", "        // Your code goes\
    \ here.\n        return 0;", "        // Your code goes here.\n        long max\
    \ = 0;\n        foreach (long i in lst)\n        {\n            if (i > max)\n\
    \            {\n                max = i;\n            }\n        }\n        long\
    \ sum = 0;\n        while (max > 0)\n        {\n            sum += max % 10;\n\
    \            max /= 10;\n        }\n        return sum;", "        // your code\
    \ here\n        return 0;", "        // Your code here.\n        long max = lst.Max();\n\
    \        long sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n\
    \            max /= 10;\n        }\n        return sum;", "        long largestPrime\
    \ = 0;\n        foreach (long num in lst) {\n            if (IsPrime(num)) {\n\
    \                if (num > largestPrime) {\n                    largestPrime =\
    \ num;\n                }\n            }\n        }\n        return SumDigits(largestPrime);",
  "        // Your code here\n        return 0;", "        // your code here\n   \
    \     return 0;", "        long max = lst.Max();\n        long maxPrime = 0;\n\
    \        for (long i = max; i > 0; i--) {\n            if (IsPrime(i)) {\n   \
    \             maxPrime = i;\n                break;\n            }\n        }\n\
    \        return maxPrime.ToString().Sum(c => c - '0');", "        // Write your\
    \ code here\n        long max = lst.Max();\n        long sum = 0;\n        while\
    \ (max > 0)\n        {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (i > max) {\n                max = i;\n        \
    \    }\n        }\n        long maxPrime = 0;\n        for (long i = max; i >\
    \ 0; i--) {\n            if (IsPrime(i)) {\n                maxPrime = i;\n  \
    \              break;\n            }\n        }\n        long sum = 0;\n     \
    \   while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime\
    \ /= 10;\n        }\n        return sum;", "        // Your code here\n      \
    \  long max = 0;\n        foreach (long i in lst)\n        {\n            if (i\
    \ > max)\n            {\n                max = i;\n            }\n        }\n\
    \        long sum = 0;\n        while (max > 0)\n        {\n            sum +=\
    \ max % 10;\n            max /= 10;\n        }\n        return sum;", "      \
    \  long max = lst.Max();\n        long maxPrime = 0;\n        for (long i = max;\
    \ i > 1; i--) {\n            if (IsPrime(i)) {\n                maxPrime = i;\n\
    \                break;\n            }\n        }\n        return maxPrime;",
  "        long max = lst.Max();\n        long sum = 0;\n        while (max > 0) {\n\
    \            sum += max % 10;\n            max /= 10;\n        }\n        return\
    \ sum;", "        long largestPrime = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (IsPrime(lst[i])) {\n                if (lst[i] > largestPrime)\
    \ {\n                    largestPrime = lst[i];\n                }\n         \
    \   }\n        }\n        return SumOfDigits(largestPrime);", "        // Your\
    \ code goes here.\n        return 0;", "        long max = lst.Max();\n      \
    \  long sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n  \
    \          max /= 10;\n        }\n        return sum;", "        // TODO: Implement\
    \ this function\n        return 0;", "        // Your code goes here.\n      \
    \  return 0;", "        // Write your code here\n        // To debug: Console.Error.WriteLine(\"\
    Debug messages...\");\n        long max = lst.Max();\n        long maxPrime =\
    \ 0;\n        for (long i = max; i > 0; i--) {\n            if (IsPrime(i)) {\n\
    \                maxPrime = i;\n                break;\n            }\n      \
    \  }\n        long sum = 0;\n        while (maxPrime > 0) {\n            sum +=\
    \ maxPrime % 10;\n            maxPrime /= 10;\n        }\n        return sum;",
  "        // Your code here\n        return 0;", "        // Your code here\n   \
    \     long max = 0;\n        foreach (long i in lst)\n        {\n            if\
    \ (i > max)\n            {\n                max = i;\n            }\n        }\n\
    \        long sum = 0;\n        for (long i = 2; i < max; i++)\n        {\n  \
    \          if (max % i == 0)\n            {\n                max = max / i;\n\
    \                sum += i;\n            }\n        }\n        return sum;", " \
    \       // Your code goes here.\n        return 0;", "        long largestPrime\
    \ = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i)) {\n   \
    \             if (i > largestPrime) {\n                    largestPrime = i;\n\
    \                }\n            }\n        }\n        long sum = 0;\n        while\
    \ (largestPrime > 0) {\n            sum += largestPrime % 10;\n            largestPrime\
    \ /= 10;\n        }\n        return sum;", "        // Your code goes here.\n\
    \        return 0;", "        // your code here\n        return 0;", "       \
    \ // Write your code here\n        long max = lst.Max();\n        long maxPrime\
    \ = 0;\n        for (long i = max; i > 1; i--) {\n            if (IsPrime(i))\
    \ {\n                maxPrime = i;\n                break;\n            }\n  \
    \      }\n        return maxPrime.ToString().Sum(x => x - '0');", "        //\
    \ Your code goes here.\n        // Example:\n        // return lst.Sum();\n  \
    \      return 0;", "        // Write your code here\n        return 0;", "   \
    \     // your code here\n        return 0;", "        // your code here\n    \
    \    return 0;", "        long max = lst.Max();\n        long sum = 0;\n     \
    \   while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        // Your code here\n        long max\
    \ = 0;\n        foreach (long i in lst)\n        {\n            if (i > max)\n\
    \            {\n                max = i;\n            }\n        }\n        long\
    \ sum = 0;\n        while (max > 0)\n        {\n            sum += max % 10;\n\
    \            max /= 10;\n        }\n        return sum;", "        long max =\
    \ lst.Max();\n        long sum = 0;\n        while (max > 0) {\n            sum\
    \ += max % 10;\n            max /= 10;\n        }\n        return sum;", "   \
    \     // Your code goes here.\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        long max = lst.Max();\n        long maxPrime\
    \ = 0;\n        for (long i = max; i > 0; i--) {\n            if (IsPrime(i))\
    \ {\n                maxPrime = i;\n                break;\n            }\n  \
    \      }\n        return maxPrime.ToString().Sum(x => x - '0');", "        //\
    \ Your code goes here.\n        return 0;", "        // Your code here.\n    \
    \    return 0;", "        // Your code goes here.\n        // You can add more\
    \ classes and methods.\n        // You can use the System.Numerics namespace.\n\
    \        // You can use the System.Diagnostics namespace.\n        // You can\
    \ use the System.Collections.Generic namespace.\n        // You can use the System.Linq\
    \ namespace.\n        // You can use the System.Text namespace.\n        // You\
    \ can use the System.Security.Cryptography namespace.\n        return 0;", " \
    \       // Your code here\n        long max = lst.Max();\n        long sum = 0;\n\
    \        for (long i = max; i > 0; i--)\n        {\n            if (IsPrime(i))\n\
    \            {\n                sum = i.ToString().ToCharArray().Select(x => (long)Char.GetNumericValue(x)).Sum();\n\
    \                break;\n            }\n        }\n        return sum;", '        return
    lst.Max();', "        // your code goes here\n        long max = lst.Max();\n\
    \        long sum = 0;\n        while (max > 0)\n        {\n            sum +=\
    \ max % 10;\n            max /= 10;\n        }\n        return sum;", "      \
    \  // Your code goes here.\n        return 0;", "        // Write your code here\n\
    \        long max = lst.Max();\n        long sum = 0;\n        while (max > 0)\n\
    \        {\n            sum += max % 10;\n            max /= 10;\n        }\n\
    \        return sum;", "        // Write your code here\n        long max = lst.Max();\n\
    \        long sum = 0;\n        while (max > 0)\n        {\n            sum +=\
    \ max % 10;\n            max /= 10;\n        }\n        return sum;", "      \
    \  // Your code goes here\n        return 0;", "        long max = lst.Max();\n\
    \        long sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n\
    \            max /= 10;\n        }\n        return sum;", "        // Write your\
    \ code here\n        return 0;", "        // Your code goes here.\n        long\
    \ max = lst.Max();\n        long maxPrime = 0;\n        for (long i = max; i >\
    \ 0; i--) {\n            if (IsPrime(i)) {\n                maxPrime = i;\n  \
    \              break;\n            }\n        }\n        return maxPrime.ToString().Sum(x\
    \ => x - '0');", "        // Your code here\n        long max = 0;\n        foreach\
    \ (long i in lst)\n        {\n            if (i > max)\n            {\n      \
    \          max = i;\n            }\n        }\n        return max;", "       \
    \ // Your code here\n        return 0;", "        // Write your code here\n  \
    \      return 0;", "        // Your code goes here.\n        return 0;", "   \
    \     // Your code here.\n        return 0;", "        long max = lst.Max();\n\
    \        long maxPrime = 0;\n        for (long i = max; i > 0; i--) {\n      \
    \      if (IsPrime(i)) {\n                maxPrime = i;\n                break;\n\
    \            }\n        }\n        return maxPrime.ToString().Select(x => (long)Char.GetNumericValue(x)).Sum();",
  "        long max = lst.Max();\n        long maxPrime = 0;\n        for (long i\
    \ = max; i > 0; i--) {\n            if (IsPrime(i)) {\n                maxPrime\
    \ = i;\n                break;\n            }\n        }\n        return maxPrime.ToString().Select(x\
    \ => long.Parse(x.ToString())).Sum();", "        // Your code goes here.\n   \
    \     return 0;", "        // your code here\n        return 0;", "        //\
    \ Your code goes here.\n        return 0;", "        // Your code goes here.\n\
    \        long max = lst.Max();\n        long maxPrime = 0;\n        for (long\
    \ i = max; i > 0; i--) {\n            if (IsPrime(i)) {\n                maxPrime\
    \ = i;\n                break;\n            }\n        }\n        return SumDigits(maxPrime);",
  "        var primes = new List<long>();\n        foreach (var i in lst) {\n    \
    \        if (IsPrime(i)) {\n                primes.Add(i);\n            }\n  \
    \      }\n        var max = primes.Max();\n        var sum = 0;\n        while\
    \ (max > 0) {\n            sum += (int)(max % 10);\n            max /= 10;\n \
    \       }\n        return sum;", "        // Your code here.\n        return 0;",
  "        // Your code here.\n        return 0;", "        // Your code here\n  \
    \      return 0;", "        // Write your code here\n        return 0;", "   \
    \     // Write your code here\n        return 0;", "        long max = 0;\n  \
    \      foreach (long i in lst) {\n            if (i > max) {\n               \
    \ max = i;\n            }\n        }\n        return max;", "        // Your code\
    \ goes here.\n        return 0;", "        long max = lst.Max();\n        long\
    \ maxPrime = 0;\n        for (long i = max; i > 0; i--) {\n            if (lst.Contains(i)\
    \ && IsPrime(i)) {\n                maxPrime = i;\n                break;\n  \
    \          }\n        }\n        return maxPrime.ToString().Sum(x => x - '0');",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long maxPrime\
    \ = 0;\n        for (long i = max; i > 1; i--) {\n            if (IsPrime(i))\
    \ {\n                maxPrime = i;\n                break;\n            }\n  \
    \      }\n        long sum = 0;\n        while (maxPrime > 0) {\n            sum\
    \ += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        return sum;",
  "        // Your code goes here.\n        return 0;", "        long max = lst.Max();\n\
    \        long maxPrime = 0;\n        for (long i = max; i > 0; i--) {\n      \
    \      if (IsPrime(i)) {\n                maxPrime = i;\n                break;\n\
    \            }\n        }\n        return maxPrime.ToString().Sum(x => x - '0');",
  "        long max = lst.Max();\n        long sum = 0;\n        while (max > 0) {\n\
    \            sum += max % 10;\n            max /= 10;\n        }\n        return\
    \ sum;", "        long max = lst.Max();\n        long sum = 0;\n        while\
    \ (max > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n\
    \        return sum;", "        // Write your code here\n        return 0;", " \
    \       // Write your code here\n        long max = 0;\n        foreach (long\
    \ i in lst)\n        {\n            if (i > max)\n            {\n            \
    \    max = i;\n            }\n        }\n        long sum = 0;\n        while\
    \ (max > 0)\n        {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        // Your code goes here.\n        return\
    \ 0;", "        long max = lst.Max();\n        long prime = max;\n        for\
    \ (long i = max; i > 0; i--) {\n            if (lst.Contains(i) && IsPrime(i))\
    \ {\n                prime = i;\n                break;\n            }\n     \
    \   }\n        return prime.ToString().Sum(x => x - '0');", "        long max\
    \ = lst.Max();\n        long sum = 0;\n        while (max > 0) {\n           \
    \ sum += max % 10;\n            max /= 10;\n        }\n        return sum;", " \
    \       // Your code goes here.\n        return 0;", "        long max = lst.Max();\n\
    \        long sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n\
    \            max /= 10;\n        }\n        return sum;", "        // Write your\
    \ code here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\"\
    );\n        long max = lst.Max();\n        long maxPrime = 0;\n        for (long\
    \ i = max; i > 0; i--) {\n            if (IsPrime(i)) {\n                maxPrime\
    \ = i;\n                break;\n            }\n        }\n        return maxPrime.ToString().Sum(x\
    \ => x - '0');", "        // Find the largest prime value in the list.\n     \
    \   // Sum the digits of the prime value.\n        // Return the sum.\n      \
    \  return 0;", "        // Your code here\n        return 0;", "        // your\
    \ code goes here\n        return 0;", "        // Your code goes here.\n     \
    \   return 0;", "        // Your code goes here.\n        return 0;", "      \
    \  // Your code goes here.\n        return 0;", "        // Write your code here\n\
    \        return 0;", "        // Your code here.\n        return 0;", "      \
    \  // Your code here.\n        return 0;", "        // Your code goes here.\n\
    \        return 0;", "        long largestPrime = 0;\n        foreach (long num\
    \ in lst) {\n            if (IsPrime(num)) {\n                if (num > largestPrime)\
    \ {\n                    largestPrime = num;\n                }\n            }\n\
    \        }\n        return SumDigits(largestPrime);", "        long max = lst.Max();\n\
    \        long sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n\
    \            max /= 10;\n        }\n        return sum;", "        long max =\
    \ lst.Max();\n        long sum = 0;\n        while (max > 0) {\n            sum\
    \ += max % 10;\n            max /= 10;\n        }\n        return sum;", "   \
    \     long max = lst.Max();\n        long sum = 0;\n        while (max > 0) {\n\
    \            sum += max % 10;\n            max /= 10;\n        }\n        return\
    \ sum;", "        // Your code goes here.\n        return 0;", "        long largestPrime\
    \ = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i)) {\n   \
    \             if (i > largestPrime) {\n                    largestPrime = i;\n\
    \                }\n            }\n        }\n        return largestPrime;", " \
    \       // Your code goes here.\n        return 0;", "        // Write your code\
    \ here\n        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n\
    \        long max = 0;\n        foreach (long i in lst)\n        {\n         \
    \   if (i > max)\n            {\n                max = i;\n            }\n   \
    \     }\n        long sum = 0;\n        while (max > 0)\n        {\n         \
    \   sum += max % 10;\n            max /= 10;\n        }\n        return sum;",
  "        // find the largest prime value\n        long largestPrime = 0;\n     \
    \   foreach (long i in lst) {\n            if (IsPrime(i)) {\n               \
    \ largestPrime = i;\n            }\n        }\n        // return the sum of its\
    \ digits\n        long sum = 0;\n        while (largestPrime > 0) {\n        \
    \    sum += largestPrime % 10;\n            largestPrime /= 10;\n        }\n \
    \       return sum;", "        // Write your code here\n        long max = lst.Max();\n\
    \        long sum = 0;\n        while (max > 0)\n        {\n            sum +=\
    \ max % 10;\n            max /= 10;\n        }\n        return sum;", "      \
    \  // Your code goes here.\n        return 0;", "        // Write your code here\n\
    \        long largestPrime = 0;\n        foreach (long l in lst) {\n         \
    \   if (IsPrime(l)) {\n                if (l > largestPrime) {\n             \
    \       largestPrime = l;\n                }\n            }\n        }\n     \
    \   return largestPrime;", "        // Write your code here\n        // To debug:\
    \ Console.Error.WriteLine(\"Debug messages...\");\n        long max = 0;\n   \
    \     foreach (long i in lst)\n        {\n            if (isPrime(i))\n      \
    \      {\n                if (i > max)\n                {\n                  \
    \  max = i;\n                }\n            }\n        }\n        return sumDigits(max);",
  "        // Your code goes here.\n        return 0;", "        // Your code here\n\
    \        return 0;", "        // Your code goes here.\n        return 0;", " \
    \       // Write your code here\n        return 0;", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        }\n        return max;", "        // Your\
    \ code goes here.\n        long max = lst.Max();\n        long maxPrime = 0;\n\
    \        for (long i = max; i > 0; i--) {\n            if (IsPrime(i)) {\n   \
    \             maxPrime = i;\n                break;\n            }\n        }\n\
    \        return maxPrime.ToString().Sum(x => x - '0');", "        // Write your\
    \ code here\n        return 0;", "        // Write your code here\n        long\
    \ max = 0;\n        foreach (long i in lst)\n        {\n            if (i > max)\n\
    \            {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        // Your code goes here\n        return 0;", "        // Your\
    \ code here\n        long max = lst.Max();\n        long sum = 0;\n        for\
    \ (long i = max; i > 0; i--)\n        {\n            if (isPrime(i))\n       \
    \     {\n                sum = sumDigits(i);\n                break;\n       \
    \     }\n        }\n        return sum;", "        long max = lst.Max();\n   \
    \     long ans = 0;\n        while (max > 0) {\n            ans += max % 10;\n\
    \            max /= 10;\n        }\n        return ans;", "        // your code\
    \ goes here\n        long max = lst.Max();\n        long sum = 0;\n        while\
    \ (max > 0)\n        {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        long max = lst.Max();\n        long\
    \ sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n        \
    \    max /= 10;\n        }\n        return sum;", "        long max = lst.Max();\n\
    \        long maxPrime = 0;\n        for (long i = max; i > 0; i--) {\n      \
    \      if (IsPrime(i)) {\n                maxPrime = i;\n                break;\n\
    \            }\n        }\n        return maxPrime.ToString().Sum(c => c - '0');",
  "        // Your code goes here.\n        return 0;", "        // your code here\n\
    \        return 0;", "        long max = lst.Max();\n        long sum = 0;\n \
    \       while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n\
    \        }\n        return sum;", "        var primes = new List<long>();\n  \
    \      for (long i = 2; i < lst.Max(); i++) {\n            bool isPrime = true;\n\
    \            for (long j = 2; j < i; j++) {\n                if (i % j == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                primes.Add(i);\n\
    \            }\n        }\n        var maxPrime = primes.Max();\n        var sum\
    \ = 0;\n        while (maxPrime > 0) {\n            sum += (int)(maxPrime % 10);\n\
    \            maxPrime /= 10;\n        }\n        return sum;", "        // Your\
    \ code goes here.\n        return 0;", "        long max = lst.Max();\n      \
    \  long maxPrime = 0;\n        for (long i = max; i > 0; i--) {\n            if\
    \ (IsPrime(i)) {\n                maxPrime = i;\n                break;\n    \
    \        }\n        }\n        return maxPrime.ToString().Select(x => (long)Char.GetNumericValue(x)).Sum();",
  "        long max = lst.Max();\n        long sum = 0;\n        while (max > 0) {\n\
    \            sum += max % 10;\n            max /= 10;\n        }\n        return\
    \ sum;", "        long max = 0;\n        foreach (long i in lst) {\n         \
    \   if (IsPrime(i)) {\n                if (i > max) {\n                    max\
    \ = i;\n                }\n            }\n        }\n        return SumDigits(max);",
  "        // Write your code here\n        long largestPrime = 0;\n        foreach\
    \ (long num in lst) {\n            if (IsPrime(num)) {\n                if (num\
    \ > largestPrime) {\n                    largestPrime = num;\n               \
    \ }\n            }\n        }\n        return SumDigits(largestPrime);", "   \
    \     // Your code here\n        return 0;", "        // Find the largest prime\
    \ value in the list.\n        // Return the sum of its digits.\n        // If\
    \ there are no primes in the list, return -1.\n        // If the list is empty,\
    \ return -1.\n        // If the list is null, return -1.\n        // If the list\
    \ is a list of zeros, return -1.\n        // If the list is a list of negative\
    \ numbers, return -1.\n        // If the list is a list of negative primes, return\
    \ -1.\n        // If the list is a list of positive primes, return the sum of\
    \ the digits of the largest prime.\n        // If the list is a list of positive\
    \ non-primes, return -1.\n        // If the list is a list of positive numbers,\
    \ return the sum of the digits of the largest prime.\n        // If the list is\
    \ a list of negative numbers, return -1.\n        // If the list is a list of\
    \ negative primes, return -1.\n        // If the list is a list of negative non-primes,\
    \ return -1.\n        // If the list is a list of negative numbers, return -1.\n\
    \        // If the list is a list of negative primes, return -1.\n        // If\
    \ the list is a list of negative non-primes, return -1.\n        // If the list\
    \ is a list of negative numbers, return -1.\n        // If the list is a list\
    \ of negative primes, return -1.\n        // If the list is a list of negative\
    \ non-primes, return -1.\n        // If the list is a list of negative numbers,\
    \ return -1.\n        // If the list is a list of negative primes, return -1.\n\
    \        // If the list is a list of negative non-primes, return -1.\n       \
    \ // If the list is a list of negative numbers, return -1.\n        // If the\
    \ list is a list of negative primes, return -1.\n        // If the list is a list\
    \ of negative non-primes, return -1.\n        // If the list is a list of negative\
    \ numbers, return -1.\n        // If the list is a list of negative primes, return\
    \ -1.\n        // If the list is a list of negative non-primes,", "        long\
    \ max = lst.Max();\n        long maxPrime = 0;\n        for (long i = max; i >\
    \ 0; i--) {\n            if (IsPrime(i)) {\n                maxPrime = i;\n  \
    \              break;\n            }\n        }\n        long sum = 0;\n     \
    \   while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime\
    \ /= 10;\n        }\n        return sum;", "        // Write your code here\n\
    \        return 0;", "        // Write your code here\n        return 0;", " \
    \       // Your code goes here.\n        return 0;", "        long max = lst.Max();\n\
    \        long sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n\
    \            max /= 10;\n        }\n        return sum;", "        long max =\
    \ lst.Max();\n        long sum = 0;\n        while (max > 0) {\n            sum\
    \ += max % 10;\n            max /= 10;\n        }\n        return sum;", "   \
    \     long max = lst.Max();\n        long maxPrime = 0;\n        for (long i =\
    \ max; i > 0; i--) {\n            if (IsPrime(i)) {\n                maxPrime\
    \ = i;\n                break;\n            }\n        }\n        return maxPrime.ToString().Sum(x\
    \ => x - '0');", "        // Your code here\n        return 0;", "        // your\
    \ code goes here\n        long max = lst.Max();\n        long maxPrime = 0;\n\
    \        for (long i = max; i > 0; i--) {\n            if (IsPrime(i)) {\n   \
    \             maxPrime = i;\n                break;\n            }\n        }\n\
    \        return maxPrime.ToString().Select(x => long.Parse(x.ToString())).Sum();",
  "        // Your code goes here.\n        return 0;", "        // Your code here\n\
    \        long max = lst.Max();\n        long maxPrime = 0;\n        for (long\
    \ i = max; i > 0; i--) {\n            if (IsPrime(i)) {\n                maxPrime\
    \ = i;\n                break;\n            }\n        }\n        long sum = 0;\n\
    \        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n         \
    \   maxPrime /= 10;\n        }\n        return sum;", "        // Write your code\
    \ here\n        return 0;", "        long largestPrime = 0;\n        foreach (long\
    \ n in lst) {\n            if (IsPrime(n)) {\n                largestPrime = Math.Max(largestPrime,\
    \ n);\n            }\n        }\n        return SumDigits(largestPrime);", " \
    \       // Your code goes here.\n        return 0;", "        // Your code goes\
    \ here.\n        // You can add more classes and methods.\n        // You can\
    \ use any algorithm you like.\n        // You can use any data structures you\
    \ like.\n        // You can use any language features you like.\n        // You\
    \ can use any libraries you like.\n        // You can use any IDE you like.\n\
    \        // You can use any operating system you like.\n        // You can use\
    \ any hardware you like.\n        // You can use any cloud services you like.\n\
    \        // You can use any parallelization you like.\n        // You can use\
    \ any optimization you like.\n        // You can use any anything you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any you like.\n        // You can use any you like.\n\
    \        // You can use any", "        long max = 0;\n        foreach (long i\
    \ in lst) {\n            if (i > max) {\n                max = i;\n          \
    \  }\n        }\n        return max;"]
stop_tokens:
- "\n    }\n"
