language: cs
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        var set = new HashSet<char>();\n        foreach (var c in str) {\n  \
    \          set.Add(char.ToLower(c));\n        }\n        return set.Count;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Use a set to store all the characters\n        HashSet<char>\
    \ set = new HashSet<char>();\n        foreach (char c in str) {\n            //\
    \ Add the character to the set\n            set.Add(c);\n        }\n        //\
    \ Return the number of distinct characters\n        return set.Count;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <474362fc15cf49a6bda3124b43302dc3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <474362fc15cf49a6bda3124b43302dc3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var distinctChars = new HashSet<char>();\n        foreach (var\
    \ c in str) {\n            distinctChars.Add(char.ToLower(c));\n        }\n  \
    \      return distinctChars.Count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // We use a bit vector to keep track of which characters we've\
    \ seen\n        // We use a bit vector because it's faster than a hash set\n \
    \       // We use a long because it's faster than a byte array\n        long seen\
    \ = 0;\n        foreach (char c in str) {\n            // We use bitwise OR to\
    \ set the bit corresponding to the character\n            // We use bitwise AND\
    \ to check if the bit is already set\n            // We use bitwise XOR to flip\
    \ the bit\n            // We use bitwise NOT to invert the bits\n            //\
    \ We use bitwise AND to clear the bit\n            // We use bitwise AND to check\
    \ if the bit is clear\n            // We use bitwise OR to set the bit\n     \
    \       // We use bitwise XOR to flip the bit\n            // We use bitwise NOT\
    \ to invert the bits\n            // We use bitwise AND to clear the bit\n   \
    \         // We use bitwise AND to check if the bit is clear\n            // We\
    \ use bitwise OR to set the bit\n            // We use bitwise XOR to flip the\
    \ bit\n            // We use bitwise NOT to invert the bits\n            // We\
    \ use bitwise AND to clear the bit\n            // We use bitwise AND to check\
    \ if the bit is clear\n            // We use bitwise OR to set the bit\n     \
    \       // We use bitwise XOR to flip the bit\n            // We use bitwise NOT\
    \ to invert the bits\n            // We use bitwise AND to clear the bit\n   \
    \         // We use bitwise AND to check if the bit is clear\n            // We\
    \ use bitwise OR to set the bit\n            // We use bitwise XOR to flip the\
    \ bit\n            // We use bitwise NOT to invert the bits\n            // We\
    \ use bitwise AND to clear the bit\n            // We use bitwise AND to check\
    \ if the bit is clear\n            // We use bitwise OR to set the bit\n     \
    \       // We use bitwise XOR to flip the bit\n            // We use bitwise NOT\
    \ to invert the bits\n            // We use bitwise AND to clear the bit\n   \
    \         // We use bitwise AND to check if the bit is clear\n            // We\
    \ use bitwise OR to set the bit\n            // We use bitwise XOR to flip the\
    \ bit\n            // We use bitwise NOT to invert\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5do14wuj.cs(51,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp5do14wuj.cs(59,2): error CS1513: } expected

    '
  timestamp: 1659977160
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        var chars = str.ToLower().ToCharArray();\n        var distinctChars =\
    \ chars.Distinct();\n        return distinctChars.Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var distinctChars = new HashSet<char>();\n        foreach (var\
    \ c in str) {\n            distinctChars.Add(char.ToLower(c));\n        }\n  \
    \      return distinctChars.Count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var ch in str)\
    \ {\n            set.Add(char.ToLower(ch));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var s = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            s.Add(char.ToLower(c));\n        }\n        return s.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        HashSet<char> set = new HashSet<char>();\n        foreach (char c in\
    \ str)\n        {\n            set.Add(c);\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8b0895b4e344c76be935dec24b61b7a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8b0895b4e344c76be935dec24b61b7a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        HashSet<char> hs = new HashSet<char>();\n        foreach (char c in str)\n\
    \        {\n            hs.Add(c);\n        }\n        return hs.Count;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4950e672c794402baa16749251776056>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4950e672c794402baa16749251776056>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var distinctChars = new HashSet<char>();\n        foreach (var\
    \ ch in str) {\n            distinctChars.Add(Char.ToLower(ch));\n        }\n\
    \        return distinctChars.Count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Convert the string to lowercase\n        str = str.ToLower();\n\
    \        // Create a hashset to store the characters\n        HashSet<char> chars\
    \ = new HashSet<char>();\n        // Iterate through the string and add the characters\
    \ to the hashset\n        foreach (char c in str) {\n            chars.Add(c);\n\
    \        }\n        // Return the number of characters in the hashset\n      \
    \  return chars.Count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.Distinct().Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2d8e75a9c434b038cf7240b26b863ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2d8e75a9c434b038cf7240b26b863ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Convert the string to lowercase\n        str = str.ToLower();\n\
    \        // Create a hashset to store the distinct characters\n        HashSet<char>\
    \ distinctChars = new HashSet<char>();\n        // Iterate through the string\
    \ and add each character to the hashset\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            distinctChars.Add(str[i]);\n        }\n        // Return\
    \ the number of distinct characters\n        return distinctChars.Count;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var distinct = new HashSet<char>();\n        foreach (var ch\
    \ in str) {\n            distinct.Add(char.ToLower(ch));\n        }\n        return\
    \ distinct.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Convert to lowercase\n        str = str.ToLower();\n    \
    \    // Create a hashset to store the characters\n        HashSet<char> hs = new\
    \ HashSet<char>();\n        // Add each character to the hashset\n        foreach\
    \ (char c in str) {\n            hs.Add(c);\n        }\n        // Return the\
    \ number of distinct characters\n        return hs.Count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))\
    \ == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // convert to lower case\n        str = str.ToLower();\n   \
    \     // create a dictionary to store the count of each character\n        Dictionary<char,\
    \ int> dict = new Dictionary<char, int>();\n        // loop through the string\n\
    \        for (int i = 0; i < str.Length; i++) {\n            // if the character\
    \ is not in the dictionary, add it\n            if (!dict.ContainsKey(str[i]))\
    \ {\n                dict.Add(str[i], 1);\n            }\n        }\n        //\
    \ return the number of distinct characters\n        return dict.Count;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var distinctChars = new HashSet<char>();\n        foreach (var\
    \ c in str) {\n            distinctChars.Add(char.ToLower(c));\n        }\n  \
    \      return distinctChars.Count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var chars = new HashSet<char>();\n        foreach (var c in\
    \ str) {\n            chars.Add(char.ToLower(c));\n        }\n        return chars.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        long count = 0;\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            if (str.Substring(0, i).ToLower().IndexOf(str[i].ToString().ToLower())\
    \ == -1) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: implement this method\n        //throw new NotImplementedException();\n\
    \        return str.Distinct().Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96c8bd0bf6eb42a98787cec229d2a265>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96c8bd0bf6eb42a98787cec229d2a265>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Convert to lowercase\n        str = str.ToLower();\n    \
    \    // Create a hashset to store the characters\n        HashSet<char> hashset\
    \ = new HashSet<char>();\n        // Iterate through the string\n        foreach\
    \ (char c in str) {\n            // Add the character to the hashset\n       \
    \     hashset.Add(c);\n        }\n        // Return the number of distinct characters\n\
    \        return hashset.Count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        HashSet<char> distinct = new HashSet<char>();\n        foreach\
    \ (char c in str) {\n            distinct.Add(char.ToLower(c));\n        }\n \
    \       return distinct.Count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.Distinct().Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2d8e75a9c434b038cf7240b26b863ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2d8e75a9c434b038cf7240b26b863ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Convert to lower case\n        str = str.ToLower();\n   \
    \     // Create a hash set\n        HashSet<char> set = new HashSet<char>();\n\
    \        // Iterate through the string\n        foreach (char c in str) {\n  \
    \          // Add the character to the set\n            set.Add(c);\n        }\n\
    \        // Return the number of elements in the set\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Convert to lowercase\n        str = str.ToLower();\n    \
    \    // Create a dictionary to store the count of each character\n        Dictionary<char,\
    \ int> charCount = new Dictionary<char, int>();\n        // Iterate through the\
    \ string\n        for (int i = 0; i < str.Length; i++) {\n            // If the\
    \ character is not in the dictionary, add it\n            if (!charCount.ContainsKey(str[i]))\
    \ {\n                charCount.Add(str[i], 0);\n            }\n            //\
    \ Increment the count of the character\n            charCount[str[i]]++;\n   \
    \     }\n        // Return the number of distinct characters\n        return charCount.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // We use a set to keep track of the distinct characters\n \
    \       HashSet<char> distinctChars = new HashSet<char>();\n        foreach (char\
    \ c in str) {\n            // We add the character to the set, but we convert\
    \ it to lowercase first\n            distinctChars.Add(Char.ToLower(c));\n   \
    \     }\n        // We return the number of distinct characters\n        return\
    \ distinctChars.Count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Convert to lowercase\n        str = str.ToLower();\n    \
    \    // Create a dictionary to store the count of each character\n        Dictionary<char,\
    \ int> charCount = new Dictionary<char, int>();\n        // Iterate through the\
    \ string\n        for (int i = 0; i < str.Length; i++) {\n            // If the\
    \ character is already in the dictionary, increment the count\n            if\
    \ (charCount.ContainsKey(str[i])) {\n                charCount[str[i]]++;\n  \
    \          }\n            // Otherwise, add it to the dictionary with a count\
    \ of 1\n            else {\n                charCount.Add(str[i], 1);\n      \
    \      }\n        }\n        // Return the number of distinct characters\n   \
    \     return charCount.Count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var distinctChars = new HashSet<char>();\n        foreach (var\
    \ c in str) {\n            distinctChars.Add(char.ToLower(c));\n        }\n  \
    \      return distinctChars.Count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // We use a bit vector to keep track of which characters we\
    \ have seen so far\n        // We use a bit vector because we only have 26 characters\
    \ to keep track of\n        // We use a long because we need 64 bits to keep track\
    \ of 26 characters\n        long bitVector = 0;\n        // We iterate through\
    \ the string and set the corresponding bit in the bit vector\n        foreach\
    \ (char c in str) {\n            // We use the bitwise OR operator to set the\
    \ bit\n            // We use the bitwise AND operator to check if the bit is already\
    \ set\n            // We use the bitwise XOR operator to toggle the bit\n    \
    \        // We use the bitwise NOT operator to invert the bit\n            //\
    \ We use the bitwise left shift operator to shift the bit to the left\n      \
    \      // We use the bitwise right shift operator to shift the bit to the right\n\
    \            // We use the bitwise left shift operator to shift the bit to the\
    \ left\n            // We use the bitwise right shift operator to shift the bit\
    \ to the right\n            // We use the bitwise left shift operator to shift\
    \ the bit to the left\n            // We use the bitwise right shift operator\
    \ to shift the bit to the right\n            // We use the bitwise left shift\
    \ operator to shift the bit to the left\n            // We use the bitwise right\
    \ shift operator to shift the bit to the right\n            // We use the bitwise\
    \ left shift operator to shift the bit to the left\n            // We use the\
    \ bitwise right shift operator to shift the bit to the right\n            // We\
    \ use the bitwise left shift operator to shift the bit to the left\n         \
    \   // We use the bitwise right shift operator to shift the bit to the right\n\
    \            // We use the bitwise left shift operator to shift the bit to the\
    \ left\n            // We use the bitwise right shift operator to shift the bit\
    \ to the right\n            // We use the bitwise left shift operator to shift\
    \ the bit to the left\n            // We use the bitwise right shift operator\
    \ to shift the bit to the right\n            // We use the bitwise left shift\
    \ operator to shift the bit to the left\n            // We use the bitwise right\
    \ shift operator to shift the bit to the right\n            // We use the bitwise\
    \ left shift operator to shift the bit to the left\n            // We use the\
    \ bitwise right shift operator to shift the bit to\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1dx4kw4h.cs(42,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp1dx4kw4h.cs(50,2): error CS1513: } expected

    '
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Convert the string to lowercase\n        str = str.ToLower();\n\
    \        // Create a dictionary to store the characters\n        Dictionary<char,\
    \ int> dict = new Dictionary<char, int>();\n        // Iterate through the string\n\
    \        for (int i = 0; i < str.Length; i++) {\n            // If the character\
    \ is not in the dictionary, add it\n            if (!dict.ContainsKey(str[i]))\
    \ {\n                dict.Add(str[i], 0);\n            }\n        }\n        //\
    \ Return the number of distinct characters\n        return dict.Count;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var s = new HashSet<char>();\n        for (int i = 0; i < str.Length;\
    \ i++) {\n            s.Add(char.ToLower(str[i]));\n        }\n        return\
    \ s.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // We will use a bit vector to store the characters\n      \
    \  // Each bit in the vector will correspond to a character\n        // If the\
    \ bit is set, then the character is present in the string\n        // If the bit\
    \ is not set, then the character is not present in the string\n        // We will\
    \ use the ASCII code of the character to determine the bit position\n        //\
    \ For example, if the character is 'a', then the bit position will be 97\n   \
    \     // If the character is 'A', then the bit position will be 65\n        //\
    \ If the character is '0', then the bit position will be 48\n        // If the\
    \ character is '!', then the bit position will be 33\n        // If the character\
    \ is '~', then the bit position will be 126\n        // If the character is '\
    \ ', then the bit position will be 32\n        // If the character is '\\n', then\
    \ the bit position will be 10\n        // If the character is '\\r', then the\
    \ bit position will be 13\n        // If the character is '\\t', then the bit\
    \ position will be 9\n        // If the character is '\\0', then the bit position\
    \ will be 0\n        // If the character is '\\u0000', then the bit position will\
    \ be 0\n        // If the character is '\\u0001', then the bit position will be\
    \ 1\n        // If the character is '\\u0002', then the bit position will be 2\n\
    \        // If the character is '\\u0003', then the bit position will be 3\n \
    \       // If the character is '\\u0004', then the bit position will be 4\n  \
    \      // If the character is '\\u0005', then the bit position will be 5\n   \
    \     // If the character is '\\u0006', then the bit position will be 6\n    \
    \    // If the character is '\\u0007', then the bit position will be 7\n     \
    \   // If the character is '\\u0008', then the bit position will be 8\n      \
    \  // If the character is '\\u000E', then the bit position will be 14\n      \
    \  // If the character is '\\u000F', then the bit position will be 15\n      \
    \  // If the character is '\\u0010', then the bit position will be 16\n      \
    \  // If the character is '\\u0011', then the bit position will be 17\n\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbk6g8r69.cs(10,24): error CS0161: ''Problem.CountDistinctCharacters(string)'':
    not all code paths return a value

    '
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Create a dictionary to keep track of the number of times\
    \ each character appears\n        Dictionary<char, int> charCount = new Dictionary<char,\
    \ int>();\n        // Loop through each character in the string\n        foreach\
    \ (char c in str) {\n            // If the character is already in the dictionary,\
    \ increment its count\n            if (charCount.ContainsKey(c)) {\n         \
    \       charCount[c]++;\n            }\n            // Otherwise, add it to the\
    \ dictionary with a count of 1\n            else {\n                charCount.Add(c,\
    \ 1);\n            }\n        }\n        // Return the number of keys in the dictionary\n\
    \        return charCount.Keys.Count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b08d4c2d4ebe435c8a0e158b27f1c7fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b08d4c2d4ebe435c8a0e158b27f1c7fd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Convert the string to lowercase\n        str = str.ToLower();\n\
    \        // Create a set to store the distinct characters\n        HashSet<char>\
    \ distinctChars = new HashSet<char>();\n        // Iterate over the string and\
    \ add each character to the set\n        foreach (char c in str) {\n         \
    \   distinctChars.Add(c);\n        }\n        // Return the number of distinct\
    \ characters\n        return distinctChars.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var chars = str.ToCharArray();\n        var distinctChars =\
    \ new HashSet<char>();\n        foreach (var c in chars) {\n            distinctChars.Add(char.ToLower(c));\n\
    \        }\n        return distinctChars.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Use a bit vector to store the characters\n        long bitVector\
    \ = 0;\n        foreach (char c in str) {\n            // Get the bit index of\
    \ the character\n            int bitIndex = GetBitIndex(c);\n            // If\
    \ the bit is not set, set it\n            if ((bitVector & (1L << bitIndex)) ==\
    \ 0) {\n                bitVector |= (1L << bitIndex);\n            }\n      \
    \  }\n        // Count the number of bits set\n        return CountBits(bitVector);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphuy8lmuc.cs(15,28): error CS0103: The name ''GetBitIndex'' does not exist
    in the current context

    /tmp/tmphuy8lmuc.cs(22,16): error CS0103: The name ''CountBits'' does not exist
    in the current context

    '
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // We will use a set to keep track of the characters we have\
    \ seen\n        HashSet<char> seen = new HashSet<char>();\n        // Loop through\
    \ the string and add each character to the set\n        foreach (char c in str)\
    \ {\n            seen.Add(c);\n        }\n        // Return the number of distinct\
    \ characters\n        return seen.Count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cecda49b11e74780969229238c952466>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cecda49b11e74780969229238c952466>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\"))\
    \ == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee66cb1296444367aea1f27fdb82227c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee66cb1296444367aea1f27fdb82227c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Convert to lower case\n        str = str.ToLower();\n   \
    \     // Create a dictionary to store the count of each character\n        Dictionary<char,\
    \ int> charCount = new Dictionary<char, int>();\n        // Iterate through the\
    \ string\n        for (int i = 0; i < str.Length; i++) {\n            // If the\
    \ character is not in the dictionary, add it\n            if (!charCount.ContainsKey(str[i]))\
    \ {\n                charCount.Add(str[i], 0);\n            }\n            //\
    \ Increment the count of the character\n            charCount[str[i]]++;\n   \
    \     }\n        // Return the count of distinct characters\n        return charCount.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: implement this function\n        // Hint: use a hash\
    \ set\n        HashSet<char> set = new HashSet<char>();\n        foreach (char\
    \ c in str) {\n            set.Add(c);\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e4552b4e124441c86a60a6dbcc900f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e4552b4e124441c86a60a6dbcc900f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var chars = new HashSet<char>();\n        foreach (var c in\
    \ str) {\n            chars.Add(char.ToLower(c));\n        }\n        return chars.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        return 0;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee0193ab20354a498f740074e5b712ad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee0193ab20354a498f740074e5b712ad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1fc0d21fba40473ab89519192ed67f15>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1fc0d21fba40473ab89519192ed67f15>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // We use a hash set to keep track of the characters we have\
    \ seen\n        HashSet<char> seen = new HashSet<char>();\n        foreach (char\
    \ c in str) {\n            // If we have not seen this character before, add it\
    \ to the set\n            if (!seen.Contains(c)) {\n                seen.Add(c);\n\
    \            }\n        }\n        // Return the number of distinct characters\n\
    \        return seen.Count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a921df307a994754b84e308a89f802e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a921df307a994754b84e308a89f802e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        HashSet<char> hs = new HashSet<char>();\n        foreach (char c in str)\n\
    \        {\n            hs.Add(c);\n        }\n        return hs.Count;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4950e672c794402baa16749251776056>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4950e672c794402baa16749251776056>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this function\n        return 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36194ec5938649ebb8e4a8e08e63704c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36194ec5938649ebb8e4a8e08e63704c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Convert the string to lowercase\n        str = str.ToLower();\n\
    \        // Create a dictionary to store the count of each character\n       \
    \ Dictionary<char, int> charCount = new Dictionary<char, int>();\n        // Iterate\
    \ through each character in the string\n        foreach (char c in str) {\n  \
    \          // If the character is not in the dictionary, add it\n            if\
    \ (!charCount.ContainsKey(c)) {\n                charCount.Add(c, 0);\n      \
    \      }\n            // Increment the count of the character\n            charCount[c]++;\n\
    \        }\n        // Return the number of distinct characters\n        return\
    \ charCount.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        long result = 0;\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            if (str[i] >= 'a' && str[i] <= 'z') {\n                result\
    \ |= 1 << (str[i] - 'a');\n            } else if (str[i] >= 'A' && str[i] <= 'Z')\
    \ {\n                result |= 1 << (str[i] - 'A');\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96ae8ec154554842adf58a109818a3a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96ae8ec154554842adf58a109818a3a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var ch in str)\
    \ {\n            set.Add(char.ToLower(ch));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        HashSet<char> hs = new HashSet<char>();\n        foreach (char\
    \ c in str) {\n            hs.Add(char.ToLower(c));\n        }\n        return\
    \ hs.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this function\n        return 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36194ec5938649ebb8e4a8e08e63704c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36194ec5938649ebb8e4a8e08e63704c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Convert to lowercase\n        str = str.ToLower();\n    \
    \    // Create a hashset to store the characters\n        HashSet<char> set =\
    \ new HashSet<char>();\n        // Iterate over the string\n        foreach (char\
    \ c in str) {\n            // Add the character to the hashset\n            set.Add(c);\n\
    \        }\n        // Return the number of elements in the hashset\n        return\
    \ set.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // We use a bit vector to store the characters\n        // Each\
    \ bit represents a character\n        // If the bit is set, then the character\
    \ is present in the string\n        // We use a long to store the bit vector\n\
    \        long bitVector = 0;\n        // We iterate over the string and set the\
    \ corresponding bit for each character\n        foreach (char c in str) {\n  \
    \          // We convert the character to lower case\n            char lowerCase\
    \ = char.ToLower(c);\n            // We get the index of the character in the\
    \ alphabet\n            int index = lowerCase - 'a';\n            // We set the\
    \ bit at the index\n            bitVector |= 1L << index;\n        }\n       \
    \ // We count the number of bits set in the bit vector\n        long count = 0;\n\
    \        while (bitVector > 0) {\n            // We check if the least significant\
    \ bit is set\n            if ((bitVector & 1) == 1) {\n                // If it\
    \ is, we increment the count\n                count++;\n            }\n      \
    \      // We shift the bit vector to the right\n            bitVector >>= 1;\n\
    \        }\n        // We return the count\n        return count;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1eec1c303b64828b498496907bbc017>:0 \n"
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        HashSet<char> distinct = new HashSet<char>();\n        foreach (char\
    \ c in str)\n        {\n            distinct.Add(c);\n        }\n        return\
    \ distinct.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be39f833f6b34c98ad3a426c3c05ae01>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be39f833f6b34c98ad3a426c3c05ae01>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        long count = 0;\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            if (str.Substring(0, i).ToLower().IndexOf(str[i].ToString().ToLower())\
    \ == -1) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // We will use a bit vector to keep track of which characters\
    \ we have seen\n        // The bit vector is a long, which is 64 bits\n      \
    \  // We will use the first 32 bits to keep track of lowercase characters, and\
    \ the last 32 bits to keep track of uppercase characters\n        // This is because\
    \ there are only 26 letters in the alphabet, so we only need 26 bits\n       \
    \ // We will use the first bit to keep track of 'a', the second bit to keep track\
    \ of 'b', etc.\n        // We will use the first bit to keep track of 'A', the\
    \ second bit to keep track of 'B', etc.\n        // To check if we have seen a\
    \ character, we will use the bitwise AND operator\n        // To mark that we\
    \ have seen a character, we will use the bitwise OR operator\n        // To mark\
    \ that we have seen a character, we will use the bitwise XOR operator\n      \
    \  // To check if a bit is set, we will use the bitwise AND operator\n       \
    \ // To set a bit, we will use the bitwise OR operator\n        // To unset a\
    \ bit, we will use the bitwise XOR operator\n        // To get the bit at a certain\
    \ position, we will use the bitwise AND operator\n        // To set the bit at\
    \ a certain position, we will use the bitwise OR operator\n        // To unset\
    \ the bit at a certain position, we will use the bitwise XOR operator\n      \
    \  long bitVector = 0;\n        // We will use a loop to go through each character\
    \ in the string\n        for (int i = 0; i < str.Length; i++) {\n            //\
    \ We will get the character at the current index\n            char c = str[i];\n\
    \            // We will get the position of the bit that we need to check/set/unset\n\
    \            // We will get the position of the bit that we need to check/set/unset\n\
    \            int pos;\n            // If the character is lowercase, we will get\
    \ the position of the bit in the first 32 bits\n            if (c >= 'a' && c\
    \ <= 'z') {\n                pos = c - 'a';\n            }\n            // If\
    \ the character is uppercase, we will get the position of the bit in the last\
    \ 32 bits\n            else if (c >= 'A' &&\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpid4mhfbg.cs(39,33): error CS1525: Invalid expression term ''}''

    /tmp/tmpid4mhfbg.cs(39,33): error CS1026: ) expected

    /tmp/tmpid4mhfbg.cs(39,33): error CS1002: ; expected

    /tmp/tmpid4mhfbg.cs(41,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpid4mhfbg.cs(49,2): error CS1513: } expected

    '
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        HashSet<char> set = new HashSet<char>();\n        foreach (char\
    \ c in str) {\n            set.Add(char.ToLower(c));\n        }\n        return\
    \ set.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        long count = 0;\n        for (int i = 0; i < str.Length; i++)\
    \ {\n            if (str.IndexOf(str[i], i + 1) == -1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b84e1f78b6741d3a3281f6f4cbf9a7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b84e1f78b6741d3a3281f6f4cbf9a7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Convert to lowercase\n        str = str.ToLower();\n    \
    \    // Create a hashset to store the characters\n        HashSet<char> hs = new\
    \ HashSet<char>();\n        // Iterate over the string\n        foreach (char\
    \ c in str) {\n            // Add the character to the hashset\n            hs.Add(c);\n\
    \        }\n        // Return the number of distinct characters\n        return\
    \ hs.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var chars = str.ToLower().ToCharArray();\n        var distinct\
    \ = new HashSet<char>();\n        foreach (var c in chars) {\n            distinct.Add(c);\n\
    \        }\n        return distinct.Count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var distinct = new HashSet<char>();\n        foreach (var c\
    \ in str) {\n            distinct.Add(char.ToLower(c));\n        }\n        return\
    \ distinct.Count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        str = str.ToLower();\n        var dic = new Dictionary<char, int>();\n\
    \        foreach (var c in str)\n        {\n            if (dic.ContainsKey(c))\n\
    \            {\n                dic[c]++;\n            }\n            else\n \
    \           {\n                dic.Add(c, 1);\n            }\n        }\n    \
    \    return dic.Count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\"\
    )) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) ==\
    \ (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\")) ==\
    \ (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var chars = new HashSet<char>();\n        foreach (var c in\
    \ str) {\n            chars.Add(char.ToLower(c));\n        }\n        return chars.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Convert to lowercase\n        str = str.ToLower();\n    \
    \    // Create a hashset to store distinct characters\n        HashSet<char> distinctChars\
    \ = new HashSet<char>();\n        // Iterate through the string\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            // If the character is not in the\
    \ hashset, add it\n            if (!distinctChars.Contains(str[i])) {\n      \
    \          distinctChars.Add(str[i]);\n            }\n        }\n        // Return\
    \ the number of distinct characters\n        return distinctChars.Count;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this function\n        // Hint: Use a dictionary\
    \ to store the count of each character\n        Dictionary<char, int> dict = new\
    \ Dictionary<char, int>();\n        foreach (char c in str) {\n            if\
    \ (dict.ContainsKey(c)) {\n                dict[c]++;\n            } else {\n\
    \                dict.Add(c, 1);\n            }\n        }\n        return dict.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d37ff84dae2a4519a698934efe514432>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d37ff84dae2a4519a698934efe514432>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977163
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this method\n        //throw new NotImplementedException();\n\
    \        return str.ToLower().Distinct().Count();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\")) == (0L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"\
    abcdecadeCADE\")) == (5L));\n    Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\"\
    )) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"Jerry jERRY JeRRRY\"\
    )) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // TODO: Implement this function\n        return 0;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36194ec5938649ebb8e4a8e08e63704c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36194ec5938649ebb8e4a8e08e63704c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977162
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        var set = new HashSet<char>();\n        foreach (var c in str)\
    \ {\n            set.Add(char.ToLower(c));\n        }\n        return set.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        return str.ToLower().Distinct().Count();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977161
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string, find out how many distinct characters\
    \ (regardless of case) does it consist of\n    public static long CountDistinctCharacters(string\
    \ str) {\n        // Your code goes here\n        return str.ToLower().Distinct().Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountDistinctCharacters((\"\
    \")) == (0L));\n    Debug.Assert(CountDistinctCharacters((\"abcde\")) == (5L));\n\
    \    Debug.Assert(CountDistinctCharacters((\"abcdecadeCADE\")) == (5L));\n   \
    \ Debug.Assert(CountDistinctCharacters((\"aaaaAAAAaaaa\")) == (1L));\n    Debug.Assert(CountDistinctCharacters((\"\
    Jerry jERRY JeRRRY\")) == (5L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977162
