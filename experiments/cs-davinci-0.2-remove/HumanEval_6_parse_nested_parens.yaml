name: HumanEval_6_parse_nested_parens
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n    // For each of the group, output\
  \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two\
  \ levels of nesting while ((())) has three.\n    public static List<long> ParseNestedParens(string\
  \ paren_string) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
  (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
  \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
  \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
  \ long[]{(long)4L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long max_depth\
    \ = 0;\n        long current_depth = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = Math.Max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_depth);\n                max_depth =\
    \ 0;\n                current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.Add(max_depth);\n        return result;", "        // TODO: Implement\
    \ this function.\n        return new List<long>();", "        List<long> result\
    \ = new List<long>();\n        long max_depth = 0;\n        long current_depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                current_depth++;\n                max_depth = Math.Max(max_depth,\
    \ current_depth);\n            } else if (c == ')') {\n                current_depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n        }\n        result.Add(max_depth);\n        return result;", " \
    \       var result = new List<long>();\n        var stack = new Stack<char>();\n\
    \        long max = 0;\n        foreach (var c in paren_string) {\n          \
    \  if (c == '(') {\n                stack.Push(c);\n                max = Math.Max(max,\
    \ stack.Count);\n            } else if (c == ')') {\n                stack.Pop();\n\
    \            } else if (c == ' ') {\n                result.Add(max);\n      \
    \          max = 0;\n            }\n        }\n        result.Add(max);\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ long max_depth = 0;\n        long cur_depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                cur_depth++;\n\
    \                max_depth = Math.Max(max_depth, cur_depth);\n            } else\
    \ if (c == ')') {\n                cur_depth--;\n            } else if (c == '\
    \ ') {\n                result.Add(max_depth);\n                max_depth = 0;\n\
    \                cur_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int max_depth = 0;\n        int depth = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_depth = 0;\n        long depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        var result\
    \ = new List<long>();\n        var stack = new Stack<long>();\n        long max\
    \ = 0;\n        foreach (var c in paren_string) {\n            if (c == '(') {\n\
    \                stack.Push(max);\n                max = 0;\n            } else\
    \ if (c == ')') {\n                result.Add(max);\n                max = stack.Pop();\n\
    \            } else if (c == ' ') {\n                result.Add(max);\n      \
    \          max = 0;\n            } else {\n                max++;\n          \
    \  }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max_depth = 0;\n        long depth = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                max_depth = Math.Max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            } else if (c == ' ') {\n\
    \                result.Add(max_depth);\n                max_depth = 0;\n    \
    \            depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        for (int i = 0; i\
    \ < paren_string.Length; i++) {\n            if (paren_string[i] == '(') {\n \
    \               depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (paren_string[i] == ')') {\n                depth--;\n\
    \            } else if (paren_string[i] == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_depth = 0;\n        long current_depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                current_depth++;\n                max_depth = Math.Max(max_depth,\
    \ current_depth);\n            } else if (c == ')') {\n                current_depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n        }\n        result.Add(max_depth);\n        return result;", " \
    \       var result = new List<long>();\n        var current_level = 0;\n     \
    \   var max_level = 0;\n        foreach (var c in paren_string) {\n          \
    \  if (c == '(') {\n                current_level++;\n                max_level\
    \ = Math.Max(max_level, current_level);\n            } else if (c == ')') {\n\
    \                current_level--;\n            } else if (c == ' ') {\n      \
    \          result.Add(max_level);\n                max_level = 0;\n          \
    \      current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.Add(max_depth);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max_depth = 0;\n        long depth = 0;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // TODO: Implement this function.\n       \
    \ List<long> result = new List<long>();\n        long depth = 0;\n        long\
    \ max_depth = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n  \
    \          if (paren_string[i] == '(') {\n                depth++;\n         \
    \       if (depth > max_depth) {\n                    max_depth = depth;\n   \
    \             }\n            } else if (paren_string[i] == ')') {\n          \
    \      depth--;\n            } else if (paren_string[i] == ' ') {\n          \
    \      result.Add(max_depth);\n                max_depth = 0;\n              \
    \  depth = 0;\n            }\n        }\n        result.Add(max_depth);\n    \
    \    return result;", "        var result = new List<long>();\n        var stack\
    \ = new Stack<char>();\n        var max_depth = 0;\n        foreach (var c in\
    \ paren_string) {\n            if (c == '(') {\n                stack.Push(c);\n\
    \                max_depth = Math.Max(max_depth, stack.Count);\n            }\
    \ else if (c == ')') {\n                if (stack.Count == 0) {\n            \
    \        throw new Exception(\"Unbalanced parentheses\");\n                }\n\
    \                stack.Pop();\n            } else if (c == ' ') {\n          \
    \      if (stack.Count != 0) {\n                    throw new Exception(\"Unbalanced\
    \ parentheses\");\n                }\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n            } else {\n                throw new\
    \ Exception(\"Invalid character\");\n            }\n        }\n        if (stack.Count\
    \ != 0) {\n            throw new Exception(\"Unbalanced parentheses\");\n    \
    \    }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_depth = 0;\n        long depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_depth = 0;\n        long depth\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if\
    \ (paren_string[i] == '(') {\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (paren_string[i] == ')')\
    \ {\n                depth--;\n            } else if (paren_string[i] == ' ')\
    \ {\n                result.Add(max_depth);\n                max_depth = 0;\n\
    \                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int max_depth = 0;\n        int depth = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_depth = 0;\n        long current_depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                current_depth++;\n                max_depth = Math.Max(max_depth,\
    \ current_depth);\n            } else if (c == ')') {\n                current_depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n        }\n        result.Add(max_depth);\n        return result;", " \
    \       var result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_depth\
    \ = 0;\n            var depth = 0;\n            foreach (var c in paren_group)\
    \ {\n                if (c == '(') {\n                    depth++;\n         \
    \           max_depth = Math.Max(max_depth, depth);\n                } else if\
    \ (c == ')') {\n                    depth--;\n                }\n            }\n\
    \            result.Add(max_depth);\n        }\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long max_nesting = 0;\n \
    \       long current_nesting = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                current_nesting++;\n\
    \                max_nesting = Math.Max(max_nesting, current_nesting);\n     \
    \       } else if (paren_string[i] == ')') {\n                current_nesting--;\n\
    \            } else if (paren_string[i] == ' ') {\n                result.Add(max_nesting);\n\
    \                max_nesting = 0;\n                current_nesting = 0;\n    \
    \        }\n        }\n        result.Add(max_nesting);\n        return result;",
  "        var result = new List<long>();\n        var stack = new Stack<char>();\n\
    \        var max = 0;\n        foreach (var c in paren_string) {\n           \
    \ if (c == '(') {\n                stack.Push(c);\n                max = Math.Max(max,\
    \ stack.Count);\n            } else if (c == ')') {\n                stack.Pop();\n\
    \            } else if (c == ' ') {\n                result.Add(max);\n      \
    \          max = 0;\n            }\n        }\n        result.Add(max);\n    \
    \    return result;", "        // TODO: Implement this function.\n        List<long>\
    \ result = new List<long>();\n        int max = 0;\n        int count = 0;\n \
    \       for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                count++;\n                if (count > max) {\n  \
    \                  max = count;\n                }\n            } else if (paren_string[i]\
    \ == ')') {\n                count--;\n            } else if (paren_string[i]\
    \ == ' ') {\n                result.Add(max);\n                max = 0;\n    \
    \            count = 0;\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_nesting = 0;\n        long cur_nesting = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                cur_nesting++;\n\
    \                max_nesting = Math.Max(max_nesting, cur_nesting);\n         \
    \   } else if (c == ')') {\n                cur_nesting--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_nesting);\n                max_nesting\
    \ = 0;\n                cur_nesting = 0;\n            }\n        }\n        result.Add(max_nesting);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ stack = new Stack<char>();\n        var max_depth = 0;\n        foreach (var\
    \ c in paren_string) {\n            if (c == '(') {\n                stack.Push(c);\n\
    \                max_depth = Math.Max(max_depth, stack.Count);\n            }\
    \ else if (c == ')') {\n                stack.Pop();\n            } else if (c\
    \ == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n            }\n        }\n        result.Add(max_depth);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max_depth\
    \ = 0;\n        long depth = 0;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        var\
    \ result = new List<long>();\n        var stack = new Stack<char>();\n       \
    \ var max_level = 0;\n        foreach (var c in paren_string) {\n            if\
    \ (c == '(') {\n                stack.Push(c);\n                max_level = Math.Max(max_level,\
    \ stack.Count);\n            } else if (c == ')') {\n                stack.Pop();\n\
    \            } else if (c == ' ') {\n                result.Add(max_level);\n\
    \                max_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_nesting = 0;\n        long current_nesting = 0;\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                current_nesting++;\n\
    \                max_nesting = Math.Max(max_nesting, current_nesting);\n     \
    \       } else if (c == ')') {\n                current_nesting--;\n         \
    \   } else if (c == ' ') {\n                result.Add(max_nesting);\n       \
    \         max_nesting = 0;\n                current_nesting = 0;\n           \
    \ }\n        }\n        result.Add(max_nesting);\n        return result;", " \
    \       var result = new List<long>();\n        var current_level = 0;\n     \
    \   var max_level = 0;\n        foreach (var c in paren_string) {\n          \
    \  if (c == '(') {\n                current_level++;\n                max_level\
    \ = Math.Max(max_level, current_level);\n            } else if (c == ')') {\n\
    \                current_level--;\n            } else if (c == ' ') {\n      \
    \          result.Add(max_level);\n                max_level = 0;\n          \
    \      current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ stack = new Stack<char>();\n        var max = 0;\n        foreach (var c in\
    \ paren_string) {\n            if (c == '(') {\n                stack.Push(c);\n\
    \                max = Math.Max(max, stack.Count);\n            } else if (c ==\
    \ ')') {\n                stack.Pop();\n            } else if (c == ' ') {\n \
    \               result.Add(max);\n                max = 0;\n            }\n  \
    \      }\n        result.Add(max);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_depth = 0;\n        long current_depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                current_depth++;\n                max_depth = Math.Max(max_depth,\
    \ current_depth);\n            } else if (c == ')') {\n                current_depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n        }\n        result.Add(max_depth);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max_depth = 0;\n \
    \       long current_depth = 0;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                current_depth++;\n             \
    \   max_depth = Math.Max(max_depth, current_depth);\n            } else if (c\
    \ == ')') {\n                current_depth--;\n            } else if (c == ' ')\
    \ {\n                result.Add(max_depth);\n                max_depth = 0;\n\
    \                current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ stack = new Stack<char>();\n        long max_depth = 0;\n        foreach (var\
    \ c in paren_string) {\n            if (c == '(') {\n                stack.Push(c);\n\
    \                max_depth = Math.Max(max_depth, stack.Count);\n            }\
    \ else if (c == ')') {\n                stack.Pop();\n            } else if (c\
    \ == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n            }\n        }\n        result.Add(max_depth);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max_depth\
    \ = 0;\n        long current_depth = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = Math.Max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_depth);\n                max_depth =\
    \ 0;\n                current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.Add(max_depth);\n        return result;", "        var result = new List<long>();\n\
    \        var stack = new Stack<char>();\n        var max_depth = 0;\n        var\
    \ current_depth = 0;\n        foreach (var c in paren_string) {\n            if\
    \ (c == '(') {\n                stack.Push(c);\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                if (stack.Count == 0) {\n          \
    \          throw new ArgumentException(\"Unbalanced parentheses\");\n        \
    \        }\n                stack.Pop();\n                current_depth--;\n \
    \           } else if (c == ' ') {\n                if (stack.Count != 0) {\n\
    \                    throw new ArgumentException(\"Unbalanced parentheses\");\n\
    \                }\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            } else {\n           \
    \     throw new ArgumentException(\"Invalid character\");\n            }\n   \
    \     }\n        if (stack.Count != 0) {\n            throw new ArgumentException(\"\
    Unbalanced parentheses\");\n        }\n        result.Add(max_depth);\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.Add(max_depth);\n        return result;", "        // TODO: Implement\
    \ this function.\n        // Hint: You may find the Stack class useful.\n    \
    \    List<long> result = new List<long>();\n        Stack<char> stack = new Stack<char>();\n\
    \        long max = 0;\n        foreach (char c in paren_string) {\n         \
    \   if (c == '(') {\n                stack.Push(c);\n                max++;\n\
    \            }\n            else if (c == ')') {\n                stack.Pop();\n\
    \                max--;\n            }\n            else if (c == ' ') {\n   \
    \             result.Add(max);\n                max = 0;\n            }\n    \
    \    }\n        result.Add(max);\n        return result;", "        var parens\
    \ = paren_string.Split(' ');\n        var result = new List<long>();\n       \
    \ foreach (var paren in parens) {\n            var max_level = 0;\n          \
    \  var level = 0;\n            foreach (var c in paren) {\n                if\
    \ (c == '(') {\n                    level++;\n                    max_level =\
    \ Math.Max(max_level, level);\n                } else if (c == ')') {\n      \
    \              level--;\n                }\n            }\n            result.Add(max_level);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max_depth = 0;\n        long current_depth = 0;\n        for (int\
    \ i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i] == '(')\
    \ {\n                current_depth++;\n                max_depth = Math.Max(max_depth,\
    \ current_depth);\n            } else if (paren_string[i] == ')') {\n        \
    \        current_depth--;\n            } else if (paren_string[i] == ' ') {\n\
    \                result.Add(max_depth);\n                max_depth = 0;\n    \
    \            current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ max_depth = 0;\n        var current_depth = 0;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = Math.Max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_depth);\n                max_depth =\
    \ 0;\n                current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.Add(max_depth);\n        return result;", "        List<long> max_nest_levels\
    \ = new List<long>();\n        long max_nest_level = 0;\n        long current_nest_level\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                current_nest_level++;\n                if (current_nest_level\
    \ > max_nest_level) {\n                    max_nest_level = current_nest_level;\n\
    \                }\n            } else if (c == ')') {\n                current_nest_level--;\n\
    \            } else if (c == ' ') {\n                max_nest_levels.Add(max_nest_level);\n\
    \                max_nest_level = 0;\n                current_nest_level = 0;\n\
    \            }\n        }\n        max_nest_levels.Add(max_nest_level);\n    \
    \    return max_nest_levels;", "        List<long> result = new List<long>();\n\
    \        long max_nesting = 0;\n        long current_nesting = 0;\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                current_nesting++;\n\
    \                max_nesting = Math.Max(max_nesting, current_nesting);\n     \
    \       } else if (c == ')') {\n                current_nesting--;\n         \
    \   } else if (c == ' ') {\n                result.Add(max_nesting);\n       \
    \         max_nesting = 0;\n                current_nesting = 0;\n           \
    \ }\n        }\n        result.Add(max_nesting);\n        return result;", " \
    \       var result = new List<long>();\n        var stack = new Stack<long>();\n\
    \        var max = 0L;\n        foreach (var c in paren_string) {\n          \
    \  if (c == '(') {\n                stack.Push(max);\n                max = 0;\n\
    \            } else if (c == ')') {\n                result.Add(max);\n      \
    \          max = stack.Pop();\n            } else if (c == ' ') {\n          \
    \      result.Add(max);\n                max = 0;\n            } else {\n    \
    \            max++;\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long max_depth = 0;\n    \
    \    long depth = 0;\n        foreach (char c in paren_string) {\n           \
    \ if (c == '(') {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        var result\
    \ = new List<long>();\n        var stack = new Stack<char>();\n        var max_depth\
    \ = 0;\n        foreach (var c in paren_string) {\n            if (c == '(') {\n\
    \                stack.Push(c);\n                max_depth = Math.Max(max_depth,\
    \ stack.Count);\n            } else if (c == ')') {\n                stack.Pop();\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.Add(max_depth);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max_depth = 0;\n        long depth = 0;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.Add(max_depth);\n        return result;", "        var result = new List<long>();\n\
    \        var current_level = 0;\n        var max_level = 0;\n        foreach (var\
    \ c in paren_string) {\n            if (c == '(') {\n                current_level++;\n\
    \                max_level = Math.Max(max_level, current_level);\n           \
    \ } else if (c == ')') {\n                current_level--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_level);\n                max_level\
    \ = 0;\n                current_level = 0;\n            }\n        }\n       \
    \ result.Add(max_level);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max_level = 0;\n        long current_level\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                current_level += 1;\n                max_level = Math.Max(max_level,\
    \ current_level);\n            } else if (c == ')') {\n                current_level\
    \ -= 1;\n            } else if (c == ' ') {\n                result.Add(max_level);\n\
    \                max_level = 0;\n                current_level = 0;\n        \
    \    }\n        }\n        result.Add(max_level);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max_depth = 0;\n \
    \       long current_depth = 0;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                current_depth++;\n             \
    \   max_depth = Math.Max(max_depth, current_depth);\n            } else if (c\
    \ == ')') {\n                current_depth--;\n            } else if (c == ' ')\
    \ {\n                result.Add(max_depth);\n                max_depth = 0;\n\
    \                current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // TODO: Implement this function.\n       \
    \ return new List<long>();", "        List<long> result = new List<long>();\n\
    \        long max_depth = 0;\n        long current_depth = 0;\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.Add(max_depth);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max_depth = 0;\n        long depth = 0;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ max_depth = 0;\n        var depth = 0;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        //\
    \ TODO: Implement this function.\n        List<long> ans = new List<long>();\n\
    \        int max = 0;\n        int cur = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                cur++;\n                max\
    \ = Math.Max(max, cur);\n            } else if (c == ')') {\n                cur--;\n\
    \            }\n        }\n        ans.Add(max);\n        return ans;", "    \
    \    // TODO: Implement this function.\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long count = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++)\n        {\n            if (paren_string[i] == '(')\n            {\n  \
    \              count++;\n                if (count > max)\n                {\n\
    \                    max = count;\n                }\n            }\n        \
    \    else if (paren_string[i] == ')')\n            {\n                count--;\n\
    \            }\n            else if (paren_string[i] == ' ')\n            {\n\
    \                result.Add(max);\n                max = 0;\n                count\
    \ = 0;\n            }\n        }\n        result.Add(max);\n        return result;",
  "        var result = new List<long>();\n        var stack = new Stack<char>();\n\
    \        var max = 0;\n        foreach (var c in paren_string) {\n           \
    \ if (c == '(') {\n                stack.Push(c);\n                max = Math.Max(max,\
    \ stack.Count);\n            } else if (c == ')') {\n                stack.Pop();\n\
    \            } else if (c == ' ') {\n                result.Add(max);\n      \
    \          max = 0;\n            }\n        }\n        result.Add(max);\n    \
    \    return result;", "        // TODO: Implement this function.\n        // Hint:\
    \ Use a stack to keep track of the current level of nesting.\n        List<long>\
    \ result = new List<long>();\n        Stack<long> stack = new Stack<long>();\n\
    \        long max = 0;\n        for (int i = 0; i < paren_string.Length; i++)\
    \ {\n            if (paren_string[i] == '(') {\n                stack.Push(1);\n\
    \                max++;\n            } else if (paren_string[i] == ')') {\n  \
    \              stack.Pop();\n            } else if (paren_string[i] == ' ') {\n\
    \                result.Add(max);\n                max = 0;\n            }\n \
    \       }\n        result.Add(max);\n        return result;", "        // TODO:\
    \ Implement this function\n        List<long> result = new List<long>();\n   \
    \     int count = 0;\n        long max = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++)\n        {\n            if (paren_string[i] == '(')\n            {\n  \
    \              count++;\n                if (count > max)\n                {\n\
    \                    max = count;\n                }\n            }\n        \
    \    else if (paren_string[i] == ')')\n            {\n                count--;\n\
    \            }\n            else if (paren_string[i] == ' ')\n            {\n\
    \                result.Add(max);\n                max = 0;\n                count\
    \ = 0;\n            }\n        }\n        result.Add(max);\n        return result;",
  "        List<long> result = new List<long>();\n        long max_depth = 0;\n  \
    \      long current_depth = 0;\n        foreach (char c in paren_string) {\n \
    \           if (c == '(') {\n                current_depth++;\n              \
    \  max_depth = Math.Max(max_depth, current_depth);\n            } else if (c ==\
    \ ')') {\n                current_depth--;\n            } else if (c == ' ') {\n\
    \                result.Add(max_depth);\n                max_depth = 0;\n    \
    \            current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ current_level = 0;\n        var max_level = 0;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                current_level++;\n         \
    \       max_level = Math.Max(max_level, current_level);\n            } else if\
    \ (c == ')') {\n                current_level--;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_level);\n                max_level =\
    \ 0;\n                current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.Add(max_depth);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max_depth = 0;\n        long current_depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                current_depth++;\n                max_depth = Math.Max(max_depth,\
    \ current_depth);\n            } else if (c == ')') {\n                current_depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n        }\n        result.Add(max_depth);\n        return result;", " \
    \       var result = new List<long>();\n        var stack = new Stack<char>();\n\
    \        var max_depth = 0;\n        foreach (var c in paren_string) {\n     \
    \       if (c == '(') {\n                stack.Push(c);\n                max_depth\
    \ = Math.Max(max_depth, stack.Count);\n            } else if (c == ')') {\n  \
    \              stack.Pop();\n            } else if (c == ' ') {\n            \
    \    result.Add(max_depth);\n                max_depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long count = 0;\n\
    \        for (int i = 0; i < paren_string.Length; i++) {\n            if (paren_string[i]\
    \ == '(') {\n                count++;\n                if (count > max) {\n  \
    \                  max = count;\n                }\n            } else if (paren_string[i]\
    \ == ')') {\n                count--;\n            } else if (paren_string[i]\
    \ == ' ') {\n                result.Add(max);\n                max = 0;\n    \
    \            count = 0;\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        // TODO: Implement this function.\n       \
    \ List<long> result = new List<long>();\n        long count = 0;\n        long\
    \ max = 0;\n        for (int i = 0; i < paren_string.Length; i++)\n        {\n\
    \            if (paren_string[i] == '(')\n            {\n                count++;\n\
    \                if (count > max)\n                {\n                    max\
    \ = count;\n                }\n            }\n            else if (paren_string[i]\
    \ == ')')\n            {\n                count--;\n            }\n          \
    \  else if (paren_string[i] == ' ')\n            {\n                result.Add(max);\n\
    \                max = 0;\n                count = 0;\n            }\n       \
    \ }\n        result.Add(max);\n        return result;", "        var result =\
    \ new List<long>();\n        var current_level = 0;\n        var max_level = 0;\n\
    \        foreach (var c in paren_string) {\n            if (c == '(') {\n    \
    \            current_level++;\n                max_level = Math.Max(max_level,\
    \ current_level);\n            } else if (c == ')') {\n                current_level--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_level);\n\
    \                max_level = 0;\n                current_level = 0;\n        \
    \    }\n        }\n        result.Add(max_level);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max_depth = 0;\n \
    \       long current_depth = 0;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                current_depth++;\n             \
    \   max_depth = Math.Max(max_depth, current_depth);\n            } else if (c\
    \ == ')') {\n                current_depth--;\n            } else if (c == ' ')\
    \ {\n                result.Add(max_depth);\n                max_depth = 0;\n\
    \                current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ current_level = 0;\n        var max_level = 0;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                current_level++;\n         \
    \       max_level = Math.Max(max_level, current_level);\n            } else if\
    \ (c == ')') {\n                current_level--;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_level);\n                max_level =\
    \ 0;\n                current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ current_level = 0;\n        var max_level = 0;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                current_level++;\n         \
    \       max_level = Math.Max(max_level, current_level);\n            } else if\
    \ (c == ')') {\n                current_level--;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_level);\n                max_level =\
    \ 0;\n                current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int depth = 0;\n        int max_depth = 0;\n        for (int i = 0; i <\
    \ paren_string.Length; i++) {\n            if (paren_string[i] == '(') {\n   \
    \             depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (paren_string[i] == ')') {\n                depth--;\n\
    \            } else if (paren_string[i] == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        // TODO: Implement this function.\n    \
    \    return result;", "        var result = new List<long>();\n        var current_level\
    \ = 0;\n        var max_level = 0;\n        foreach (var c in paren_string) {\n\
    \            if (c == '(') {\n                current_level++;\n             \
    \   max_level = Math.Max(max_level, current_level);\n            } else if (c\
    \ == ')') {\n                current_level--;\n            } else if (c == ' ')\
    \ {\n                result.Add(max_level);\n                max_level = 0;\n\
    \                current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.Add(max_depth);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max_depth = 0;\n        long current_depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                current_depth++;\n                max_depth = Math.Max(max_depth,\
    \ current_depth);\n            } else if (c == ')') {\n                current_depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n        }\n        result.Add(max_depth);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max_depth = 0;\n \
    \       long depth = 0;\n        foreach (char c in paren_string) {\n        \
    \    if (c == '(') {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        var result\
    \ = new List<long>();\n        var current_level = 0;\n        var max_level =\
    \ 0;\n        foreach (var c in paren_string) {\n            if (c == '(') {\n\
    \                current_level++;\n                max_level = Math.Max(max_level,\
    \ current_level);\n            } else if (c == ')') {\n                current_level--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_level);\n\
    \                max_level = 0;\n                current_level = 0;\n        \
    \    }\n        }\n        result.Add(max_level);\n        return result;", " \
    \       // TODO: Implement this function.\n        // Hint: You can use a stack\
    \ to keep track of the current level of nesting.\n        List<long> result =\
    \ new List<long>();\n        Stack<long> stack = new Stack<long>();\n        long\
    \ max = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                stack.Push(1);\n                max++;\n            } else\
    \ if (c == ')') {\n                stack.Pop();\n            } else if (c == '\
    \ ') {\n                result.Add(max);\n                max = 0;\n         \
    \   }\n        }\n        result.Add(max);\n        return result;", "       \
    \ var result = new List<long>();\n        var stack = new Stack<char>();\n   \
    \     var max_depth = 0;\n        foreach (var c in paren_string) {\n        \
    \    if (c == '(') {\n                stack.Push(c);\n                max_depth\
    \ = Math.Max(max_depth, stack.Count);\n            } else if (c == ')') {\n  \
    \              stack.Pop();\n            } else if (c == ' ') {\n            \
    \    result.Add(max_depth);\n                max_depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long current_level = 0;\n        long max_level\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                current_level++;\n                max_level = Math.Max(max_level,\
    \ current_level);\n            } else if (c == ')') {\n                current_level--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_level);\n\
    \                max_level = 0;\n                current_level = 0;\n        \
    \    }\n        }\n        result.Add(max_level);\n        return result;", " \
    \       var result = new List<long>();\n        var current_level = 0;\n     \
    \   var max_level = 0;\n        foreach (var c in paren_string) {\n          \
    \  if (c == '(') {\n                current_level++;\n                max_level\
    \ = Math.Max(max_level, current_level);\n            } else if (c == ')') {\n\
    \                current_level--;\n            } else if (c == ' ') {\n      \
    \          result.Add(max_level);\n                max_level = 0;\n          \
    \      current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // TODO: Implement this function.\n       \
    \ List<long> result = new List<long>();\n        long max = 0;\n        long count\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++)\n        {\n   \
    \         if (paren_string[i] == '(')\n            {\n                count++;\n\
    \                if (count > max)\n                {\n                    max\
    \ = count;\n                }\n            }\n            else if (paren_string[i]\
    \ == ')')\n            {\n                count--;\n            }\n          \
    \  else if (paren_string[i] == ' ')\n            {\n                result.Add(max);\n\
    \                max = 0;\n                count = 0;\n            }\n       \
    \ }\n        result.Add(max);\n        return result;", "        var result =\
    \ new List<long>();\n        var max_depth = 0;\n        var depth = 0;\n    \
    \    foreach (var c in paren_string) {\n            if (c == '(') {\n        \
    \        depth++;\n                max_depth = Math.Max(max_depth, depth);\n \
    \           } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // TODO: Implement this function.\n       \
    \ return new List<long>();", "        List<long> result = new List<long>();\n\
    \        long max_depth = 0;\n        long depth = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                max_depth = Math.Max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            } else if (c == ' ') {\n\
    \                result.Add(max_depth);\n                max_depth = 0;\n    \
    \            depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // TODO: Implement this function.\n       \
    \ List<long> result = new List<long>();\n        long max = 0;\n        long count\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++)\n        {\n   \
    \         if (paren_string[i] == '(')\n            {\n                count++;\n\
    \                if (count > max)\n                {\n                    max\
    \ = count;\n                }\n            }\n            else if (paren_string[i]\
    \ == ')')\n            {\n                count--;\n            }\n          \
    \  else if (paren_string[i] == ' ')\n            {\n                result.Add(max);\n\
    \                max = 0;\n                count = 0;\n            }\n       \
    \ }\n        result.Add(max);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int max_depth = 0;\n        int depth = 0;\n  \
    \      foreach (char c in paren_string) {\n            if (c == '(') {\n     \
    \           depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_level = 0;\n        long current_level = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_level++;\n\
    \                max_level = Math.Max(max_level, current_level);\n           \
    \ } else if (c == ')') {\n                current_level--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_level);\n                max_level\
    \ = 0;\n                current_level = 0;\n            }\n        }\n       \
    \ result.Add(max_level);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max_depth = 0;\n        long depth = 0;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ depth = 0;\n        var max_depth = 0;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_depth = 0;\n        long depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        // TODO: Implement this function.\n    \
    \    return result;", "        var result = new List<long>();\n        var depth\
    \ = 0;\n        var max_depth = 0;\n        foreach (var c in paren_string) {\n\
    \            if (c == '(') {\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        var\
    \ result = new List<long>();\n        var current_level = 0;\n        var max_level\
    \ = 0;\n        foreach (var c in paren_string) {\n            if (c == '(') {\n\
    \                current_level++;\n                max_level = Math.Max(max_level,\
    \ current_level);\n            } else if (c == ')') {\n                current_level--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_level);\n\
    \                max_level = 0;\n                current_level = 0;\n        \
    \    }\n        }\n        result.Add(max_level);\n        return result;", " \
    \       var result = new List<long>();\n        var stack = new Stack<long>();\n\
    \        var max_depth = 0L;\n        foreach (var c in paren_string) {\n    \
    \        if (c == '(') {\n                stack.Push(max_depth);\n           \
    \     max_depth = 0;\n            } else if (c == ')') {\n                var\
    \ depth = stack.Pop();\n                max_depth = Math.Max(max_depth, depth\
    \ + 1);\n            }\n        }\n        result.Add(max_depth);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max_depth\
    \ = 0;\n        long current_depth = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = Math.Max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_depth);\n                max_depth =\
    \ 0;\n                current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ stack = new Stack<char>();\n        var max_depth = 0;\n        foreach (var\
    \ c in paren_string) {\n            if (c == '(') {\n                stack.Push(c);\n\
    \                max_depth = Math.Max(max_depth, stack.Count);\n            }\
    \ else if (c == ')') {\n                stack.Pop();\n            } else if (c\
    \ == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n            }\n        }\n        result.Add(max_depth);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max_depth\
    \ = 0;\n        long depth = 0;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        //\
    \ TODO: Implement this function.\n        return new List<long>();", "       \
    \ List<long> result = new List<long>();\n        long max_depth = 0;\n       \
    \ long cur_depth = 0;\n        foreach (char c in paren_string) {\n          \
    \  if (c == '(') {\n                cur_depth++;\n                max_depth =\
    \ Math.Max(max_depth, cur_depth);\n            } else if (c == ')') {\n      \
    \          cur_depth--;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                cur_depth = 0;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long max_depth = 0;\n       \
    \ long current_depth = 0;\n        foreach (char c in paren_string) {\n      \
    \      if (c == '(') {\n                current_depth++;\n                max_depth\
    \ = Math.Max(max_depth, current_depth);\n            } else if (c == ')') {\n\
    \                current_depth--;\n            } else if (c == ' ') {\n      \
    \          result.Add(max_depth);\n                max_depth = 0;\n          \
    \      current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // TODO: Implement this function.\n       \
    \ List<long> result = new List<long>();\n        long max = 0;\n        long count\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++)\n        {\n   \
    \         if (paren_string[i] == '(')\n            {\n                count++;\n\
    \                if (count > max)\n                {\n                    max\
    \ = count;\n                }\n            }\n            else if (paren_string[i]\
    \ == ')')\n            {\n                count--;\n            }\n          \
    \  else if (paren_string[i] == ' ')\n            {\n                result.Add(max);\n\
    \                max = 0;\n                count = 0;\n            }\n       \
    \ }\n        result.Add(max);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max_depth = 0;\n        long current_depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                current_depth++;\n                max_depth = Math.Max(max_depth,\
    \ current_depth);\n            } else if (c == ')') {\n                current_depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n        }\n        result.Add(max_depth);\n        return result;", " \
    \       var result = new List<long>();\n        var max_depth = 0;\n        var\
    \ depth = 0;\n        foreach (var c in paren_string) {\n            if (c ==\
    \ '(') {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        var result\
    \ = new List<long>();\n        var stack = new Stack<char>();\n        var max_depth\
    \ = 0;\n        var depth = 0;\n        foreach (var c in paren_string) {\n  \
    \          if (c == '(') {\n                stack.Push(c);\n                depth++;\n\
    \                max_depth = Math.Max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                if (stack.Count == 0) {\n                    throw\
    \ new Exception(\"Invalid input\");\n                }\n                stack.Pop();\n\
    \                depth--;\n            } else if (c == ' ') {\n              \
    \  if (stack.Count != 0) {\n                    throw new Exception(\"Invalid\
    \ input\");\n                }\n                result.Add(max_depth);\n     \
    \           max_depth = 0;\n                depth = 0;\n            } else {\n\
    \                throw new Exception(\"Invalid input\");\n            }\n    \
    \    }\n        if (stack.Count != 0) {\n            throw new Exception(\"Invalid\
    \ input\");\n        }\n        result.Add(max_depth);\n        return result;",
  "        // TODO: Implement this function.\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long count = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++)\n        {\n            if (paren_string[i] == '(')\n            {\n  \
    \              count++;\n                if (count > max)\n                {\n\
    \                    max = count;\n                }\n            }\n        \
    \    else if (paren_string[i] == ')')\n            {\n                count--;\n\
    \            }\n            else if (paren_string[i] == ' ')\n            {\n\
    \                result.Add(max);\n                max = 0;\n                count\
    \ = 0;\n            }\n        }\n        result.Add(max);\n        return result;",
  "        List<long> result = new List<long>();\n        long max_depth = 0;\n  \
    \      long depth = 0;\n        foreach (char c in paren_string) {\n         \
    \   if (c == '(') {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        // TODO:\
    \ Implement this function.\n        List<long> result = new List<long>();\n  \
    \      string[] groups = paren_string.Split(' ');\n        foreach (string group\
    \ in groups) {\n            int max = 0;\n            int current = 0;\n     \
    \       foreach (char c in group) {\n                if (c == '(') {\n       \
    \             current++;\n                    if (current > max) {\n         \
    \               max = current;\n                    }\n                } else\
    \ if (c == ')') {\n                    current--;\n                }\n       \
    \     }\n            result.Add(max);\n        }\n        return result;", " \
    \       var result = new List<long>();\n        var current_level = 0;\n     \
    \   var max_level = 0;\n        foreach (var c in paren_string) {\n          \
    \  if (c == '(') {\n                current_level++;\n                max_level\
    \ = Math.Max(max_level, current_level);\n            } else if (c == ')') {\n\
    \                current_level--;\n            } else if (c == ' ') {\n      \
    \          result.Add(max_level);\n                max_level = 0;\n          \
    \      current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ current_level = 0;\n        var max_level = 0;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                current_level++;\n         \
    \       max_level = Math.Max(max_level, current_level);\n            } else if\
    \ (c == ')') {\n                current_level--;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_level);\n                max_level =\
    \ 0;\n                current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.Add(max_depth);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max_depth = 0;\n        long depth = 0;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // TODO: Implement this function.\n       \
    \ return new List<long>();", "        List<long> result = new List<long>();\n\
    \        long max_depth = 0;\n        long depth = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                max_depth = Math.Max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            } else if (c == ' ') {\n\
    \                result.Add(max_depth);\n                max_depth = 0;\n    \
    \            depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ stack = new Stack<char>();\n        var max_depth = 0;\n        foreach (var\
    \ c in paren_string) {\n            if (c == '(') {\n                stack.Push(c);\n\
    \                max_depth = Math.Max(max_depth, stack.Count);\n            }\
    \ else if (c == ')') {\n                stack.Pop();\n            } else if (c\
    \ == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n            }\n        }\n        result.Add(max_depth);\n        return\
    \ result;", "        var result = new List<long>();\n        var stack = new Stack<long>();\n\
    \        long max = 0;\n        foreach (var c in paren_string) {\n          \
    \  if (c == '(') {\n                stack.Push(max);\n                max = 0;\n\
    \            } else if (c == ')') {\n                result.Add(max);\n      \
    \          max = stack.Pop();\n            } else if (c == ' ') {\n          \
    \      result.Add(max);\n                max = 0;\n            } else {\n    \
    \            max++;\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long max_depth = 0;\n    \
    \    long current_depth = 0;\n        foreach (char c in paren_string) {\n   \
    \         if (c == '(') {\n                current_depth++;\n                max_depth\
    \ = Math.Max(max_depth, current_depth);\n            } else if (c == ')') {\n\
    \                current_depth--;\n            } else if (c == ' ') {\n      \
    \          result.Add(max_depth);\n                max_depth = 0;\n          \
    \      current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // TODO: Implement this function.\n       \
    \ return new List<long>();", "        List<long> result = new List<long>();\n\
    \        long max_depth = 0;\n        long depth = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                max_depth = Math.Max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            } else if (c == ' ') {\n\
    \                result.Add(max_depth);\n                max_depth = 0;\n    \
    \            depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ stack = new Stack<char>();\n        var max = 0;\n        foreach (var c in\
    \ paren_string) {\n            if (c == '(') {\n                stack.Push(c);\n\
    \                max = Math.Max(max, stack.Count);\n            } else if (c ==\
    \ ')') {\n                stack.Pop();\n            } else if (c == ' ') {\n \
    \               result.Add(max);\n                max = 0;\n            }\n  \
    \      }\n        result.Add(max);\n        return result;", "        // TODO:\
    \ Implement this function.\n        // Hint: Use a stack to keep track of the\
    \ current level of nesting.\n        // Hint: Use a list to store the output.\n\
    \        List<long> result = new List<long>();\n        Stack<long> stack = new\
    \ Stack<long>();\n        long max = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                stack.Push(1);\n\
    \                max++;\n            } else if (paren_string[i] == ')') {\n  \
    \              stack.Pop();\n            } else if (paren_string[i] == ' ') {\n\
    \                result.Add(max);\n                max = 0;\n            }\n \
    \       }\n        result.Add(max);\n        return result;", "        var result\
    \ = new List<long>();\n        var stack = new Stack<long>();\n        var max\
    \ = 0L;\n        foreach (var c in paren_string) {\n            if (c == '(')\
    \ {\n                stack.Push(max);\n                max = 0;\n            }\
    \ else if (c == ')') {\n                result.Add(max);\n                max\
    \ = stack.Pop();\n            } else if (c == ' ') {\n                result.Add(max);\n\
    \                max = 0;\n            } else {\n                max++;\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long max_depth = 0;\n        long depth = 0;\n      \
    \  foreach (char c in paren_string) {\n            if (c == '(') {\n         \
    \       depth++;\n                max_depth = Math.Max(max_depth, depth);\n  \
    \          } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // TODO: Implement this function.\n       \
    \ return new List<long>();", "        var result = new List<long>();\n       \
    \ var stack = new Stack<long>();\n        var max = 0L;\n        foreach (var\
    \ c in paren_string) {\n            if (c == '(') {\n                stack.Push(max);\n\
    \                max = 0;\n            } else if (c == ')') {\n              \
    \  result.Add(max);\n                max = stack.Pop();\n            } else if\
    \ (c == ' ') {\n                result.Add(max);\n                max = 0;\n \
    \           } else {\n                max++;\n            }\n        }\n     \
    \   return result;", "        var result = new List<long>();\n        var stack\
    \ = new Stack<char>();\n        var max_depth = 0;\n        foreach (var c in\
    \ paren_string) {\n            if (c == '(') {\n                stack.Push(c);\n\
    \                max_depth = Math.Max(max_depth, stack.Count);\n            }\
    \ else if (c == ')') {\n                stack.Pop();\n            } else if (c\
    \ == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n            }\n        }\n        result.Add(max_depth);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max_depth\
    \ = 0;\n        long depth = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                depth++;\n\
    \                max_depth = Math.Max(max_depth, depth);\n            } else if\
    \ (paren_string[i] == ')') {\n                depth--;\n            } else if\
    \ (paren_string[i] == ' ') {\n                result.Add(max_depth);\n       \
    \         max_depth = 0;\n                depth = 0;\n            }\n        }\n\
    \        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_depth = 0;\n        long depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        var result\
    \ = new List<long>();\n        var current_level = 0;\n        var max_level =\
    \ 0;\n        foreach (var c in paren_string) {\n            if (c == '(') {\n\
    \                current_level++;\n                max_level = Math.Max(max_level,\
    \ current_level);\n            } else if (c == ')') {\n                current_level--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_level);\n\
    \                max_level = 0;\n                current_level = 0;\n        \
    \    }\n        }\n        result.Add(max_level);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max_depth = 0;\n \
    \       long depth = 0;\n        foreach (char c in paren_string) {\n        \
    \    if (c == '(') {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        var result\
    \ = new List<long>();\n        var max_depth = 0;\n        var depth = 0;\n  \
    \      foreach (var c in paren_string) {\n            if (c == '(') {\n      \
    \          depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int max_depth = 0;\n        int depth = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_depth = 0;\n        long current_depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                current_depth++;\n                max_depth = Math.Max(max_depth,\
    \ current_depth);\n            } else if (c == ')') {\n                current_depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n        }\n        result.Add(max_depth);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max_depth = 0;\n \
    \       long current_depth = 0;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                current_depth++;\n             \
    \   max_depth = Math.Max(max_depth, current_depth);\n            } else if (c\
    \ == ')') {\n                current_depth--;\n            } else if (c == ' ')\
    \ {\n                result.Add(max_depth);\n                max_depth = 0;\n\
    \                current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_nesting = 0;\n        long current_nesting = 0;\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                current_nesting++;\n\
    \                max_nesting = Math.Max(max_nesting, current_nesting);\n     \
    \       } else if (c == ')') {\n                current_nesting--;\n         \
    \   } else if (c == ' ') {\n                result.Add(max_nesting);\n       \
    \         max_nesting = 0;\n                current_nesting = 0;\n           \
    \ }\n        }\n        result.Add(max_nesting);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max_depth = 0;\n \
    \       long current_depth = 0;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                current_depth++;\n             \
    \   max_depth = Math.Max(max_depth, current_depth);\n            } else if (c\
    \ == ')') {\n                current_depth--;\n            } else if (c == ' ')\
    \ {\n                result.Add(max_depth);\n                max_depth = 0;\n\
    \                current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_nesting = 0;\n        long current_nesting = 0;\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                current_nesting++;\n\
    \                max_nesting = Math.Max(max_nesting, current_nesting);\n     \
    \       } else if (c == ')') {\n                current_nesting--;\n         \
    \   } else if (c == ' ') {\n                result.Add(max_nesting);\n       \
    \         max_nesting = 0;\n                current_nesting = 0;\n           \
    \ }\n        }\n        result.Add(max_nesting);\n        return result;", " \
    \       var result = new List<long>();\n        var stack = new Stack<char>();\n\
    \        var max_depth = 0;\n        foreach (var c in paren_string) {\n     \
    \       if (c == '(') {\n                stack.Push(c);\n                max_depth\
    \ = Math.Max(max_depth, stack.Count);\n            } else if (c == ')') {\n  \
    \              stack.Pop();\n            } else if (c == ' ') {\n            \
    \    result.Add(max_depth);\n                max_depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        var\
    \ result = new List<long>();\n        var stack = new Stack<char>();\n       \
    \ var max_depth = 0;\n        foreach (var c in paren_string) {\n            if\
    \ (c == '(') {\n                stack.Push(c);\n                max_depth = Math.Max(max_depth,\
    \ stack.Count);\n            } else if (c == ')') {\n                stack.Pop();\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ max_depth = 0;\n        var depth = 0;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_depth = 0;\n        long current_depth\
    \ = 0;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                current_depth++;\n                max_depth = Math.Max(max_depth,\
    \ current_depth);\n            } else if (c == ')') {\n                current_depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n        }\n        result.Add(max_depth);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max_depth = 0;\n \
    \       long current_depth = 0;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                current_depth++;\n             \
    \   max_depth = Math.Max(max_depth, current_depth);\n            } else if (c\
    \ == ')') {\n                current_depth--;\n            } else if (c == ' ')\
    \ {\n                result.Add(max_depth);\n                max_depth = 0;\n\
    \                current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // TODO: Implement this function.\n       \
    \ List<long> result = new List<long>();\n        long max = 0;\n        long count\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++)\n        {\n   \
    \         if (paren_string[i] == '(')\n            {\n                count++;\n\
    \                if (count > max)\n                {\n                    max\
    \ = count;\n                }\n            }\n            else if (paren_string[i]\
    \ == ')')\n            {\n                count--;\n            }\n          \
    \  else if (paren_string[i] == ' ')\n            {\n                result.Add(max);\n\
    \                max = 0;\n                count = 0;\n            }\n       \
    \ }\n        result.Add(max);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int max_depth = 0;\n        int current_depth =\
    \ 0;\n        foreach (char c in paren_string) {\n            if (c == '(') {\n\
    \                current_depth++;\n                max_depth = Math.Max(max_depth,\
    \ current_depth);\n            } else if (c == ')') {\n                current_depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                current_depth = 0;\n        \
    \    }\n        }\n        result.Add(max_depth);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long max_depth = 0;\n \
    \       long current_depth = 0;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                current_depth++;\n             \
    \   max_depth = Math.Max(max_depth, current_depth);\n            } else if (c\
    \ == ')') {\n                current_depth--;\n            } else if (c == ' ')\
    \ {\n                result.Add(max_depth);\n                max_depth = 0;\n\
    \                current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth\
    \ += 1;\n                max_depth = Math.Max(max_depth, current_depth);\n   \
    \         } else if (c == ')') {\n                current_depth -= 1;\n      \
    \      } else if (c == ' ') {\n                result.Add(max_depth);\n      \
    \          max_depth = 0;\n                current_depth = 0;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ var result = new List<long>();\n        var stack = new Stack<char>();\n   \
    \     long max_depth = 0;\n        long depth = 0;\n        foreach (var c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n                stack.Push(c);\n\
    \            } else if (c == ')') {\n                depth--;\n              \
    \  stack.Pop();\n            } else if (c == ' ') {\n                if (stack.Count\
    \ == 0) {\n                    result.Add(max_depth);\n                    max_depth\
    \ = 0;\n                    depth = 0;\n                }\n            }\n   \
    \     }\n        if (stack.Count == 0) {\n            result.Add(max_depth);\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        var stack = new Stack<char>();\n        var max_depth = 0;\n        var\
    \ depth = 0;\n        foreach (var c in paren_string) {\n            if (c ==\
    \ '(') {\n                stack.Push(c);\n                depth++;\n         \
    \       max_depth = Math.Max(max_depth, depth);\n            } else if (c == ')')\
    \ {\n                if (stack.Count == 0) {\n                    throw new ArgumentException(\"\
    Invalid input\");\n                }\n                stack.Pop();\n         \
    \       depth--;\n            } else if (c == ' ') {\n                if (stack.Count\
    \ != 0) {\n                    throw new ArgumentException(\"Invalid input\");\n\
    \                }\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            } else {\n                throw\
    \ new ArgumentException(\"Invalid input\");\n            }\n        }\n      \
    \  if (stack.Count != 0) {\n            throw new ArgumentException(\"Invalid\
    \ input\");\n        }\n        result.Add(max_depth);\n        return result;",
  "        List<long> result = new List<long>();\n        long max_depth = 0;\n  \
    \      long depth = 0;\n        for (int i = 0; i < paren_string.Length; i++)\
    \ {\n            if (paren_string[i] == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (paren_string[i]\
    \ == ')') {\n                depth--;\n            } else if (paren_string[i]\
    \ == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.Add(max_depth);\n        return result;", "        var result = new List<long>();\n\
    \        var stack = new Stack<char>();\n        var max_depth = 0;\n        foreach\
    \ (var c in paren_string) {\n            if (c == '(') {\n                stack.Push(c);\n\
    \                max_depth = Math.Max(max_depth, stack.Count);\n            }\
    \ else if (c == ')') {\n                stack.Pop();\n            } else if (c\
    \ == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n            }\n        }\n        result.Add(max_depth);\n        return\
    \ result;", "        var result = new List<long>();\n        long max_depth =\
    \ 0;\n        long current_depth = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                current_depth++;\n         \
    \       max_depth = Math.Max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth--;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_depth);\n                max_depth =\
    \ 0;\n                current_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ current_level = 0;\n        var max_level = 0;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                current_level++;\n         \
    \       max_level = Math.Max(max_level, current_level);\n            } else if\
    \ (c == ')') {\n                current_level--;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_level);\n                max_level =\
    \ 0;\n                current_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ stack = new Stack<char>();\n        var max = 0;\n        foreach (var c in\
    \ paren_string) {\n            if (c == '(') {\n                stack.Push(c);\n\
    \                max = Math.Max(max, stack.Count);\n            } else if (c ==\
    \ ')') {\n                stack.Pop();\n            } else if (c == ' ') {\n \
    \               result.Add(max);\n                max = 0;\n            }\n  \
    \      }\n        result.Add(max);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        int max_depth = 0;\n        int depth =\
    \ 0;\n        foreach (char c in paren_string) {\n            if (c == '(') {\n\
    \                depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ paren_groups = paren_string.Split(' ');\n        foreach (var paren_group in\
    \ paren_groups) {\n            var max_depth = 0;\n            var depth = 0;\n\
    \            foreach (var c in paren_group) {\n                if (c == '(') {\n\
    \                    depth++;\n                    max_depth = Math.Max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.Add(max_depth);\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max_depth = 0;\n        long depth = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                max_depth = Math.Max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            } else if (c == ' ') {\n\
    \                result.Add(max_depth);\n                max_depth = 0;\n    \
    \            depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.Add(max_depth);\n        return result;", "        var result = new List<long>();\n\
    \        var stack = new Stack<long>();\n        long max = 0;\n        foreach\
    \ (var c in paren_string) {\n            if (c == '(') {\n                stack.Push(max);\n\
    \                max = 0;\n            } else if (c == ')') {\n              \
    \  result.Add(max);\n                max = stack.Pop();\n            } else if\
    \ (c == ' ') {\n                result.Add(max);\n                max = 0;\n \
    \           } else {\n                max++;\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ max_depth = 0;\n        long current_depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.Add(max_depth);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max_depth = 0;\n        long depth = 0;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0;\n        long current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.Add(max_depth);\n        return result;", "        var result = new List<long>();\n\
    \        var current_level = 0;\n        var max_level = 0;\n        foreach (var\
    \ c in paren_string) {\n            if (c == '(') {\n                current_level++;\n\
    \                max_level = Math.Max(max_level, current_level);\n           \
    \ } else if (c == ')') {\n                current_level--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_level);\n                max_level\
    \ = 0;\n                current_level = 0;\n            }\n        }\n       \
    \ result.Add(max_level);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long current_level = 0;\n        long max_level\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++) {\n            if\
    \ (paren_string[i] == '(') {\n                current_level++;\n             \
    \   max_level = Math.Max(max_level, current_level);\n            } else if (paren_string[i]\
    \ == ')') {\n                current_level--;\n            } else if (paren_string[i]\
    \ == ' ') {\n                result.Add(max_level);\n                max_level\
    \ = 0;\n                current_level = 0;\n            }\n        }\n       \
    \ result.Add(max_level);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        int max_depth = 0;\n        int depth = 0;\n  \
    \      foreach (char c in paren_string) {\n            if (c == '(') {\n     \
    \           depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ stack = new Stack<long>();\n        long max = 0;\n        foreach (var c in\
    \ paren_string) {\n            if (c == '(') {\n                stack.Push(max);\n\
    \                max = 0;\n            } else if (c == ')') {\n              \
    \  result.Add(max);\n                max = stack.Pop();\n            } else if\
    \ (c == ' ') {\n                result.Add(max);\n                max = 0;\n \
    \           } else {\n                max++;\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ max_depth = 0;\n        long depth = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                depth++;\n                max_depth\
    \ = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n        \
    \        depth--;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0;\n                depth = 0;\n            }\n \
    \       }\n        result.Add(max_depth);\n        return result;", "        var\
    \ result = new List<long>();\n        var current_level = 0;\n        var max_level\
    \ = 0;\n        foreach (var c in paren_string) {\n            if (c == '(') {\n\
    \                current_level++;\n                max_level = Math.Max(max_level,\
    \ current_level);\n            } else if (c == ')') {\n                current_level--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_level);\n\
    \                max_level = 0;\n                current_level = 0;\n        \
    \    }\n        }\n        result.Add(max_level);\n        return result;", " \
    \       List<long> result = new List<long>();\n        int max_depth = 0;\n  \
    \      int depth = 0;\n        foreach (char c in paren_string) {\n          \
    \  if (c == '(') {\n                depth++;\n                max_depth = Math.Max(max_depth,\
    \ depth);\n            } else if (c == ')') {\n                depth--;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_depth);\n    \
    \            max_depth = 0;\n                depth = 0;\n            }\n     \
    \   }\n        result.Add(max_depth);\n        return result;", "        // TODO:\
    \ Implement this function.\n        List<long> result = new List<long>();\n  \
    \      long max = 0;\n        long count = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++)\n        {\n            if (paren_string[i] == '(')\n            {\n  \
    \              count++;\n                if (count > max)\n                {\n\
    \                    max = count;\n                }\n            }\n        \
    \    else if (paren_string[i] == ')')\n            {\n                count--;\n\
    \            }\n            else if (paren_string[i] == ' ')\n            {\n\
    \                result.Add(max);\n                max = 0;\n                count\
    \ = 0;\n            }\n        }\n        result.Add(max);\n        return result;",
  "        var result = new List<long>();\n        var depth = 0;\n        var max_depth\
    \ = 0;\n        foreach (var c in paren_string) {\n            if (c == '(') {\n\
    \                depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> results = new List<long>();\n  \
    \      long max_depth = 0;\n        long depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              results.Add(max_depth);\n                max_depth = 0;\n     \
    \           depth = 0;\n            }\n        }\n        results.Add(max_depth);\n\
    \        return results;", "        // TODO: Implement this function\n       \
    \ List<long> result = new List<long>();\n        string[] groups = paren_string.Split('\
    \ ');\n        foreach (string group in groups) {\n            long max = 0;\n\
    \            long current = 0;\n            foreach (char c in group) {\n    \
    \            if (c == '(') {\n                    current++;\n               \
    \     if (current > max) {\n                        max = current;\n         \
    \           }\n                } else if (c == ')') {\n                    current--;\n\
    \                }\n            }\n            result.Add(max);\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long max_depth = 0;\n        long current_depth = 0;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                max_depth = Math.Max(max_depth, current_depth);\n           \
    \ } else if (c == ')') {\n                current_depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0;\n                current_depth = 0;\n            }\n        }\n       \
    \ result.Add(max_depth);\n        return result;", "        var result = new List<long>();\n\
    \        var current_level = 0;\n        var max_level = 0;\n        foreach (var\
    \ c in paren_string) {\n            if (c == '(') {\n                current_level++;\n\
    \                max_level = Math.Max(max_level, current_level);\n           \
    \ } else if (c == ')') {\n                current_level--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_level);\n                max_level\
    \ = 0;\n                current_level = 0;\n            }\n        }\n       \
    \ result.Add(max_level);\n        return result;", "        var result = new List<long>();\n\
    \        var stack = new Stack<long>();\n        long max = 0;\n        foreach\
    \ (var c in paren_string) {\n            if (c == '(') {\n                stack.Push(max\
    \ + 1);\n                max = 0;\n            } else if (c == ')') {\n      \
    \          max = Math.Max(max, stack.Pop());\n            } else if (c == ' ')\
    \ {\n                result.Add(max);\n                max = 0;\n            }\n\
    \        }\n        result.Add(max);\n        return result;", "        var result\
    \ = new List<long>();\n        var current_level = 0;\n        var max_level =\
    \ 0;\n        foreach (var c in paren_string) {\n            if (c == '(') {\n\
    \                current_level++;\n                max_level = Math.Max(max_level,\
    \ current_level);\n            } else if (c == ')') {\n                current_level--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_level);\n\
    \                max_level = 0;\n                current_level = 0;\n        \
    \    }\n        }\n        result.Add(max_level);\n        return result;", " \
    \       var result = new List<long>();\n        var stack = new Stack<long>();\n\
    \        long max = 0;\n        foreach (var c in paren_string) {\n          \
    \  if (c == '(') {\n                stack.Push(max);\n                max = 0;\n\
    \            } else if (c == ')') {\n                result.Add(max);\n      \
    \          max = stack.Pop();\n            } else if (c == ' ') {\n          \
    \      max = Math.Max(max, 0);\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
