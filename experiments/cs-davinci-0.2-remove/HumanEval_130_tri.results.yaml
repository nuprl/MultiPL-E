language: cs
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      for (long i = 1; i <= n; i++) {\n            if (i == 1) {\n          \
    \      result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i - 1]);\n            }\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <14eb8a289137444799fb5017383a7179>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <14eb8a289137444799fb5017383a7179>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <14eb8a289137444799fb5017383a7179>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <14eb8a289137444799fb5017383a7179>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      for (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n      \
    \          result.Add(3);\n            } else if (i % 2 == 0) {\n            \
    \    result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <4194729d07be4c4098f13de5b87e2030>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4194729d07be4c4098f13de5b87e2030>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <4194729d07be4c4098f13de5b87e2030>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4194729d07be4c4098f13de5b87e2030>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (int i = 0; i <= n; i++) {\n            result.Add(Tri(i));\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyvou1ac.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> res = new List<long>();\n     \
    \   res.Add(3);\n        if (n == 0) return res;\n        res.Add(2);\n      \
    \  if (n == 1) return res;\n        res.Add(8);\n        if (n == 2) return res;\n\
    \        for (int i = 3; i <= n; i++) {\n            res.Add(res[i - 1] + res[i\
    \ - 2] + res[i - 3]);\n        }\n        return res;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed8e8c6176fc44fbb0b7535076f9ee9c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed8e8c6176fc44fbb0b7535076f9ee9c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b2e80b46b0de4aecae7becffebbf10dc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b2e80b46b0de4aecae7becffebbf10dc>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var res = new List<long>();\n        for (long\
    \ i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n                res.Add(3);\n\
    \            } else if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n \
    \           } else {\n                res.Add(res[(int)i - 2] + res[(int)i - 3]\
    \ + res[(int)i - 1]);\n            }\n        }\n        return res;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <0d829c8ee08e463a881eff68288a3660>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <0d829c8ee08e463a881eff68288a3660>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <0d829c8ee08e463a881eff68288a3660>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <0d829c8ee08e463a881eff68288a3660>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaemjqzbo.cs(26,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaemjqzbo.cs(26,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <903e40b4054843d59c96a22c0abb49bc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <903e40b4054843d59c96a22c0abb49bc>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i - 1]);\n            }\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <6caa2b7cc631485a937c1b8e2e73e88e>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <6caa2b7cc631485a937c1b8e2e73e88e>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <6caa2b7cc631485a937c1b8e2e73e88e>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <6caa2b7cc631485a937c1b8e2e73e88e>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        result.Add(2);\n        result.Add(8);\n      \
    \  for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n           \
    \     result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        result.Add(2);\n        result.Add(8);\n      \
    \  for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n           \
    \     result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here.\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <504b1d86565444b2930d992e526502ee>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <504b1d86565444b2930d992e526502ee>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // TODO\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f75669916314fc6a3fec55b003a56e8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f75669916314fc6a3fec55b003a56e8>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        return null;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <77a34a924df04afe9b0a1abc1b5d5141>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <77a34a924df04afe9b0a1abc1b5d5141>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> res = new List<long>();\n     \
    \   res.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if (i % 2\
    \ == 0) {\n                res.Add(1 + i / 2);\n            } else {\n       \
    \         res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n    \
    \    }\n        return res;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <435bf8d44a1d4ac69582ac1c51a32fb0>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <435bf8d44a1d4ac69582ac1c51a32fb0>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <435bf8d44a1d4ac69582ac1c51a32fb0>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <435bf8d44a1d4ac69582ac1c51a32fb0>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> ans = new List<long>();\n     \
    \   ans.Add(3);\n        if (n == 0) return ans;\n        ans.Add(2);\n      \
    \  if (n == 1) return ans;\n        ans.Add(8);\n        if (n == 2) return ans;\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           ans.Add(1 + i / 2);\n            } else {\n                ans.Add(ans[i\
    \ - 1] + ans[i - 2] + ans[i + 1]);\n            }\n        }\n        return ans;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008c] in <fc00c0d34ae14df88016bb333aa9cb10>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <fc00c0d34ae14df88016bb333aa9cb10>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008c] in <fc00c0d34ae14df88016bb333aa9cb10>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <fc00c0d34ae14df88016bb333aa9cb10>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here.\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <504b1d86565444b2930d992e526502ee>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <504b1d86565444b2930d992e526502ee>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (int i = 0; i <= n; i++) {\n            result.Add(Tri(i));\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyvou1ac.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1f53ce475264e09b82b7fa08471b71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1f53ce475264e09b82b7fa08471b71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        if (n == 0) return result;\n        result.Add(2);\n\
    \        if (n == 1) return result;\n        result.Add(8);\n        if (n ==\
    \ 2) return result;\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008c] in <75492a4dd0d94716b085d4162d98876f>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <75492a4dd0d94716b085d4162d98876f>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008c] in <75492a4dd0d94716b085d4162d98876f>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <75492a4dd0d94716b085d4162d98876f>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (int i = 0; i <= n; i++) {\n            result.Add(tri(i));\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpusgxij6a.cs(26,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (int i = 0; i <= n; i++) {\n            result.Add(Tri(i));\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyvou1ac.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1f53ce475264e09b82b7fa08471b71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1f53ce475264e09b82b7fa08471b71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n\
    \        if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n\
    \        if (n == 2) {\n            return result;\n        }\n        result.Add(8);\n\
    \        for (int i = 3; i < n; i++) {\n            result.Add(result[i - 1] +\
    \ result[i - 2] + result[i - 3]);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57d9eb0a19fc4a1dbe46b3c158174d6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57d9eb0a19fc4a1dbe46b3c158174d6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> res = new List<long>();\n     \
    \   res.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if (i % 2\
    \ == 0) {\n                res.Add(1 + i / 2);\n            } else {\n       \
    \         res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n    \
    \    }\n        return res;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <435bf8d44a1d4ac69582ac1c51a32fb0>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <435bf8d44a1d4ac69582ac1c51a32fb0>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <435bf8d44a1d4ac69582ac1c51a32fb0>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <435bf8d44a1d4ac69582ac1c51a32fb0>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here.\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <504b1d86565444b2930d992e526502ee>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <504b1d86565444b2930d992e526502ee>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> res = new List<long>();\n     \
    \   res.Add(3);\n        if (n == 0) return res;\n        res.Add(2);\n      \
    \  if (n == 1) return res;\n        res.Add(8);\n        if (n == 2) return res;\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) res.Add(1\
    \ + i / 2);\n            else res.Add(res[i - 1] + res[i - 2] + res[i - 3]);\n\
    \        }\n        return res;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa65cb24161548978e747e6e0954f621>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa65cb24161548978e747e6e0954f621>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        if (n == 0) {\n            return result;\n   \
    \     }\n        result.Add(2);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(8);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            long\
    \ val = 0;\n            if (i % 2 == 0) {\n                val = 1 + i / 2;\n\
    \            } else {\n                val = result[i - 1] + result[i - 2] + result[i\
    \ + 1];\n            }\n            result.Add(val);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008d] in <b4e5a003114648c59fdb307e003e8286>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b4e5a003114648c59fdb307e003e8286>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008d] in <b4e5a003114648c59fdb307e003e8286>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b4e5a003114648c59fdb307e003e8286>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <903e40b4054843d59c96a22c0abb49bc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <903e40b4054843d59c96a22c0abb49bc>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here.\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <504b1d86565444b2930d992e526502ee>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <504b1d86565444b2930d992e526502ee>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      for (long i = 1; i <= n; i++) {\n            if (i == 1) {\n          \
    \      result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i - 1]);\n            }\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <14eb8a289137444799fb5017383a7179>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <14eb8a289137444799fb5017383a7179>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <14eb8a289137444799fb5017383a7179>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <14eb8a289137444799fb5017383a7179>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (int i = 0; i <= n; i++) {\n            result.Add(tri(i));\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpusgxij6a.cs(26,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        result.Add(3);\n\
    \        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n    \
    \            result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00040] in <ed1ea4ba1e954048940d97cdb140ef60>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ed1ea4ba1e954048940d97cdb140ef60>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00040] in <ed1ea4ba1e954048940d97cdb140ef60>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ed1ea4ba1e954048940d97cdb140ef60>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var res = new List<long>();\n        for (long\
    \ i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n                res.Add(3);\n\
    \            } else if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n \
    \           } else {\n                res.Add(res[(int)i - 2] + res[(int)i - 3]\
    \ + res[(int)i]);\n            }\n        }\n        return res;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <0e4495d06692415ca9465b2707d776b2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <0e4495d06692415ca9465b2707d776b2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <0e4495d06692415ca9465b2707d776b2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <0e4495d06692415ca9465b2707d776b2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var res = new List<long>();\n        for (long\
    \ i = 1; i <= n; i++) {\n            if (i == 1) {\n                res.Add(3);\n\
    \            } else if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n \
    \           } else {\n                res.Add(res[(int)i - 2] + res[(int)i - 3]\
    \ + res[(int)i - 1]);\n            }\n        }\n        return res;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <4c4d38bc79874b968ce8e97375953e46>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4c4d38bc79874b968ce8e97375953e46>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <4c4d38bc79874b968ce8e97375953e46>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4c4d38bc79874b968ce8e97375953e46>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var ret = new List<long>();\n        for (int\
    \ i = 0; i <= n; i++) {\n            ret.Add(Tri(i));\n        }\n        return\
    \ ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplpjkjhqk.cs(26,21): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      for (long i = 0; i <= n; i++) {\n            if (i == 0) {\n          \
    \      result.Add(3);\n            } else if (i == 1) {\n                result.Add(3);\n\
    \            } else if (i == 2) {\n                result.Add(3);\n          \
    \  } else if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n        \
    \    } else {\n                result.Add(result[(int)i - 1] + result[(int)i -\
    \ 2] + result[(int)i + 1]);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008a] in <617e0546bac949aeab2b5acd9ac8fd03>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <617e0546bac949aeab2b5acd9ac8fd03>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008a] in <617e0546bac949aeab2b5acd9ac8fd03>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <617e0546bac949aeab2b5acd9ac8fd03>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (int i = 0; i <= n; i++) {\n            result.Add(Tri(i));\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyvou1ac.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> res = new List<long>();\n     \
    \   res.Add(3);\n        if (n == 0) return res;\n        res.Add(2);\n      \
    \  if (n == 1) return res;\n        res.Add(8);\n        if (n == 2) return res;\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           res.Add(1 + i / 2);\n            } else {\n                res.Add(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n        return res;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008c] in <8f8e4387321b4277a14d93c3fc627db1>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8f8e4387321b4277a14d93c3fc627db1>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008c] in <8f8e4387321b4277a14d93c3fc627db1>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8f8e4387321b4277a14d93c3fc627db1>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> res = new List<long>();\n     \
    \   res.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if (i % 2\
    \ == 0) {\n                res.Add(1 + i / 2);\n            } else {\n       \
    \         res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n    \
    \    }\n        return res;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <435bf8d44a1d4ac69582ac1c51a32fb0>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <435bf8d44a1d4ac69582ac1c51a32fb0>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <435bf8d44a1d4ac69582ac1c51a32fb0>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <435bf8d44a1d4ac69582ac1c51a32fb0>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code here.\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <53dab3253ab045dfa8ee952a382c9493>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <53dab3253ab045dfa8ee952a382c9493>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        if\
    \ (n == 0) {\n            return result;\n        }\n        result.Add(3);\n\
    \        if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n\
    \        if (n == 2) {\n            return result;\n        }\n        result.Add(8);\n\
    \        for (int i = 3; i < n; i++) {\n            result.Add(result[i - 1] +\
    \ result[i - 2] + result[i - 3]);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03f456adf1064bb49e4833be306c3cf0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03f456adf1064bb49e4833be306c3cf0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i - 1]);\n            }\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <6caa2b7cc631485a937c1b8e2e73e88e>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <6caa2b7cc631485a937c1b8e2e73e88e>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <6caa2b7cc631485a937c1b8e2e73e88e>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <6caa2b7cc631485a937c1b8e2e73e88e>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1f53ce475264e09b82b7fa08471b71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1f53ce475264e09b82b7fa08471b71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var ans = new List<long>();\n        for (long\
    \ i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n                ans.Add(3);\n\
    \            } else if (i % 2 == 0) {\n                ans.Add(1 + i / 2);\n \
    \           } else {\n                ans.Add(ans[(int)i - 2] + ans[(int)i - 3]\
    \ + ans[(int)i]);\n            }\n        }\n        return ans;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <f7cb304fd07d486f8337180e612f4e4b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <f7cb304fd07d486f8337180e612f4e4b>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <f7cb304fd07d486f8337180e612f4e4b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <f7cb304fd07d486f8337180e612f4e4b>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here.\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <504b1d86565444b2930d992e526502ee>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <504b1d86565444b2930d992e526502ee>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        result.Add(3);\n\
    \        for (long i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n    \
    \            result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00040] in <ed1ea4ba1e954048940d97cdb140ef60>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ed1ea4ba1e954048940d97cdb140ef60>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00040] in <ed1ea4ba1e954048940d97cdb140ef60>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ed1ea4ba1e954048940d97cdb140ef60>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i - 1]);\n            }\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <6caa2b7cc631485a937c1b8e2e73e88e>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <6caa2b7cc631485a937c1b8e2e73e88e>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <6caa2b7cc631485a937c1b8e2e73e88e>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <6caa2b7cc631485a937c1b8e2e73e88e>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var res = new List<long>();\n        for (long\
    \ i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n                res.Add(3);\n\
    \            } else if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n \
    \           } else {\n                res.Add(res[(int)i - 2] + res[(int)i - 3]\
    \ + res[(int)i]);\n            }\n        }\n        return res;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <0e4495d06692415ca9465b2707d776b2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <0e4495d06692415ca9465b2707d776b2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <0e4495d06692415ca9465b2707d776b2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <0e4495d06692415ca9465b2707d776b2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b2e80b46b0de4aecae7becffebbf10dc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b2e80b46b0de4aecae7becffebbf10dc>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here.\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <504b1d86565444b2930d992e526502ee>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <504b1d86565444b2930d992e526502ee>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here.\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <504b1d86565444b2930d992e526502ee>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <504b1d86565444b2930d992e526502ee>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        if (n == 0) return result;\n        result.Add(2);\n\
    \        if (n == 1) return result;\n        result.Add(8);\n        if (n ==\
    \ 2) return result;\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008c] in <75492a4dd0d94716b085d4162d98876f>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <75492a4dd0d94716b085d4162d98876f>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008c] in <75492a4dd0d94716b085d4162d98876f>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <75492a4dd0d94716b085d4162d98876f>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here.\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <504b1d86565444b2930d992e526502ee>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <504b1d86565444b2930d992e526502ee>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (int i = 0; i <= n; i++) {\n            result.Add(Tri(i));\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyvou1ac.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        if (n == 0) {\n            return result;\n   \
    \     }\n        result.Add(2);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(8);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <243088dbb0664c7a9830902969fb9729>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <243088dbb0664c7a9830902969fb9729>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <243088dbb0664c7a9830902969fb9729>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <243088dbb0664c7a9830902969fb9729>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        result.Add(3);\n\
    \        if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n\
    \        if (n == 2) {\n            return result;\n        }\n        result.Add(8);\n\
    \        if (n == 3) {\n            return result;\n        }\n        for (int\
    \ i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[i - 1] +\
    \ result[i - 2] + result[i - 3]);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dfa04beb17d745d49ec233577bc57b15>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dfa04beb17d745d49ec233577bc57b15>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.Tri (System.Int64 n) [0x0007a] in <dfa04b"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here.\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <504b1d86565444b2930d992e526502ee>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <504b1d86565444b2930d992e526502ee>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        if (n == 0) {\n            return result;\n   \
    \     }\n        result.Add(2);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(8);\n        for (int i = 3; i <= n; i++) {\n \
    \           long next = result[i - 1] + result[i - 2] + result[i - 3];\n     \
    \       result.Add(next);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63a96f67e7624276aa746e52270fb225>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63a96f67e7624276aa746e52270fb225>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <903e40b4054843d59c96a22c0abb49bc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <903e40b4054843d59c96a22c0abb49bc>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        if (n == 0) return result;\n        result.Add(2);\n\
    \        if (n == 1) return result;\n        result.Add(8);\n        if (n ==\
    \ 2) return result;\n        for (int i = 3; i <= n; i++) {\n            long\
    \ next = 0;\n            if (i % 2 == 0) {\n                next = 1 + i / 2;\n\
    \            } else {\n                next = result[i - 1] + result[i - 2] +\
    \ result[i - 3];\n            }\n            result.Add(next);\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b1ced8813864e638bcbc82ab026e61c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b1ced8813864e638bcbc82ab026e61c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        result.Add(2);\n        result.Add(8);\n      \
    \  for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n           \
    \     result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (int i = 0; i <= n; i++) {\n            result.Add(Tri(i));\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyvou1ac.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        result.Add(2);\n        result.Add(8);\n      \
    \  for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n           \
    \     result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (int i = 0; i <= n; i++) {\n            result.Add(Tri(i));\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyvou1ac.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        if (n == 0) return result;\n        result.Add(2);\n\
    \        if (n == 1) return result;\n        result.Add(8);\n        if (n ==\
    \ 2) return result;\n        for (int i = 3; i <= n; i++) {\n            long\
    \ next = 0;\n            if (i % 2 == 0) {\n                next = 1 + i / 2;\n\
    \            } else {\n                next = result[i - 1] + result[i - 2] +\
    \ result[i - 3];\n            }\n            result.Add(next);\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b1ced8813864e638bcbc82ab026e61c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b1ced8813864e638bcbc82ab026e61c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Write your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <c8435cfeb961408ba27f7dfca5a9b576>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <c8435cfeb961408ba27f7dfca5a9b576>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      for (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n      \
    \          result.Add(3);\n            } else if (i % 2 == 0) {\n            \
    \    result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <4194729d07be4c4098f13de5b87e2030>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4194729d07be4c4098f13de5b87e2030>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <4194729d07be4c4098f13de5b87e2030>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4194729d07be4c4098f13de5b87e2030>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (int i = 0; i <= n; i++) {\n            result.Add(tri(i));\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpusgxij6a.cs(26,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaemjqzbo.cs(26,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaemjqzbo.cs(26,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1f53ce475264e09b82b7fa08471b71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1f53ce475264e09b82b7fa08471b71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (int i = 0; i <= n; i++) {\n            result.Add(tri(i));\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpusgxij6a.cs(26,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here.\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <504b1d86565444b2930d992e526502ee>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <504b1d86565444b2930d992e526502ee>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      for (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n      \
    \          result.Add(3);\n            } else if (i % 2 == 0) {\n            \
    \    result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <4194729d07be4c4098f13de5b87e2030>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4194729d07be4c4098f13de5b87e2030>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <4194729d07be4c4098f13de5b87e2030>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4194729d07be4c4098f13de5b87e2030>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Write your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <c8435cfeb961408ba27f7dfca5a9b576>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <c8435cfeb961408ba27f7dfca5a9b576>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var list = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            list.Add(Tri(i));\n        }\n\
    \        return list;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxussywhd.cs(26,22): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        result.Add(3);\n\
    \        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <70028c9be0fd4e1095adb96f5f390612>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <70028c9be0fd4e1095adb96f5f390612>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <70028c9be0fd4e1095adb96f5f390612>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <70028c9be0fd4e1095adb96f5f390612>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var res = new List<long>();\n        for (long\
    \ i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n                res.Add(3);\n\
    \            } else if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n \
    \           } else {\n                res.Add(res[(int)i - 2] + res[(int)i - 3]\
    \ + res[(int)i]);\n            }\n        }\n        return res;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <0e4495d06692415ca9465b2707d776b2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <0e4495d06692415ca9465b2707d776b2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <0e4495d06692415ca9465b2707d776b2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <0e4495d06692415ca9465b2707d776b2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code here.\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <53dab3253ab045dfa8ee952a382c9493>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <53dab3253ab045dfa8ee952a382c9493>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here.\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <504b1d86565444b2930d992e526502ee>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <504b1d86565444b2930d992e526502ee>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b2e80b46b0de4aecae7becffebbf10dc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b2e80b46b0de4aecae7becffebbf10dc>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here.\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <504b1d86565444b2930d992e526502ee>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <504b1d86565444b2930d992e526502ee>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <903e40b4054843d59c96a22c0abb49bc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <903e40b4054843d59c96a22c0abb49bc>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (int i = 0; i <= n; i++) {\n            result.Add(tri(i));\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpusgxij6a.cs(26,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <903e40b4054843d59c96a22c0abb49bc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <903e40b4054843d59c96a22c0abb49bc>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      for (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n      \
    \          result.Add(3);\n            } else if (i % 2 == 0) {\n            \
    \    result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <4194729d07be4c4098f13de5b87e2030>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4194729d07be4c4098f13de5b87e2030>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <4194729d07be4c4098f13de5b87e2030>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4194729d07be4c4098f13de5b87e2030>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <903e40b4054843d59c96a22c0abb49bc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <903e40b4054843d59c96a22c0abb49bc>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        result.Add(3);\n\
    \        if (n == 1) return result;\n        result.Add(2);\n        if (n ==\
    \ 2) return result;\n        result.Add(8);\n        if (n == 3) return result;\n\
    \        for (long i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n    \
    \            result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ceb968bf5ad543d0a315827344853b6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ceb968bf5ad543d0a315827344853b6d>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.Tri (System.Int64 n) [0x0007b] in <ceb968"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (int i = 0; i <= n; i++) {\n            result.Add(Tri(i));\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyvou1ac.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b2e80b46b0de4aecae7becffebbf10dc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b2e80b46b0de4aecae7becffebbf10dc>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> res = new List<long>();\n     \
    \   res.Add(3);\n        if (n == 0) return res;\n        res.Add(2);\n      \
    \  if (n == 1) return res;\n        res.Add(8);\n        if (n == 2) return res;\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           res.Add(1 + i / 2);\n            } else {\n                res.Add(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n        return res;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008c] in <8f8e4387321b4277a14d93c3fc627db1>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8f8e4387321b4277a14d93c3fc627db1>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008c] in <8f8e4387321b4277a14d93c3fc627db1>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8f8e4387321b4277a14d93c3fc627db1>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var list = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ list.Add(3);\n            } else if (i % 2 == 0) {\n                list.Add(1\
    \ + i / 2);\n            } else {\n                list.Add(list[(int)i - 2] +\
    \ list[(int)i - 3] + list[(int)i]);\n            }\n        }\n        return\
    \ list;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <017704c813e0473cb694927aecb65890>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <017704c813e0473cb694927aecb65890>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <017704c813e0473cb694927aecb65890>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <017704c813e0473cb694927aecb65890>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      for (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n      \
    \          result.Add(3);\n            } else if (i % 2 == 0) {\n            \
    \    result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <4194729d07be4c4098f13de5b87e2030>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4194729d07be4c4098f13de5b87e2030>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <4194729d07be4c4098f13de5b87e2030>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4194729d07be4c4098f13de5b87e2030>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        result.Add(2);\n        result.Add(8);\n      \
    \  for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n           \
    \     result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ed352e5ade334f4aa0ae9a2bef2c2adf>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            result.Add(Tri(i));\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42osduml.cs(26,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1660028150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        long\
    \ a = 3;\n        long b = 2;\n        long c = 1;\n        long d = 0;\n    \
    \    result.Add(a);\n        result.Add(b);\n        result.Add(c);\n        for\
    \ (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                d\
    \ = 1 + i / 2;\n            } else {\n                d = a + b + c;\n       \
    \     }\n            result.Add(d);\n            a = b;\n            b = c;\n\
    \            c = d;\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fec14d101360466aa921e956ee70cae9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fec14d101360466aa921e956ee70cae9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b8222c60a3b9491a954009489b2c2f56>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here.\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <504b1d86565444b2930d992e526502ee>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <504b1d86565444b2930d992e526502ee>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // your code goes here\n        return new\
    \ List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5d5e93458de41519f0c0104d7f88324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5d5e93458de41519f0c0104d7f88324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028152
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        if (n == 0) return result;\n        result.Add(2);\n\
    \        if (n == 1) return result;\n        result.Add(8);\n        if (n ==\
    \ 2) return result;\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008c] in <75492a4dd0d94716b085d4162d98876f>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <75492a4dd0d94716b085d4162d98876f>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008c] in <75492a4dd0d94716b085d4162d98876f>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <75492a4dd0d94716b085d4162d98876f>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        if (n == 0) {\n            return result;\n   \
    \     }\n        result.Add(2);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(8);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            long\
    \ tri = 0;\n            if (i % 2 == 0) {\n                tri = 1 + i / 2;\n\
    \            } else {\n                tri = result[i - 1] + result[i - 2] + result[i\
    \ + 1];\n            }\n            result.Add(tri);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008d] in <bf29037aba3048dcb79fad8eb9a9fa2c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <bf29037aba3048dcb79fad8eb9a9fa2c>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008d] in <bf29037aba3048dcb79fad8eb9a9fa2c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <bf29037aba3048dcb79fad8eb9a9fa2c>:0 \n"
  stdout: ''
  timestamp: 1660028152
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <b2e80b46b0de4aecae7becffebbf10dc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <b2e80b46b0de4aecae7becffebbf10dc>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <0f49cf92e09b445285a35243f3a0fec5>:0\
    \ \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        if (n == 0) {\n            return result;\n   \
    \     }\n        result.Add(2);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(8);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            result.Add(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c442f0b834934fa280d475de95a99d03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c442f0b834934fa280d475de95a99d03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660028152
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        for (int i = 1; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003b] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <239e4a46d7514c78ac5d8eac7de1ba0c>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        List<long> result = new List<long>();\n  \
    \      result.Add(3);\n        if (n == 0) return result;\n        result.Add(2);\n\
    \        if (n == 1) return result;\n        result.Add(8);\n        if (n ==\
    \ 2) return result;\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008c] in <75492a4dd0d94716b085d4162d98876f>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <75492a4dd0d94716b085d4162d98876f>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008c] in <75492a4dd0d94716b085d4162d98876f>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <75492a4dd0d94716b085d4162d98876f>:0 \n"
  stdout: ''
  timestamp: 1660028151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    public static\
    \ List<long> Tri(long n) {\n        var result = new List<long>();\n        for\
    \ (long i = 1; i <= n + 1; i++) {\n            if (i == 1) {\n               \
    \ result.Add(3);\n            } else if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 2] + result[(int)i - 3] + result[(int)i]);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <e51fe8833e0c42bfa5014135f35af7d2>:0 \n"
  stdout: ''
  timestamp: 1660028151
