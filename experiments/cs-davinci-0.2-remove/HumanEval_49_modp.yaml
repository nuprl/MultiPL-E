name: HumanEval_49_modp
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    public static\
  \ long Modp(long n, long p) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Modp((3L),\
  \ (5L)) == (3L));\n    Debug.Assert(Modp((1101L), (101L)) == (2L));\n    Debug.Assert(Modp((0L),\
  \ (101L)) == (1L));\n    Debug.Assert(Modp((3L), (11L)) == (8L));\n    Debug.Assert(Modp((100L),\
  \ (101L)) == (1L));\n    Debug.Assert(Modp((30L), (5L)) == (4L));\n    Debug.Assert(Modp((31L),\
  \ (5L)) == (3L));\n    }\n\n}\n"
completions: ["        long res = 1;\n        while (n > 0) {\n            if ((n\
    \ & 1) == 1) {\n                res = (res * 2) % p;\n            }\n        \
    \    n >>= 1;\n            if (n > 0) {\n                res = (res * res) % p;\n\
    \            }\n        }\n        return res;", "        long res = 1;\n    \
    \    while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * 2) % p;\n            }\n            n >>= 1;\n            if (n > 0) {\n \
    \               res = (res * res) % p;\n            }\n        }\n        return\
    \ res;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n         \
    \   long t = Modp(n / 2, p);\n            return (t * t) % p;\n        } else\
    \ {\n            return (2 * Modp(n - 1, p)) % p;\n        }", "        if (n\
    \ == 0) return 1;\n        if (n % 2 == 0) {\n            long x = Modp(n / 2,\
    \ p);\n            return (x * x) % p;\n        } else {\n            return (2\
    \ * Modp(n - 1, p)) % p;\n        }", "        long result = 1;\n        long\
    \ base2 = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n     \
    \           result = (result * base2) % p;\n            }\n            base2 =\
    \ (base2 * base2) % p;\n            n >>= 1;\n        }\n        return result;",
  "        long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) res\
    \ = (res * 2) % p;\n            n >>= 1;\n        }\n        return res;", " \
    \       long res = 1;\n        long cur = 2;\n        while (n > 0) {\n      \
    \      if ((n & 1) == 1) {\n                res = (res * cur) % p;\n         \
    \   }\n            cur = (cur * cur) % p;\n            n >>= 1;\n        }\n \
    \       return res;", "        long res = 1;\n        while (n > 0) {\n      \
    \      if ((n & 1) == 1) {\n                res = (res * 2) % p;\n           \
    \ }\n            n >>= 1;\n            if (n > 0) {\n                res = (res\
    \ * res) % p;\n            }\n        }\n        return res;", "        if (n\
    \ == 0) return 1;\n        long x = Modp(n / 2, p);\n        x = (x * x) % p;\n\
    \        if (n % 2 == 1) x = (x * 2) % p;\n        return x;", "        long r\
    \ = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) r = (r * 2) % p;\n\
    \            n >>= 1;\n        }\n        return r;", "        long res = 1;\n\
    \        long a = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * a) % p;\n            }\n            a = (a * a)\
    \ % p;\n            n >>= 1;\n        }\n        return res;", "        long res\
    \ = 1;\n        long a = 2;\n        while (n > 0) {\n            if ((n & 1)\
    \ == 1) {\n                res = (res * a) % p;\n            }\n            a\
    \ = (a * a) % p;\n            n >>= 1;\n        }\n        return res;", "   \
    \     long result = 1;\n        while (n > 0) {\n            if ((n & 1) == 1)\
    \ {\n                result = (result * 2) % p;\n            }\n            n\
    \ >>= 1;\n        }\n        return result;", "        long r = 1;\n        for\
    \ (int i = 0; i < n; i++) {\n            r = (r * 2) % p;\n        }\n       \
    \ return r;", "        if (n == 0) return 1;\n        long x = Modp(n / 2, p);\n\
    \        x = (x * x) % p;\n        if (n % 2 == 1) x = (x * 2) % p;\n        return\
    \ x;", "        long res = 1;\n        for (int i = 0; i < n; i++) {\n       \
    \     res = (res * 2) % p;\n        }\n        return res;", "        long res\
    \ = 1;\n        long a = 2;\n        while (n > 0) {\n            if ((n & 1)\
    \ == 1) {\n                res = (res * a) % p;\n            }\n            a\
    \ = (a * a) % p;\n            n >>= 1;\n        }\n        return res;", "   \
    \     long res = 1;\n        long a = 2;\n        while (n > 0) {\n          \
    \  if ((n & 1) == 1) {\n                res = (res * a) % p;\n            }\n\
    \            a = (a * a) % p;\n            n >>= 1;\n        }\n        return\
    \ res;", "        long res = 1;\n        while (n > 0) {\n            if ((n &\
    \ 1) == 1) {\n                res = (res * 2) % p;\n            }\n          \
    \  n >>= 1;\n            if (n > 0) {\n                res = (res * res) % p;\n\
    \            }\n        }\n        return res;", "        long res = 1;\n    \
    \    long a = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n \
    \               res = (res * a) % p;\n            }\n            a = (a * a) %\
    \ p;\n            n >>= 1;\n        }\n        return res;", "        long res\
    \ = 1;\n        long b = 2;\n        while (n > 0) {\n            if ((n & 1)\
    \ != 0) {\n                res = (res * b) % p;\n            }\n            b\
    \ = (b * b) % p;\n            n >>= 1;\n        }\n        return res;", "   \
    \     long result = 1;\n        long power = 2;\n        while (n > 0) {\n   \
    \         if ((n & 1) == 1) {\n                result = (result * power) % p;\n\
    \            }\n            power = (power * power) % p;\n            n >>= 1;\n\
    \        }\n        return result;", "        if (n == 0) return 1;\n        long\
    \ x = Modp(n / 2, p);\n        x = (x * x) % p;\n        if (n % 2 == 1) x = (x\
    \ * 2) % p;\n        return x;", "        long res = 1;\n        for (int i =\
    \ 0; i < n; i++) {\n            res = (res * 2) % p;\n        }\n        return\
    \ res;", "        long result = 1;\n        long b = 2;\n        while (n > 0)\
    \ {\n            if ((n & 1) == 1) {\n                result = (result * b) %\
    \ p;\n            }\n            n >>= 1;\n            b = (b * b) % p;\n    \
    \    }\n        return result;", "        if (n == 0) return 1;\n        if (n\
    \ % 2 == 0) {\n            long t = Modp(n / 2, p);\n            return (t * t)\
    \ % p;\n        } else {\n            return (2 * Modp(n - 1, p)) % p;\n     \
    \   }", "        long res = 1;\n        long a = 2;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                res = (res * a) % p;\n     \
    \       }\n            a = (a * a) % p;\n            n >>= 1;\n        }\n   \
    \     return res;", "        long res = 1;\n        long a = 2;\n        while\
    \ (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res * a)\
    \ % p;\n            }\n            a = (a * a) % p;\n            n >>= 1;\n  \
    \      }\n        return res;", "        long res = 1;\n        while (n > 0)\
    \ {\n            if ((n & 1) == 1) {\n                res = (res * 2) % p;\n \
    \           }\n            n >>= 1;\n            if (n > 0) {\n              \
    \  res = (res * res) % p;\n            }\n        }\n        return res;", " \
    \       long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1)\
    \ {\n                res = (res * 2) % p;\n            }\n            n >>= 1;\n\
    \            if (n > 0) {\n                res = (res * res) % p;\n          \
    \  }\n        }\n        return res;", "        long res = 1;\n        long a\
    \ = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n           \
    \     res = (res * a) % p;\n            }\n            a = (a * a) % p;\n    \
    \        n >>= 1;\n        }\n        return res;", "        if (n == 0) return\
    \ 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n      \
    \      return (t * t) % p;\n        } else {\n            return (2 * Modp(n -\
    \ 1, p)) % p;\n        }", "        long r = 1;\n        while (n > 0) {\n   \
    \         if ((n & 1) != 0) {\n                r = (r * 2) % p;\n            }\n\
    \            n >>= 1;\n        }\n        return r;", "        long r = 1;\n \
    \       while (n > 0) {\n            if ((n & 1) == 1) r = (r * 2) % p;\n    \
    \        n >>= 1;\n        }\n        return r;", "        long res = 1;\n   \
    \     long a = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * a) % p;\n            }\n            a = (a * a)\
    \ % p;\n            n >>= 1;\n        }\n        return res;", "        long res\
    \ = 1;\n        for (long i = 0; i < n; i++) {\n            res = (res * 2) %\
    \ p;\n        }\n        return res;", "        long res = 1;\n        long a\
    \ = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n           \
    \     res = (res * a) % p;\n            }\n            a = (a * a) % p;\n    \
    \        n >>= 1;\n        }\n        return res;", "        long res = 1;\n \
    \       long b = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * b) % p;\n            }\n            b = (b * b)\
    \ % p;\n            n >>= 1;\n        }\n        return res;", "        long res\
    \ = 1;\n        long a = 2;\n        while (n > 0) {\n            if ((n & 1)\
    \ == 1) {\n                res = (res * a) % p;\n            }\n            a\
    \ = (a * a) % p;\n            n >>= 1;\n        }\n        return res;", "   \
    \     long r = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                r = (r * 2) % p;\n            }\n            n >>= 1;\n     \
    \   }\n        return r;", "        long result = 1;\n        long power = 2;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                result\
    \ = (result * power) % p;\n            }\n            power = (power * power)\
    \ % p;\n            n >>= 1;\n        }\n        return result;", "        long\
    \ result = 1;\n        long b = 2;\n        while (n > 0) {\n            if ((n\
    \ & 1) == 1) {\n                result = (result * b) % p;\n            }\n  \
    \          n >>= 1;\n            b = (b * b) % p;\n        }\n        return result;",
  "        long result = 1;\n        long factor = 2;\n        while (n > 0) {\n \
    \           if ((n & 1) == 1) {\n                result = (result * factor) %\
    \ p;\n            }\n            factor = (factor * factor) % p;\n           \
    \ n >>= 1;\n        }\n        return result;", "        long res = 1;\n     \
    \   while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * 2) % p;\n            }\n            n >>= 1;\n            if (n > 0) {\n \
    \               res = (res * res) % p;\n            }\n        }\n        return\
    \ res;", "        long res = 1;\n        long b = 2;\n        while (n > 0) {\n\
    \            if ((n & 1) != 0) {\n                res = (res * b) % p;\n     \
    \       }\n            b = (b * b) % p;\n            n >>= 1;\n        }\n   \
    \     return res;", "        long res = 1;\n        while (n > 0) {\n        \
    \    if ((n & 1) == 1) res = (res * 2) % p;\n            n >>= 1;\n        }\n\
    \        return res;", "        long result = 1;\n        long power = 2;\n  \
    \      while (n > 0) {\n            if ((n & 1) == 1) {\n                result\
    \ = (result * power) % p;\n            }\n            power = (power * power)\
    \ % p;\n            n >>= 1;\n        }\n        return result;", "        long\
    \ result = 1;\n        long power = 2;\n        while (n > 0) {\n            if\
    \ ((n & 1) == 1) {\n                result = (result * power) % p;\n         \
    \   }\n            power = (power * power) % p;\n            n >>= 1;\n      \
    \  }\n        return result;", "        long res = 1;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                res = (res * 2) % p;\n     \
    \       }\n            n >>= 1;\n            if (n > 0) {\n                res\
    \ = (res * res) % p;\n            }\n        }\n        return res;", "      \
    \  long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) res =\
    \ (res * 2) % p;\n            n >>= 1;\n        }\n        return res;", "   \
    \     long result = 1;\n        long b = 2;\n        while (n > 0) {\n       \
    \     if ((n & 1) == 1) {\n                result = (result * b) % p;\n      \
    \      }\n            n >>= 1;\n            b = (b * b) % p;\n        }\n    \
    \    return result;", "        long res = 1;\n        for (int i = 0; i < n; i++)\
    \ {\n            res = (res * 2) % p;\n        }\n        return res;", "    \
    \    if (n == 0) return 1;\n        long result = Modp(n / 2, p);\n        result\
    \ = (result * result) % p;\n        if (n % 2 == 1) result = (result * 2) % p;\n\
    \        return result;", "        if (n == 0) return 1;\n        if (n % 2 ==\
    \ 0) return Modp(n / 2, p) * Modp(n / 2, p) % p;\n        return 2 * Modp(n -\
    \ 1, p) % p;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n   \
    \         long t = Modp(n / 2, p);\n            return (t * t) % p;\n        }\
    \ else {\n            return (2 * Modp(n - 1, p)) % p;\n        }", "        long\
    \ res = 1;\n        long x = 2;\n        while (n > 0) {\n            if ((n &\
    \ 1) == 1) {\n                res = (res * x) % p;\n            }\n          \
    \  x = (x * x) % p;\n            n >>= 1;\n        }\n        return res;", " \
    \       long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1)\
    \ {\n                res = (res * 2) % p;\n            }\n            n >>= 1;\n\
    \            if (n > 0) {\n                res = (res * res) % p;\n          \
    \  }\n        }\n        return res;", "        long res = 1;\n        for (int\
    \ i = 0; i < n; i++) {\n            res = (res * 2) % p;\n        }\n        return\
    \ res;", "        long res = 1;\n        long a = 2;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                res = (res * a) % p;\n     \
    \       }\n            a = (a * a) % p;\n            n >>= 1;\n        }\n   \
    \     return res;", "        long res = 1;\n        while (n > 0) {\n        \
    \    if ((n & 1) == 1) {\n                res = (res * 2) % p;\n            }\n\
    \            n >>= 1;\n            if (n > 0) {\n                res = (res *\
    \ res) % p;\n            }\n        }\n        return res;", "        long result\
    \ = 1;\n        long b = 2;\n        while (n > 0) {\n            if ((n & 1)\
    \ == 1) {\n                result = (result * b) % p;\n            }\n       \
    \     n >>= 1;\n            b = (b * b) % p;\n        }\n        return result;",
  "        long res = 1;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n\
    \                res = (res * 2) % p;\n            }\n            n >>= 1;\n \
    \       }\n        return res;", "        long res = 1;\n        for (int i =\
    \ 0; i < n; i++) {\n            res = (res * 2) % p;\n        }\n        return\
    \ res;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n         \
    \   long t = Modp(n / 2, p);\n            return (t * t) % p;\n        } else\
    \ {\n            return (2 * Modp(n - 1, p)) % p;\n        }", "        long r\
    \ = 1;\n        for (int i = 0; i < n; i++) {\n            r = (r * 2) % p;\n\
    \        }\n        return r;", "        if (n == 0) return 1;\n        if (n\
    \ % 2 == 0) {\n            long t = Modp(n / 2, p);\n            return (t * t)\
    \ % p;\n        } else {\n            return (2 * Modp(n - 1, p)) % p;\n     \
    \   }", "        long res = 1;\n        long a = 2;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                res = (res * a) % p;\n     \
    \       }\n            a = (a * a) % p;\n            n >>= 1;\n        }\n   \
    \     return res;", "        if (n == 0) return 1;\n        if (n % 2 == 0) return\
    \ Modp(n / 2, p) * Modp(n / 2, p) % p;\n        return 2 * Modp(n - 1, p) % p;",
  "        long res = 1;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n\
    \                res = (res * 2) % p;\n            }\n            n >>= 1;\n \
    \       }\n        return res;", "        long result = 1;\n        long power\
    \ = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n           \
    \     result = (result * power) % p;\n            }\n            power = (power\
    \ * power) % p;\n            n >>= 1;\n        }\n        return result;", " \
    \       if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t =\
    \ Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n       \
    \     return (2 * Modp(n - 1, p)) % p;\n        }", "        long res = 1;\n \
    \       while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n        }\n        return\
    \ res;", "        long res = 1;\n        while (n > 0) {\n            if ((n &\
    \ 1) != 0) {\n                res = (res * 2) % p;\n            }\n          \
    \  n >>= 1;\n        }\n        return res;", "        long res = 1;\n       \
    \ while (n > 0) {\n            if ((n & 1) == 1) res = (res * 2) % p;\n      \
    \      n >>= 1;\n        }\n        return res;", "        long res = 1;\n   \
    \     while (n > 0) {\n            if ((n & 1) == 1) res = (res * 2) % p;\n  \
    \          n >>= 1;\n        }\n        return res;", "        long res = 1;\n\
    \        for (int i = 0; i < n; i++) {\n            res = (res * 2) % p;\n   \
    \     }\n        return res;", "        long res = 1;\n        for (long i = 0;\
    \ i < n; i++) {\n            res = (res * 2) % p;\n        }\n        return res;",
  "        long r = 1;\n        long b = 2;\n        while (n > 0) {\n           \
    \ if ((n & 1) == 1) {\n                r = (r * b) % p;\n            }\n     \
    \       b = (b * b) % p;\n            n >>= 1;\n        }\n        return r;",
  "        long res = 1;\n        long a = 2;\n        while (n > 0) {\n         \
    \   if ((n & 1) == 1) {\n                res = (res * a) % p;\n            }\n\
    \            a = (a * a) % p;\n            n >>= 1;\n        }\n        return\
    \ res;", "        long res = 1;\n        long b = 2;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                res = (res * b) % p;\n     \
    \       }\n            b = (b * b) % p;\n            n >>= 1;\n        }\n   \
    \     return res;", "        long res = 1;\n        for (int i = 0; i < n; i++)\
    \ {\n            res = (res * 2) % p;\n        }\n        return res;", "    \
    \    long res = 1;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n\
    \                res = (res * 2) % p;\n            }\n            n >>= 1;\n \
    \       }\n        return res;", "        if (n == 0) return 1;\n        long\
    \ r = Modp(n / 2, p);\n        r = (r * r) % p;\n        if (n % 2 == 1) r = (r\
    \ * 2) % p;\n        return r;", "        long res = 1;\n        while (n > 0)\
    \ {\n            if ((n & 1) == 1) {\n                res = (res * 2) % p;\n \
    \           }\n            n >>= 1;\n            if (n > 0) {\n              \
    \  res = (res * res) % p;\n            }\n        }\n        return res;", " \
    \       long r = 1;\n        long b = 2;\n        while (n > 0) {\n          \
    \  if ((n & 1) == 1) {\n                r = (r * b) % p;\n            }\n    \
    \        b = (b * b) % p;\n            n >>= 1;\n        }\n        return r;",
  "        long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * 2) % p;\n            }\n            n >>= 1;\n \
    \       }\n        return res;", "        long res = 1;\n        long a = 2;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * a) % p;\n            }\n            a = (a * a) % p;\n            n\
    \ >>= 1;\n        }\n        return res;", "        long res = 1;\n        long\
    \ a = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n         \
    \       res = (res * a) % p;\n            }\n            a = (a * a) % p;\n  \
    \          n >>= 1;\n        }\n        return res;", "        long res = 1;\n\
    \        long a = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) res\
    \ = (res * a) % p;\n            a = (a * a) % p;\n            n >>= 1;\n     \
    \   }\n        return res;", "        long res = 1;\n        for (int i = 0; i\
    \ < n; i++)\n            res = (res * 2) % p;\n        return res;", "       \
    \ long res = 1;\n        long b = 2;\n        while (n > 0) {\n            if\
    \ ((n & 1) == 1) {\n                res = (res * b) % p;\n            }\n    \
    \        b = (b * b) % p;\n            n >>= 1;\n        }\n        return res;",
  "        long result = 1;\n        for (int i = 0; i < n; i++) {\n            result\
    \ = (result * 2) % p;\n        }\n        return result;", "        long r = 1;\n\
    \        long b = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                r = (r * b) % p;\n            }\n            b = (b * b) % p;\n\
    \            n >>= 1;\n        }\n        return r;", "        long result = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1)\n                result\
    \ = (result * 2) % p;\n            n >>= 1;\n        }\n        return result;",
  "        long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) res\
    \ = (res * 2) % p;\n            n >>= 1;\n        }\n        return res;", " \
    \       long r = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) r\
    \ = (r * 2) % p;\n            n >>= 1;\n        }\n        return r;", "     \
    \   if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n\
    \ / 2, p);\n            return (t * t) % p;\n        } else {\n            return\
    \ (2 * Modp(n - 1, p)) % p;\n        }", "        long res = 1;\n        long\
    \ b = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n         \
    \       res = (res * b) % p;\n            }\n            b = (b * b) % p;\n  \
    \          n >>= 1;\n        }\n        return res;", "        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n            if (n > 0)\
    \ {\n                res = (res * res) % p;\n            }\n        }\n      \
    \  return res;", "        long res = 1;\n        while (n > 0) {\n           \
    \ if ((n & 1) == 1) res = (res * 2) % p;\n            n >>= 1;\n        }\n  \
    \      return res;", "        long r = 1;\n        long b = 2;\n        while\
    \ (n > 0) {\n            if ((n & 1) == 1) {\n                r = (r * b) % p;\n\
    \            }\n            b = (b * b) % p;\n            n >>= 1;\n        }\n\
    \        return r;", "        long res = 1;\n        long b = 2;\n        while\
    \ (n > 0) {\n            if ((n & 1) != 0) {\n                res = (res * b)\
    \ % p;\n            }\n            b = (b * b) % p;\n            n >>= 1;\n  \
    \      }\n        return res;", "        long res = 1;\n        while (n > 0)\
    \ {\n            if ((n & 1) == 1) res = (res * 2) % p;\n            n >>= 1;\n\
    \        }\n        return res;", "        long res = 1;\n        while (n > 0)\
    \ {\n            if ((n & 1) == 1) res = (res * 2) % p;\n            n >>= 1;\n\
    \        }\n        return res;", "        if (n == 0) return 1;\n        if (n\
    \ % 2 == 0) {\n            long t = Modp(n / 2, p);\n            return (t * t)\
    \ % p;\n        } else {\n            return (2 * Modp(n - 1, p)) % p;\n     \
    \   }", "        long res = 1;\n        while (n > 0) {\n            if ((n &\
    \ 1) == 1) {\n                res = (res * 2) % p;\n            }\n          \
    \  n >>= 1;\n            if (n > 0) {\n                res = (res * res) % p;\n\
    \            }\n        }\n        return res;", "        long res = 1;\n    \
    \    long a = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n \
    \               res = (res * a) % p;\n            }\n            a = (a * a) %\
    \ p;\n            n >>= 1;\n        }\n        return res;", "        long res\
    \ = 1;\n        long a = 2;\n        while (n > 0) {\n            if ((n & 1)\
    \ == 1) {\n                res = (res * a) % p;\n            }\n            a\
    \ = (a * a) % p;\n            n >>= 1;\n        }\n        return res;", "   \
    \     long res = 1;\n        long b = 2;\n        while (n > 0) {\n          \
    \  if ((n & 1) == 1) {\n                res = (res * b) % p;\n            }\n\
    \            b = (b * b) % p;\n            n >>= 1;\n        }\n        return\
    \ res;", "        if (n == 0) return 1;\n        if (n % 2 == 0) return Modp(n\
    \ / 2, p) * Modp(n / 2, p) % p;\n        return 2 * Modp(n - 1, p) % p;", "  \
    \      long result = 1;\n        long baseValue = 2;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                result = (result * baseValue)\
    \ % p;\n            }\n            n >>= 1;\n            baseValue = (baseValue\
    \ * baseValue) % p;\n        }\n        return result;", "        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n\
    \            return (t * t) % p;\n        } else {\n            return (2 * Modp(n\
    \ - 1, p)) % p;\n        }", "        long ret = 1;\n        for (int i = 0; i\
    \ < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;",
  "        if (n == 0) return 1;\n        long x = Modp(n / 2, p);\n        x = (x\
    \ * x) % p;\n        if (n % 2 == 1) x = (x * 2) % p;\n        return x;", " \
    \       long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1)\
    \ {\n                res = (res * 2) % p;\n            }\n            n >>= 1;\n\
    \            if (n > 0) {\n                res = (res * res) % p;\n          \
    \  }\n        }\n        return res;", "        long result = 1;\n        while\
    \ (n > 0) {\n            if ((n & 1) == 1) {\n                result = (result\
    \ * 2) % p;\n            }\n            n >>= 1;\n        }\n        return result;",
  "        long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * 2) % p;\n            }\n            n >>= 1;\n \
    \           if (n > 0) {\n                res = (res * res) % p;\n           \
    \ }\n        }\n        return res;", "        if (n == 0) return 1;\n       \
    \ if (n % 2 == 0) {\n            long x = Modp(n / 2, p);\n            return\
    \ (x * x) % p;\n        } else {\n            return (2 * Modp(n - 1, p)) % p;\n\
    \        }", "        long res = 1;\n        for (long i = 0; i < n; i++) {\n\
    \            res = (res * 2) % p;\n        }\n        return res;", "        if\
    \ (n == 0) return 1;\n        if (n % 2 == 0) return Modp(n / 2, p) * Modp(n /\
    \ 2, p) % p;\n        return 2 * Modp(n - 1, p) % p;", "        long result =\
    \ 1;\n        long power = 2;\n        while (n > 0) {\n            if ((n & 1)\
    \ == 1) {\n                result = (result * power) % p;\n            }\n   \
    \         power = (power * power) % p;\n            n >>= 1;\n        }\n    \
    \    return result;", "        if (n == 0) return 1;\n        if (n % 2 == 0)\
    \ return Modp(n / 2, p) * Modp(n / 2, p) % p;\n        return 2 * Modp(n - 1,\
    \ p) % p;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n      \
    \      long t = Modp(n / 2, p);\n            return (t * t) % p;\n        } else\
    \ {\n            return (2 * Modp(n - 1, p)) % p;\n        }", "        if (n\
    \ == 0) return 1;\n        long x = Modp(n / 2, p);\n        x = (x * x) % p;\n\
    \        if (n % 2 == 1) x = (x * 2) % p;\n        return x;", "        long res\
    \ = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n           \
    \     res = (res * 2) % p;\n            }\n            n >>= 1;\n            if\
    \ (n > 0) {\n                res = (res * res) % p;\n            }\n        }\n\
    \        return res;", "        if (n == 0) return 1;\n        if (n % 2 == 0)\
    \ {\n            long t = Modp(n / 2, p);\n            return (t * t) % p;\n \
    \       } else {\n            return (2 * Modp(n - 1, p)) % p;\n        }", " \
    \       long res = 1;\n        for (int i = 0; i < n; i++) {\n            res\
    \ = (res * 2) % p;\n        }\n        return res;", "        long res = 1;\n\
    \        long a = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * a) % p;\n            }\n            a = (a * a)\
    \ % p;\n            n >>= 1;\n        }\n        return res;", "        if (n\
    \ == 0) return 1;\n        long x = Modp(n / 2, p);\n        x = (x * x) % p;\n\
    \        if (n % 2 == 1) x = (x * 2) % p;\n        return x;", "        long res\
    \ = 1;\n        long a = 2;\n        while (n > 0) {\n            if ((n & 1)\
    \ == 1) {\n                res = (res * a) % p;\n            }\n            a\
    \ = (a * a) % p;\n            n >>= 1;\n        }\n        return res;", "   \
    \     long result = 1;\n        long baseValue = 2;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                result = (result * baseValue)\
    \ % p;\n            }\n            n >>= 1;\n            baseValue = (baseValue\
    \ * baseValue) % p;\n        }\n        return result;", "        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n            if (n > 0)\
    \ {\n                res = (res * res) % p;\n            }\n        }\n      \
    \  return res;", "        long res = 1;\n        long a = 2;\n        while (n\
    \ > 0) {\n            if ((n & 1) != 0) {\n                res = (res * a) % p;\n\
    \            }\n            a = (a * a) % p;\n            n >>= 1;\n        }\n\
    \        return res;", "        long result = 1;\n        long b = 2;\n      \
    \  while (n > 0) {\n            if ((n & 1) == 1) {\n                result =\
    \ (result * b) % p;\n            }\n            n >>= 1;\n            b = (b *\
    \ b) % p;\n        }\n        return result;", "        long res = 1;\n      \
    \  while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * 2) % p;\n            }\n            n >>= 1;\n            if (n > 0) {\n \
    \               res = (res * res) % p;\n            }\n        }\n        return\
    \ res;", "        if (n < 0)\n            throw new ArgumentOutOfRangeException();\n\
    \        if (n == 0)\n            return 1;\n        if (n == 1)\n           \
    \ return 2;\n        long half = Modp(n / 2, p);\n        long result = half *\
    \ half % p;\n        if (n % 2 == 1)\n            result = result * 2 % p;\n \
    \       return result;", "        long res = 1;\n        long base2 = 2;\n   \
    \     while (n > 0) {\n            if ((n & 1) == 1) {\n                res =\
    \ (res * base2) % p;\n            }\n            base2 = (base2 * base2) % p;\n\
    \            n >>= 1;\n        }\n        return res;", "        long res = 1;\n\
    \        long a = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * a) % p;\n            }\n            a = (a * a)\
    \ % p;\n            n >>= 1;\n        }\n        return res;", "        long result\
    \ = 1;\n        while (n > 0) {\n            if ((n & 1) == 1)\n             \
    \   result = (result * 2) % p;\n            n >>= 1;\n        }\n        return\
    \ result;", "        if (n < 0) {\n            return Modp(n + p - 1, p);\n  \
    \      }\n        if (n == 0) {\n            return 1;\n        }\n        if\
    \ (n == 1) {\n            return 2;\n        }\n        long half = Modp(n / 2,\
    \ p);\n        long result = (half * half) % p;\n        if (n % 2 == 1) {\n \
    \           result = (result * 2) % p;\n        }\n        return result;", " \
    \       long res = 1;\n        long a = 2;\n        while (n > 0) {\n        \
    \    if ((n & 1) == 1) {\n                res = (res * a) % p;\n            }\n\
    \            a = (a * a) % p;\n            n >>= 1;\n        }\n        return\
    \ res;", "        long res = 1;\n        while (n > 0) {\n            if ((n &\
    \ 1) == 1) {\n                res = (res * 2) % p;\n            }\n          \
    \  n >>= 1;\n            if (n > 0) {\n                res = (res * res) % p;\n\
    \            }\n        }\n        return res;", "        long res = 1;\n    \
    \    while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * 2) % p;\n            }\n            n >>= 1;\n            if (n > 0) {\n \
    \               res = (res * res) % p;\n            }\n        }\n        return\
    \ res;", "        long result = 1;\n        long power = 2;\n        while (n\
    \ > 0) {\n            if ((n & 1) == 1) {\n                result = (result *\
    \ power) % p;\n            }\n            power = (power * power) % p;\n     \
    \       n >>= 1;\n        }\n        return result;", "        long res = 1;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                res\
    \ = (res * 2) % p;\n            }\n            n >>= 1;\n            if (n > 0)\
    \ {\n                res = (res * res) % p;\n            }\n        }\n      \
    \  return res;", "        long result = 1;\n        long factor = 2;\n       \
    \ while (n > 0) {\n            if ((n & 1) == 1) {\n                result = (result\
    \ * factor) % p;\n            }\n            factor = (factor * factor) % p;\n\
    \            n >>= 1;\n        }\n        return result;", "        if (n == 0)\
    \ return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n\
    \            return (t * t) % p;\n        } else {\n            return (2 * Modp(n\
    \ - 1, p)) % p;\n        }", "        long res = 1;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) res = (res * 2) % p;\n            n >>= 1;\n  \
    \      }\n        return res;", "        long res = 1;\n        while (n > 0)\
    \ {\n            if ((n & 1) == 1) {\n                res = (res * 2) % p;\n \
    \           }\n            n >>= 1;\n            if (n > 0) {\n              \
    \  res = (res * res) % p;\n            }\n        }\n        return res;", " \
    \       if (n == 0) return 1;\n        long x = Modp(n / 2, p);\n        x = (x\
    \ * x) % p;\n        if (n % 2 == 1) x = (x * 2) % p;\n        return x;", " \
    \       if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t =\
    \ Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n       \
    \     return (2 * Modp(n - 1, p)) % p;\n        }", "        long res = 1;\n \
    \       long a = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * a) % p;\n            }\n            a = (a * a)\
    \ % p;\n            n >>= 1;\n        }\n        return res;", "        if (n\
    \ == 0) return 1;\n        long x = Modp(n / 2, p);\n        x = (x * x) % p;\n\
    \        if (n % 2 == 1) x = (x * 2) % p;\n        return x;", "        long res\
    \ = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n           \
    \     res = (res * 2) % p;\n            }\n            n >>= 1;\n            if\
    \ (n > 0) {\n                res = (res * res) % p;\n            }\n        }\n\
    \        return res;", "        long res = 1;\n        while (n > 0) {\n     \
    \       if ((n & 1) == 1) res = (res * 2) % p;\n            n >>= 1;\n       \
    \ }\n        return res;", "        long result = 1;\n        long a = 2;\n  \
    \      while (n > 0) {\n            if ((n & 1) == 1) {\n                result\
    \ = (result * a) % p;\n            }\n            a = (a * a) % p;\n         \
    \   n >>= 1;\n        }\n        return result;", "        long result = 1;\n\
    \        long a = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                result = (result * a) % p;\n            }\n            a = (a\
    \ * a) % p;\n            n >>= 1;\n        }\n        return result;", "     \
    \   long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * 2) % p;\n            }\n            n >>= 1;\n \
    \           if (n > 0) {\n                res = (res * res) % p;\n           \
    \ }\n        }\n        return res;", "        if (n == 0) return 1;\n       \
    \ if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n            return\
    \ (t * t) % p;\n        } else {\n            return (2 * Modp(n - 1, p)) % p;\n\
    \        }", "        long result = 1;\n        for (long i = 0; i < n; i++) {\n\
    \            result = (result * 2) % p;\n        }\n        return result;", " \
    \       long result = 1;\n        long power = 2;\n        while (n > 0) {\n \
    \           if ((n & 1) == 1) {\n                result = (result * power) % p;\n\
    \            }\n            power = (power * power) % p;\n            n >>= 1;\n\
    \        }\n        return result;", "        long result = 1;\n        long baseValue\
    \ = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n           \
    \     result = (result * baseValue) % p;\n            }\n            n >>= 1;\n\
    \            baseValue = (baseValue * baseValue) % p;\n        }\n        return\
    \ result;", "        long res = 1;\n        while (n > 0) {\n            if ((n\
    \ & 1) == 1) {\n                res = (res * 2) % p;\n            }\n        \
    \    n >>= 1;\n            if (n > 0) {\n                res = (res * res) % p;\n\
    \            }\n        }\n        return res;", "        long res = 1;\n    \
    \    long b = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n \
    \               res = (res * b) % p;\n            }\n            b = (b * b) %\
    \ p;\n            n >>= 1;\n        }\n        return res;", "        long result\
    \ = 1;\n        long power = 2;\n        while (n > 0) {\n            if ((n &\
    \ 1) == 1)\n                result = (result * power) % p;\n            power\
    \ = (power * power) % p;\n            n >>= 1;\n        }\n        return result;",
  "        long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * 2) % p;\n            }\n            n >>= 1;\n \
    \           if (n > 0) {\n                res = (res * res) % p;\n           \
    \ }\n        }\n        return res;", "        long r = 1;\n        long b = 2;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                r =\
    \ (r * b) % p;\n            }\n            b = (b * b) % p;\n            n >>=\
    \ 1;\n        }\n        return r;", "        long res = 1;\n        while (n\
    \ > 0) {\n            if ((n & 1) == 1) {\n                res = (res * 2) % p;\n\
    \            }\n            n >>= 1;\n            if (n > 0) {\n             \
    \   res = (res * res) % p;\n            }\n        }\n        return res;", " \
    \       if (n < 0) {\n            throw new ArgumentException(\"n must be non-negative\"\
    );\n        }\n        if (p <= 0) {\n            throw new ArgumentException(\"\
    p must be positive\");\n        }\n        long result = 1;\n        long power\
    \ = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n           \
    \     result = (result * power) % p;\n            }\n            power = (power\
    \ * power) % p;\n            n >>= 1;\n        }\n        return result;", " \
    \       long r = 1;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n\
    \                r = (r * 2) % p;\n            }\n            n >>= 1;\n     \
    \   }\n        return r;", "        long res = 1;\n        long a = 2;\n     \
    \   while (n > 0) {\n            if ((n & 1) == 1) res = (res * a) % p;\n    \
    \        a = (a * a) % p;\n            n >>= 1;\n        }\n        return res;",
  "        if (n == 0) return 1;\n        long x = Modp(n / 2, p);\n        x = (x\
    \ * x) % p;\n        if (n % 2 == 1) x = (x * 2) % p;\n        return x;", " \
    \       long result = 1;\n        long base2 = 2;\n        while (n > 0) {\n \
    \           if ((n & 1) == 1) {\n                result = (result * base2) % p;\n\
    \            }\n            base2 = (base2 * base2) % p;\n            n >>= 1;\n\
    \        }\n        return result;", "        long res = 1;\n        for (int\
    \ i = 0; i < n; i++) {\n            res = (res * 2) % p;\n        }\n        return\
    \ res;", "        long res = 1;\n        while (n > 0) {\n            if ((n &\
    \ 1) == 1) {\n                res = (res * 2) % p;\n            }\n          \
    \  n >>= 1;\n            if (n > 0) {\n                res = (res * res) % p;\n\
    \            }\n        }\n        return res;", "        long res = 1;\n    \
    \    while (n > 0) {\n            if ((n & 1) == 1) res = (res * 2) % p;\n   \
    \         n >>= 1;\n        }\n        return res;", "        long result = 1;\n\
    \        long b = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                result = (result * b) % p;\n            }\n            n >>=\
    \ 1;\n            b = (b * b) % p;\n        }\n        return result;", "    \
    \    long res = 1;\n        long a = 2;\n        while (n > 0) {\n           \
    \ if ((n & 1) == 1) {\n                res = (res * a) % p;\n            }\n \
    \           a = (a * a) % p;\n            n >>= 1;\n        }\n        return\
    \ res;", "        long res = 1;\n        while (n > 0) {\n            if ((n &\
    \ 1) == 1) {\n                res = (res * 2) % p;\n            }\n          \
    \  n >>= 1;\n            if (n > 0) {\n                res = (res * res) % p;\n\
    \            }\n        }\n        return res;", "        if (n == 0) return 1;\n\
    \        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n           \
    \ return (t * t) % p;\n        } else {\n            return (2 * Modp(n - 1, p))\
    \ % p;\n        }", "        long result = 1;\n        long b = 2;\n        while\
    \ (n > 0) {\n            if ((n & 1) == 1) {\n                result = (result\
    \ * b) % p;\n            }\n            n >>= 1;\n            b = (b * b) % p;\n\
    \        }\n        return result;", "        long res = 1;\n        for (long\
    \ i = 0; i < n; i++) {\n            res = (res * 2) % p;\n        }\n        return\
    \ res;", "        long res = 1;\n        while (n > 0) {\n            if ((n &\
    \ 1) == 1) res = (res * 2) % p;\n            n >>= 1;\n        }\n        return\
    \ res;", "        long res = 1;\n        long a = 2;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                res = (res * a) % p;\n     \
    \       }\n            a = (a * a) % p;\n            n >>= 1;\n        }\n   \
    \     return res;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n\
    \            long t = Modp(n / 2, p);\n            return (t * t) % p;\n     \
    \   } else {\n            return (2 * Modp(n - 1, p)) % p;\n        }", "    \
    \    long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * 2) % p;\n            }\n            n >>= 1;\n \
    \           if (n > 0) {\n                res = (res * res) % p;\n           \
    \ }\n        }\n        return res;", "        long r = 1;\n        long b = 2;\n\
    \        while (n > 0) {\n            if ((n & 1) == 1) {\n                r =\
    \ (r * b) % p;\n            }\n            b = (b * b) % p;\n            n >>=\
    \ 1;\n        }\n        return r;", "        long res = 1;\n        while (n\
    \ > 0) {\n            if ((n & 1) == 1) {\n                res = (res * 2) % p;\n\
    \            }\n            n >>= 1;\n            if (n > 0) {\n             \
    \   res = (res * res) % p;\n            }\n        }\n        return res;", " \
    \       if (n == 0) return 1;\n        long t = Modp(n / 2, p);\n        t = (t\
    \ * t) % p;\n        if (n % 2 == 1) t = (t * 2) % p;\n        return t;", " \
    \       long result = 1;\n        long base_ = 2;\n        while (n > 0) {\n \
    \           if (n % 2 == 1) {\n                result = (result * base_) % p;\n\
    \            }\n            n /= 2;\n            base_ = (base_ * base_) % p;\n\
    \        }\n        return result;", "        long res = 1;\n        while (n\
    \ > 0) {\n            if ((n & 1) == 1) {\n                res = (res * 2) % p;\n\
    \            }\n            n >>= 1;\n            if (n > 0) {\n             \
    \   res = (res * res) % p;\n            }\n        }\n        return res;", " \
    \       long res = 1;\n        long a = 2;\n        while (n > 0) {\n        \
    \    if ((n & 1) == 1) {\n                res = (res * a) % p;\n            }\n\
    \            a = (a * a) % p;\n            n >>= 1;\n        }\n        return\
    \ res;", "        long res = 1;\n        long a = 2;\n        while (n > 0) {\n\
    \            if ((n & 1) == 1) {\n                res = (res * a) % p;\n     \
    \       }\n            a = (a * a) % p;\n            n >>= 1;\n        }\n   \
    \     return res;", "        long res = 1;\n        while (n > 0) {\n        \
    \    if ((n & 1) == 1) {\n                res = (res * 2) % p;\n            }\n\
    \            n >>= 1;\n            if (n > 0) {\n                res = (res *\
    \ res) % p;\n            }\n        }\n        return res;", "        long res\
    \ = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n           \
    \     res = (res * 2) % p;\n            }\n            n >>= 1;\n            if\
    \ (n > 0) {\n                res = (res * res) % p;\n            }\n        }\n\
    \        return res;", "        long res = 1;\n        while (n > 0) {\n     \
    \       if ((n & 1) == 1) {\n                res = (res * 2) % p;\n          \
    \  }\n            n >>= 1;\n            if (n > 0) {\n                res = (res\
    \ * res) % p;\n            }\n        }\n        return res;", "        long res\
    \ = 1;\n        long a = 2;\n        while (n > 0) {\n            if ((n & 1)\
    \ == 1) {\n                res = (res * a) % p;\n            }\n            a\
    \ = (a * a) % p;\n            n >>= 1;\n        }\n        return res;", "   \
    \     long res = 1;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n\
    \                res = (res * 2) % p;\n            }\n            n >>= 1;\n \
    \           if (n > 0) {\n                res = (res * res) % p;\n           \
    \ }\n        }\n        return res;", "        long res = 1;\n        while (n\
    \ > 0) {\n            if ((n & 1) == 1) res = (res * 2) % p;\n            n >>=\
    \ 1;\n        }\n        return res;", "        long res = 1;\n        long a\
    \ = 2;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n           \
    \     res = (res * a) % p;\n            }\n            a = (a * a) % p;\n    \
    \        n >>= 1;\n        }\n        return res;"]
stop_tokens:
- "\n    }\n"
