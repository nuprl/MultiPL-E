name: HumanEval_99_closest_integer
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that takes a value (string) representing a\
  \ number\n    // and returns the closest integer to it. If the number is equidistant\n\
  \    // from two integers, round it away from zero.\n    // Examples\n    // Note:\n\
  \    // Rounding away from zero means that if the given number is equidistant\n\
  \    // from two integers, the one you should return is the one that is the\n  \
  \  // farthest from zero. For example closest_integer(\"14.5\") should\n    // return\
  \ 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string\
  \ value) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"\
  10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
  -15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n\
  \    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n"
completions: ["        // Your code goes here\n        return 0;", "        // Your\
    \ code goes here.\n        // Don't forget to return the result.\n        double\
    \ d = double.Parse(value);\n        return (long)Math.Round(d);", "        //\
    \ Your code goes here\n        return 0;", "        // Your code goes here\n \
    \       return 0;", "        // Your code goes here.\n        // Note: Return\
    \ -1 if the value is not a valid number.\n        return -1;", "        // Your\
    \ code goes here\n        double d = double.Parse(value);\n        return (long)Math.Round(d);",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        double d = double.Parse(value);\n        long l = (long)d;\n \
    \       if (d - l > 0.5) {\n            return l + 1;\n        } else {\n    \
    \        return l;\n        }", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        // Your code\
    \ goes here\n        return 0;", "        // Your code goes here\n        return\
    \ 0;", "        // TODO: Implement this function\n        return 0;", "      \
    \  // Your code goes here\n        return 0;", "        // Your code goes here\n\
    \        return 0;", "        // Your code here\n        return 0;", "       \
    \ // Your code goes here\n        // If the number is equidistant from two integers,\
    \ round it away from zero.\n        // Examples\n        // Note:\n        //\
    \ Rounding away from zero means that if the given number is equidistant\n    \
    \    // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // Your code goes here\n        // If the number is equidistant from two\
    \ integers, round it away from zero.\n        // Examples\n        // Note:\n\
    \        // Rounding away from zero means that if the given number is equidistant\n\
    \        // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // Your code goes here\n        // If the number is equidistant from two\
    \ integers, round it away from zero.\n        // Examples\n        // Note:\n\
    \        // Rounding away from zero means that if the given number is equidistant\n\
    \        // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // Your code goes here\n        // If the number is equidistant from two\
    \ integers, round it away from zero.\n        // Examples\n        // Note:\n\
    \        // Rounding away from zero means that if the given number is equidistant\n\
    \        // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // Your code goes here\n        // If the number is equidistant from two\
    \ integers, round it away from zero.\n        // Examples\n        // Note:\n\
    \        // Rounding away from zero means that if the given number is equidistant\n\
    \        // from two integers, the one you should return is the", "        //\
    \ Write your code here\n        return 0;", "        // Your code goes here.\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here.\n        // You can add more classes to this solution.\n\
    \        return 0;", "        double d = double.Parse(value);\n        return\
    \ (long)Math.Round(d);", "        // Your code goes here\n        return 0;",
  "        // TODO: Implement this function\n        return 0;", "        // TODO:\
    \ Implement this function\n        return 0;", "        // Your code goes here\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code goes here\n        double d = double.Parse(value);\n     \
    \   long l = (long)d;\n        if (d - l >= 0.5) {\n            return l + 1;\n\
    \        }\n        return l;", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here\n        long result = 0;\n        double\
    \ d = double.Parse(value);\n        if (d < 0) {\n            result = (long)Math.Ceiling(d);\n\
    \        } else {\n            result = (long)Math.Floor(d);\n        }\n    \
    \    return result;", "        // Your code goes here\n        return 0;", " \
    \       // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        var v = double.Parse(value);\n\
    \        var r = Math.Round(v);\n        return (long)r;", "        // Your code\
    \ goes here\n        return 0;", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        // Your code\
    \ goes here\n        // Note: This is a very simple problem, but it's a good one\
    \ to get\n        // you started.\n        // Note: If you're having trouble,\
    \ try to figure out how to convert\n        // a string to a double.\n       \
    \ // Note: If you're still having trouble, try to figure out how to\n        //\
    \ convert a double to an integer.\n        // Note: If you're still having trouble,\
    \ try to figure out how to\n        // round a double to the nearest integer.\n\
    \        // Note: If you're still having trouble, try to figure out how to\n \
    \       // round a double away from zero.\n        // Note: If you're still having\
    \ trouble, try to figure out how to\n        // round a double away from zero\
    \ to the nearest integer.\n        // Note: If you're still having trouble, try\
    \ to figure out how to\n        // round a double away from zero to the nearest\
    \ integer and then\n        // convert that integer to a string.\n        // Note:\
    \ If you're still having trouble, try to figure out how to\n        // round a\
    \ double away from zero to the nearest integer and then\n        // convert that\
    \ integer to a string and then convert that string\n        // to an integer.\n\
    \        // Note: If you're still having trouble, try to figure out how to\n \
    \       // round a double away from zero to the nearest integer and then\n   \
    \     // convert that integer to a string and then convert that string\n     \
    \   // to an integer and then return that integer.\n        // Note: If you're\
    \ still having trouble, try to figure out how to\n        // round a double away\
    \ from zero to the nearest integer and then\n        // convert that integer to\
    \ a string and then convert that string\n        // to an integer and then return\
    \ that integer.\n        // Note: If you're still having trouble, try to figure\
    \ out how to\n        // round a double away from zero to the nearest integer\
    \ and then\n        // convert that integer to a string and then convert that\
    \ string\n        // to an integer and then return that integer.\n        // Note:\
    \ If you're still having trouble, try to figure out how to\n        // round a\
    \ double away from zero to the nearest integer and then\n        // convert that\
    \ integer to a string and then convert that string\n        // to an integer and\
    \ then return that integer.\n       ", "        // Your code goes here\n     \
    \   return 0;", "        // Your code goes here\n        return 0;", "       \
    \ // Your code goes here\n        return 0;", "        // Your code goes here\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code goes here\n        double d = double.Parse(value);\n     \
    \   return (long)Math.Round(d);", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here\n        var num = double.Parse(value);\n\
    \        var num1 = Math.Floor(num);\n        var num2 = Math.Ceiling(num);\n\
    \        if (num - num1 == num2 - num) {\n            return (long)num2;\n   \
    \     }\n        if (num - num1 < num2 - num) {\n            return (long)num1;\n\
    \        }\n        return (long)num2;", "        // Your code goes here\n   \
    \     return 0;", "        // Your code goes here\n        return 0;", "     \
    \   // Your code goes here\n        return 0;", "        // Your code goes here\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code goes here\n        return 0;", "        // Write your code\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code here\n        // You can add more classes/methods if you wish\n\
    \        // You can use the System.Numerics namespace\n        // You can use\
    \ the System.Diagnostics namespace\n        // You can use the System.Collections.Generic\
    \ namespace\n        // You can use the System.Linq namespace\n        // You\
    \ can use the System.Text namespace\n        // You can use the System.Security.Cryptography\
    \ namespace\n        // You can use the System.IO namespace\n        // You can\
    \ use the System.Threading namespace\n        // You can use the System.Threading.Tasks\
    \ namespace\n        // You can use the System.Net namespace\n        // You can\
    \ use the System.Net.Sockets namespace\n        // You can use the System.Net.NetworkInformation\
    \ namespace\n        // You can use the System.Net.Mail namespace\n        //\
    \ You can use the System.Net.Mime namespace\n        // You can use the System.Net.Security\
    \ namespace\n        // You can use the System.Net.WebSockets namespace\n    \
    \    // You can use the System.Net.WebClient namespace\n        // You can use\
    \ the System.Net.Http namespace\n        // You can use the System.Net.Http.Headers\
    \ namespace\n        // You can use the System.Net.Http.Handlers namespace\n \
    \       // You can use the System.Net.Http.Formatting namespace\n        // You\
    \ can use the System.Net.Http.Filters namespace\n        // You can use the System.Net.Http.Headers\
    \ namespace\n        // You can use the System.Net.Http.Primitives namespace\n\
    \        // You can use the System.Net.Http.WebRequest namespace\n        // You\
    \ can use the System.Net.Http.WebResponse namespace\n        // You can use the\
    \ System.Net.Http.WebRequestHandler namespace\n        // You can use the System.Net.Http.WebRequestHandler\
    \ namespace\n        // You can use the System.Net.Http.WebRequestHandler namespace\n\
    \        // You can use the System.Net.Http.WebRequestHandler namespace\n    \
    \    // You can use the System.Net.Http.WebRequestHandler namespace\n        //\
    \ You can use the System.Net.Http.WebRequestHandler namespace\n        // You\
    \ can use the System.Net.Http.WebRequestHandler namespace\n        // You can\
    \ use the System.", "        // Your code goes here\n        return 0;", "   \
    \     // Your code goes here\n        return 0;", "        // Your code goes here\n\
    \        return 0;", "        // Your code goes here.\n        return 0;", " \
    \       // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        // Note: Don't forget to return the result.\n        double d\
    \ = double.Parse(value);\n        return (long)Math.Round(d);", "        // Your\
    \ code goes here\n        return 0;", "        // Write your code here\n     \
    \   return 0;", "        // Your code goes here\n        return 0;", "       \
    \ // Your code goes here\n        return 0;", "        // Your code goes here.\n\
    \        // You can add other methods.\n        var number = decimal.Parse(value);\n\
    \        var floor = Math.Floor(number);\n        var ceil = Math.Ceiling(number);\n\
    \        if (number - floor == ceil - number)\n            return number < 0 ?\
    \ (long)floor : (long)ceil;\n        return number - floor < ceil - number ? (long)floor\
    \ : (long)ceil;", "        // Your code goes here\n        return 0;", "     \
    \   // Your code goes here\n        return 0;", "        // Your code goes here\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code goes here.\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here.\n        // Note: Return a long instead of an int.\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // TODO: Implement this function\n      \
    \  return 0;", "        // Your code goes here\n        double d = double.Parse(value);\n\
    \        long l = (long)d;\n        if (d - l >= 0.5) {\n            return l\
    \ + 1;\n        }\n        return l;", "        // Your code goes here\n     \
    \   return 0;", "        // Your code goes here\n        return 0;", "       \
    \ // Your code goes here\n        return 0;", "        // Your code goes here\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here.\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // TODO: Implement this function\n      \
    \  return 0;", "        // Your code goes here.\n        return 0;", "       \
    \ // Your code goes here\n        return 0;", "        // Your code goes here\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here.\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here.\n        // Don't forget to return the result.\n        return 0;", " \
    \       // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // TODO: Implement this function\n      \
    \  return 0;", "        // Your code goes here\n        return 0;", "        //\
    \ Your code goes here\n        return 0;", "        // Your code goes here\n \
    \       return 0;", "        // Your code goes here\n        return 0;", "   \
    \     // Your code goes here\n        // Note: This is a simple problem, but it's\
    \ a good example of how\n        // to use the BigInteger class.\n        // Note:\
    \ The BigInteger class is in the System.Numerics namespace.\n        // Note:\
    \ You can use the BigInteger.Parse() method to convert a\n        // string to\
    \ a BigInteger.\n        // Note: You can use the BigInteger.ToString() method\
    \ to convert a\n        // BigInteger to a string.\n        // Note: You can use\
    \ the BigInteger.Abs() method to get the absolute\n        // value of a BigInteger.\n\
    \        // Note: You can use the BigInteger.Ceiling() method to round a\n   \
    \     // BigInteger up to the nearest integer.\n        // Note: You can use the\
    \ BigInteger.Floor() method to round a\n        // BigInteger down to the nearest\
    \ integer.\n        // Note: You can use the BigInteger.CompareTo() method to\
    \ compare\n        // two BigIntegers.\n        // Note: You can use the BigInteger.Subtract()\
    \ method to subtract\n        // one BigInteger from another.\n        // Note:\
    \ You can use the BigInteger.Sign() method to get the sign\n        // of a BigInteger.\n\
    \        // Note: You can use the BigInteger.Zero constant to represent zero.\n\
    \        // Note: You can use the BigInteger.One constant to represent one.\n\
    \        // Note: You can use the BigInteger.MinusOne constant to represent\n\
    \        // minus one.\n        // Note: You can use the BigInteger.Max(a, b)\
    \ method to get the\n        // maximum of two BigIntegers.\n        // Note:\
    \ You can use the BigInteger.Min(a, b) method to get the\n        // minimum of\
    \ two BigIntegers.\n        // Note: You can use the BigInteger.Abs(a) method\
    \ to get the\n        // absolute value of a BigInteger.\n        // Note: You\
    \ can use the BigInteger.Negate(a) method to negate a\n        // BigInteger.\n\
    \        // Note: You can use the BigInteger.Pow(a, b) method to raise a\n   \
    \     // BigInteger to a power.\n        // Note: You can use the BigInteger.Divide(a,\
    \ b", "        // Write your code here\n        return 0;", "        // Your code\
    \ goes here\n        return 0;", "        // Your code goes here\n        double\
    \ d = double.Parse(value);\n        long l = (long)d;\n        if (d - l > 0.5)\
    \ {\n            return l + 1;\n        } else {\n            return l;\n    \
    \    }", "        // Your code goes here\n        // Note: This is a simple problem,\
    \ but it's a good opportunity to\n        // practice using BigInteger.\n    \
    \    // Note: If you're not familiar with BigInteger, you can read about\n   \
    \     // it here: https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger?view=netframework-4.8\n\
    \        // Note: If you're not familiar with the BigInteger.Parse method,\n \
    \       // you can read about it here: https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger.parse?view=netframework-4.8\n\
    \        // Note: If you're not familiar with the BigInteger.ToString method,\n\
    \        // you can read about it here: https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger.tostring?view=netframework-4.8\n\
    \        // Note: If you're not familiar with the BigInteger.Abs method,\n   \
    \     // you can read about it here: https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger.abs?view=netframework-4.8\n\
    \        // Note: If you're not familiar with the BigInteger.Ceiling method,\n\
    \        // you can read about it here: https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger.ceiling?view=netframework-4.8\n\
    \        // Note: If you're not familiar with the BigInteger.Floor method,\n \
    \       // you can read about it here: https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger.floor?view=netframework-4.8\n\
    \        // Note: If you're not familiar with the BigInteger.Round method,\n \
    \       // you can read about it here: https://docs.microsoft.com/en-us/dotnet/api/system.numerics.biginteger.round?view=netframework-4.8\n\
    \        // Note: If you're not familiar with the BigInteger.Sign method,\n  \
    \      // you can read about it here: https", "        // Your code goes here.\n\
    \        return 0;", "        // Your code goes here\n        BigInteger number\
    \ = BigInteger.Parse(value);\n        BigInteger floor = BigInteger.Floor(number);\n\
    \        BigInteger ceil = BigInteger.Ceiling(number);\n        BigInteger diff1\
    \ = number - floor;\n        BigInteger diff2 = ceil - number;\n        if (diff1\
    \ == diff2) {\n            return (long)ceil;\n        }\n        if (diff1 <\
    \ diff2) {\n            return (long)floor;\n        }\n        return (long)ceil;",
  "        // Your code goes here\n        double d = double.Parse(value);\n     \
    \   long l = (long)d;\n        if (d - l < 0.5)\n            return l;\n     \
    \   else\n            return l + 1;", "        // Your code goes here\n      \
    \  return 0;", "        // TODO: Implement this function\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // TODO: Implement\
    \ this function\n        return 0;", "        // TODO: Implement this function\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      var number = double.Parse(value);\n        var rounded = Math.Round(number);\n\
    \        if (rounded == number) {\n            return (long)rounded;\n       \
    \ }\n        if (number < 0) {\n            return (long)Math.Ceiling(number);\n\
    \        }\n        return (long)Math.Floor(number);", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here\n        double d = double.Parse(value);\n     \
    \   return (long)Math.Round(d);", "        // Your code goes here\n        //\
    \ Note: Don't forget to return your answer\n        return 0;", "        // Your\
    \ code goes here\n        return 0;", "        // Your code goes here\n      \
    \  double d = double.Parse(value);\n        return (long)Math.Round(d);", "  \
    \      // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        double d = double.Parse(value);\n        if (d < 0) {\n      \
    \      d = Math.Ceiling(d);\n        } else {\n            d = Math.Floor(d);\n\
    \        }\n        return (long)d;", "        // Your code goes here\n      \
    \  return 0;", "        // Your code goes here\n        return 0;", "        //\
    \ TODO: Implement this function\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here.\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // TODO: Implement this function\n      \
    \  return 0;", "        // Your code goes here\n        double d = double.Parse(value);\n\
    \        return (long)Math.Round(d);", "        // Your code goes here\n     \
    \   return 0;", "        // Your code goes here\n        double d = double.Parse(value);\n\
    \        long l = (long)d;\n        if (d - l >= 0.5) {\n            return l\
    \ + 1;\n        }\n        return l;", "        // Your code goes here\n     \
    \   return 0;", "        // Write your code here\n        return 0;", "      \
    \  // Your code goes here\n        return 0;", "        // Your code goes here\n\
    \        return 0;", "        // Write your code here\n        // To debug: Console.Error.WriteLine(\"\
    Debug messages...\");\n        double d = double.Parse(value);\n        return\
    \ (long)Math.Round(d);", "        // Your code goes here\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        long result = 0;\n        double num = double.Parse(value);\n\
    \        if (num < 0) {\n            result = (long)Math.Ceiling(num);\n     \
    \   } else {\n            result = (long)Math.Floor(num);\n        }\n       \
    \ return result;", "        // Your code goes here\n        return 0;", "    \
    \    // Your code goes here\n        double d = double.Parse(value);\n       \
    \ long l = (long)d;\n        if (d - l >= 0.5) {\n            return l + 1;\n\
    \        }\n        return l;", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        // Your code\
    \ goes here\n        return 0;", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        // TODO:\
    \ Implement this function\n        return 0;", "        // Your code goes here\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here.\n        // Note: Return a long instead of an int.\n\
    \        return 0;", "        // This is the number we'll be rounding.\n     \
    \   double number = double.Parse(value);\n        // This is the number we'll\
    \ be rounding to.\n        double rounded = Math.Round(number);\n        // This\
    \ is the difference between the two numbers.\n        double difference = Math.Abs(number\
    \ - rounded);\n        // This is the number we'll be rounding to.\n        double\
    \ roundedAway = Math.Round(number, MidpointRounding.AwayFromZero);\n        //\
    \ This is the difference between the two numbers.\n        double differenceAway\
    \ = Math.Abs(number - roundedAway);\n        // If the difference between the\
    \ two numbers is the same,\n        // return the number rounded away from zero.\n\
    \        if (difference == differenceAway) {\n            return (long)roundedAway;\n\
    \        }\n        // Otherwise, return the number rounded to the nearest integer.\n\
    \        return (long)rounded;", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        // Your code\
    \ goes here\n        return 0;", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        // TODO:\
    \ Implement this function\n        return 0;", "        // Write your code here\n\
    \        // To debug: Console.Error.WriteLine(\"Debug messages...\");\n      \
    \  var num = double.Parse(value);\n        var floor = Math.Floor(num);\n    \
    \    var ceil = Math.Ceiling(num);\n        if (num - floor < ceil - num) {\n\
    \            return (long)floor;\n        }\n        return (long)ceil;"]
stop_tokens:
- "\n    }\n"
