name: HumanEval_47_median
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return median of elements in the list l.\n    public static\
  \ float Median(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
  \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L,\
  \ (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
  \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
completions: ["        int n = l.Count;\n        if (n == 0) return 0;\n        l.Sort();\n\
    \        if (n % 2 == 1) return l[n / 2];\n        return (l[n / 2 - 1] + l[n\
    \ / 2]) / 2.0f;", "        l.Sort();\n        if (l.Count % 2 == 0) {\n      \
    \      return (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n        } else {\n\
    \            return l[l.Count / 2];\n        }", "        int n = l.Count;\n \
    \       if (n == 0) return 0;\n        l.Sort();\n        if (n % 2 == 1) return\
    \ l[n / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n\
    \ = l.Count;\n        if (n == 0) return 0;\n        if (n % 2 == 1) return l[n\
    \ / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n\
    \        }", "        int n = l.Count;\n        if (n == 0) {\n            throw\
    \ new ArgumentException(\"Median of empty list\");\n        }\n        l.Sort();\n\
    \        if (n % 2 == 0) {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n\
    \        } else {\n            return l[n / 2];\n        }", "        int n =\
    \ l.Count;\n        if (n == 0) return 0;\n        l.Sort();\n        if (n %\
    \ 2 == 1) return l[n / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;",
  "        int n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n /\
    \ 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n\
    \        }", "        l.Sort();\n        if (l.Count % 2 == 0) {\n           \
    \ return (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n        } else {\n   \
    \         return l[l.Count / 2];\n        }", "        int n = l.Count;\n    \
    \    if (n == 0) return 0;\n        l.Sort();\n        if (n % 2 == 1) return\
    \ l[n / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n\
    \ = l.Count;\n        if (n == 0) {\n            return 0;\n        }\n      \
    \  l.Sort();\n        if (n % 2 == 1) {\n            return l[n / 2];\n      \
    \  } else {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }",
  "        int n = l.Count;\n        if (n == 0) {\n            return 0;\n      \
    \  }\n        l.Sort();\n        if (n % 2 == 1) {\n            return l[n / 2];\n\
    \        } else {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n    \
    \    }", "        int n = l.Count;\n        if (n % 2 == 0) {\n            return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n\
    \ / 2];\n        }", "        l.Sort();\n        if (l.Count % 2 == 0) {\n   \
    \         return (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n        } else\
    \ {\n            return l[l.Count / 2];\n        }", "        l.Sort();\n    \
    \    if (l.Count % 2 == 0) {\n            return (l[l.Count / 2] + l[l.Count /\
    \ 2 - 1]) / 2.0f;\n        } else {\n            return l[l.Count / 2];\n    \
    \    }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 0)\
    \ {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n\
    \            return l[n / 2];\n        }", "        int n = l.Count;\n       \
    \ if (n == 0) return 0;\n        l.Sort();\n        if (n % 2 == 1) return l[n\
    \ / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n\
    \        if (n == 0) return 0;\n        l.Sort();\n        if (n % 2 == 1) return\
    \ l[n / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n\
    \ = l.Count;\n        if (n == 0) return 0;\n        l.Sort();\n        if (n\
    \ % 2 == 1) return l[n / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;",
  "        int n = l.Count;\n        if (n == 0) return 0;\n        if (n % 2 == 1)\
    \ return l[n / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "     \
    \   int n = l.Count;\n        if (n == 0) return 0;\n        if (n % 2 == 1) return\
    \ l[n / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n\
    \ = l.Count;\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }",
  "        int n = l.Count;\n        if (n == 0) return 0;\n        if (n % 2 == 1)\
    \ return l[n / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "     \
    \   int n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n  \
    \      }", "        if (l.Count % 2 == 0) {\n            return (l[l.Count / 2]\
    \ + l[l.Count / 2 - 1]) / 2.0f;\n        } else {\n            return l[l.Count\
    \ / 2];\n        }", "        int n = l.Count;\n        if (n == 0) return 0;\n\
    \        l.Sort();\n        if (n % 2 == 1) return l[n / 2];\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n        if (n == 0)\
    \ return 0;\n        l.Sort();\n        if (n % 2 == 1) return l[n / 2];\n   \
    \     return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        l.Sort();\n        int\
    \ n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }",
  "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 0) {\n      \
    \      return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n          \
    \  return l[n / 2];\n        }", "        int n = l.Count;\n        if (n == 0)\
    \ return 0;\n        l.Sort();\n        if (n % 2 == 1) return l[n / 2];\n   \
    \     return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n \
    \       if (n == 0) return 0;\n        if (n % 2 == 1) return l[n / 2];\n    \
    \    return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        l.Sort();\n        int\
    \ n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }",
  "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 0) {\n      \
    \      return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n          \
    \  return l[n / 2];\n        }", "        int n = l.Count;\n        l.Sort();\n\
    \        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n\
    \        } else {\n            return l[n / 2];\n        }", "        int n =\
    \ l.Count;\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2\
    \ - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }", " \
    \       int n = l.Count;\n        if (n == 0) return 0;\n        l.Sort();\n \
    \       if (n % 2 == 1) return l[n / 2];\n        return (l[n / 2 - 1] + l[n /\
    \ 2]) / 2.0f;", "        l.Sort();\n        int n = l.Count;\n        if (n %\
    \ 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else\
    \ {\n            return l[n / 2];\n        }", "        int n = l.Count;\n   \
    \     if (n == 0) return 0;\n        l.Sort();\n        if (n % 2 == 1) return\
    \ l[n / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n\
    \ = l.Count;\n        if (n == 0) {\n            return 0;\n        }\n      \
    \  l.Sort();\n        if (n % 2 == 1) {\n            return l[n / 2];\n      \
    \  } else {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }",
  "        if (l.Count == 0) {\n            throw new ArgumentException(\"Median of\
    \ empty list\");\n        }\n        l.Sort();\n        if (l.Count % 2 == 0)\
    \ {\n            return (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n      \
    \  } else {\n            return l[l.Count / 2];\n        }", "        l.Sort();\n\
    \        if (l.Count % 2 == 0) {\n            return (l[l.Count / 2] + l[l.Count\
    \ / 2 - 1]) / 2.0f;\n        } else {\n            return l[l.Count / 2];\n  \
    \      }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n\
    \            return l[n / 2];\n        }", "        if (l.Count == 0)\n      \
    \      return 0;\n        l.Sort();\n        if (l.Count % 2 == 0)\n         \
    \   return (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n        else\n     \
    \       return l[l.Count / 2];", "        int n = l.Count;\n        if (n == 0)\
    \ return 0;\n        l.Sort();\n        if (n % 2 == 1) return l[n / 2];\n   \
    \     return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        if (l.Count == 0) {\n\
    \            return 0;\n        }\n        l.Sort();\n        if (l.Count % 2\
    \ == 0) {\n            return (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n\
    \        } else {\n            return l[l.Count / 2];\n        }", "        int\
    \ n = l.Count;\n        if (n == 0) return 0;\n        if (n % 2 == 1) return\
    \ l[n / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n\
    \ = l.Count;\n        l.Sort();\n        if (n % 2 == 0) {\n            return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n\
    \ / 2];\n        }", "        int n = l.Count;\n        if (n == 0) return 0;\n\
    \        if (n % 2 == 1) return l[n / 2];\n        return (l[n / 2 - 1] + l[n\
    \ / 2]) / 2.0f;", "        int n = l.Count;\n        if (n == 0) return 0;\n \
    \       l.Sort();\n        if (n % 2 == 1) return l[n / 2];\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n        if (n == 0)\
    \ return 0;\n        l.Sort();\n        if (n % 2 == 1) return l[n / 2];\n   \
    \     return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        l.Sort();\n        if\
    \ (l.Count % 2 == 0) {\n            return (l[l.Count / 2] + l[l.Count / 2 - 1])\
    \ / 2.0f;\n        } else {\n            return l[l.Count / 2];\n        }", " \
    \       int n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n /\
    \ 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n\
    \        }", "        l.Sort();\n        if (l.Count % 2 == 0) {\n           \
    \ return (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n        } else {\n   \
    \         return l[l.Count / 2];\n        }", "        l.Sort();\n        int\
    \ n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }",
  "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 0) {\n      \
    \      return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n          \
    \  return l[n / 2];\n        }", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n\
    \        } else {\n            return l[n / 2];\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n\
    \        }", "        int n = l.Count;\n        if (n % 2 == 0) {\n          \
    \  return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return\
    \ l[n / 2];\n        }", "        int n = l.Count;\n        if (n == 0) {\n  \
    \          return 0;\n        }\n        l.Sort();\n        if (n % 2 == 1) {\n\
    \            return l[n / 2];\n        } else {\n            return (l[n / 2 -\
    \ 1] + l[n / 2]) / 2.0f;\n        }", "        int n = l.Count;\n        if (n\
    \ % 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        }\
    \ else {\n            return l[n / 2];\n        }", "        int n = l.Count;\n\
    \        l.Sort();\n        if (n % 2 == 0) {\n            return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n    \
    \    }", "        int n = l.Count;\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        l.Sort();\n        if (n % 2 == 1) {\n            return\
    \ l[n / 2];\n        } else {\n            return (l[n / 2 - 1] + l[n / 2]) /\
    \ 2.0f;\n        }", "        int n = l.Count;\n        if (n == 0) {\n      \
    \      return 0;\n        }\n        l.Sort();\n        if (n % 2 == 1) {\n  \
    \          return l[n / 2];\n        } else {\n            return (l[n / 2 - 1]\
    \ + l[n / 2]) / 2.0f;\n        }", "        int n = l.Count;\n        if (n ==\
    \ 0) return 0;\n        if (n % 2 == 1) return l[n / 2];\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n        if (n % 2\
    \ == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else\
    \ {\n            return l[n / 2];\n        }", "        int n = l.Count;\n   \
    \     if (n == 0) return 0;\n        l.Sort();\n        if (n % 2 == 1) return\
    \ l[n / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n\
    \ = l.Count;\n        if (n == 0) return 0;\n        if (n % 2 == 1) return l[n\
    \ / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n\
    \            return l[n / 2];\n        }", "        int n = l.Count;\n       \
    \ if (n == 0) {\n            return 0;\n        }\n        l.Sort();\n       \
    \ if (n % 2 == 1) {\n            return l[n / 2];\n        } else {\n        \
    \    return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        int n = l.Count;\n\
    \        l.Sort();\n        if (n % 2 == 0) {\n            return (l[n / 2] +\
    \ l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n    \
    \    }", "        l.Sort();\n        if (l.Count % 2 == 0) {\n            return\
    \ (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n        } else {\n          \
    \  return l[l.Count / 2];\n        }", "        l.Sort();\n        if (l.Count\
    \ % 2 == 0) {\n            return (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n\
    \        } else {\n            return l[l.Count / 2];\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n\
    \            return l[n / 2];\n        }", "        int n = l.Count;\n       \
    \ if (n == 0) {\n            return 0;\n        }\n        l.Sort();\n       \
    \ if (n % 2 == 1) {\n            return l[n / 2];\n        } else {\n        \
    \    return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        l.Sort();\n\
    \        int mid = l.Count / 2;\n        if (l.Count % 2 == 0) {\n           \
    \ return (l[mid] + l[mid - 1]) / 2.0f;\n        } else {\n            return l[mid];\n\
    \        }", "        int n = l.Count;\n        if (n == 0) return 0;\n      \
    \  l.Sort();\n        if (n % 2 == 1) return l[n / 2];\n        return (l[n /\
    \ 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n        if (n == 0)\
    \ return 0;\n        if (n % 2 == 1) return l[n / 2];\n        return (l[n / 2\
    \ - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n        if (n == 0) return\
    \ 0;\n        if (n % 2 == 1) return l[n / 2];\n        return (l[n / 2 - 1] +\
    \ l[n / 2]) / 2.0f;", "        int n = l.Count;\n        if (n == 0) {\n     \
    \       return 0;\n        }\n        l.Sort();\n        if (n % 2 == 1) {\n \
    \           return l[n / 2];\n        } else {\n            return (l[n / 2 -\
    \ 1] + l[n / 2]) / 2.0f;\n        }", "        int n = l.Count;\n        if (n\
    \ == 0) return 0;\n        l.Sort();\n        if (n % 2 == 1) return l[n / 2];\n\
    \        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n\
    \        if (n == 0) return 0;\n        if (n % 2 == 1) return l[n / 2];\n   \
    \     return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n \
    \       if (n == 0) {\n            return 0;\n        }\n        l.Sort();\n \
    \       if (n % 2 == 1) {\n            return l[n / 2];\n        } else {\n  \
    \          return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n\
    \            return l[n / 2];\n        }", "        l.Sort();\n        int n =\
    \ l.Count;\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2\
    \ - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }", " \
    \       int n = l.Count;\n        if (n == 0) {\n            return 0;\n     \
    \   }\n        if (n % 2 == 1) {\n            return l[n / 2];\n        } else\
    \ {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "     \
    \   int n = l.Count;\n        if (n == 0)\n            return 0;\n        l.Sort();\n\
    \        if (n % 2 == 1)\n            return l[n / 2];\n        else\n       \
    \     return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n \
    \       if (n == 0)\n            return 0;\n        if (n % 2 == 1)\n        \
    \    return l[n / 2];\n        else\n            return (l[n / 2 - 1] + l[n /\
    \ 2]) / 2.0f;", "        int n = l.Count;\n        if (n == 0) return 0;\n   \
    \     l.Sort();\n        if (n % 2 == 1) return l[n / 2];\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n        if (n % 2\
    \ == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else\
    \ {\n            return l[n / 2];\n        }", "        int n = l.Count;\n   \
    \     l.Sort();\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }",
  "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 0) {\n      \
    \      return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n          \
    \  return l[n / 2];\n        }", "        int n = l.Count;\n        if (n % 2\
    \ == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else\
    \ {\n            return l[n / 2];\n        }", "        int n = l.Count;\n   \
    \     if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n\
    \        } else {\n            return l[n / 2];\n        }", "        int n =\
    \ l.Count;\n        l.Sort();\n        if (n % 2 == 0) {\n            return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n\
    \            return l[n / 2];\n        }", "        int n = l.Count;\n       \
    \ l.Sort();\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2\
    \ - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }", " \
    \       l.Sort();\n        int n = l.Count;\n        if (n % 2 == 0) {\n     \
    \       return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n         \
    \   return l[n / 2];\n        }", "        int n = l.Count;\n        if (n ==\
    \ 0) return 0;\n        if (n % 2 == 1) return l[n / 2];\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n        if (n == 0)\
    \ return 0;\n        if (n % 2 == 1) return l[n / 2];\n        return (l[n / 2\
    \ - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n        if (n == 0) {\n\
    \            return 0;\n        }\n        l.Sort();\n        if (n % 2 == 1)\
    \ {\n            return l[n / 2];\n        } else {\n            return (l[n /\
    \ 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        int n = l.Count;\n        if\
    \ (n == 0) return 0;\n        if (n % 2 == 1) return l[n / 2];\n        return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        } else {\n            return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        l.Sort();\n        if\
    \ (l.Count % 2 == 0) {\n            return (l[l.Count / 2] + l[l.Count / 2 - 1])\
    \ / 2.0f;\n        } else {\n            return l[l.Count / 2];\n        }", " \
    \       int n = l.Count;\n        if (n == 0) return 0;\n        l.Sort();\n \
    \       if (n % 2 == 1) return l[n / 2];\n        return (l[n / 2 - 1] + l[n /\
    \ 2]) / 2.0f;", "        l.Sort();\n        if (l.Count % 2 == 0) {\n        \
    \    return (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n        } else {\n\
    \            return l[l.Count / 2];\n        }", "        int n = l.Count;\n \
    \       if (n == 0) return 0;\n        if (n % 2 == 1) return l[n / 2];\n    \
    \    return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n  \
    \      if (n == 0) return 0;\n        if (n % 2 == 1) return l[n / 2];\n     \
    \   return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        l.Sort();\n        int\
    \ n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }",
  "        l.Sort();\n        if (l.Count % 2 == 0) {\n            return (l[l.Count\
    \ / 2] + l[l.Count / 2 - 1]) / 2.0f;\n        } else {\n            return l[l.Count\
    \ / 2];\n        }", "        int n = l.Count;\n        if (n == 0) return 0;\n\
    \        l.Sort();\n        if (n % 2 == 1) return l[n / 2];\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n        if (n == 0)\
    \ return 0;\n        if (n % 2 == 1) return l[n / 2];\n        return (l[n / 2\
    \ - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n        if (n == 0) return\
    \ 0;\n        l.Sort();\n        if (n % 2 == 1) return l[n / 2];\n        return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n\
    \        } else {\n            return l[n / 2];\n        }", "        int n =\
    \ l.Count;\n        if (n == 0) return 0;\n        if (n % 2 == 1) return l[n\
    \ / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n\
    \        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n\
    \        } else {\n            return l[n / 2];\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n\
    \        }", "        if (l.Count % 2 == 0) {\n            return (l[l.Count /\
    \ 2] + l[l.Count / 2 - 1]) / 2.0f;\n        } else {\n            return l[l.Count\
    \ / 2];\n        }", "        if (l.Count == 0) return 0;\n        l.Sort();\n\
    \        if (l.Count % 2 == 0) {\n            return (l[l.Count / 2] + l[l.Count\
    \ / 2 - 1]) / 2.0f;\n        } else {\n            return l[l.Count / 2];\n  \
    \      }", "        int n = l.Count;\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        l.Sort();\n        if (n % 2 == 1) {\n            return\
    \ l[n / 2];\n        } else {\n            return (l[n / 2 - 1] + l[n / 2]) /\
    \ 2.0f;\n        }", "        l.Sort();\n        int n = l.Count;\n        if\
    \ (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n     \
    \   } else {\n            return l[n / 2];\n        }", "        if (l.Count %\
    \ 2 == 0) {\n            return (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n\
    \        } else {\n            return l[l.Count / 2];\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n\
    \        }", "        int n = l.Count;\n        if (n == 0) return 0;\n      \
    \  l.Sort();\n        if (n % 2 == 1) return l[n / 2];\n        return (l[n /\
    \ 2 - 1] + l[n / 2]) / 2.0f;", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n\
    \        } else {\n            return l[n / 2];\n        }", "        int n =\
    \ l.Count;\n        if (n == 0) return 0;\n        if (n % 2 == 1) return l[n\
    \ / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n\
    \        if (n == 0)\n            return 0;\n        if (n % 2 == 1)\n       \
    \     return l[n / 2];\n        else\n            return (l[n / 2 - 1] + l[n /\
    \ 2]) / 2.0f;", "        int n = l.Count;\n        if (n % 2 == 0) {\n       \
    \     return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n           \
    \ return l[n / 2];\n        }", "        int n = l.Count;\n        if (n == 0)\
    \ {\n            return 0;\n        }\n        l.Sort();\n        if (n % 2 ==\
    \ 1) {\n            return l[n / 2];\n        } else {\n            return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        l.Sort();\n        int n\
    \ = l.Count;\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }",
  "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 0) {\n      \
    \      return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n          \
    \  return l[n / 2];\n        }", "        int n = l.Count;\n        if (n == 0)\
    \ {\n            return 0;\n        }\n        l.Sort();\n        if (n % 2 ==\
    \ 1) {\n            return l[n / 2];\n        } else {\n            return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        l.Sort();\n        int n\
    \ = l.Count;\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }",
  "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 0) {\n      \
    \      return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n          \
    \  return l[n / 2];\n        }", "        l.Sort();\n        if (l.Count % 2 ==\
    \ 0) {\n            return (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n   \
    \     } else {\n            return l[l.Count / 2];\n        }", "        l.Sort();\n\
    \        if (l.Count % 2 == 0) {\n            return (l[l.Count / 2] + l[l.Count\
    \ / 2 - 1]) / 2.0f;\n        } else {\n            return l[l.Count / 2];\n  \
    \      }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2f;\n        } else {\n\
    \            return l[n / 2];\n        }", "        l.Sort();\n        int n =\
    \ l.Count;\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2\
    \ - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }", " \
    \       int n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n /\
    \ 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n\
    \        }", "        if (l.Count == 0) return 0;\n        l.Sort();\n       \
    \ int mid = l.Count / 2;\n        if (l.Count % 2 == 0) {\n            return\
    \ (l[mid - 1] + l[mid]) / 2.0f;\n        } else {\n            return l[mid];\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n\
    \            return l[n / 2];\n        }", "        int n = l.Count;\n       \
    \ l.Sort();\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2\
    \ - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }", " \
    \       int n = l.Count;\n        if (n == 0) return 0;\n        l.Sort();\n \
    \       if (n % 2 == 1) return l[n / 2];\n        return (l[n / 2 - 1] + l[n /\
    \ 2]) / 2.0f;", "        int n = l.Count;\n        l.Sort();\n        if (n %\
    \ 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else\
    \ {\n            return l[n / 2];\n        }", "        int n = l.Count;\n   \
    \     if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n\
    \        } else {\n            return l[n / 2];\n        }", "        int n =\
    \ l.Count;\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2\
    \ - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }", " \
    \       int n = l.Count;\n        if (n == 0) {\n            return 0;\n     \
    \   }\n        l.Sort();\n        if (n % 2 == 1) {\n            return l[n /\
    \ 2];\n        } else {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n\
    \        }", "        int n = l.Count;\n        if (n == 0) return 0;\n      \
    \  if (n % 2 == 1) return l[n / 2];\n        return (l[n / 2 - 1] + l[n / 2])\
    \ / 2.0f;", "        int n = l.Count;\n        if (n % 2 == 0) {\n           \
    \ return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return\
    \ l[n / 2];\n        }", "        l.Sort();\n        int n = l.Count;\n      \
    \  if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n \
    \       } else {\n            return l[n / 2];\n        }", "        int n = l.Count;\n\
    \        if (n == 0) return 0;\n        if (n % 2 == 1) return l[n / 2];\n   \
    \     return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        l.Sort();\n        int\
    \ n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }",
  "        if (l.Count % 2 == 0) {\n            return (l[l.Count / 2] + l[l.Count\
    \ / 2 - 1]) / 2.0f;\n        } else {\n            return l[l.Count / 2];\n  \
    \      }", "        l.Sort();\n        if (l.Count % 2 == 0) {\n            return\
    \ (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n        } else {\n          \
    \  return l[l.Count / 2];\n        }", "        int n = l.Count;\n        l.Sort();\n\
    \        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n\
    \        } else {\n            return l[n / 2];\n        }", "        int n =\
    \ l.Count;\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2\
    \ - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }", " \
    \       l.Sort();\n        int n = l.Count;\n        if (n % 2 == 0) {\n     \
    \       return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n         \
    \   return l[n / 2];\n        }", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n\
    \        } else {\n            return l[n / 2];\n        }", "        int n =\
    \ l.Count;\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2\
    \ - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }", " \
    \       l.Sort();\n        if (l.Count % 2 == 0) {\n            return (l[l.Count\
    \ / 2] + l[l.Count / 2 - 1]) / 2.0f;\n        } else {\n            return l[l.Count\
    \ / 2];\n        }", "        int n = l.Count;\n        if (n == 0)\n        \
    \    return 0;\n        l.Sort();\n        if (n % 2 == 1)\n            return\
    \ l[n / 2];\n        else\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;",
  "        int n = l.Count;\n        l.Sort();\n        if (n % 2 == 0) {\n      \
    \      return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n          \
    \  return l[n / 2];\n        }", "        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n\
    \        } else {\n            return l[n / 2];\n        }", "        int n =\
    \ l.Count;\n        if (n == 0) return 0;\n        l.Sort();\n        if (n %\
    \ 2 == 1) return l[n / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;",
  "        int n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n /\
    \ 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n\
    \        }", "        int n = l.Count;\n        if (n % 2 == 0) {\n          \
    \  return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return\
    \ l[n / 2];\n        }", "        int n = l.Count;\n        l.Sort();\n      \
    \  if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n \
    \       } else {\n            return l[n / 2];\n        }", "        l.Sort();\n\
    \        if (l.Count % 2 == 0) {\n            return (l[l.Count / 2] + l[l.Count\
    \ / 2 - 1]) / 2.0f;\n        } else {\n            return l[l.Count / 2];\n  \
    \      }", "        l.Sort();\n        if (l.Count % 2 == 0) {\n            return\
    \ (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n        } else {\n          \
    \  return l[l.Count / 2];\n        }", "        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        } else {\n            return\
    \ (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        int n = l.Count;\n \
    \       if (n == 0) return 0;\n        l.Sort();\n        if (n % 2 == 1) {\n\
    \            return l[n / 2];\n        } else {\n            return (l[n / 2 -\
    \ 1] + l[n / 2]) / 2.0f;\n        }", "        int n = l.Count;\n        if (n\
    \ == 0) return 0;\n        if (n % 2 == 1) return l[n / 2];\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n        if (n == 0)\
    \ return 0;\n        l.Sort();\n        if (n % 2 == 1) return l[n / 2];\n   \
    \     return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n \
    \       if (n == 0) return 0;\n        if (n % 2 == 1) return l[n / 2];\n    \
    \    else return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n\
    \        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n\
    \        } else {\n            return l[n / 2];\n        }", "        int n =\
    \ l.Count;\n        if (n == 0) {\n            return 0;\n        }\n        l.Sort();\n\
    \        if (n % 2 == 1) {\n            return l[n / 2];\n        } else {\n \
    \           return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        if\
    \ (l.Count == 0)\n            return 0;\n        l.Sort();\n        if (l.Count\
    \ % 2 == 0)\n            return (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n\
    \        else\n            return l[l.Count / 2];", "        int n = l.Count;\n\
    \        if (n == 0) {\n            return 0;\n        }\n        l.Sort();\n\
    \        if (n % 2 == 1) {\n            return l[n / 2];\n        } else {\n \
    \           return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n\
    \        }", "        int n = l.Count;\n        if (n == 0) return 0;\n      \
    \  if (n % 2 == 1) return l[n / 2];\n        return (l[n / 2 - 1] + l[n / 2])\
    \ / 2.0f;", "        int n = l.Count;\n        if (n == 0) return 0;\n       \
    \ if (n % 2 == 1) return l[n / 2];\n        return (l[n / 2 - 1] + l[n / 2]) /\
    \ 2.0f;", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 0)\
    \ {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n\
    \            return l[n / 2];\n        }", "        l.Sort();\n        int n =\
    \ l.Count;\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n / 2\
    \ - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }", " \
    \       l.Sort();\n        int n = l.Count;\n        if (n % 2 == 0) {\n     \
    \       return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n         \
    \   return l[n / 2];\n        }", "        int n = l.Count;\n        if (n ==\
    \ 0) return 0;\n        if (n % 2 == 1) return l[n / 2];\n        return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0f;", "        l.Sort();\n        if (l.Count % 2 ==\
    \ 0) {\n            return (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n   \
    \     } else {\n            return l[l.Count / 2];\n        }", "        l.Sort();\n\
    \        if (l.Count % 2 == 0) {\n            return (l[l.Count / 2] + l[l.Count\
    \ / 2 - 1]) / 2.0f;\n        } else {\n            return l[l.Count / 2];\n  \
    \      }", "        int n = l.Count;\n        if (n % 2 == 0) {\n            return\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n\
    \ / 2];\n        }", "        int n = l.Count;\n        if (n == 0) return 0;\n\
    \        if (n % 2 == 1) return l[n / 2];\n        return (l[n / 2 - 1] + l[n\
    \ / 2]) / 2.0f;", "        l.Sort();\n        int n = l.Count;\n        if (n\
    \ % 2 == 0) {\n            return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        }\
    \ else {\n            return l[n / 2];\n        }", "        if (l.Count == 0)\
    \ {\n            return 0;\n        }\n        l.Sort();\n        if (l.Count\
    \ % 2 == 0) {\n            return (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n\
    \        } else {\n            return l[l.Count / 2];\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 0) {\n            return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n\
    \        }", "        l.Sort();\n        if (l.Count % 2 == 0) {\n           \
    \ return (l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0f;\n        } else {\n   \
    \         return l[l.Count / 2];\n        }", "        int n = l.Count;\n    \
    \    l.Sort();\n        if (n % 2 == 0) {\n            return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0f;\n        } else {\n            return l[n / 2];\n        }",
  "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 0) {\n      \
    \      return (l[n / 2] + l[n / 2 - 1]) / 2.0f;\n        } else {\n          \
    \  return l[n / 2];\n        }", "        int n = l.Count;\n        if (n == 0)\
    \ return 0;\n        l.Sort();\n        if (n % 2 == 1) return l[n / 2];\n   \
    \     return (l[n / 2 - 1] + l[n / 2]) / 2.0f;", "        int n = l.Count;\n \
    \       if (n == 0) {\n            return 0;\n        }\n        l.Sort();\n \
    \       if (n % 2 == 1) {\n            return l[n / 2];\n        } else {\n  \
    \          return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "        int\
    \ n = l.Count;\n        if (n == 0) return 0;\n        l.Sort();\n        if (n\
    \ % 2 == 1) return l[n / 2];\n        return (l[n / 2 - 1] + l[n / 2]) / 2.0f;"]
stop_tokens:
- "\n    }\n"
