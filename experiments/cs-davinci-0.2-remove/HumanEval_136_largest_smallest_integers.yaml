name: HumanEval_136_largest_smallest_integers
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n\
  \    // the largest of negative integers, and 'b' is the smallest\n    // of positive\
  \ integers in a list.\n    // If there is no negative or positive integers, return\
  \ them as None.\n    // Examples:\n    public static Tuple<Nullable<long>, Nullable<long>>\
  \ LargestSmallestIntegers(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L,\
  \ (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L,\
  \ (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L,\
  \ (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null,\
  \ (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L,\
  \ 1L)));\n    }\n\n}\n"
completions: ["        var min = lst.Where(x => x > 0).Min();\n        var max = lst.Where(x\
    \ => x < 0).Max();\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        // Write your code here\n        var a = lst.Where(x => x <\
    \ 0).Max();\n        var b = lst.Where(x => x > 0).Min();\n        return new\
    \ Tuple<Nullable<long>, Nullable<long>>(a, b);", "        long? maxNeg = null;\n\
    \        long? minPos = null;\n        foreach (long i in lst) {\n           \
    \ if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n        \
    \            maxNeg = i;\n                }\n            } else {\n          \
    \      if (minPos == null || i < minPos) {\n                    minPos = i;\n\
    \                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        long? largestNegative = null;\n\
    \        long? smallestPositive = null;\n        foreach (long i in lst) {\n \
    \           if (i < 0) {\n                if (largestNegative == null || i > largestNegative)\
    \ {\n                    largestNegative = i;\n                }\n           \
    \ } else {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        // Write your code here\n        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long i in\
    \ lst) {\n            if (i < 0) {\n                if (largestNegative == null\
    \ || i > largestNegative) {\n                    largestNegative = i;\n      \
    \          }\n            } else {\n                if (smallestPositive == null\
    \ || i < smallestPositive) {\n                    smallestPositive = i;\n    \
    \            }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largestNegative, smallestPositive);", "        // Write your\
    \ code here\n        long? min = null;\n        long? max = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (max == null\
    \ || i > max) {\n                    max = i;\n                }\n           \
    \ } else {\n                if (min == null || i < min) {\n                  \
    \  min = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        // Write your code here\n        long?\
    \ a = null;\n        long? b = null;\n        foreach (var i in lst) {\n     \
    \       if (i < 0) {\n                if (a == null || i > a) {\n            \
    \        a = i;\n                }\n            } else {\n                if (b\
    \ == null || i < b) {\n                    b = i;\n                }\n       \
    \     }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        long? maxNeg = null;\n        long? minPos = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (maxNeg == null\
    \ || i > maxNeg) {\n                    maxNeg = i;\n                }\n     \
    \       } else {\n                if (minPos == null || i < minPos) {\n      \
    \              minPos = i;\n                }\n            }\n        }\n    \
    \    return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "   \
    \     long? maxNeg = null;\n        long? minPos = null;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (maxNeg == null ||\
    \ i > maxNeg) {\n                    maxNeg = i;\n                }\n        \
    \    } else {\n                if (minPos == null || i < minPos) {\n         \
    \           minPos = i;\n                }\n            }\n        }\n       \
    \ return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "      \
    \  // Your code goes here\n        long? min = null;\n        long? max = null;\n\
    \        foreach (var item in lst)\n        {\n            if (item > 0)\n   \
    \         {\n                if (min == null || item < min)\n                {\n\
    \                    min = item;\n                }\n            }\n         \
    \   else\n            {\n                if (max == null || item > max)\n    \
    \            {\n                    max = item;\n                }\n         \
    \   }\n        }\n        return new Tuple<long?, long?>(max, min);", "      \
    \  long? min = null;\n        long? max = null;\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                if (max == null || i > max) {\n\
    \                    max = i;\n                }\n            } else {\n     \
    \           if (min == null || i < min) {\n                    min = i;\n    \
    \            }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        long? min = null;\n        long? max =\
    \ null;\n        foreach (var i in lst) {\n            if (i < 0) {\n        \
    \        if (max == null || i > max) {\n                    max = i;\n       \
    \         }\n            } else {\n                if (min == null || i < min)\
    \ {\n                    min = i;\n                }\n            }\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(max, min);", "     \
    \   // Write your code here\n        long? a = null;\n        long? b = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (a == null || i > a) {\n                    a = i;\n                }\n \
    \           } else {\n                if (b == null || i < b) {\n            \
    \        b = i;\n                }\n            }\n        }\n        return new\
    \ Tuple<Nullable<long>, Nullable<long>>(a, b);", "        // Write your code here\n\
    \        long? min = null;\n        long? max = null;\n        foreach (long i\
    \ in lst) {\n            if (i < 0) {\n                if (max == null || i >\
    \ max) {\n                    max = i;\n                }\n            } else\
    \ {\n                if (min == null || i < min) {\n                    min =\
    \ i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        // Write your code here\n        long?\
    \ a = null;\n        long? b = null;\n        foreach (var i in lst) {\n     \
    \       if (i < 0) {\n                if (a == null || i > a) {\n            \
    \        a = i;\n                }\n            } else {\n                if (b\
    \ == null || i < b) {\n                    b = i;\n                }\n       \
    \     }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        // Write your code here\n        long? a = null;\n        long?\
    \ b = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n   \
    \             if (a == null || i > a) {\n                    a = i;\n        \
    \        }\n            } else {\n                if (b == null || i < b) {\n\
    \                    b = i;\n                }\n            }\n        }\n   \
    \     return new Tuple<Nullable<long>, Nullable<long>>(a, b);", "        // Write\
    \ your code here\n        return null;", "        long? min = null;\n        long?\
    \ max = null;\n        foreach (var i in lst) {\n            if (i > 0) {\n  \
    \              if (min == null || i < min) {\n                    min = i;\n \
    \               }\n            } else if (i < 0) {\n                if (max ==\
    \ null || i > max) {\n                    max = i;\n                }\n      \
    \      }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        // Write your code here\n        long? min = null;\n      \
    \  long? max = null;\n        foreach (long i in lst) {\n            if (i < 0)\
    \ {\n                if (max == null || i > max) {\n                    max =\
    \ i;\n                }\n            } else {\n                if (min == null\
    \ || i < min) {\n                    min = i;\n                }\n           \
    \ }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        // Write your code here\n        return null;", "        //\
    \ Write your code here\n        long? min = null;\n        long? max = null;\n\
    \        foreach (var i in lst) {\n            if (i > 0) {\n                if\
    \ (min == null || i < min) {\n                    min = i;\n                }\n\
    \            } else if (i < 0) {\n                if (max == null || i > max)\
    \ {\n                    max = i;\n                }\n            }\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(max, min);", "     \
    \   // Write your code here\n        long? maxNeg = null;\n        long? minPos\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (maxNeg == null || i > maxNeg) {\n                    maxNeg =\
    \ i;\n                }\n            } else {\n                if (minPos == null\
    \ || i < minPos) {\n                    minPos = i;\n                }\n     \
    \       }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg,\
    \ minPos);", "        var min = lst.Where(x => x > 0).Min();\n        var max\
    \ = lst.Where(x => x < 0).Max();\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        long? a = null;\n        long? b = null;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (a == null || i >\
    \ a) {\n                    a = i;\n                }\n            } else {\n\
    \                if (b == null || i < b) {\n                    b = i;\n     \
    \           }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        long maxNegative = long.MinValue;\n      \
    \  long minPositive = long.MaxValue;\n        bool hasNegative = false;\n    \
    \    bool hasPositive = false;\n        foreach (long i in lst) {\n          \
    \  if (i < 0) {\n                hasNegative = true;\n                if (i >\
    \ maxNegative) {\n                    maxNegative = i;\n                }\n  \
    \          } else if (i > 0) {\n                hasPositive = true;\n        \
    \        if (i < minPositive) {\n                    minPositive = i;\n      \
    \          }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(\n            hasNegative ? (Nullable<long>)maxNegative : null,\n\
    \            hasPositive ? (Nullable<long>)minPositive : null);", "        long?\
    \ a = null;\n        long? b = null;\n        foreach (long i in lst) {\n    \
    \        if (i < 0) {\n                if (a == null || i > a) {\n           \
    \         a = i;\n                }\n            } else {\n                if\
    \ (b == null || i < b) {\n                    b = i;\n                }\n    \
    \        }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        // Write your code here\n        long maxNeg = 0;\n        long\
    \ minPos = 0;\n        bool neg = false;\n        bool pos = false;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (i > maxNeg)\
    \ {\n                    maxNeg = i;\n                    neg = true;\n      \
    \          }\n            }\n            if (i > 0) {\n                if (i <\
    \ minPos || pos == false) {\n                    minPos = i;\n               \
    \     pos = true;\n                }\n            }\n        }\n        if (neg\
    \ == false) {\n            maxNeg = 0;\n        }\n        if (pos == false) {\n\
    \            minPos = 0;\n        }\n        return Tuple.Create(maxNeg, minPos);",
  "        long maxNegative = 0;\n        long minPositive = 0;\n        bool hasNegative\
    \ = false;\n        bool hasPositive = false;\n        foreach (long num in lst)\
    \ {\n            if (num < 0) {\n                hasNegative = true;\n       \
    \         if (num > maxNegative) {\n                    maxNegative = num;\n \
    \               }\n            } else if (num > 0) {\n                hasPositive\
    \ = true;\n                if (minPositive == 0 || num < minPositive) {\n    \
    \                minPositive = num;\n                }\n            }\n      \
    \  }\n        if (hasNegative) {\n            if (hasPositive) {\n           \
    \     return new Tuple<Nullable<long>, Nullable<long>>(maxNegative, minPositive);\n\
    \            } else {\n                return new Tuple<Nullable<long>, Nullable<long>>(maxNegative,\
    \ null);\n            }\n        } else if (hasPositive) {\n            return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, minPositive);\n        } else\
    \ {\n            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }", "        var maxNeg = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n\
    \        var minPos = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "        // Write\
    \ your code here\n        long? maxNegative = null;\n        long? minPositive\
    \ = null;\n        foreach (var item in lst)\n        {\n            if (item\
    \ < 0)\n            {\n                if (maxNegative == null || item > maxNegative)\n\
    \                {\n                    maxNegative = item;\n                }\n\
    \            }\n            else\n            {\n                if (minPositive\
    \ == null || item < minPositive)\n                {\n                    minPositive\
    \ = item;\n                }\n            }\n        }\n        return new Tuple<long?,\
    \ long?>(maxNegative, minPositive);", '        return new Tuple<Nullable<long>,
    Nullable<long>>(lst.Where(x => x < 0).DefaultIfEmpty().Max(), lst.Where(x => x
    > 0).DefaultIfEmpty().Min());', "        long maxNeg = long.MinValue;\n      \
    \  long minPos = long.MaxValue;\n        foreach (long num in lst) {\n       \
    \     if (num < 0 && num > maxNeg) {\n                maxNeg = num;\n        \
    \    }\n            if (num > 0 && num < minPos) {\n                minPos = num;\n\
    \            }\n        }\n        if (maxNeg == long.MinValue) {\n          \
    \  maxNeg = (long)null;\n        }\n        if (minPos == long.MaxValue) {\n \
    \           minPos = (long)null;\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        // your code here\n        long?\
    \ min = null;\n        long? max = null;\n        foreach (long i in lst) {\n\
    \            if (i > 0) {\n                if (min == null || i < min) {\n   \
    \                 min = i;\n                }\n            } else if (i < 0) {\n\
    \                if (max == null || i > max) {\n                    max = i;\n\
    \                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        // Write your code here\n        long?\
    \ min = null;\n        long? max = null;\n        foreach (var item in lst)\n\
    \        {\n            if (item > 0)\n            {\n                if (min\
    \ == null || item < min)\n                {\n                    min = item;\n\
    \                }\n            }\n            else\n            {\n         \
    \       if (max == null || item > max)\n                {\n                  \
    \  max = item;\n                }\n            }\n        }\n        return new\
    \ Tuple<long?, long?>(max, min);", "        long? largestNegative = null;\n  \
    \      long? smallestPositive = null;\n        foreach (long i in lst) {\n   \
    \         if (i < 0) {\n                if (largestNegative == null || i > largestNegative)\
    \ {\n                    largestNegative = i;\n                }\n           \
    \ } else {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        // Write your code here\n        return null;",
  "        // Write your code here\n        long? a = null;\n        long? b = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (a == null || i > a) {\n                    a = i;\n                }\n \
    \           } else {\n                if (b == null || i < b) {\n            \
    \        b = i;\n                }\n            }\n        }\n        return new\
    \ Tuple<Nullable<long>, Nullable<long>>(a, b);", "        // Write your code here\n\
    \        long? a = null;\n        long? b = null;\n        foreach (var i in lst)\
    \ {\n            if (i < 0) {\n                if (a == null || i > a) {\n   \
    \                 a = i;\n                }\n            } else {\n          \
    \      if (b == null || i < b) {\n                    b = i;\n               \
    \ }\n            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        long? maxNeg = null;\n        long? minPos = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (maxNeg == null\
    \ || i > maxNeg) {\n                    maxNeg = i;\n                }\n     \
    \       } else {\n                if (minPos == null || i < minPos) {\n      \
    \              minPos = i;\n                }\n            }\n        }\n    \
    \    return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "   \
    \     if (lst.Count == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long maxNegative = long.MinValue;\n        long minPositive\
    \ = long.MaxValue;\n        foreach (long i in lst) {\n            if (i < 0)\
    \ {\n                maxNegative = Math.Max(maxNegative, i);\n            } else\
    \ {\n                minPositive = Math.Min(minPositive, i);\n            }\n\
    \        }\n        if (maxNegative == long.MinValue) {\n            maxNegative\
    \ = 0;\n        }\n        if (minPositive == long.MaxValue) {\n            minPositive\
    \ = 0;\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNegative,\
    \ minPositive);", "        // Write your code here\n        long? maxNeg = null;\n\
    \        long? minPos = null;\n        foreach (long i in lst) {\n           \
    \ if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n        \
    \            maxNeg = i;\n                }\n            } else {\n          \
    \      if (minPos == null || i < minPos) {\n                    minPos = i;\n\
    \                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        long? a = null;\n        long? b\
    \ = null;\n        foreach (long x in lst) {\n            if (x < 0) {\n     \
    \           if (a == null || x > a) {\n                    a = x;\n          \
    \      }\n            } else {\n                if (b == null || x < b) {\n  \
    \                  b = x;\n                }\n            }\n        }\n     \
    \   return new Tuple<Nullable<long>, Nullable<long>>(a, b);", "        long? maxNegative\
    \ = null;\n        long? minPositive = null;\n        foreach (long n in lst)\
    \ {\n            if (n < 0) {\n                if (maxNegative == null || n >\
    \ maxNegative) {\n                    maxNegative = n;\n                }\n  \
    \          } else {\n                if (minPositive == null || n < minPositive)\
    \ {\n                    minPositive = n;\n                }\n            }\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNegative,\
    \ minPositive);", "        // Write your code here\n        long? maxNegative\
    \ = null;\n        long? minPositive = null;\n        foreach (var item in lst)\n\
    \        {\n            if (item < 0)\n            {\n                if (maxNegative\
    \ == null || item > maxNegative)\n                {\n                    maxNegative\
    \ = item;\n                }\n            }\n            else\n            {\n\
    \                if (minPositive == null || item < minPositive)\n            \
    \    {\n                    minPositive = item;\n                }\n         \
    \   }\n        }\n        return new Tuple<long?, long?>(maxNegative, minPositive);",
  "        long? maxNeg = null;\n        long? minPos = null;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (maxNeg == null ||\
    \ i > maxNeg) {\n                    maxNeg = i;\n                }\n        \
    \    } else {\n                if (minPos == null || i < minPos) {\n         \
    \           minPos = i;\n                }\n            }\n        }\n       \
    \ return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "      \
    \  // your code here\n        long? maxNeg = null;\n        long? minPos = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n     \
    \           }\n            } else {\n                if (minPos == null || i <\
    \ minPos) {\n                    minPos = i;\n                }\n            }\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);",
  "        long min = long.MaxValue;\n        long max = long.MinValue;\n        bool\
    \ hasNegative = false;\n        bool hasPositive = false;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                hasNegative = true;\n\
    \                if (i > max) {\n                    max = i;\n              \
    \  }\n            } else {\n                hasPositive = true;\n            \
    \    if (i < min) {\n                    min = i;\n                }\n       \
    \     }\n        }\n        if (hasNegative) {\n            max = max;\n     \
    \   } else {\n            max = null;\n        }\n        if (hasPositive) {\n\
    \            min = min;\n        } else {\n            min = null;\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(max, min);", "     \
    \   long? min = null;\n        long? max = null;\n        foreach (var item in\
    \ lst) {\n            if (item < 0) {\n                if (max == null || item\
    \ > max) {\n                    max = item;\n                }\n            }\
    \ else {\n                if (min == null || item < min) {\n                 \
    \   min = item;\n                }\n            }\n        }\n        return new\
    \ Tuple<Nullable<long>, Nullable<long>>(max, min);", "        // Your code goes\
    \ here\n        long? largestNegative = null;\n        long? smallestPositive\
    \ = null;\n        foreach (var item in lst)\n        {\n            if (item\
    \ < 0)\n            {\n                if (largestNegative == null)\n        \
    \        {\n                    largestNegative = item;\n                }\n \
    \               else\n                {\n                    if (item > largestNegative)\n\
    \                    {\n                        largestNegative = item;\n    \
    \                }\n                }\n            }\n            else\n     \
    \       {\n                if (smallestPositive == null)\n                {\n\
    \                    smallestPositive = item;\n                }\n           \
    \     else\n                {\n                    if (item < smallestPositive)\n\
    \                    {\n                        smallestPositive = item;\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largestNegative, smallestPositive);",
  "        // Write your code here\n        long? min = null;\n        long? max =\
    \ null;\n        foreach (var item in lst)\n        {\n            if (item >\
    \ 0)\n            {\n                if (min == null || item < min)\n        \
    \        {\n                    min = item;\n                }\n            }\n\
    \            else\n            {\n                if (max == null || item > max)\n\
    \                {\n                    max = item;\n                }\n     \
    \       }\n        }\n        return new Tuple<long?, long?>(max, min);", "  \
    \      long? maxNeg = null;\n        long? minPos = null;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (maxNeg == null ||\
    \ i > maxNeg) {\n                    maxNeg = i;\n                }\n        \
    \    } else {\n                if (minPos == null || i < minPos) {\n         \
    \           minPos = i;\n                }\n            }\n        }\n       \
    \ return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "      \
    \  // Write your code here\n        long? a = null;\n        long? b = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (a == null || i > a) {\n                    a = i;\n                }\n \
    \           } else {\n                if (b == null || i < b) {\n            \
    \        b = i;\n                }\n            }\n        }\n        return new\
    \ Tuple<Nullable<long>, Nullable<long>>(a, b);", "        // Write your code here\n\
    \        long? maxNegative = null;\n        long? minPositive = null;\n      \
    \  foreach (long i in lst) {\n            if (i < 0) {\n                if (maxNegative\
    \ == null || i > maxNegative) {\n                    maxNegative = i;\n      \
    \          }\n            } else {\n                if (minPositive == null ||\
    \ i < minPositive) {\n                    minPositive = i;\n                }\n\
    \            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNegative,\
    \ minPositive);", "        long? maxNegative = null;\n        long? minPositive\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (maxNegative == null || i > maxNegative) {\n                  \
    \  maxNegative = i;\n                }\n            } else {\n               \
    \ if (minPositive == null || i < minPositive) {\n                    minPositive\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNegative, minPositive);", "        // Write your code here\n\
    \        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long num in lst) {\n            if (num < 0) {\n           \
    \     if (largestNegative == null || num > largestNegative) {\n              \
    \      largestNegative = num;\n                }\n            } else {\n     \
    \           if (smallestPositive == null || num < smallestPositive) {\n      \
    \              smallestPositive = num;\n                }\n            }\n   \
    \     }\n        return new Tuple<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        // Write your code here\n        long maxNeg =\
    \ long.MinValue;\n        long minPos = long.MaxValue;\n        foreach (long\
    \ i in lst) {\n            if (i < 0 && i > maxNeg) {\n                maxNeg\
    \ = i;\n            }\n            if (i > 0 && i < minPos) {\n              \
    \  minPos = i;\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg == long.MinValue ? null : (Nullable<long>)maxNeg, minPos\
    \ == long.MaxValue ? null : (Nullable<long>)minPos);", "        // Write your\
    \ code here\n        Nullable<long> a = null;\n        Nullable<long> b = null;\n\
    \        foreach (long x in lst) {\n            if (x < 0) {\n               \
    \ if (a == null || x > a) {\n                    a = x;\n                }\n \
    \           } else {\n                if (b == null || x < b) {\n            \
    \        b = x;\n                }\n            }\n        }\n        return new\
    \ Tuple<Nullable<long>, Nullable<long>>(a, b);", "        // Write your code here\n\
    \        long? maxNegative = null;\n        long? minPositive = null;\n      \
    \  foreach (long i in lst) {\n            if (i < 0) {\n                if (maxNegative\
    \ == null || i > maxNegative) {\n                    maxNegative = i;\n      \
    \          }\n            } else {\n                if (minPositive == null ||\
    \ i < minPositive) {\n                    minPositive = i;\n                }\n\
    \            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNegative,\
    \ minPositive);", "        long? maxNeg = null;\n        long? minPos = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n     \
    \           }\n            } else {\n                if (minPos == null || i <\
    \ minPos) {\n                    minPos = i;\n                }\n            }\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);",
  "        Nullable<long> largestNegative = null;\n        Nullable<long> smallestPositive\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (largestNegative == null || i > largestNegative) {\n          \
    \          largestNegative = i;\n                }\n            } else {\n   \
    \             if (smallestPositive == null || i < smallestPositive) {\n      \
    \              smallestPositive = i;\n                }\n            }\n     \
    \   }\n        return new Tuple<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        // Your code here\n        long? a = null;\n \
    \       long? b = null;\n        foreach (var item in lst)\n        {\n      \
    \      if (item < 0)\n            {\n                if (a == null)\n        \
    \        {\n                    a = item;\n                }\n               \
    \ else\n                {\n                    if (item > a)\n               \
    \     {\n                        a = item;\n                    }\n          \
    \      }\n            }\n            else\n            {\n                if (b\
    \ == null)\n                {\n                    b = item;\n               \
    \ }\n                else\n                {\n                    if (item < b)\n\
    \                    {\n                        b = item;\n                  \
    \  }\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        // Write your code here\n        long? maxNeg\
    \ = null;\n        long? minPos = null;\n        foreach (long i in lst) {\n \
    \           if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n\
    \                    maxNeg = i;\n                }\n            } else {\n  \
    \              if (minPos == null || i < minPos) {\n                    minPos\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        // Write your code here\n      \
    \  long maxNeg = long.MinValue;\n        long minPos = long.MaxValue;\n      \
    \  foreach (long i in lst) {\n            if (i < 0 && i > maxNeg) {\n       \
    \         maxNeg = i;\n            }\n            if (i > 0 && i < minPos) {\n\
    \                minPos = i;\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg == long.MinValue ? null : (Nullable<long>)maxNeg, minPos\
    \ == long.MaxValue ? null : (Nullable<long>)minPos);", "        // Your code goes\
    \ here\n        long? maxNeg = null;\n        long? minPos = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (maxNeg == null\
    \ || i > maxNeg) {\n                    maxNeg = i;\n                }\n     \
    \       } else {\n                if (minPos == null || i < minPos) {\n      \
    \              minPos = i;\n                }\n            }\n        }\n    \
    \    return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "   \
    \     // Write your code here\n        return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        // Your code goes here\n        long? maxNeg = null;\n   \
    \     long? minPos = null;\n        foreach (long i in lst) {\n            if\
    \ (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n           \
    \         maxNeg = i;\n                }\n            } else {\n             \
    \   if (minPos == null || i < minPos) {\n                    minPos = i;\n   \
    \             }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        long? min = null;\n        long?\
    \ max = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n \
    \               if (max == null || i > max) {\n                    max = i;\n\
    \                }\n            } else {\n                if (min == null || i\
    \ < min) {\n                    min = i;\n                }\n            }\n \
    \       }\n        return new Tuple<Nullable<long>, Nullable<long>>(max, min);",
  "        long? a = null;\n        long? b = null;\n        foreach (long x in lst)\
    \ {\n            if (x < 0) {\n                if (a == null || x > a) {\n   \
    \                 a = x;\n                }\n            } else {\n          \
    \      if (b == null || x < b) {\n                    b = x;\n               \
    \ }\n            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        // Your code goes here\n        long? a = null;\n        long?\
    \ b = null;\n        foreach (var item in lst)\n        {\n            if (item\
    \ < 0)\n            {\n                if (a == null)\n                {\n   \
    \                 a = item;\n                }\n                else\n       \
    \         {\n                    if (item > a)\n                    {\n      \
    \                  a = item;\n                    }\n                }\n     \
    \       }\n            else\n            {\n                if (b == null)\n \
    \               {\n                    b = item;\n                }\n        \
    \        else\n                {\n                    if (item < b)\n        \
    \            {\n                        b = item;\n                    }\n   \
    \             }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        // Your code goes here\n        return null;",
  "        if (lst.Count == 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        var min = lst.Min();\n        var max = lst.Max();\n       \
    \ if (min >= 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ min);\n        if (max <= 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(max, min);",
  "        long? a = null;\n        long? b = null;\n        foreach (long x in lst)\
    \ {\n            if (x < 0) {\n                if (a == null || x > a) {\n   \
    \                 a = x;\n                }\n            } else {\n          \
    \      if (b == null || x < b) {\n                    b = x;\n               \
    \ }\n            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        long? min = null;\n        long? max = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (max == null\
    \ || i > max) {\n                    max = i;\n                }\n           \
    \ } else {\n                if (min == null || i < min) {\n                  \
    \  min = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        if (lst.Count == 0) {\n            return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n        long\
    \ min = lst[0];\n        long max = lst[0];\n        foreach (long i in lst) {\n\
    \            if (i < min) {\n                min = i;\n            }\n       \
    \     if (i > max) {\n                max = i;\n            }\n        }\n   \
    \     return new Tuple<Nullable<long>, Nullable<long>>(max, min);", "        //\
    \ Your code goes here\n        long maxNeg = long.MinValue;\n        long minPos\
    \ = long.MaxValue;\n        foreach (long i in lst) {\n            if (i < 0 &&\
    \ i > maxNeg) {\n                maxNeg = i;\n            }\n            if (i\
    \ > 0 && i < minPos) {\n                minPos = i;\n            }\n        }\n\
    \        if (maxNeg == long.MinValue) {\n            maxNeg = (long)null;\n  \
    \      }\n        if (minPos == long.MaxValue) {\n            minPos = (long)null;\n\
    \        }\n        return Tuple.Create(maxNeg, minPos);", "        // your code\
    \ here\n        long? a = null;\n        long? b = null;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (a == null || i >\
    \ a) {\n                    a = i;\n                }\n            } else {\n\
    \                if (b == null || i < b) {\n                    b = i;\n     \
    \           }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        long? maxNeg = null;\n        long? minPos\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (maxNeg == null || i > maxNeg) {\n                    maxNeg =\
    \ i;\n                }\n            } else {\n                if (minPos == null\
    \ || i < minPos) {\n                    minPos = i;\n                }\n     \
    \       }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg,\
    \ minPos);", "        // Write your code here\n        long? maxNeg = null;\n\
    \        long? minPos = null;\n        foreach (long i in lst) {\n           \
    \ if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n        \
    \            maxNeg = i;\n                }\n            } else {\n          \
    \      if (minPos == null || i < minPos) {\n                    minPos = i;\n\
    \                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        long? maxNegative = null;\n    \
    \    long? minPositive = null;\n        foreach (long i in lst) {\n          \
    \  if (i < 0) {\n                if (maxNegative == null || i > maxNegative) {\n\
    \                    maxNegative = i;\n                }\n            } else {\n\
    \                if (minPositive == null || i < minPositive) {\n             \
    \       minPositive = i;\n                }\n            }\n        }\n      \
    \  return new Tuple<Nullable<long>, Nullable<long>>(maxNegative, minPositive);",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largestNegative, smallestPositive);", "        // Write your\
    \ code here\n        return null;", "        // Your code here\n        long min\
    \ = long.MaxValue;\n        long max = long.MinValue;\n        bool hasNegative\
    \ = false;\n        bool hasPositive = false;\n        foreach (var item in lst)\n\
    \        {\n            if (item < 0)\n            {\n                hasNegative\
    \ = true;\n                if (item > max)\n                {\n              \
    \      max = item;\n                }\n            }\n            else\n     \
    \       {\n                hasPositive = true;\n                if (item < min)\n\
    \                {\n                    min = item;\n                }\n     \
    \       }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(hasNegative\
    \ ? (Nullable<long>)max : null, hasPositive ? (Nullable<long>)min : null);", " \
    \       long? maxNegative = null;\n        long? minPositive = null;\n       \
    \ foreach (long i in lst) {\n            if (i < 0) {\n                if (maxNegative\
    \ == null || i > maxNegative) {\n                    maxNegative = i;\n      \
    \          }\n            } else {\n                if (minPositive == null ||\
    \ i < minPositive) {\n                    minPositive = i;\n                }\n\
    \            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNegative,\
    \ minPositive);", "        long? a = null;\n        long? b = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (a == null ||\
    \ i > a) {\n                    a = i;\n                }\n            } else\
    \ {\n                if (b == null || i < b) {\n                    b = i;\n \
    \               }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        // Your code goes here\n        long? a =\
    \ null;\n        long? b = null;\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            if (lst[i] < 0) {\n                if (a == null) {\n       \
    \             a = lst[i];\n                } else {\n                    a = Math.Max(a.Value,\
    \ lst[i]);\n                }\n            } else if (lst[i] > 0) {\n        \
    \        if (b == null) {\n                    b = lst[i];\n                }\
    \ else {\n                    b = Math.Min(b.Value, lst[i]);\n               \
    \ }\n            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        long? a = null;\n        long? b = null;\n        for (int i\
    \ = 0; i < lst.Count; i++) {\n            if (lst[i] < 0) {\n                if\
    \ (a == null || lst[i] > a) {\n                    a = lst[i];\n             \
    \   }\n            } else {\n                if (b == null || lst[i] < b) {\n\
    \                    b = lst[i];\n                }\n            }\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(a, b);", "        var\
    \ a = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n        var b = lst.Where(x\
    \ => x > 0).DefaultIfEmpty().Min();\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        long maxNeg = long.MinValue;\n        long\
    \ minPos = long.MaxValue;\n        foreach (long l in lst) {\n            if (l\
    \ < 0) {\n                if (l > maxNeg) {\n                    maxNeg = l;\n\
    \                }\n            } else {\n                if (l < minPos) {\n\
    \                    minPos = l;\n                }\n            }\n        }\n\
    \        if (maxNeg == long.MinValue) {\n            maxNeg = null;\n        }\n\
    \        if (minPos == long.MaxValue) {\n            minPos = null;\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", " \
    \       // Your code goes here.\n        long? maxNeg = null;\n        long? minPos\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (maxNeg == null || i > maxNeg) {\n                    maxNeg =\
    \ i;\n                }\n            } else {\n                if (minPos == null\
    \ || i < minPos) {\n                    minPos = i;\n                }\n     \
    \       }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg,\
    \ minPos);", "        // Write your code here\n        long? maxNeg = null;\n\
    \        long? minPos = null;\n        foreach (long i in lst) {\n           \
    \ if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n        \
    \            maxNeg = i;\n                }\n            } else {\n          \
    \      if (minPos == null || i < minPos) {\n                    minPos = i;\n\
    \                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        // Write your code here\n      \
    \  return null;", "        // your code here\n        return null;", "       \
    \ long? a = null;\n        long? b = null;\n        foreach (long i in lst) {\n\
    \            if (i < 0) {\n                if (a == null || i > a) {\n       \
    \             a = i;\n                }\n            } else {\n              \
    \  if (b == null || i < b) {\n                    b = i;\n                }\n\
    \            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        // Write your code here\n        long? largestNegative = null;\n\
    \        long? smallestPositive = null;\n        foreach (long i in lst) {\n \
    \           if (i < 0) {\n                if (largestNegative == null || i > largestNegative)\
    \ {\n                    largestNegative = i;\n                }\n           \
    \ } else {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        long? smallest = null;\n        long? largest\
    \ = null;\n        foreach (long i in lst) {\n            if (i > 0) {\n     \
    \           if (smallest == null || i < smallest) {\n                    smallest\
    \ = i;\n                }\n            } else if (i < 0) {\n                if\
    \ (largest == null || i > largest) {\n                    largest = i;\n     \
    \           }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long? a = null;\n        long?\
    \ b = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n   \
    \             if (a == null || i > a) {\n                    a = i;\n        \
    \        }\n            } else {\n                if (b == null || i < b) {\n\
    \                    b = i;\n                }\n            }\n        }\n   \
    \     return new Tuple<Nullable<long>, Nullable<long>>(a, b);", "        long?\
    \ min = null;\n        long? max = null;\n        foreach (long i in lst) {\n\
    \            if (i < 0) {\n                if (max == null || i > max) {\n   \
    \                 max = i;\n                }\n            } else {\n        \
    \        if (min == null || i < min) {\n                    min = i;\n       \
    \         }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        // Write your code here\n        long?\
    \ a = null;\n        long? b = null;\n        foreach (long i in lst) {\n    \
    \        if (i < 0) {\n                if (a == null || i > a) {\n           \
    \         a = i;\n                }\n            } else {\n                if\
    \ (b == null || i < b) {\n                    b = i;\n                }\n    \
    \        }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        var min = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n   \
    \     var max = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(max, min);", "        // Write your\
    \ code here\n        long? maxNeg = null;\n        long? minPos = null;\n    \
    \    foreach (long i in lst) {\n            if (i < 0) {\n                if (maxNeg\
    \ == null || i > maxNeg) {\n                    maxNeg = i;\n                }\n\
    \            } else {\n                if (minPos == null || i < minPos) {\n \
    \                   minPos = i;\n                }\n            }\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", " \
    \       // Your code here\n        long? a = null;\n        long? b = null;\n\
    \        foreach (var item in lst)\n        {\n            if (item < 0)\n   \
    \         {\n                if (a == null)\n                {\n             \
    \       a = item;\n                }\n                else\n                {\n\
    \                    if (item > a)\n                    {\n                  \
    \      a = item;\n                    }\n                }\n            }\n  \
    \          else\n            {\n                if (b == null)\n             \
    \   {\n                    b = item;\n                }\n                else\n\
    \                {\n                    if (item < b)\n                    {\n\
    \                        b = item;\n                    }\n                }\n\
    \            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        // Write your code here\n        long? a = null;\n        long?\
    \ b = null;\n        foreach (long i in lst) {\n            if (i > 0) {\n   \
    \             if (b == null || i < b) {\n                    b = i;\n        \
    \        }\n            } else {\n                if (a == null || i > a) {\n\
    \                    a = i;\n                }\n            }\n        }\n   \
    \     return new Tuple<Nullable<long>, Nullable<long>>(a, b);", "        // Write\
    \ your code here\n        long? maxNeg = null;\n        long? minPos = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n     \
    \           }\n            } else {\n                if (minPos == null || i <\
    \ minPos) {\n                    minPos = i;\n                }\n            }\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);",
  "        long? maxNeg = null;\n        long? minPos = null;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (maxNeg == null ||\
    \ i > maxNeg) {\n                    maxNeg = i;\n                }\n        \
    \    } else {\n                if (minPos == null || i < minPos) {\n         \
    \           minPos = i;\n                }\n            }\n        }\n       \
    \ return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "      \
    \  // Your code goes here\n        return null;", "        // Write your code\
    \ here\n        long? min = null;\n        long? max = null;\n        foreach\
    \ (long i in lst) {\n            if (i > 0) {\n                if (min == null\
    \ || i < min) {\n                    min = i;\n                }\n           \
    \ } else if (i < 0) {\n                if (max == null || i > max) {\n       \
    \             max = i;\n                }\n            }\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(max, min);", "        long? maxNeg\
    \ = null;\n        long? minPos = null;\n        foreach (long l in lst) {\n \
    \           if (l < 0) {\n                if (maxNeg == null || l > maxNeg) {\n\
    \                    maxNeg = l;\n                }\n            } else {\n  \
    \              if (minPos == null || l < minPos) {\n                    minPos\
    \ = l;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        // Write your code here\n      \
    \  long? maxNeg = null;\n        long? minPos = null;\n        foreach (long i\
    \ in lst) {\n            if (i < 0) {\n                if (maxNeg == null || i\
    \ > maxNeg) {\n                    maxNeg = i;\n                }\n          \
    \  } else {\n                if (minPos == null || i < minPos) {\n           \
    \         minPos = i;\n                }\n            }\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "        // Write\
    \ your code here.\n        long? a = null;\n        long? b = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (a == null ||\
    \ i > a) {\n                    a = i;\n                }\n            } else\
    \ {\n                if (b == null || i < b) {\n                    b = i;\n \
    \               }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        long? maxNeg = null;\n        long? minPos\
    \ = null;\n        foreach (long num in lst) {\n            if (num < 0) {\n \
    \               if (maxNeg == null || num > maxNeg) {\n                    maxNeg\
    \ = num;\n                }\n            } else {\n                if (minPos\
    \ == null || num < minPos) {\n                    minPos = num;\n            \
    \    }\n            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg,\
    \ minPos);", "        var min = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n\
    \        var max = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(max, min);", "        long? maxNeg\
    \ = null;\n        long? minPos = null;\n        foreach (long i in lst) {\n \
    \           if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n\
    \                    maxNeg = i;\n                }\n            } else {\n  \
    \              if (minPos == null || i < minPos) {\n                    minPos\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        long min = long.MaxValue;\n    \
    \    long max = long.MinValue;\n        bool hasPositive = false;\n        bool\
    \ hasNegative = false;\n        foreach (long i in lst) {\n            if (i >\
    \ 0) {\n                hasPositive = true;\n                if (i < min) {\n\
    \                    min = i;\n                }\n            } else if (i < 0)\
    \ {\n                hasNegative = true;\n                if (i > max) {\n   \
    \                 max = i;\n                }\n            }\n        }\n    \
    \    if (hasPositive && hasNegative) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);\n        } else if (hasPositive) {\n            return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, min);\n        } else if (hasNegative)\
    \ {\n            return new Tuple<Nullable<long>, Nullable<long>>(max, null);\n\
    \        } else {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }", "        long? maxNeg = null;\n        long? minPos = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n     \
    \           }\n            } else {\n                if (minPos == null || i <\
    \ minPos) {\n                    minPos = i;\n                }\n            }\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);",
  "        long? min = null;\n        long? max = null;\n        foreach (long i in\
    \ lst) {\n            if (i > 0) {\n                if (min == null || i < min)\
    \ {\n                    min = i;\n                }\n            } else if (i\
    \ < 0) {\n                if (max == null || i > max) {\n                    max\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        // Write your code here\n        long\
    \ min = long.MaxValue;\n        long max = long.MinValue;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (i > max) {\n    \
    \                max = i;\n                }\n            } else {\n         \
    \       if (i < min) {\n                    min = i;\n                }\n    \
    \        }\n        }\n        if (min == long.MaxValue) {\n            min =\
    \ null;\n        }\n        if (max == long.MinValue) {\n            max = null;\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(max, min);",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largestNegative, smallestPositive);", "        long? a = null;\n\
    \        long? b = null;\n        foreach (var i in lst) {\n            if (i\
    \ < 0) {\n                if (a == null || i > a) {\n                    a = i;\n\
    \                }\n            } else {\n                if (b == null || i <\
    \ b) {\n                    b = i;\n                }\n            }\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(a, b);", "     \
    \   long? maxNeg = null;\n        long? minPos = null;\n        foreach (long\
    \ x in lst) {\n            if (x < 0) {\n                if (maxNeg == null ||\
    \ x > maxNeg) {\n                    maxNeg = x;\n                }\n        \
    \    } else {\n                if (minPos == null || x < minPos) {\n         \
    \           minPos = x;\n                }\n            }\n        }\n       \
    \ return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "      \
    \  // Your code here\n        long? a = null;\n        long? b = null;\n     \
    \   foreach (long x in lst) {\n            if (x < 0) {\n                if (a\
    \ == null || x > a) {\n                    a = x;\n                }\n       \
    \     } else {\n                if (b == null || x < b) {\n                  \
    \  b = x;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        long maxNeg = long.MinValue;\n        long\
    \ minPos = long.MaxValue;\n        foreach (long i in lst) {\n            if (i\
    \ < 0 && i > maxNeg) {\n                maxNeg = i;\n            }\n         \
    \   if (i > 0 && i < minPos) {\n                minPos = i;\n            }\n \
    \       }\n        if (maxNeg == long.MinValue) {\n            maxNeg = (long)null;\n\
    \        }\n        if (minPos == long.MaxValue) {\n            minPos = (long)null;\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);",
  "        long? min = null;\n        long? max = null;\n        foreach (long x in\
    \ lst) {\n            if (x < 0) {\n                if (max == null || x > max)\
    \ {\n                    max = x;\n                }\n            } else {\n \
    \               if (min == null || x < min) {\n                    min = x;\n\
    \                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        long? a = null;\n        long? b = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (a == null || i > a) {\n                    a = i;\n                }\n \
    \           } else {\n                if (b == null || i < b) {\n            \
    \        b = i;\n                }\n            }\n        }\n        return new\
    \ Tuple<Nullable<long>, Nullable<long>>(a, b);", "        // Write your code here\n\
    \        return null;", "        var result = new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        foreach (var item in lst) {\n            if (item < 0) {\n \
    \               if (result.Item1 == null || item > result.Item1) {\n         \
    \           result = new Tuple<Nullable<long>, Nullable<long>>(item, result.Item2);\n\
    \                }\n            } else {\n                if (result.Item2 ==\
    \ null || item < result.Item2) {\n                    result = new Tuple<Nullable<long>,\
    \ Nullable<long>>(result.Item1, item);\n                }\n            }\n   \
    \     }\n        return result;", "        var min = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n\
    \        var max = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(max, min);", "        long? a = null;\n\
    \        long? b = null;\n        foreach (var i in lst) {\n            if (i\
    \ < 0) {\n                if (a == null || i > a) {\n                    a = i;\n\
    \                }\n            } else {\n                if (b == null || i <\
    \ b) {\n                    b = i;\n                }\n            }\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(a, b);", "     \
    \   // Write your code here\n        return null;", "        // Write your code\
    \ here\n        long? largestNegative = null;\n        long? smallestPositive\
    \ = null;\n        foreach (var item in lst)\n        {\n            if (item\
    \ < 0)\n            {\n                if (largestNegative == null)\n        \
    \        {\n                    largestNegative = item;\n                }\n \
    \               else\n                {\n                    if (item > largestNegative)\n\
    \                    {\n                        largestNegative = item;\n    \
    \                }\n                }\n            }\n            else\n     \
    \       {\n                if (smallestPositive == null)\n                {\n\
    \                    smallestPositive = item;\n                }\n           \
    \     else\n                {\n                    if (item < smallestPositive)\n\
    \                    {\n                        smallestPositive = item;\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largestNegative, smallestPositive);",
  "        long? a = null;\n        long? b = null;\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                if (a == null || i > a) {\n   \
    \                 a = i;\n                }\n            } else {\n          \
    \      if (b == null || i < b) {\n                    b = i;\n               \
    \ }\n            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        long? maxNeg = null;\n        long? minPos = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (maxNeg == null\
    \ || i > maxNeg) {\n                    maxNeg = i;\n                }\n     \
    \       } else {\n                if (minPos == null || i < minPos) {\n      \
    \              minPos = i;\n                }\n            }\n        }\n    \
    \    return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "   \
    \     // your code here\n        return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        long? maxNeg = null;\n        long? minPos = null;\n     \
    \   foreach (long l in lst) {\n            if (l < 0) {\n                if (maxNeg\
    \ == null || l > maxNeg) {\n                    maxNeg = l;\n                }\n\
    \            } else {\n                if (minPos == null || l < minPos) {\n \
    \                   minPos = l;\n                }\n            }\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", " \
    \       long min = long.MaxValue;\n        long max = long.MinValue;\n       \
    \ bool hasMin = false;\n        bool hasMax = false;\n        foreach (long i\
    \ in lst) {\n            if (i < 0) {\n                if (i > max) {\n      \
    \              max = i;\n                    hasMax = true;\n                }\n\
    \            } else {\n                if (i < min) {\n                    min\
    \ = i;\n                    hasMin = true;\n                }\n            }\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(hasMax ?\
    \ (Nullable<long>)max : null, hasMin ? (Nullable<long>)min : null);", "      \
    \  long maxNeg = long.MinValue;\n        long minPos = long.MaxValue;\n      \
    \  foreach (long i in lst) {\n            if (i < 0 && i > maxNeg) {\n       \
    \         maxNeg = i;\n            }\n            if (i > 0 && i < minPos) {\n\
    \                minPos = i;\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg == long.MinValue ? null : (Nullable<long>)maxNeg, minPos\
    \ == long.MaxValue ? null : (Nullable<long>)minPos);", "        // Write your\
    \ code here\n        long? a = null;\n        long? b = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (a == null ||\
    \ i > a) {\n                    a = i;\n                }\n            } else\
    \ {\n                if (b == null || i < b) {\n                    b = i;\n \
    \               }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        long? maxNeg = null;\n        long? minPos\
    \ = null;\n        foreach (long l in lst) {\n            if (l < 0) {\n     \
    \           if (maxNeg == null || l > maxNeg) {\n                    maxNeg =\
    \ l;\n                }\n            } else {\n                if (minPos == null\
    \ || l < minPos) {\n                    minPos = l;\n                }\n     \
    \       }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg,\
    \ minPos);", "        // Write your code here\n        long maxNegative = long.MinValue;\n\
    \        long minPositive = long.MaxValue;\n        foreach (var item in lst)\n\
    \        {\n            if (item < 0 && item > maxNegative)\n            {\n \
    \               maxNegative = item;\n            }\n            if (item > 0 &&\
    \ item < minPositive)\n            {\n                minPositive = item;\n  \
    \          }\n        }\n        if (maxNegative == long.MinValue)\n        {\n\
    \            maxNegative = (long?)null;\n        }\n        if (minPositive ==\
    \ long.MaxValue)\n        {\n            minPositive = (long?)null;\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(maxNegative, minPositive);",
  "        // Your code here\n        return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        long? maxNeg = null;\n        long? minPos = null;\n     \
    \   foreach (long i in lst) {\n            if (i < 0) {\n                if (maxNeg\
    \ == null || i > maxNeg) {\n                    maxNeg = i;\n                }\n\
    \            } else {\n                if (minPos == null || i < minPos) {\n \
    \                   minPos = i;\n                }\n            }\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", " \
    \       // Write your code here\n        long? a = null;\n        long? b = null;\n\
    \        foreach (var i in lst) {\n            if (i < 0) {\n                if\
    \ (a == null || i > a) {\n                    a = i;\n                }\n    \
    \        } else {\n                if (b == null || i < b) {\n               \
    \     b = i;\n                }\n            }\n        }\n        return new\
    \ Tuple<Nullable<long>, Nullable<long>>(a, b);", "        long? min = null;\n\
    \        long? max = null;\n        foreach (long i in lst) {\n            if\
    \ (i < 0) {\n                if (max == null || i > max) {\n                 \
    \   max = i;\n                }\n            } else {\n                if (min\
    \ == null || i < min) {\n                    min = i;\n                }\n   \
    \         }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        // Write your code here\n        long? a = null;\n        long?\
    \ b = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n   \
    \             if (a == null || i > a) {\n                    a = i;\n        \
    \        }\n            } else {\n                if (b == null || i < b) {\n\
    \                    b = i;\n                }\n            }\n        }\n   \
    \     return new Tuple<Nullable<long>, Nullable<long>>(a, b);", "        long?\
    \ maxNeg = null;\n        long? minPos = null;\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                if (maxNeg == null || i > maxNeg)\
    \ {\n                    maxNeg = i;\n                }\n            } else {\n\
    \                if (minPos == null || i < minPos) {\n                    minPos\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        // Write your code here\n      \
    \  long? a = null;\n        long? b = null;\n        foreach (long i in lst) {\n\
    \            if (i < 0) {\n                if (a == null || i > a) {\n       \
    \             a = i;\n                }\n            } else {\n              \
    \  if (b == null || i < b) {\n                    b = i;\n                }\n\
    \            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        // your code here\n        long? a = null;\n        long? b =\
    \ null;\n        foreach (long i in lst) {\n            if (i < 0) {\n       \
    \         if (a == null || i > a) {\n                    a = i;\n            \
    \    }\n            } else {\n                if (b == null || i < b) {\n    \
    \                b = i;\n                }\n            }\n        }\n       \
    \ return new Tuple<Nullable<long>, Nullable<long>>(a, b);", "        // Write\
    \ your code here.\n        long maxNegative = long.MinValue;\n        long minPositive\
    \ = long.MaxValue;\n        foreach (long num in lst) {\n            if (num <\
    \ 0 && num > maxNegative) {\n                maxNegative = num;\n            }\n\
    \            if (num > 0 && num < minPositive) {\n                minPositive\
    \ = num;\n            }\n        }\n        if (maxNegative == long.MinValue)\
    \ {\n            maxNegative = (long?)null;\n        }\n        if (minPositive\
    \ == long.MaxValue) {\n            minPositive = (long?)null;\n        }\n   \
    \     return new Tuple<Nullable<long>, Nullable<long>>(maxNegative, minPositive);",
  "        long? a = null;\n        long? b = null;\n        foreach (long x in lst)\
    \ {\n            if (x < 0) {\n                if (a == null || x > a) {\n   \
    \                 a = x;\n                }\n            } else {\n          \
    \      if (b == null || x < b) {\n                    b = x;\n               \
    \ }\n            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        // Write your code here\n        long? min = null;\n        long?\
    \ max = null;\n        foreach (long item in lst)\n        {\n            if (item\
    \ < 0)\n            {\n                if (max == null || item > max)\n      \
    \          {\n                    max = item;\n                }\n           \
    \ }\n            else\n            {\n                if (min == null || item\
    \ < min)\n                {\n                    min = item;\n               \
    \ }\n            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        long? maxNeg = null;\n        long? minPos = null;\n      \
    \  foreach (long i in lst) {\n            if (i < 0) {\n                if (maxNeg\
    \ == null || i > maxNeg) {\n                    maxNeg = i;\n                }\n\
    \            } else {\n                if (minPos == null || i < minPos) {\n \
    \                   minPos = i;\n                }\n            }\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", " \
    \       // Write your code here\n        long? maxNegative = null;\n        long?\
    \ minPositive = null;\n        foreach (long num in lst) {\n            if (num\
    \ < 0) {\n                if (maxNegative == null || num > maxNegative) {\n  \
    \                  maxNegative = num;\n                }\n            } else {\n\
    \                if (minPositive == null || num < minPositive) {\n           \
    \         minPositive = num;\n                }\n            }\n        }\n  \
    \      return new Tuple<Nullable<long>, Nullable<long>>(maxNegative, minPositive);",
  "        // Write your code here\n        long maxNeg = long.MinValue;\n       \
    \ long minPos = long.MaxValue;\n        foreach (long i in lst) {\n          \
    \  if (i < 0 && i > maxNeg) {\n                maxNeg = i;\n            }\n  \
    \          if (i > 0 && i < minPos) {\n                minPos = i;\n         \
    \   }\n        }\n        if (maxNeg == long.MinValue) {\n            maxNeg =\
    \ null;\n        }\n        if (minPos == long.MaxValue) {\n            minPos\
    \ = null;\n        }\n        return Tuple.Create(maxNeg, minPos);", "       \
    \ // Write your code here\n        long? min = null;\n        long? max = null;\n\
    \        foreach (var item in lst)\n        {\n            if (item > 0)\n   \
    \         {\n                if (min == null || item < min)\n                {\n\
    \                    min = item;\n                }\n            }\n         \
    \   else\n            {\n                if (max == null || item > max)\n    \
    \            {\n                    max = item;\n                }\n         \
    \   }\n        }\n        return new Tuple<long?, long?>(max, min);", "      \
    \  // Your code here\n        long? maxNegative = null;\n        long? minPositive\
    \ = null;\n        foreach (long item in lst) {\n            if (item < 0) {\n\
    \                if (maxNegative == null || item > maxNegative) {\n          \
    \          maxNegative = item;\n                }\n            } else {\n    \
    \            if (minPositive == null || item < minPositive) {\n              \
    \      minPositive = item;\n                }\n            }\n        }\n    \
    \    return new Tuple<Nullable<long>, Nullable<long>>(maxNegative, minPositive);",
  "        // Write your code here\n        long? maxNeg = null;\n        long? minPos\
    \ = null;\n        foreach (long l in lst) {\n            if (l < 0) {\n     \
    \           if (maxNeg == null || l > maxNeg) {\n                    maxNeg =\
    \ l;\n                }\n            } else {\n                if (minPos == null\
    \ || l < minPos) {\n                    minPos = l;\n                }\n     \
    \       }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg,\
    \ minPos);", "        // Write your code here\n        long? largestNegative =\
    \ null;\n        long? smallestPositive = null;\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                if (largestNegative == null ||\
    \ i > largestNegative) {\n                    largestNegative = i;\n         \
    \       }\n            } else {\n                if (smallestPositive == null\
    \ || i < smallestPositive) {\n                    smallestPositive = i;\n    \
    \            }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largestNegative, smallestPositive);", "        // Write your\
    \ code here\n        return null;", "        // Write your code here\n       \
    \ long? maxNegative = null;\n        long? minPositive = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (maxNegative\
    \ == null || i > maxNegative) {\n                    maxNegative = i;\n      \
    \          }\n            } else {\n                if (minPositive == null ||\
    \ i < minPositive) {\n                    minPositive = i;\n                }\n\
    \            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNegative,\
    \ minPositive);", "        long? maxNeg = null;\n        long? minPos = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n     \
    \           }\n            } else {\n                if (minPos == null || i <\
    \ minPos) {\n                    minPos = i;\n                }\n            }\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);",
  "        var min = lst.Where(x => x > 0).Min();\n        var max = lst.Where(x =>\
    \ x < 0).Max();\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        long? a = null;\n        long? b = null;\n        foreach (long\
    \ x in lst) {\n            if (x < 0) {\n                if (a == null || x >\
    \ a) {\n                    a = x;\n                }\n            } else {\n\
    \                if (b == null || x < b) {\n                    b = x;\n     \
    \           }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        long? maxNegative = null;\n        long? minPositive\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (maxNegative == null || i > maxNegative) {\n                  \
    \  maxNegative = i;\n                }\n            } else {\n               \
    \ if (minPositive == null || i < minPositive) {\n                    minPositive\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNegative, minPositive);", "        long? a = null;\n    \
    \    long? b = null;\n        foreach (var i in lst) {\n            if (i < 0)\
    \ {\n                if (a == null || i > a) {\n                    a = i;\n \
    \               }\n            } else {\n                if (b == null || i <\
    \ b) {\n                    b = i;\n                }\n            }\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(a, b);", "     \
    \   long min = long.MaxValue;\n        long max = long.MinValue;\n        bool\
    \ hasPositive = false;\n        bool hasNegative = false;\n        foreach (long\
    \ n in lst) {\n            if (n > 0) {\n                hasPositive = true;\n\
    \                if (n < min) {\n                    min = n;\n              \
    \  }\n            } else if (n < 0) {\n                hasNegative = true;\n \
    \               if (n > max) {\n                    max = n;\n               \
    \ }\n            }\n        }\n        if (hasPositive && hasNegative) {\n   \
    \         return new Tuple<Nullable<long>, Nullable<long>>(max, min);\n      \
    \  } else if (hasPositive) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ min);\n        } else if (hasNegative) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, null);\n        } else {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }", "        // Write your code here\n\
    \        long? min = null;\n        long? max = null;\n        foreach (var item\
    \ in lst)\n        {\n            if (item > 0)\n            {\n             \
    \   if (min == null || item < min)\n                {\n                    min\
    \ = item;\n                }\n            }\n            else\n            {\n\
    \                if (max == null || item > max)\n                {\n         \
    \           max = item;\n                }\n            }\n        }\n       \
    \ return new Tuple<long?, long?>(max, min);", "        // Write your code here\n\
    \        long? maxNegative = null;\n        long? minPositive = null;\n      \
    \  foreach (long i in lst) {\n            if (i < 0) {\n                if (maxNegative\
    \ == null || i > maxNegative) {\n                    maxNegative = i;\n      \
    \          }\n            } else {\n                if (minPositive == null ||\
    \ i < minPositive) {\n                    minPositive = i;\n                }\n\
    \            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNegative,\
    \ minPositive);", "        long? a = null;\n        long? b = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (a == null ||\
    \ i > a) {\n                    a = i;\n                }\n            } else\
    \ {\n                if (b == null || i < b) {\n                    b = i;\n \
    \               }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        long? maxNeg = null;\n        long? minPos\
    \ = null;\n        foreach (long l in lst) {\n            if (l < 0) {\n     \
    \           if (maxNeg == null || l > maxNeg) {\n                    maxNeg =\
    \ l;\n                }\n            } else {\n                if (minPos == null\
    \ || l < minPos) {\n                    minPos = l;\n                }\n     \
    \       }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg,\
    \ minPos);", "        // Write your code here\n        return null;", "      \
    \  long? min = null;\n        long? max = null;\n        foreach (var item in\
    \ lst) {\n            if (item > 0) {\n                if (min == null || item\
    \ < min) {\n                    min = item;\n                }\n            }\
    \ else if (item < 0) {\n                if (max == null || item > max) {\n   \
    \                 max = item;\n                }\n            }\n        }\n \
    \       return new Tuple<Nullable<long>, Nullable<long>>(max, min);", "      \
    \  long? a = null;\n        long? b = null;\n        foreach (long i in lst) {\n\
    \            if (i < 0) {\n                if (a == null || i > a) {\n       \
    \             a = i;\n                }\n            } else {\n              \
    \  if (b == null || i < b) {\n                    b = i;\n                }\n\
    \            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        // Write your code here\n        long? maxNeg = null;\n     \
    \   long? minPos = null;\n        foreach (long l in lst) {\n            if (l\
    \ < 0) {\n                if (maxNeg == null || l > maxNeg) {\n              \
    \      maxNeg = l;\n                }\n            } else {\n                if\
    \ (minPos == null || l < minPos) {\n                    minPos = l;\n        \
    \        }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        long? min = null;\n        long?\
    \ max = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n \
    \               if (max == null || i > max) {\n                    max = i;\n\
    \                }\n            } else {\n                if (min == null || i\
    \ < min) {\n                    min = i;\n                }\n            }\n \
    \       }\n        return new Tuple<Nullable<long>, Nullable<long>>(max, min);",
  "        long? a = null;\n        long? b = null;\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                if (a == null || i > a) {\n   \
    \                 a = i;\n                }\n            } else {\n          \
    \      if (b == null || i < b) {\n                    b = i;\n               \
    \ }\n            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        // Write your code here\n        long? a = null;\n        long?\
    \ b = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n   \
    \             if (a == null || i > a) {\n                    a = i;\n        \
    \        }\n            } else {\n                if (b == null || i < b) {\n\
    \                    b = i;\n                }\n            }\n        }\n   \
    \     return new Tuple<Nullable<long>, Nullable<long>>(a, b);", "        // Write\
    \ your code here\n        long? maxNegative = null;\n        long? minPositive\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (maxNegative == null || i > maxNegative) {\n                  \
    \  maxNegative = i;\n                }\n            } else {\n               \
    \ if (minPositive == null || i < minPositive) {\n                    minPositive\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNegative, minPositive);", "        // Write your code here\n\
    \        long? a = null;\n        long? b = null;\n        foreach (long i in\
    \ lst) {\n            if (i < 0) {\n                if (a == null || i > a) {\n\
    \                    a = i;\n                }\n            } else {\n       \
    \         if (b == null || i < b) {\n                    b = i;\n            \
    \    }\n            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        // Write your code here\n        long? maxNeg = null;\n     \
    \   long? minPos = null;\n        foreach (var item in lst) {\n            if\
    \ (item < 0) {\n                if (maxNeg == null || item > maxNeg) {\n     \
    \               maxNeg = item;\n                }\n            } else {\n    \
    \            if (minPos == null || item < minPos) {\n                    minPos\
    \ = item;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        // Write your code here\n      \
    \  long? maxNeg = null;\n        long? minPos = null;\n        foreach (var item\
    \ in lst) {\n            if (item < 0) {\n                if (maxNeg == null ||\
    \ item > maxNeg) {\n                    maxNeg = item;\n                }\n  \
    \          } else {\n                if (minPos == null || item < minPos) {\n\
    \                    minPos = item;\n                }\n            }\n      \
    \  }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largestNegative, smallestPositive);", "        long? min = null;\n\
    \        long? max = null;\n        foreach (var x in lst) {\n            if (x\
    \ < 0) {\n                if (max == null || x > max) {\n                    max\
    \ = x;\n                }\n            } else {\n                if (min == null\
    \ || x < min) {\n                    min = x;\n                }\n           \
    \ }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        // your code here\n        long? maxNeg = null;\n        long?\
    \ minPos = null;\n        foreach (long num in lst) {\n            if (num < 0)\
    \ {\n                if (maxNeg == null || num > maxNeg) {\n                 \
    \   maxNeg = num;\n                }\n            } else {\n                if\
    \ (minPos == null || num < minPos) {\n                    minPos = num;\n    \
    \            }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        long? maxNeg = null;\n        long?\
    \ minPos = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n\
    \                if (maxNeg == null || i > maxNeg) {\n                    maxNeg\
    \ = i;\n                }\n            } else {\n                if (minPos ==\
    \ null || i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(maxNeg,\
    \ minPos);", "        // Write your code here\n        long max = long.MinValue;\n\
    \        long min = long.MaxValue;\n        foreach (long i in lst) {\n      \
    \      if (i < 0 && i > max) {\n                max = i;\n            }\n    \
    \        if (i > 0 && i < min) {\n                min = i;\n            }\n  \
    \      }\n        if (max == long.MinValue) {\n            max = (long)null;\n\
    \        }\n        if (min == long.MaxValue) {\n            min = (long)null;\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(max, min);",
  "        // Write your code here\n        long? largestNegative = null;\n      \
    \  long? smallestPositive = null;\n        foreach (long num in lst) {\n     \
    \       if (num < 0) {\n                if (largestNegative == null || num > largestNegative)\
    \ {\n                    largestNegative = num;\n                }\n         \
    \   } else {\n                if (smallestPositive == null || num < smallestPositive)\
    \ {\n                    smallestPositive = num;\n                }\n        \
    \    }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        // Your code goes here\n        long? maxNeg =\
    \ null;\n        long? minPos = null;\n        foreach (long i in lst) {\n   \
    \         if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n\
    \                    maxNeg = i;\n                }\n            } else {\n  \
    \              if (minPos == null || i < minPos) {\n                    minPos\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        long? a = null;\n        long? b\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (a == null || i > a) {\n                    a = i;\n          \
    \      }\n            } else {\n                if (b == null || i < b) {\n  \
    \                  b = i;\n                }\n            }\n        }\n     \
    \   return new Tuple<Nullable<long>, Nullable<long>>(a, b);", "        long? maxNeg\
    \ = null;\n        long? minPos = null;\n        foreach (long i in lst) {\n \
    \           if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n\
    \                    maxNeg = i;\n                }\n            } else {\n  \
    \              if (minPos == null || i < minPos) {\n                    minPos\
    \ = i;\n                }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        // Write your code here\n      \
    \  long? a = null;\n        long? b = null;\n        foreach (var item in lst)\n\
    \        {\n            if (item < 0)\n            {\n                if (a ==\
    \ null)\n                {\n                    a = item;\n                }\n\
    \                else\n                {\n                    if (item > a)\n\
    \                    {\n                        a = item;\n                  \
    \  }\n                }\n            }\n            else\n            {\n    \
    \            if (b == null)\n                {\n                    b = item;\n\
    \                }\n                else\n                {\n                \
    \    if (item < b)\n                    {\n                        b = item;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(a, b);", "        // Write your code\
    \ here\n        long? maxNeg = null;\n        long? minPos = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (maxNeg == null\
    \ || i > maxNeg) {\n                    maxNeg = i;\n                }\n     \
    \       } else {\n                if (minPos == null || i < minPos) {\n      \
    \              minPos = i;\n                }\n            }\n        }\n    \
    \    return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "   \
    \     long? a = null;\n        long? b = null;\n        foreach (long x in lst)\
    \ {\n            if (x < 0) {\n                if (a == null || x > a) {\n   \
    \                 a = x;\n                }\n            } else {\n          \
    \      if (b == null || x < b) {\n                    b = x;\n               \
    \ }\n            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        long? maxNeg = null;\n        long? minPos = null;\n        foreach\
    \ (long x in lst) {\n            if (x < 0) {\n                if (maxNeg == null\
    \ || x > maxNeg) {\n                    maxNeg = x;\n                }\n     \
    \       } else {\n                if (minPos == null || x < minPos) {\n      \
    \              minPos = x;\n                }\n            }\n        }\n    \
    \    return new Tuple<Nullable<long>, Nullable<long>>(maxNeg, minPos);", "   \
    \     long? a = null;\n        long? b = null;\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                if (a == null || i > a) {\n   \
    \                 a = i;\n                }\n            } else {\n          \
    \      if (b == null || i < b) {\n                    b = i;\n               \
    \ }\n            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a,\
    \ b);", "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long min = lst[0];\n      \
    \  long max = lst[0];\n        foreach (long i in lst) {\n            if (i <\
    \ min) {\n                min = i;\n            }\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        long? min = null;\n        long? max =\
    \ null;\n        foreach (var item in lst) {\n            if (item > 0) {\n  \
    \              if (min == null || item < min) {\n                    min = item;\n\
    \                }\n            } else if (item < 0) {\n                if (max\
    \ == null || item > max) {\n                    max = item;\n                }\n\
    \            }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        // your code here\n        return null;", "        // Write\
    \ your code here\n        return null;", "        long? maxNeg = null;\n     \
    \   long? minPos = null;\n        foreach (long x in lst) {\n            if (x\
    \ < 0) {\n                if (maxNeg == null || x > maxNeg) {\n              \
    \      maxNeg = x;\n                }\n            } else {\n                if\
    \ (minPos == null || x < minPos) {\n                    minPos = x;\n        \
    \        }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);", "        long? min = null;\n        long?\
    \ max = null;\n        foreach (long i in lst) {\n            if (i > 0) {\n \
    \               if (min == null || i < min) {\n                    min = i;\n\
    \                }\n            } else if (i < 0) {\n                if (max ==\
    \ null || i > max) {\n                    max = i;\n                }\n      \
    \      }\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        // Write your code here\n        long? maxNeg = null;\n   \
    \     long? minPos = null;\n        foreach (long i in lst) {\n            if\
    \ (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n           \
    \         maxNeg = i;\n                }\n            } else {\n             \
    \   if (minPos == null || i < minPos) {\n                    minPos = i;\n   \
    \             }\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(maxNeg, minPos);"]
stop_tokens:
- "\n    }\n"
