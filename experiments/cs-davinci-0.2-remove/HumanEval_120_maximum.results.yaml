language: cs
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new Heap<long>(arr,\
    \ (a, b) => a > b);\n        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.Remove());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp51tw8ub_.cs(20,27): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // The idea is to use a min-heap to store the k largest elements.\n\
    \        // The heap will be sorted by the smallest element.\n        // We will\
    \ iterate through the array and add each element to the heap.\n        // If the\
    \ heap is full, we will remove the smallest element in the heap.\n        // This\
    \ will ensure that the heap will always contain the k largest elements.\n    \
    \    // We will then return the heap as a list.\n        var heap = new Heap<long>(k,\
    \ (a, b) => a < b);\n        foreach (var item in arr) {\n            heap.Add(item);\n\
    \        }\n        return heap.ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptygo8hno.cs(25,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return null;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap(arr);\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.ExtractMax());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy4f8fzzu.cs(20,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement this function\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7daea16cebfc44d0b0348ee5c8e8e508>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7daea16cebfc44d0b0348ee5c8e8e508>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return null;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var max = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            max.Add(arr[i]);\n       \
    \ }\n        for (int i = k; i < arr.Count; i++) {\n            if (arr[i] > max[0])\
    \ {\n                max[0] = arr[i];\n                for (int j = 1; j < k;\
    \ j++) {\n                    if (max[j] < max[j - 1]) {\n                   \
    \     var temp = max[j];\n                        max[j] = max[j - 1];\n     \
    \                   max[j - 1] = temp;\n                    }\n              \
    \  }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp17rucqag.cs(24,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n)\n        // Space: O(n)\n        var result = new List<long>();\n\
    \        var maxHeap = new MaxHeap();\n        foreach (var num in arr) {\n  \
    \          maxHeap.Insert(num);\n            if (maxHeap.Count > k) {\n      \
    \          maxHeap.Remove();\n            }\n        }\n        while (maxHeap.Count\
    \ > 0) {\n            result.Add(maxHeap.Remove());\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxv0uytpy.cs(22,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpxv0uytpy.cs(25,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''long''

    /tmp/tmpxv0uytpy.cs(29,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var maxHeap = new MaxHeap<long>(k);\n        foreach (var x in arr)\
    \ {\n            maxHeap.Insert(x);\n        }\n        return maxHeap.ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplc7d6y9f.cs(19,27): error CS0246: The type or namespace name ''MaxHeap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <31cc51331b2442a3820f7d9aa5f72ee2>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <31cc51331b2442a3820f7d9aa5f72ee2>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort();\n   \
    \     arr.Reverse();\n        // Return the first k elements.\n        return\
    \ arr.GetRange(0, (int)k);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <194fe82d43b64e0ebd7e02e8efce1795>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <194fe82d43b64e0ebd7e02e8efce1795>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort();\n   \
    \     arr.Reverse();\n        // Return the first k elements.\n        return\
    \ arr.GetRange(0, (int)k);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <194fe82d43b64e0ebd7e02e8efce1795>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <194fe82d43b64e0ebd7e02e8efce1795>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap(k);\n\
    \        foreach (var item in arr) {\n            maxHeap.Insert(item);\n    \
    \    }\n        while (maxHeap.Count > 0) {\n            result.Add(maxHeap.ExtractMax());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpguus0uyj.cs(20,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpguus0uyj.cs(24,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        List<long> result = new List<long>();\n        if (arr.Count == 0)\
    \ {\n            return result;\n        }\n        if (arr.Count == 1) {\n  \
    \          result.Add(arr[0]);\n            return result;\n        }\n      \
    \  if (arr.Count == 2) {\n            if (k == 1) {\n                result.Add(Math.Max(arr[0],\
    \ arr[1]));\n            } else {\n                result.Add(arr[0]);\n     \
    \           result.Add(arr[1]);\n            }\n            return result;\n \
    \       }\n        if (k == 1) {\n            result.Add(arr.Max());\n       \
    \     return result;\n        }\n        if (k == arr.Count) {\n            result\
    \ = arr;\n            result.Sort();\n            return result;\n        }\n\
    \        // Find the median of the array.\n        long median = arr[arr.Count\
    \ / 2];\n        // Partition the array into three parts:\n        // 1. arr[0]\
    \ ... arr[i - 1] < median\n        // 2. arr[i] ... arr[j - 1] == median\n   \
    \     // 3. arr[j] ... arr[arr.Count - 1] > median\n        long i = 0;\n    \
    \    long j = arr.Count;\n        for (long p = 0; p < j;) {\n            if (arr[p]\
    \ < median) {\n                long temp = arr[p];\n                arr[p] = arr[i];\n\
    \                arr[i] = temp;\n                i++;\n                p++;\n\
    \            } else if (arr[p] == median) {\n                p++;\n          \
    \  } else {\n                j--;\n                long temp = arr[p];\n     \
    \           arr[p] = arr[j];\n                arr[j] = temp;\n            }\n\
    \        }\n        // If k <= i, then the k maximum numbers are in the first\
    \ part.\n        if (k <= i) {\n            return Maximum(arr.GetRange(0, (int)i),\
    \ k);\n        }\n        // If k > j, then the k maximum numbers are in the third\
    \ part.\n        if (k > j) {\n            return Maximum(arr\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpau_4rtqb.cs(75,31): error CS1026: ) expected

    /tmp/tmpau_4rtqb.cs(75,31): error CS1002: ; expected

    /tmp/tmpau_4rtqb.cs(77,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpau_4rtqb.cs(91,2): error CS1513: } expected

    '
  timestamp: 1660015749
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n * log(n))\n        // Space: O(n)\n        var sorted\
    \ = arr.OrderByDescending(x => x).ToList();\n        return sorted.Take((int)k).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fde0e639610c45398f4cf52927af0ec6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fde0e639610c45398f4cf52927af0ec6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Write your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <f6a3010dbf6c4c758b3762506697ec8e>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <f6a3010dbf6c4c758b3762506697ec8e>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort((a, b) =>\
    \ b.CompareTo(a));\n        // Return the first k elements.\n        return arr.Take((int)k).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement this method\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c617a5ca72344d0b1439901639763d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c617a5ca72344d0b1439901639763d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // The idea is to use a heap to keep track of the maximum k numbers.\n\
    \        // The heap is a min heap, so the smallest number is at the top.\n  \
    \      // The heap is initialized with the first k numbers in the array.\n   \
    \     // Then, for each number in the array, if the number is larger than the\
    \ \n        // smallest number in the heap, then the smallest number is removed\
    \ and \n        // the new number is added to the heap.\n        // The heap is\
    \ then sorted, and the sorted heap is returned.\n        // The time complexity\
    \ is O(n log k) and the space complexity is O(k).\n        var heap = new Heap<long>(k);\n\
    \        for (int i = 0; i < k; i++) {\n            heap.Add(arr[i]);\n      \
    \  }\n        for (int i = k; i < arr.Count; i++) {\n            if (arr[i] >\
    \ heap.Peek()) {\n                heap.Remove();\n                heap.Add(arr[i]);\n\
    \            }\n        }\n        return heap.Sort();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6jdjwgj.cs(27,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpu6jdjwgj.cs(31,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        List<long> result = new List<long>();\n        if (arr.Count == 0)\
    \ return result;\n        if (arr.Count == 1) {\n            result.Add(arr[0]);\n\
    \            return result;\n        }\n        List<long> sorted = new List<long>();\n\
    \        sorted.Add(arr[0]);\n        for (int i = 1; i < arr.Count; i++) {\n\
    \            int j = 0;\n            while (j < sorted.Count && sorted[j] > arr[i])\
    \ j++;\n            sorted.Insert(j, arr[i]);\n        }\n        for (int i =\
    \ 0; i < k; i++) {\n            result.Add(sorted[i]);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7d3087c463c467faad1e7c2d710c469>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7d3087c463c467faad1e7c2d710c469>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap();\n\
    \        foreach (var item in arr) {\n            maxHeap.Insert(item);\n    \
    \    }\n        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.ExtractMax());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8q4uwb4n.cs(20,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var res = new List<long>();\n        var pq = new PriorityQueue<long>();\n\
    \        foreach (var i in arr) {\n            pq.Enqueue(i);\n            if\
    \ (pq.Count > k) {\n                pq.Dequeue();\n            }\n        }\n\
    \        while (pq.Count > 0) {\n            res.Add(pq.Dequeue());\n        }\n\
    \        res.Reverse();\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdxzjw568.cs(20,22): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpdxzjw568.cs(23,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''long''

    /tmp/tmpdxzjw568.cs(27,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // O(n log k)\n        // Use a min-heap of size k.\n        // For\
    \ each element in arr, if it is greater than the top of the heap,\n        //\
    \ remove the top of the heap and add the element.\n        // Return the heap.\n\
    \        var heap = new Heap<long>(k, (a, b) => a < b);\n        foreach (var\
    \ x in arr) {\n            if (heap.Count < k) {\n                heap.Add(x);\n\
    \            } else if (x > heap.Peek()) {\n                heap.Remove();\n \
    \               heap.Add(x);\n            }\n        }\n        return heap.ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6yrmp0zd.cs(24,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp6yrmp0zd.cs(26,17): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''method group'' and ''long''

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return null;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return null;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort((a, b) =>\
    \ b.CompareTo(a));\n        // Return the first k elements.\n        return arr.Take((int)k).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort((a, b) =>\
    \ b.CompareTo(a));\n        // Return the first k elements.\n        return arr.Take((int)k).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // We can use a heap to solve this problem.\n        // The heap\
    \ will store the k largest elements.\n        // We can then iterate through the\
    \ array, adding each element to the heap.\n        // If the heap is full, we\
    \ will remove the smallest element in the heap.\n        // This will ensure that\
    \ the heap only contains the k largest elements.\n        // We can then return\
    \ the heap as a sorted list.\n        // This algorithm will take O(n log k) time\
    \ and O(k) space.\n        var heap = new Heap<long>(k);\n        foreach (var\
    \ item in arr) {\n            heap.Add(item);\n        }\n        return heap.ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcmvzaoze.cs(26,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var heap = new Heap<long>(arr);\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(heap.Pop());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzf_mgwa0.cs(20,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time Complexity: O(n log n)\n        // Space Complexity: O(n)\n\
    \        arr.Sort();\n        arr.Reverse();\n        return arr.Take((int)k).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ecc770e2bc284cddaf9acd5390948781>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ecc770e2bc284cddaf9acd5390948781>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap();\n\
    \        foreach (var n in arr) {\n            maxHeap.Insert(n);\n        }\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.ExtractMax());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpull43m2f.cs(20,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n)\n        // Space: O(n)\n        var result = new List<long>();\n\
    \        var pq = new PriorityQueue<long>();\n        foreach (var num in arr)\
    \ {\n            pq.Enqueue(num);\n            if (pq.Count > k) {\n         \
    \       pq.Dequeue();\n            }\n        }\n        while (pq.Count > 0)\
    \ {\n            result.Add(pq.Dequeue());\n        }\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2sycom97.cs(22,22): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp2sycom97.cs(25,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''long''

    /tmp/tmp2sycom97.cs(29,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // return arr.OrderByDescending(x => x).Take((int)k).ToList();\n\
    \        // return arr.OrderByDescending(x => x).Take((int)k).ToList();\n    \
    \    // return arr.OrderByDescending(x => x).Take((int)k).ToList();\n        //\
    \ return arr.OrderByDescending(x => x).Take((int)k).ToList();\n        // return\
    \ arr.OrderByDescending(x => x).Take((int)k).ToList();\n        // return arr.OrderByDescending(x\
    \ => x).Take((int)k).ToList();\n        // return arr.OrderByDescending(x => x).Take((int)k).ToList();\n\
    \        // return arr.OrderByDescending(x => x).Take((int)k).ToList();\n    \
    \    // return arr.OrderByDescending(x => x).Take((int)k).ToList();\n        //\
    \ return arr.OrderByDescending(x => x).Take((int)k).ToList();\n        // return\
    \ arr.OrderByDescending(x => x).Take((int)k).ToList();\n        // return arr.OrderByDescending(x\
    \ => x).Take((int)k).ToList();\n        // return arr.OrderByDescending(x => x).Take((int)k).ToList();\n\
    \        // return arr.OrderByDescending(x => x).Take((int)k).ToList();\n    \
    \    // return arr.OrderByDescending(x => x).Take((int)k).ToList();\n        //\
    \ return arr.OrderByDescending(x => x).Take((int)k).ToList();\n        // return\
    \ arr.OrderByDescending(x => x).Take((int)k).ToList();\n        // return arr.OrderByDescending(x\
    \ => x).Take((int)k).ToList();\n        // return arr.OrderByDescending(x => x).Take((int)k).ToList();\n\
    \        // return arr.OrderByDescending(x => x).Take((int)k).ToList();\n    \
    \    // return arr.OrderByDescending(x => x).Take((int)k).ToList();\n        //\
    \ return arr.OrderBy\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxg641je3.cs(18,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO:\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e61ab8cd3d5d44229c8bb19407015690>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e61ab8cd3d5d44229c8bb19407015690>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here.\n        return null;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <2e05a2e9e7ff4b8097ffbb66b06dba6a>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <2e05a2e9e7ff4b8097ffbb66b06dba6a>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // O(n log n) time, O(n) space\n        // Sort the array in descending\
    \ order, then return the first k elements.\n        arr.Sort((a, b) => b.CompareTo(a));\n\
    \        return arr.Take((int)k).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18a2eb7a7cf4cd98bc5eb4188c285cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c18a2eb7a7cf4cd98bc5eb4188c285cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement me\n        return new List<long>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <235e24b43b4946eb85e16f7277f26986>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <235e24b43b4946eb85e16f7277f26986>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time Complexity: O(n)\n        // Space Complexity: O(n)\n   \
    \     var result = new List<long>();\n        var maxHeap = new MaxHeap();\n \
    \       foreach (var item in arr) {\n            maxHeap.Insert(item);\n     \
    \   }\n        for (var i = 0; i < k; i++) {\n            result.Add(maxHeap.ExtractMax());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpneglx9v2.cs(22,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement this\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <1f3b4cb4ba36485699f4dbab48dd6b49>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <1f3b4cb4ba36485699f4dbab48dd6b49>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        if (arr.Count == 0) {\n \
    \           return result;\n        }\n        var maxHeap = new MaxHeap(arr);\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.Pop());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbg5898ce.cs(23,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap(k);\n\
    \        foreach (var item in arr) {\n            maxHeap.Insert(item);\n    \
    \    }\n        while (maxHeap.Count > 0) {\n            result.Add(maxHeap.ExtractMax());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpguus0uyj.cs(20,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpguus0uyj.cs(24,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap(arr);\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.Pop());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_tcux56j.cs(20,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var max = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            max.Add(long.MinValue);\n\
    \        }\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > max[0]) {\n                max[0] = arr[i];\n                max.Sort();\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b8bfa4728c4574bfd8f42a87281954>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7b8bfa4728c4574bfd8f42a87281954>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // The idea is to use a max heap to keep track of the k largest elements.\n\
    \        // We start by inserting the first k elements into the heap.\n      \
    \  // Then, for each element after that, we check if it is larger than the smallest\n\
    \        // element in the heap. If it is, we remove the smallest element and\
    \ insert the\n        // new element.\n        // We can use a max heap to keep\
    \ track of the largest elements.\n        // We can use a min heap to keep track\
    \ of the smallest elements.\n        // We can use a priority queue to keep track\
    \ of the largest elements.\n        // We can use a priority queue to keep track\
    \ of the smallest elements.\n        // We can use a max heap to keep track of\
    \ the largest elements.\n        // We can use a min heap to keep track of the\
    \ smallest elements.\n        // We can use a priority queue to keep track of\
    \ the largest elements.\n        // We can use a priority queue to keep track\
    \ of the smallest elements.\n        // We can use a max heap to keep track of\
    \ the largest elements.\n        // We can use a min heap to keep track of the\
    \ smallest elements.\n        // We can use a priority queue to keep track of\
    \ the largest elements.\n        // We can use a priority queue to keep track\
    \ of the smallest elements.\n        // We can use a max heap to keep track of\
    \ the largest elements.\n        // We can use a min heap to keep track of the\
    \ smallest elements.\n        // We can use a priority queue to keep track of\
    \ the largest elements.\n        // We can use a priority queue to keep track\
    \ of the smallest elements.\n        // We can use a max heap to keep track of\
    \ the largest elements.\n        // We can use a min heap to keep track of the\
    \ smallest elements.\n        // We can use a priority queue to keep track of\
    \ the largest elements.\n        // We can use a priority queue to keep track\
    \ of the smallest elements.\n        // We can use a max heap to keep track of\
    \ the largest elements.\n        // We can use a min heap to keep track of the\
    \ smallest elements.\n        // We can use a priority queue to keep track of\
    \ the largest elements.\n        // We can use a priority queue to keep track\
    \ of the smallest elements.\n        // We can use a max heap to keep track of\
    \ the largest elements.\n        // We can use\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphjnag9p3.cs(18,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO:\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <6d5b2604c7aa471c95f319dbcae336a3>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <6d5b2604c7aa471c95f319dbcae336a3>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var heap = new Heap<long>(arr,\
    \ k);\n        while (heap.Count > 0) {\n            result.Add(heap.Pop());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptxoaacbg.cs(20,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmptxoaacbg.cs(21,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // The idea is to use a min-heap to store the k largest elements.\n\
    \        // The heap will be initialized with the first k elements of the array.\n\
    \        // Then, for each element in the array, we will check if it is larger\
    \ than the root of the heap.\n        // If it is, we will remove the root and\
    \ add the element to the heap.\n        // The heap will always contain the k\
    \ largest elements.\n        // The heap will be sorted in ascending order.\n\
    \        // The root of the heap will be the smallest of the k largest elements.\n\
    \        // The heap will be implemented as an array.\n        // The heap will\
    \ be implemented as a min-heap.\n        // The heap will be implemented as a\
    \ complete binary tree.\n        // The heap will be implemented as a balanced\
    \ binary tree.\n        // The heap will be implemented as a binary tree where\
    \ the parent is smaller than both children.\n        // The heap will be implemented\
    \ as a binary tree where the parent is smaller than both children.\n        //\
    \ The heap will be implemented as a binary tree where the parent is smaller than\
    \ both children.\n        // The heap will be implemented as a binary tree where\
    \ the parent is smaller than both children.\n        // The heap will be implemented\
    \ as a binary tree where the parent is smaller than both children.\n        //\
    \ The heap will be implemented as a binary tree where the parent is smaller than\
    \ both children.\n        // The heap will be implemented as a binary tree where\
    \ the parent is smaller than both children.\n        // The heap will be implemented\
    \ as a binary tree where the parent is smaller than both children.\n        //\
    \ The heap will be implemented as a binary tree where the parent is smaller than\
    \ both children.\n        // The heap will be implemented as a binary tree where\
    \ the parent is smaller than both children.\n        // The heap will be implemented\
    \ as a binary tree where the parent is smaller than both children.\n        //\
    \ The heap will be implemented as a binary tree where the parent is smaller than\
    \ both children.\n        // The heap will be implemented as a binary tree where\
    \ the parent is smaller than both children.\n        // The heap will be implemented\
    \ as a binary tree where the parent is smaller than both children.\n        //\
    \ The heap will be implemented as a binary tree where the parent is smaller than\
    \ both children.\n        // The heap will be implemented as a binary tree where\
    \ the parent is\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu_ogfdcd.cs(18,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var max = new List<long>();\n        for (int i = 0; i < k; i++)\
    \ {\n            max.Add(arr[i]);\n        }\n        max.Sort();\n        for\
    \ (int i = k; i < arr.Count; i++) {\n            if (arr[i] > max[0]) {\n    \
    \            max[0] = arr[i];\n                max.Sort();\n            }\n  \
    \      }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc3y_tsyn.cs(24,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var max = new List<long>();\n        for (int i = 0; i < k; i++)\
    \ {\n            max.Add(arr[i]);\n        }\n        max.Sort();\n        for\
    \ (int i = k; i < arr.Count; i++) {\n            if (arr[i] > max[0]) {\n    \
    \            max[0] = arr[i];\n                max.Sort();\n            }\n  \
    \      }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc3y_tsyn.cs(24,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement me\n        return new List<long>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <235e24b43b4946eb85e16f7277f26986>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <235e24b43b4946eb85e16f7277f26986>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var heap = new Heap<long>(arr);\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(heap.Pop());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzf_mgwa0.cs(20,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var minHeap = new MinHeap();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (minHeap.Count\
    \ < k) {\n                minHeap.Add(arr[i]);\n            } else {\n       \
    \         if (arr[i] > minHeap.Peek()) {\n                    minHeap.Remove();\n\
    \                    minHeap.Add(arr[i]);\n                }\n            }\n\
    \        }\n        while (minHeap.Count > 0) {\n            result.Add(minHeap.Remove());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw6i7z10.cs(20,27): error CS0246: The type or namespace name ''MinHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmptw6i7z10.cs(22,17): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''method group'' and ''long''

    /tmp/tmptw6i7z10.cs(31,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return null;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap();\n\
    \        foreach (var num in arr) {\n            maxHeap.Insert(num);\n      \
    \  }\n        for (var i = 0; i < k; i++) {\n            result.Add(maxHeap.ExtractMax());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdqd834vp.cs(20,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return null;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort();\n   \
    \     arr.Reverse();\n        // Return the first k elements.\n        return\
    \ arr.GetRange(0, (int)k);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <194fe82d43b64e0ebd7e02e8efce1795>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <194fe82d43b64e0ebd7e02e8efce1795>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90e091bb416c496088dfeb1ec6667e08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90e091bb416c496088dfeb1ec6667e08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement me\n        return new List<long>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <235e24b43b4946eb85e16f7277f26986>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <235e24b43b4946eb85e16f7277f26986>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n)\n        // Space: O(n)\n        // Heap\n        var\
    \ heap = new Heap<long>(arr, (a, b) => a > b);\n        var result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(heap.Pop());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj7vxiivp.cs(22,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <c85fa1759e4942a3a3915cf391f01b92>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <c85fa1759e4942a3a3915cf391f01b92>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // O(n) time, O(k) space\n        // Use a heap to keep track of\
    \ the k largest elements\n        var heap = new Heap<long>(k);\n        foreach\
    \ (var num in arr) {\n            if (heap.Count < k) {\n                heap.Add(num);\n\
    \            } else if (num > heap.Peek()) {\n                heap.Remove();\n\
    \                heap.Add(num);\n            }\n        }\n        return heap.ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnk733rbq.cs(21,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpnk733rbq.cs(23,17): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''method group'' and ''long''

    '
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort();\n   \
    \     arr.Reverse();\n        // Return the first k elements.\n        return\
    \ arr.GetRange(0, (int)k);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <194fe82d43b64e0ebd7e02e8efce1795>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <194fe82d43b64e0ebd7e02e8efce1795>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // We can use a max heap to solve this problem.\n        // We can\
    \ use a min heap to solve this problem.\n        // We can use a max heap to solve\
    \ this problem.\n        // We can use a min heap to solve this problem.\n   \
    \     // We can use a max heap to solve this problem.\n        // We can use a\
    \ min heap to solve this problem.\n        // We can use a max heap to solve this\
    \ problem.\n        // We can use a min heap to solve this problem.\n        //\
    \ We can use a max heap to solve this problem.\n        // We can use a min heap\
    \ to solve this problem.\n        // We can use a max heap to solve this problem.\n\
    \        // We can use a min heap to solve this problem.\n        // We can use\
    \ a max heap to solve this problem.\n        // We can use a min heap to solve\
    \ this problem.\n        // We can use a max heap to solve this problem.\n   \
    \     // We can use a min heap to solve this problem.\n        // We can use a\
    \ max heap to solve this problem.\n        // We can use a min heap to solve this\
    \ problem.\n        // We can use a max heap to solve this problem.\n        //\
    \ We can use a min heap to solve this problem.\n        // We can use a max heap\
    \ to solve this problem.\n        // We can use a min heap to solve this problem.\n\
    \        // We can use a max heap to solve this problem.\n        // We can use\
    \ a min heap to solve this problem.\n        // We can use a max heap to solve\
    \ this problem.\n        // We can use a min heap to solve this problem.\n   \
    \     // We can use a max heap to solve this problem.\n        // We can use a\
    \ min heap to solve this problem.\n        // We can use a max heap to solve this\
    \ problem.\n        // We can use a min heap to solve this problem.\n        //\
    \ We can use a max heap to solve this problem.\n        // We can use a min heap\
    \ to solve this problem.\n        // We can use a max heap to solve this problem.\n\
    \        // We can use a min heap to solve this problem.\n        // We can use\
    \ a max heap to solve this problem.\n        // We can use a min heap to solve\
    \ this problem.\n        // We can use a max\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5sv0vb6j.cs(18,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap();\n\
    \        foreach (var item in arr) {\n            maxHeap.Insert(item);\n    \
    \    }\n        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.ExtractMax());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8q4uwb4n.cs(20,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return null;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return null;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return null;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap();\n\
    \        foreach (var item in arr) {\n            maxHeap.Insert(item);\n    \
    \    }\n        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.ExtractMax());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8q4uwb4n.cs(20,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n)\n        // Space: O(n)\n        var pq = new PriorityQueue<long>();\n\
    \        foreach (var a in arr) {\n            pq.Enqueue(a);\n            if\
    \ (pq.Count > k) {\n                pq.Dequeue();\n            }\n        }\n\
    \        return pq.ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyy0ld769.cs(21,22): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpyy0ld769.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''long''

    '
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return null;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // The idea is to use a heap to store the k largest elements.\n \
    \       // We start by inserting the first k elements into the heap.\n       \
    \ // Then, for each element after that, we check if it is larger than the smallest\
    \ element in the heap.\n        // If it is, we remove the smallest element and\
    \ insert the new element.\n        // This will ensure that the heap always contains\
    \ the k largest elements.\n        // We can then return the heap as a list.\n\
    \        // The time complexity is O(n log k) and the space complexity is O(k).\n\
    \        var heap = new Heap<long>(k);\n        for (int i = 0; i < k; i++) {\n\
    \            heap.Insert(arr[i]);\n        }\n        for (int i = k; i < arr.Count;\
    \ i++) {\n            if (arr[i] > heap.Peek()) {\n                heap.Remove();\n\
    \                heap.Insert(arr[i]);\n            }\n        }\n        return\
    \ heap.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuzn27mem.cs(26,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpuzn27mem.cs(30,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        // TODO: Implement your solution\
    \ here\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9b2b2bce04e4892b654768c328e5be3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9b2b2bce04e4892b654768c328e5be3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n log k)\n        // Space: O(k)\n        var maxHeap\
    \ = new SortedSet<long>(Comparer<long>.Create((a, b) => b.CompareTo(a)));\n  \
    \      foreach (var x in arr) {\n            maxHeap.Add(x);\n            if (maxHeap.Count\
    \ > k) {\n                maxHeap.Remove(maxHeap.Min);\n            }\n      \
    \  }\n        return maxHeap.ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b652e8da6a54731bc4fe36178ea0566>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b652e8da6a54731bc4fe36178ea0566>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <c85fa1759e4942a3a3915cf391f01b92>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <c85fa1759e4942a3a3915cf391f01b92>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap<long>(arr);\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.Pop());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4hbph7rt.cs(20,27): error CS0246: The type or namespace name ''MaxHeap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n*log(n))\n        // Space: O(n)\n        // arr.Sort();\n\
    \        // arr.Reverse();\n        // return arr.Take((int)k).ToList();\n   \
    \     // Time: O(n*log(k))\n        // Space: O(k)\n        var heap = new Heap<long>(k);\n\
    \        foreach (var x in arr) {\n            heap.Push(x);\n        }\n    \
    \    return heap.ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv17shn_n.cs(26,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap();\n\
    \        foreach (var item in arr) {\n            maxHeap.Insert(item);\n    \
    \    }\n        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.RemoveMax());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnb1aevbm.cs(20,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO:\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <6d5b2604c7aa471c95f319dbcae336a3>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <6d5b2604c7aa471c95f319dbcae336a3>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort((a, b) =>\
    \ b.CompareTo(a));\n        // Return the first k elements.\n        return arr.Take((int)k).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time Complexity: O(n log n)\n        // Space Complexity: O(n)\n\
    \        arr.Sort();\n        return arr.GetRange((int)(arr.Count - k), (int)k);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4b737b67d1c4de9b847cda3c4c302ee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4b737b67d1c4de9b847cda3c4c302ee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time Complexity: O(n log n)\n        // Space Complexity: O(n)\n\
    \        var sorted = arr.OrderByDescending(x => x).ToList();\n        return\
    \ sorted.Take((int)k).ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b83ce9b82724493da027e13c0149ecb0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b83ce9b82724493da027e13c0149ecb0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // We can use a max heap to solve this problem.\n        // The max\
    \ heap will store the k largest elements.\n        // We will iterate through\
    \ the array and add each element to the heap.\n        // If the heap has more\
    \ than k elements, we will remove the smallest element.\n        // After we have\
    \ iterated through the array, we will return the elements in the heap.\n     \
    \   var heap = new Heap<long>(k, (a, b) => a > b);\n        foreach (var x in\
    \ arr) {\n            heap.Add(x);\n        }\n        return heap.ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp589e8sfu.cs(24,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <31cc51331b2442a3820f7d9aa5f72ee2>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <31cc51331b2442a3820f7d9aa5f72ee2>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort((a, b) =>\
    \ b.CompareTo(a));\n        // Return the first k elements.\n        return arr.Take((int)k).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var max = new List<long>();\n        var pq = new PriorityQueue<long>(arr.Count);\n\
    \        foreach (var x in arr) {\n            pq.Push(x);\n        }\n      \
    \  while (k > 0) {\n            max.Add(pq.Pop());\n            k--;\n       \
    \ }\n        return max;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxgauvql4.cs(20,22): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n * log(n))\n        // Space: O(n)\n        // Sort the\
    \ array in descending order.\n        arr.Sort((a, b) => b.CompareTo(a));\n  \
    \      // Return the first k elements.\n        return arr.Take((int)k).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <173c6a6b2dcd4d09bf0f49cfb822204d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <173c6a6b2dcd4d09bf0f49cfb822204d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // The idea is to use a heap to store the k largest elements.\n \
    \       // The heap will be a max heap, so the largest element will be at the\
    \ top.\n        // We will iterate through the array and add each element to the\
    \ heap.\n        // If the heap is full, we will remove the smallest element from\
    \ the heap.\n        // If the heap is not full, we will add the element to the\
    \ heap.\n        // Once we have iterated through the entire array, we will return\
    \ the heap.\n        // The heap will be sorted, so we will return the heap in\
    \ reverse order.\n        // Time Complexity: O(n log k)\n        // Space Complexity:\
    \ O(k)\n        // Initialize the heap.\n        var heap = new Heap<long>(k,\
    \ (a, b) => a < b);\n        // Iterate through the array.\n        foreach (var\
    \ item in arr) {\n            // If the heap is full, remove the smallest element.\n\
    \            if (heap.Count == k) {\n                heap.Remove();\n        \
    \    }\n            // Add the element to the heap.\n            heap.Add(item);\n\
    \        }\n        // Return the heap in reverse order.\n        return heap.ToList().Reverse().ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi_gwiize.cs(29,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpi_gwiize.cs(33,17): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''method group'' and ''long''

    '
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n log k)\n        // Space: O(k)\n        var pq = new\
    \ PriorityQueue<long>(k);\n        foreach (var x in arr) {\n            if (pq.Count\
    \ < k) {\n                pq.Enqueue(x);\n            } else if (x > pq.Peek())\
    \ {\n                pq.Dequeue();\n                pq.Enqueue(x);\n         \
    \   }\n        }\n        return pq.ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo9pbkkz5.cs(21,22): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpo9pbkkz5.cs(23,17): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''method group'' and ''long''

    '
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n log k)\n        // Space: O(k)\n        // Heap\n  \
    \      var heap = new SortedSet<long>();\n        foreach (var a in arr) {\n \
    \           if (heap.Count < k) {\n                heap.Add(a);\n            }\
    \ else if (a > heap.Min) {\n                heap.Remove(heap.Min);\n         \
    \       heap.Add(a);\n            }\n        }\n        return heap.ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a0c45d683004e06901ead4b4e3b950d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a0c45d683004e06901ead4b4e3b950d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var pq = new PriorityQueue<long>();\n\
    \        foreach (var x in arr) {\n            pq.Enqueue(x);\n            if\
    \ (pq.Count > k) {\n                pq.Dequeue();\n            }\n        }\n\
    \        while (pq.Count > 0) {\n            result.Add(pq.Dequeue());\n     \
    \   }\n        result.Reverse();\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgaoe8ke0.cs(20,22): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpgaoe8ke0.cs(23,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''long''

    /tmp/tmpgaoe8ke0.cs(27,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement this\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <1f3b4cb4ba36485699f4dbab48dd6b49>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <1f3b4cb4ba36485699f4dbab48dd6b49>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // We can use a heap to solve this problem.\n        // The heap\
    \ will store the k largest elements we have seen so far.\n        // Then we can\
    \ iterate through the array and add elements to the heap.\n        // If the heap\
    \ is full, we will remove the smallest element in the heap and add the new element.\n\
    \        // At the end, we will have the k largest elements in the heap.\n   \
    \     // We can use a min heap to store the k largest elements.\n        // The\
    \ min heap will store the k smallest elements we have seen so far.\n        //\
    \ Then we can iterate through the array and add elements to the heap.\n      \
    \  // If the heap is full, we will remove the smallest element in the heap and\
    \ add the new element.\n        // At the end, we will have the k largest elements\
    \ in the heap.\n        // We can use a min heap to store the k largest elements.\n\
    \        // The min heap will store the k smallest elements we have seen so far.\n\
    \        // Then we can iterate through the array and add elements to the heap.\n\
    \        // If the heap is full, we will remove the smallest element in the heap\
    \ and add the new element.\n        // At the end, we will have the k largest\
    \ elements in the heap.\n        // We can use a min heap to store the k largest\
    \ elements.\n        // The min heap will store the k smallest elements we have\
    \ seen so far.\n        // Then we can iterate through the array and add elements\
    \ to the heap.\n        // If the heap is full, we will remove the smallest element\
    \ in the heap and add the new element.\n        // At the end, we will have the\
    \ k largest elements in the heap.\n        // We can use a min heap to store the\
    \ k largest elements.\n        // The min heap will store the k smallest elements\
    \ we have seen so far.\n        // Then we can iterate through the array and add\
    \ elements to the heap.\n        // If the heap is full, we will remove the smallest\
    \ element in the heap and add the new element.\n        // At the end, we will\
    \ have the k largest elements in the heap.\n        // We can use a min heap to\
    \ store the k largest elements.\n        // The min heap will store the k smallest\
    \ elements we have seen so far.\n        // Then we can iterate through the array\
    \ and\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf8o37cw3.cs(18,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n log k)\n        // Space: O(k)\n        var pq = new\
    \ PriorityQueue<long>(k);\n        foreach (var x in arr) {\n            if (pq.Count\
    \ < k) {\n                pq.Enqueue(x);\n            } else if (x > pq.Peek())\
    \ {\n                pq.Dequeue();\n                pq.Enqueue(x);\n         \
    \   }\n        }\n        return pq.ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo9pbkkz5.cs(21,22): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpo9pbkkz5.cs(23,17): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''method group'' and ''long''

    '
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort((a, b) =>\
    \ b.CompareTo(a));\n        // Return the first k elements.\n        return arr.Take((int)k).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement this function\n        return null;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <713b97587b1148a1b64f5cc8591b32ad>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <713b97587b1148a1b64f5cc8591b32ad>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap();\n\
    \        foreach (var item in arr) {\n            maxHeap.Insert(item);\n    \
    \    }\n        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.ExtractMax());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8q4uwb4n.cs(20,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var heap = new Heap<long>(arr,\
    \ k);\n        for (int i = 0; i < k; i++) {\n            result.Add(heap.Pop());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwxm6pu9_.cs(20,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // The solution is to use a min heap to store the k largest elements.\n\
    \        // The heap will be initialized with the first k elements of the array.\n\
    \        // Then, for each element in the array, if it is larger than the smallest\n\
    \        // element in the heap, then we remove the smallest element from the\
    \ heap\n        // and add the new element to the heap.\n        // The time complexity\
    \ is O(n log k) and the space complexity is O(k).\n        var heap = new Heap<long>(k,\
    \ (a, b) => a < b);\n        for (int i = 0; i < k; i++) {\n            heap.Add(arr[i]);\n\
    \        }\n        for (int i = k; i < arr.Count; i++) {\n            if (arr[i]\
    \ > heap.Peek()) {\n                heap.Remove();\n                heap.Add(arr[i]);\n\
    \            }\n        }\n        return heap.ToList();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphrd7le1x.cs(25,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmphrd7le1x.cs(29,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // We can use a heap to solve this problem.\n        // We can use\
    \ a min heap to store the k largest elements.\n        // We can use a max heap\
    \ to store the k smallest elements.\n        // We can use a min heap to store\
    \ the k smallest elements.\n        // We can use a max heap to store the k largest\
    \ elements.\n        // We can use a min heap to store the k largest elements.\n\
    \        // We can use a max heap to store the k smallest elements.\n        //\
    \ We can use a min heap to store the k smallest elements.\n        // We can use\
    \ a max heap to store the k largest elements.\n        // We can use a min heap\
    \ to store the k largest elements.\n        // We can use a max heap to store\
    \ the k smallest elements.\n        // We can use a min heap to store the k smallest\
    \ elements.\n        // We can use a max heap to store the k largest elements.\n\
    \        // We can use a min heap to store the k largest elements.\n        //\
    \ We can use a max heap to store the k smallest elements.\n        // We can use\
    \ a min heap to store the k smallest elements.\n        // We can use a max heap\
    \ to store the k largest elements.\n        // We can use a min heap to store\
    \ the k largest elements.\n        // We can use a max heap to store the k smallest\
    \ elements.\n        // We can use a min heap to store the k smallest elements.\n\
    \        // We can use a max heap to store the k largest elements.\n        //\
    \ We can use a min heap to store the k largest elements.\n        // We can use\
    \ a max heap to store the k smallest elements.\n        // We can use a min heap\
    \ to store the k smallest elements.\n        // We can use a max heap to store\
    \ the k largest elements.\n        // We can use a min heap to store the k largest\
    \ elements.\n        // We can use a max heap to store the k smallest elements.\n\
    \        // We can use a min heap to store the k smallest elements.\n        //\
    \ We can use a max heap to store the k largest elements.\n        // We can use\
    \ a min heap to store the k largest elements.\n        // We can use a max heap\
    \ to store the k smallest elements.\n        // We can use a min heap to store\
    \ the k smallest elements.\n        //\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9g39amz3.cs(18,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort((a, b) =>\
    \ b.CompareTo(a));\n        // Return the first k elements.\n        return arr.Take((int)k).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort((a, b) =>\
    \ b.CompareTo(a));\n        // Return the first k elements.\n        return arr.Take((int)k).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Write your code here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9e486678294466ca8ac303276982a20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9e486678294466ca8ac303276982a20>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015752
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO:\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e61ab8cd3d5d44229c8bb19407015690>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e61ab8cd3d5d44229c8bb19407015690>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        List<long> result = new List<long>();\n        if (arr.Count == 0)\
    \ return result;\n        if (arr.Count == 1) {\n            result.Add(arr[0]);\n\
    \            return result;\n        }\n        if (arr.Count == 2) {\n      \
    \      if (arr[0] > arr[1]) {\n                result.Add(arr[0]);\n         \
    \       result.Add(arr[1]);\n            } else {\n                result.Add(arr[1]);\n\
    \                result.Add(arr[0]);\n            }\n            return result;\n\
    \        }\n        if (arr.Count == 3) {\n            if (arr[0] > arr[1]) {\n\
    \                if (arr[1] > arr[2]) {\n                    result.Add(arr[0]);\n\
    \                    result.Add(arr[1]);\n                    result.Add(arr[2]);\n\
    \                } else if (arr[0] > arr[2]) {\n                    result.Add(arr[0]);\n\
    \                    result.Add(arr[2]);\n                    result.Add(arr[1]);\n\
    \                } else {\n                    result.Add(arr[2]);\n         \
    \           result.Add(arr[0]);\n                    result.Add(arr[1]);\n   \
    \             }\n            } else {\n                if (arr[0] > arr[2]) {\n\
    \                    result.Add(arr[1]);\n                    result.Add(arr[0]);\n\
    \                    result.Add(arr[2]);\n                } else if (arr[1] >\
    \ arr[2]) {\n                    result.Add(arr[1]);\n                    result.Add(arr[2]);\n\
    \                    result.Add(arr[0]);\n                } else {\n         \
    \           result.Add(arr[2]);\n                    result.Add(arr[1]);\n   \
    \                 result.Add(arr[0]);\n                }\n            }\n    \
    \        return result;\n        }\n        // arr.Count > 3\n        // 1. Sort\
    \ the array\n        // 2. Return the first k elements\n        arr.Sort();\n\
    \        result = arr.GetRange(0, (int)k);\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa774dd59ae2456aaf81e8d6462c6815>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa774dd59ae2456aaf81e8d6462c6815>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap();\n\
    \        foreach (var num in arr) {\n            maxHeap.Add(num);\n        }\n\
    \        for (var i = 0; i < k; i++) {\n            result.Add(maxHeap.Remove());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1oirubic.cs(20,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n log k)\n        // Space: O(k)\n        var heap = new\
    \ Heap<long>(k);\n        foreach (var x in arr) {\n            heap.Insert(x);\n\
    \        }\n        return heap.ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6xmlavm3.cs(21,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var res = new List<long>();\n        var pq = new PriorityQueue<long>(k);\n\
    \        foreach (var a in arr) {\n            if (pq.Count < k) {\n         \
    \       pq.Add(a);\n            } else if (a > pq.Peek()) {\n                pq.Remove();\n\
    \                pq.Add(a);\n            }\n        }\n        while (pq.Count\
    \ > 0) {\n            res.Add(pq.Remove());\n        }\n        return res;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprjav5f9h.cs(20,22): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmprjav5f9h.cs(22,17): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''method group'' and ''long''

    /tmp/tmprjav5f9h.cs(29,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return null;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement this function\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7daea16cebfc44d0b0348ee5c8e8e508>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7daea16cebfc44d0b0348ee5c8e8e508>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap();\n\
    \        foreach (var i in arr) {\n            maxHeap.Insert(i);\n        }\n\
    \        for (var i = 0; i < k; i++) {\n            result.Add(maxHeap.ExtractMax());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2il522q3.cs(20,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap();\n\
    \        foreach (var item in arr) {\n            maxHeap.Insert(item);\n    \
    \    }\n        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.ExtractMax());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8q4uwb4n.cs(20,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var max = new List<long>();\n\
    \        var maxIndex = new List<int>();\n        for (int i = 0; i < k; i++)\
    \ {\n            max.Add(arr[i]);\n            maxIndex.Add(i);\n        }\n \
    \       for (int i = k; i < arr.Count; i++) {\n            var min = max.Min();\n\
    \            var minIndex = max.IndexOf(min);\n            if (arr[i] > min) {\n\
    \                max[minIndex] = arr[i];\n                maxIndex[minIndex] =\
    \ i;\n            }\n        }\n        for (int i = 0; i < k; i++) {\n      \
    \      result.Add(arr[maxIndex[i]]);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkyj0k9ba.cs(26,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // We can use a heap to solve this problem.\n        // The heap\
    \ will contain the k largest elements in the array.\n        // We will iterate\
    \ through the array and add each element to the heap.\n        // If the heap\
    \ contains more than k elements, we will remove the smallest element.\n      \
    \  // This will ensure that the heap contains the k largest elements in the array.\n\
    \        // We will then return the heap as a sorted list.\n        // Time Complexity:\
    \ O(n log k)\n        // Space Complexity: O(k)\n        var heap = new Heap<long>(k);\n\
    \        foreach (var n in arr) {\n            heap.Add(n);\n        }\n     \
    \   return heap.ToList();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwpm2odej.cs(27,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015752
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        List<long> result = new List<long>();\n        if (arr.Count == 0)\
    \ {\n            return result;\n        }\n        if (arr.Count == 1) {\n  \
    \          result.Add(arr[0]);\n            return result;\n        }\n      \
    \  if (arr.Count == 2) {\n            result.Add(Math.Max(arr[0], arr[1]));\n\
    \            result.Add(Math.Min(arr[0], arr[1]));\n            return result;\n\
    \        }\n        // Sort the array in descending order\n        arr.Sort((a,\
    \ b) => b.CompareTo(a));\n        // Add the first k elements to the result\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(arr[i]);\n    \
    \    }\n        // Sort the result in ascending order\n        result.Sort((a,\
    \ b) => a.CompareTo(b));\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <83712eb266664bd8bae9fcba3119dafa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <83712eb266664bd8bae9fcba3119dafa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015752
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array and return the first k elements.\n        arr.Sort();\n\
    \        return arr.GetRange(arr.Count - (int)k, (int)k);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ef8af50364f43cb97c62add8acb43c5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ef8af50364f43cb97c62add8acb43c5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015752
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort();\n   \
    \     arr.Reverse();\n        // Return the first k elements.\n        return\
    \ arr.GetRange(0, (int)k);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <194fe82d43b64e0ebd7e02e8efce1795>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <194fe82d43b64e0ebd7e02e8efce1795>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var heap = new Heap<long>(arr,\
    \ (a, b) => a > b);\n        for (int i = 0; i < k; i++) {\n            result.Add(heap.Pop());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuk60god9.cs(20,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // The idea is to use a max heap to store the k largest numbers.\n\
    \        // The heap will be initialized with the first k elements of the array.\n\
    \        // Then, for each element in the array, if the element is greater than\
    \ the \n        // smallest element in the heap, then remove the smallest element\
    \ from the heap\n        // and add the new element.\n        // The heap will\
    \ always contain the k largest elements.\n        var heap = new Heap<long>(arr.Take((int)k).ToList(),\
    \ (a, b) => a < b);\n        for (int i = (int)k; i < arr.Count; i++) {\n    \
    \        if (arr[i] > heap.Peek()) {\n                heap.Pop();\n          \
    \      heap.Push(arr[i]);\n            }\n        }\n        return heap.ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa0q8hih3.cs(25,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015752
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90e091bb416c496088dfeb1ec6667e08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90e091bb416c496088dfeb1ec6667e08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90e091bb416c496088dfeb1ec6667e08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90e091bb416c496088dfeb1ec6667e08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return null;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        List<long> result = new List<long>();\n        if (arr.Count == 0)\
    \ {\n            return result;\n        }\n        if (arr.Count == 1) {\n  \
    \          result.Add(arr[0]);\n            return result;\n        }\n      \
    \  if (arr.Count == 2) {\n            result.Add(Math.Max(arr[0], arr[1]));\n\
    \            result.Add(Math.Min(arr[0], arr[1]));\n            return result;\n\
    \        }\n        if (arr.Count == 3) {\n            long a = arr[0];\n    \
    \        long b = arr[1];\n            long c = arr[2];\n            if (a > b)\
    \ {\n                if (a > c) {\n                    result.Add(a);\n      \
    \              if (b > c) {\n                        result.Add(b);\n        \
    \                result.Add(c);\n                    } else {\n              \
    \          result.Add(c);\n                        result.Add(b);\n          \
    \          }\n                } else {\n                    result.Add(c);\n \
    \                   result.Add(a);\n                    result.Add(b);\n     \
    \           }\n            } else {\n                if (b > c) {\n          \
    \          result.Add(b);\n                    if (a > c) {\n                \
    \        result.Add(a);\n                        result.Add(c);\n            \
    \        } else {\n                        result.Add(c);\n                  \
    \      result.Add(a);\n                    }\n                } else {\n     \
    \               result.Add(c);\n                    result.Add(b);\n         \
    \           result.Add(a);\n                }\n            }\n            return\
    \ result;\n        }\n        long[] max = new long[k];\n        for (int i =\
    \ 0; i < k; i++) {\n            max[i] = arr[i];\n        }\n        for (int\
    \ i = k; i < arr.Count; i++) {\n            long a = arr[i];\n            int\
    \ j = 0;\n            while (j < k && a < max[j]) {\n                j++;\n  \
    \          }\n            if (j < k) {\n                for (int l = k - 1; l\
    \ > j; l--) {\n                    max[l] = max[\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxhcavc_v.cs(81,34): error CS1003: Syntax error, '']'' expected

    /tmp/tmpxhcavc_v.cs(81,34): error CS1002: ; expected

    /tmp/tmpxhcavc_v.cs(83,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpxhcavc_v.cs(97,2): error CS1513: } expected

    '
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return null;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // The idea is to use a max heap to keep track of the k largest elements.\n\
    \        // The heap will be initialized with the first k elements of the array.\n\
    \        // Then, for each element in the array, if the element is greater than\
    \ the \n        // top of the heap, then pop the top of the heap and push the\
    \ element.\n        // The heap will always contain the k largest elements.\n\
    \        // Time complexity: O(n log k)\n        // Space complexity: O(k)\n \
    \       var heap = new Heap<long>(arr.Take((int)k).ToList(), true);\n        for\
    \ (int i = (int)k; i < arr.Count; i++) {\n            if (arr[i] > heap.Peek())\
    \ {\n                heap.Pop();\n                heap.Push(arr[i]);\n       \
    \     }\n        }\n        return heap.ToList();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp904kjfho.cs(26,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap<long>(arr);\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.Pop());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4hbph7rt.cs(20,27): error CS0246: The type or namespace name ''MaxHeap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        List<long> result = new List<long>();\n        if (arr.Count == 0)\
    \ {\n            return result;\n        }\n        if (arr.Count == 1) {\n  \
    \          result.Add(arr[0]);\n            return result;\n        }\n      \
    \  if (arr.Count == 2) {\n            result.Add(Math.Max(arr[0], arr[1]));\n\
    \            result.Add(Math.Min(arr[0], arr[1]));\n            return result;\n\
    \        }\n        if (arr.Count == 3) {\n            long a = arr[0];\n    \
    \        long b = arr[1];\n            long c = arr[2];\n            if (a > b)\
    \ {\n                if (b > c) {\n                    result.Add(a);\n      \
    \              result.Add(b);\n                    result.Add(c);\n          \
    \      } else if (a > c) {\n                    result.Add(a);\n             \
    \       result.Add(c);\n                    result.Add(b);\n                }\
    \ else {\n                    result.Add(c);\n                    result.Add(a);\n\
    \                    result.Add(b);\n                }\n            } else {\n\
    \                if (a > c) {\n                    result.Add(b);\n          \
    \          result.Add(a);\n                    result.Add(c);\n              \
    \  } else if (b > c) {\n                    result.Add(b);\n                 \
    \   result.Add(c);\n                    result.Add(a);\n                } else\
    \ {\n                    result.Add(c);\n                    result.Add(b);\n\
    \                    result.Add(a);\n                }\n            }\n      \
    \      return result;\n        }\n        long max = arr[0];\n        long min\
    \ = arr[0];\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ > max) {\n                max = arr[i];\n            }\n            if (arr[i]\
    \ < min) {\n                min = arr[i];\n            }\n        }\n        long\
    \ range = max - min;\n        long bucketSize = range / k;\n        List<long>[]\
    \ buckets = new List<long>[k];\n        for (int i = 0; i\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaxijh_2t.cs(80,26): error CS1002: ; expected

    /tmp/tmpaxijh_2t.cs(80,26): error CS1026: ) expected

    /tmp/tmpaxijh_2t.cs(80,26): error CS1525: Invalid expression term ''}''

    '
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var max = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            max.Add(arr[i]);\n       \
    \ }\n        for (int i = k; i < arr.Count; i++) {\n            if (arr[i] > max[0])\
    \ {\n                max[0] = arr[i];\n                for (int j = 1; j < k;\
    \ j++) {\n                    if (max[j] < max[j - 1]) {\n                   \
    \     var temp = max[j];\n                        max[j] = max[j - 1];\n     \
    \                   max[j - 1] = temp;\n                    }\n              \
    \  }\n            }\n        }\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp17rucqag.cs(24,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement me\n        return new List<long>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <235e24b43b4946eb85e16f7277f26986>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <235e24b43b4946eb85e16f7277f26986>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return new List<long>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14218f45a00440feaeb6e6b36a6926cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort((a, b) =>\
    \ b.CompareTo(a));\n        // Return the first k elements.\n        return arr.Take((int)k).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort((a, b) =>\
    \ b.CompareTo(a));\n        // Return the first k elements.\n        return arr.Take((int)k).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90e091bb416c496088dfeb1ec6667e08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90e091bb416c496088dfeb1ec6667e08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // The idea is to use a max heap to store the k largest elements.\n\
    \        // We start by inserting the first k elements into the heap.\n      \
    \  // Then we iterate through the rest of the array and if the current element\
    \ is larger\n        // than the smallest element in the heap, we pop the smallest\
    \ element from the heap\n        // and insert the current element.\n        //\
    \ This ensures that the heap always contains the k largest elements.\n       \
    \ // At the end, we pop all the elements from the heap and return them in reverse\
    \ order.\n        var heap = new Heap<long>(k, (a, b) => a > b);\n        for\
    \ (int i = 0; i < k; i++) {\n            heap.Insert(arr[i]);\n        }\n   \
    \     for (int i = k; i < arr.Count; i++) {\n            if (arr[i] > heap.Peek())\
    \ {\n                heap.Pop();\n                heap.Insert(arr[i]);\n     \
    \       }\n        }\n        var result = new List<long>();\n        while (heap.Count\
    \ > 0) {\n            result.Add(heap.Pop());\n        }\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpheiy12i3.cs(26,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpheiy12i3.cs(30,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpheiy12i3.cs(37,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // We can use a heap to solve this problem.\n        // We can use\
    \ a min-heap to store the k largest elements.\n        // We can start by adding\
    \ the first k elements to the heap.\n        // Then we can iterate through the\
    \ rest of the elements and compare them to the top of the heap.\n        // If\
    \ the element is larger than the top of the heap, we can remove the top of the\
    \ heap and add the element.\n        // This will ensure that the heap always\
    \ contains the k largest elements.\n        // We can then return the heap as\
    \ a sorted list.\n        // Time: O(n log k)\n        // Space: O(k)\n      \
    \  var heap = new Heap<long>(k, (a, b) => a < b);\n        for (int i = 0; i <\
    \ k; i++) {\n            heap.Add(arr[i]);\n        }\n        for (int i = k;\
    \ i < arr.Count; i++) {\n            if (arr[i] > heap.Peek()) {\n           \
    \     heap.Remove();\n                heap.Add(arr[i]);\n            }\n     \
    \   }\n        return heap.ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9q5r9xrj.cs(28,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmp9q5r9xrj.cs(32,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        List<long> result = new List<long>();\n        for (int i = 0; i\
    \ < k; i++) {\n            result.Add(arr[i]);\n        }\n        result.Sort();\n\
    \        for (int i = k; i < arr.Count; i++) {\n            if (arr[i] > result[0])\
    \ {\n                result[0] = arr[i];\n                result.Sort();\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpadnbcc90.cs(24,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015752
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // O(n log k)\n        // Use a heap to keep track of the largest\
    \ k elements.\n        // The heap is a min-heap, so the smallest element is at\
    \ the top.\n        // When a new element is added, if it is larger than the smallest\
    \ element,\n        // then it is added to the heap and the smallest element is\
    \ removed.\n        // The heap is then sorted to maintain the heap property.\n\
    \        var heap = new List<long>();\n        foreach (var x in arr) {\n    \
    \        if (heap.Count < k) {\n                heap.Add(x);\n               \
    \ heap.Sort();\n            } else if (x > heap[0]) {\n                heap[0]\
    \ = x;\n                heap.Sort();\n            }\n        }\n        return\
    \ heap;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <475d487b25d44af1aafb33bac715ea02>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <475d487b25d44af1aafb33bac715ea02>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015752
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90e091bb416c496088dfeb1ec6667e08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90e091bb416c496088dfeb1ec6667e08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap<long>(arr);\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.Pop());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4hbph7rt.cs(20,27): error CS0246: The type or namespace name ''MaxHeap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var heap = new Heap<long>(arr,\
    \ (a, b) => a > b);\n        for (int i = 0; i < k; i++) {\n            result.Add(heap.Pop());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuk60god9.cs(20,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015752
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order, then take the first k elements.\n\
    \        arr.Sort();\n        arr.Reverse();\n        return arr.Take((int)k).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2b1b65d89eb40db818325d5f193d982>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2b1b65d89eb40db818325d5f193d982>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015752
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO\n        return new List<long>();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90e091bb416c496088dfeb1ec6667e08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90e091bb416c496088dfeb1ec6667e08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // The idea is to use a heap to keep track of the largest k elements.\n\
    \        // The heap is implemented as a binary tree with the following properties:\n\
    \        // 1. The root is the largest element.\n        // 2. The left child\
    \ is smaller than the parent.\n        // 3. The right child is smaller than the\
    \ parent.\n        // 4. The left child is larger than the right child.\n    \
    \    // This is called a max heap.\n        // The heap is implemented as an array.\n\
    \        // The root is at index 0.\n        // The left child of the element\
    \ at index i is at index 2i + 1.\n        // The right child of the element at\
    \ index i is at index 2i + 2.\n        // The parent of the element at index i\
    \ is at index (i - 1) / 2.\n        // The heap is implemented as a max heap.\n\
    \        // The heap is implemented as a dynamic array.\n        // The heap is\
    \ implemented as a list.\n        // The heap is implemented as a list of longs.\n\
    \        // The heap is implemented as a list of longs called heap.\n        List<long>\
    \ heap = new List<long>();\n        // The heap is implemented as a list of longs\
    \ called heap.\n        // The heap is implemented as a list of longs called heap\
    \ with a capacity of k.\n        heap.Capacity = (int)k;\n        // The heap\
    \ is implemented as a list of longs called heap with a capacity of k.\n      \
    \  // The heap is implemented as a list of longs called heap with a capacity of\
    \ k and a count of 0.\n        heap.Count = 0;\n        // The heap is implemented\
    \ as a list of longs called heap with a capacity of k and a count of 0.\n    \
    \    // For each element in arr:\n        foreach (long element in arr) {\n  \
    \          // For each element in arr:\n            // If the heap is not full:\n\
    \            if (heap.Count < k) {\n                // If the heap is not full:\n\
    \                // Add the element to the heap.\n                heap.Add(element);\n\
    \                // Add the element to the heap.\n                // Bubble the\
    \ element up.\n                BubbleUp(heap, heap.Count - 1);\n             \
    \   // Bubble the element up.\n\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx8108fhx.cs(58,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpx8108fhx.cs(72,2): error CS1513: } expected

    '
  timestamp: 1660015752
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement this\n        return new List<long>();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4faff6e6c9054332b2647fe353e579b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4faff6e6c9054332b2647fe353e579b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <c85fa1759e4942a3a3915cf391f01b92>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <c85fa1759e4942a3a3915cf391f01b92>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015751
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        return arr.OrderByDescending(x => x).Take((int)k).ToList();\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <494aea8cdfc74f49b4b09c860588f597>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <494aea8cdfc74f49b4b09c860588f597>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n log n)\n        // Space: O(n)\n        // return arr.OrderByDescending(x\
    \ => x).Take((int)k).ToList();\n        // Time: O(n log k)\n        // Space:\
    \ O(k)\n        // var pq = new PriorityQueue<long>();\n        // foreach (var\
    \ x in arr) {\n        //     if (pq.Count < k) {\n        //         pq.Enqueue(x);\n\
    \        //     } else if (x > pq.Peek()) {\n        //         pq.Dequeue();\n\
    \        //         pq.Enqueue(x);\n        //     }\n        // }\n        //\
    \ return pq.ToList();\n        // Time: O(n)\n        // Space: O(k)\n       \
    \ var pq = new PriorityQueue<long>();\n        foreach (var x in arr) {\n    \
    \        if (pq.Count < k) {\n                pq.Enqueue(x);\n            } else\
    \ if (x > pq.Peek()) {\n                pq.Dequeue();\n                pq.Enqueue(x);\n\
    \            }\n        }\n        return pq.ToList();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbzcgoby2.cs(36,22): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpbzcgoby2.cs(38,17): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''method group'' and ''long''

    '
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time Complexity: O(n)\n        // Space Complexity: O(n)\n   \
    \     // Runtime: 592 ms, faster than 100.00% of C# online submissions\n     \
    \   // Memory Usage: 31.9 MB, less than 100.00% of C# online submissions\n   \
    \     var result = new List<long>();\n        var maxHeap = new MaxHeap();\n \
    \       foreach (var num in arr) {\n            maxHeap.Insert(num);\n       \
    \ }\n        for (var i = 0; i < k; i++) {\n            result.Add(maxHeap.ExtractMax());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbwkr3jzx.cs(24,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <c85fa1759e4942a3a3915cf391f01b92>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <c85fa1759e4942a3a3915cf391f01b92>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var max = new List<long>();\n        var min = new List<long>();\n\
    \        foreach (var a in arr) {\n            if (max.Count < k) {\n        \
    \        max.Add(a);\n                max.Sort();\n            } else if (a >\
    \ max[0]) {\n                max[0] = a;\n                max.Sort();\n      \
    \      }\n        }\n        return max;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9d232da4ebb48f5a3b4fd610b36a73f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9d232da4ebb48f5a3b4fd610b36a73f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015753
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement this function\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7daea16cebfc44d0b0348ee5c8e8e508>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7daea16cebfc44d0b0348ee5c8e8e508>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <31cc51331b2442a3820f7d9aa5f72ee2>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <31cc51331b2442a3820f7d9aa5f72ee2>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap();\n\
    \        foreach (var item in arr) {\n            maxHeap.Insert(item);\n    \
    \    }\n        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.ExtractMax());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8q4uwb4n.cs(20,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // We can use a max heap to solve this problem.\n        // The heap\
    \ will contain the k largest elements.\n        // We will iterate through the\
    \ array, adding each element to the heap.\n        // If the heap contains more\
    \ than k elements, we will remove the smallest element.\n        // At the end,\
    \ the heap will contain the k largest elements.\n        // We can then return\
    \ the heap as a sorted list.\n        var heap = new Heap<long>(k, (a, b) => a\
    \ > b);\n        foreach (var item in arr) {\n            heap.Add(item);\n  \
    \      }\n        return heap.ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5mkvr07c.cs(25,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n)\n        // Space: O(n)\n        var result = new List<long>();\n\
    \        var pq = new PriorityQueue<long>();\n        foreach (var i in arr) {\n\
    \            pq.Enqueue(i);\n            if (pq.Count > k) {\n               \
    \ pq.Dequeue();\n            }\n        }\n        while (pq.Count > 0) {\n  \
    \          result.Add(pq.Dequeue());\n        }\n        result.Reverse();\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc67jmi9j.cs(22,22): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpc67jmi9j.cs(25,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''long''

    /tmp/tmpc67jmi9j.cs(29,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660015752
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort();\n   \
    \     arr.Reverse();\n        // Return the first k elements.\n        return\
    \ arr.GetRange(0, (int)k);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <194fe82d43b64e0ebd7e02e8efce1795>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <194fe82d43b64e0ebd7e02e8efce1795>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8610a635abaa4de0a44214138a7b0506>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // The idea is to use a min heap to store the k largest elements.\n\
    \        // The heap will be initialized with the first k elements of the array.\n\
    \        // Then we will iterate through the rest of the array, and if the current\
    \ element\n        // is larger than the root of the heap, we will pop the root\
    \ and push the current element.\n        // This will ensure that the heap always\
    \ contains the k largest elements.\n        // At the end, we will pop all the\
    \ elements from the heap and return them in reverse order.\n        // Time complexity:\
    \ O(n log k)\n        // Space complexity: O(k)\n        var heap = new MinHeap(k);\n\
    \        for (int i = 0; i < k; i++) {\n            heap.Push(arr[i]);\n     \
    \   }\n        for (int i = k; i < arr.Count; i++) {\n            if (arr[i] >\
    \ heap.Peek()) {\n                heap.Pop();\n                heap.Push(arr[i]);\n\
    \            }\n        }\n        var result = new List<long>();\n        while\
    \ (heap.Count > 0) {\n            result.Add(heap.Pop());\n        }\n       \
    \ result.Reverse();\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzihk3itf.cs(27,24): error CS0246: The type or namespace name ''MinHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpzihk3itf.cs(31,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpzihk3itf.cs(38,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var max = new List<long>();\n\
    \        var min = new List<long>();\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (max.Count == 0 || arr[i] > max[0]) {\n                max.Insert(0,\
    \ arr[i]);\n            } else if (min.Count == 0 || arr[i] < min[0]) {\n    \
    \            min.Insert(0, arr[i]);\n            } else {\n                var\
    \ index = max.BinarySearch(arr[i]);\n                if (index < 0) {\n      \
    \              index = ~index;\n                }\n                max.Insert(index,\
    \ arr[i]);\n            }\n            if (max.Count > k) {\n                max.RemoveAt(max.Count\
    \ - 1);\n            }\n            if (min.Count > k) {\n                min.RemoveAt(min.Count\
    \ - 1);\n            }\n        }\n        for (int i = 0; i < k; i++) {\n   \
    \         result.Add(max[i]);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum\
    \ (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00115] in <45ffba467f5446dabb6b59ca274bd707>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00017] in <45ffba467f5446dabb6b59ca274bd707>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Maximum\
    \ (System.Collections.Generic.List`1[T] arr, System.Int64 k) [0x00115] in <45ffba467f5446dabb6b59ca274bd707>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00017] in <45ffba467f5446dabb6b59ca274bd707>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n)\n        // Space: O(n)\n        var max = new List<long>();\n\
    \        var min = new List<long>();\n        foreach (var a in arr) {\n     \
    \       if (max.Count < k) {\n                max.Add(a);\n                max.Sort();\n\
    \            } else if (a > max[0]) {\n                max[0] = a;\n         \
    \       max.Sort();\n            }\n        }\n        return max;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <204748eb5b95403fb6c0836d0b53e21e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <204748eb5b95403fb6c0836d0b53e21e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // TODO: Implement your solution here\n        return null;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5e43dcbc6e2f476d858aa011acb1bebb>:0\
    \ \n"
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n log k)\n        // Space: O(k)\n        // Idea: Use\
    \ a min heap to store the k largest elements.\n        //       When we encounter\
    \ a new element, if it is larger than the smallest element in the heap,\n    \
    \    //       we replace it and then heapify.\n        var heap = new Heap<long>(k,\
    \ (a, b) => a < b);\n        foreach (var x in arr) {\n            if (heap.Count\
    \ < k) {\n                heap.Add(x);\n            } else if (x > heap.Peek())\
    \ {\n                heap.Replace(x);\n            }\n        }\n        return\
    \ heap.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppjmwwmr3.cs(24,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmppjmwwmr3.cs(26,17): error CS0019: Operator ''<'' cannot be applied to
    operands of type ''method group'' and ''long''

    '
  timestamp: 1660015752
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        List<long> result = new List<long>();\n        if (arr.Count == 0)\
    \ {\n            return result;\n        }\n        if (arr.Count <= k) {\n  \
    \          return arr;\n        }\n        // Use a min-heap to store the k largest\
    \ elements.\n        // The heap will be sorted in ascending order.\n        //\
    \ The root of the heap will be the smallest of the k largest elements.\n     \
    \   // When a new element is added to the heap, it is compared to the root.\n\
    \        // If it is larger than the root, the root is removed and the new element\
    \ is added.\n        // The heap is then re-sorted.\n        // The heap will\
    \ always contain the k largest elements.\n        // When the heap is full, the\
    \ root will be the smallest of the k largest elements.\n        // When the heap\
    \ is not full, the root will be the largest of the elements in the heap.\n   \
    \     // The heap is initialized with the first k elements of the array.\n   \
    \     // The heap is then sorted.\n        // The remaining elements of the array\
    \ are added to the heap one at a time.\n        // The heap is then sorted.\n\
    \        // The heap is then converted to a list.\n        // The list is then\
    \ sorted in descending order.\n        // The list is then returned.\n       \
    \ // Time Complexity: O(n log k)\n        // Space Complexity: O(k)\n        Heap\
    \ heap = new Heap(k);\n        for (int i = 0; i < k; i++) {\n            heap.Add(arr[i]);\n\
    \        }\n        for (int i = k; i < arr.Count; i++) {\n            heap.Add(arr[i]);\n\
    \        }\n        return heap.ToList().OrderByDescending(x => x).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpndnfln1e.cs(44,9): error CS0246: The type or namespace name ''Heap'' could
    not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpndnfln1e.cs(44,25): error CS0246: The type or namespace name ''Heap''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpndnfln1e.cs(48,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015753
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order\n        arr.Sort((a, b) =>\
    \ b.CompareTo(a));\n        // Return the first k elements\n        return arr.GetRange(0,\
    \ (int)k);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31706146133b4a439030f6bb99aa2960>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31706146133b4a439030f6bb99aa2960>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015753
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var maxHeap = new MaxHeap(k);\n\
    \        foreach (var item in arr) {\n            maxHeap.Add(item);\n       \
    \ }\n        for (int i = 0; i < k; i++) {\n            result.Add(maxHeap.Pop());\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5iv96xbh.cs(20,27): error CS0246: The type or namespace name ''MaxHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015753
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Sort the array in descending order.\n        arr.Sort((a, b) =>\
    \ b.CompareTo(a));\n        // Return the first k elements.\n        return arr.Take((int)k).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <656a7b2bb5804814b68992b7664f3f94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660015750
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        var result = new List<long>();\n        var max = new List<long>();\n\
    \        var maxIndex = new List<int>();\n        for (int i = 0; i < k; i++)\
    \ {\n            max.Add(long.MinValue);\n            maxIndex.Add(-1);\n    \
    \    }\n        for (int i = 0; i < arr.Count; i++) {\n            var n = arr[i];\n\
    \            var j = 0;\n            while (j < k && n > max[j]) {\n         \
    \       j++;\n            }\n            if (j < k) {\n                max.Insert(j,\
    \ n);\n                maxIndex.Insert(j, i);\n                max.RemoveAt(k);\n\
    \                maxIndex.RemoveAt(k);\n            }\n        }\n        for\
    \ (int i = 0; i < k; i++) {\n            result.Add(arr[maxIndex[i]]);\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprv_t23v0.cs(35,30): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmprv_t23v0.cs(36,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1660015753
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // We can use a max heap to solve this problem.\n        // We can\
    \ use a min heap to solve this problem.\n        // We can use a max heap to solve\
    \ this problem.\n        // We can use a min heap to solve this problem.\n   \
    \     // We can use a max heap to solve this problem.\n        // We can use a\
    \ min heap to solve this problem.\n        // We can use a max heap to solve this\
    \ problem.\n        // We can use a min heap to solve this problem.\n        //\
    \ We can use a max heap to solve this problem.\n        // We can use a min heap\
    \ to solve this problem.\n        // We can use a max heap to solve this problem.\n\
    \        // We can use a min heap to solve this problem.\n        // We can use\
    \ a max heap to solve this problem.\n        // We can use a min heap to solve\
    \ this problem.\n        // We can use a max heap to solve this problem.\n   \
    \     // We can use a min heap to solve this problem.\n        // We can use a\
    \ max heap to solve this problem.\n        // We can use a min heap to solve this\
    \ problem.\n        // We can use a max heap to solve this problem.\n        //\
    \ We can use a min heap to solve this problem.\n        // We can use a max heap\
    \ to solve this problem.\n        // We can use a min heap to solve this problem.\n\
    \        // We can use a max heap to solve this problem.\n        // We can use\
    \ a min heap to solve this problem.\n        // We can use a max heap to solve\
    \ this problem.\n        // We can use a min heap to solve this problem.\n   \
    \     // We can use a max heap to solve this problem.\n        // We can use a\
    \ min heap to solve this problem.\n        // We can use a max heap to solve this\
    \ problem.\n        // We can use a min heap to solve this problem.\n        //\
    \ We can use a max heap to solve this problem.\n        // We can use a min heap\
    \ to solve this problem.\n        // We can use a max heap to solve this problem.\n\
    \        // We can use a min heap to solve this problem.\n        // We can use\
    \ a max heap to solve this problem.\n        // We can use a min heap to solve\
    \ this problem.\n        // We can use a max\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5sv0vb6j.cs(18,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1660015751
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // Time: O(n log k)\n        // Space: O(k)\n        // Idea: Use\
    \ a min-heap of size k.\n        //       Iterate through the array and add each\
    \ element to the heap.\n        //       If the heap is full, remove the smallest\
    \ element from the heap.\n        //       At the end, the heap will contain the\
    \ k largest elements.\n        var heap = new Heap<long>(k, true);\n        foreach\
    \ (var x in arr) {\n            heap.Add(x);\n        }\n        return heap.ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplded1otp.cs(25,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015753
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // We can use a max heap to solve this problem.\n        // The max\
    \ heap will keep track of the largest k elements.\n        // We can iterate through\
    \ the array and add each element to the heap.\n        // If the heap is larger\
    \ than k, we can remove the smallest element.\n        // This will ensure that\
    \ the heap only contains the largest k elements.\n        // We can then return\
    \ the heap as a sorted list.\n        // This algorithm will take O(n log k) time\
    \ and O(k) space.\n        var heap = new MaxHeap<long>(k);\n        foreach (var\
    \ num in arr) {\n            heap.Add(num);\n        }\n        return heap.ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpun41y2ti.cs(26,24): error CS0246: The type or namespace name ''MaxHeap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1660015753
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Example 2:\n    // Example 3:\n    // Note:\n    //\
    \ 1. The length of the array will be in the range of [1, 1000].\n    // 2. The\
    \ elements in the array will be in the range of [-1000, 1000].\n    // 3. 0 <=\
    \ k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k)\
    \ {\n        // The idea is to use a min heap to keep track of the k largest elements.\n\
    \        // The heap will be initialized with the first k elements of the array.\n\
    \        // Then, for each element in the array, if it is larger than the smallest\
    \ element in the heap,\n        // then it will replace the smallest element in\
    \ the heap.\n        // At the end, the heap will contain the k largest elements.\n\
    \        // Time complexity: O(n log k)\n        // Space complexity: O(k)\n \
    \       var heap = new MinHeap(k);\n        for (int i = 0; i < k; i++) {\n  \
    \          heap.Insert(arr[i]);\n        }\n        for (int i = k; i < arr.Count;\
    \ i++) {\n            if (arr[i] > heap.Peek()) {\n                heap.Remove();\n\
    \                heap.Insert(arr[i]);\n            }\n        }\n        return\
    \ heap.ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa4dgst_u.cs(26,24): error CS0246: The type or namespace name ''MinHeap''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpa4dgst_u.cs(30,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1660015753
