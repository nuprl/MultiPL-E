language: cs
name: HumanEval_76_is_simple_power
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        //\
    \ If x is a power of n, then x = n^k for some k.\n        // So, x^(1/k) = n.\n\
    \        // If x is a simple power of n, then x^(1/k) is an integer.\n       \
    \ // So, we can check if x^(1/k) is an integer.\n        // If x^(1/k) is an integer,\
    \ then x^(1/k) = n.\n        // So, we can check if x^(1/k) = n.\n        // If\
    \ x^(1/k) = n, then x = n^k.\n        // So, we can check if x = n^k.\n      \
    \  // If x = n^k, then x is a power of n.\n        // So, we can check if x is\
    \ a power of n.\n        // If x is a power of n, then x is a simple power of\
    \ n.\n        // So, we can check if x is a simple power of n.\n        // If\
    \ x is a simple power of n, then x^(1/k) is an integer.\n        // So, we can\
    \ check if x^(1/k) is an integer.\n        // If x^(1/k) is an integer, then x^(1/k)\
    \ = n.\n        // So, we can check if x^(1/k) = n.\n        // If x^(1/k) = n,\
    \ then x = n^k.\n        // So, we can check if x = n^k.\n        // If x = n^k,\
    \ then x is a power of n.\n        // So, we can check if x is a power of n.\n\
    \        // If x is a power of n, then x is a simple power of n.\n        // So,\
    \ we can check if x is a simple power of n.\n        // If x is a simple power\
    \ of n, then x^(1/k) is an integer.\n        // So, we can check if x^(1/k) is\
    \ an integer.\n        // If x^(1/k) is an integer, then x^(1/k) = n.\n      \
    \  // So, we can check\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe3arondt.cs(13,24): error CS0161: ''Problem.IsSimplePower(long, long)'':
    not all code paths return a value

    '
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        //\
    \ x = n^i\n        // log(x) = log(n^i)\n        // log(x) = i * log(n)\n    \
    \    // i = log(x) / log(n)\n        // i = log(x) / log(n)\n        // i = log(x)\
    \ / log(n)\n        // i = log(x) / log(n)\n        // i = log(x) / log(n)\n \
    \       // i = log(x) / log(n)\n        // i = log(x) / log(n)\n        // i =\
    \ log(x) / log(n)\n        // i = log(x) / log(n)\n        // i = log(x) / log(n)\n\
    \        // i = log(x) / log(n)\n        // i = log(x) / log(n)\n        // i\
    \ = log(x) / log(n)\n        // i = log(x) / log(n)\n        // i = log(x) / log(n)\n\
    \        // i = log(x) / log(n)\n        // i = log(x) / log(n)\n        // i\
    \ = log(x) / log(n)\n        // i = log(x) / log(n)\n        // i = log(x) / log(n)\n\
    \        // i = log(x) / log(n)\n        // i = log(x) / log(n)\n        // i\
    \ = log(x) / log(n)\n        // i = log(x) / log(n)\n        // i = log(x) / log(n)\n\
    \        // i = log(x) / log(n)\n        // i = log(x) / log(n)\n        // i\
    \ = log(x) / log(n)\n        // i = log(x) / log(n)\n        // i = log(x) / log(n)\n\
    \        // i = log(x) / log(n)\n        // i = log(x) / log(n)\n        // i\
    \ = log(x) / log(n)\n        // i = log(x\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglqq4c2b.cs(13,24): error CS0161: ''Problem.IsSimplePower(long, long)'':
    not all code paths return a value

    '
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (n == 0) return false;\n        if (x == 0) return\
    \ false;\n        if (x < 0) return false;\n        if (n < 0) return false;\n\
    \        double log = Math.Log(x, n);\n        return Math.Abs(log - Math.Round(log))\
    \ < 1e-10;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        //\
    \ Good luck!\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        double\
    \ log = Math.Log(x, n);\n        return log == (int)log;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a69560baf6704a33ab635a34ad75351d>:0 \n"
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x < n)\
    \ return false;\n        if (x % n != 0) return false;\n        return IsSimplePower(x\
    \ / n, n);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return false;\n        if (x\
    \ == n) return true;\n        if (n == 0) return false;\n        if (x == 0) return\
    \ false;\n        if (x < n) return false;\n        if (x % n != 0) return false;\n\
    \        return IsSimplePower(x / n, n);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        long p = n;\n        while (p < x) {\n      \
    \      p *= n;\n        }\n        return p == x;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return false;\n        if (x\
    \ == n) return true;\n        if (n == 0) return false;\n        if (x == 0) return\
    \ false;\n        if (x < n) return false;\n        if (x % n != 0) return false;\n\
    \        return IsSimplePower(x / n, n);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   // x = n**int\n        // log(x) = log(n**int)\n        // log(x) = int*log(n)\n\
    \        // int = log(x)/log(n)\n        // int = log(x)/log(n)\n        // int\
    \ = log(x)/log(n)\n        // int = log(x)/log(n)\n        // int = log(x)/log(n)\n\
    \        // int = log(x)/log(n)\n        // int = log(x)/log(n)\n        // int\
    \ = log(x)/log(n)\n        // int = log(x)/log(n)\n        // int = log(x)/log(n)\n\
    \        // int = log(x)/log(n)\n        // int = log(x)/log(n)\n        // int\
    \ = log(x)/log(n)\n        // int = log(x)/log(n)\n        // int = log(x)/log(n)\n\
    \        // int = log(x)/log(n)\n        // int = log(x)/log(n)\n        // int\
    \ = log(x)/log(n)\n        // int = log(x)/log(n)\n        // int = log(x)/log(n)\n\
    \        // int = log(x)/log(n)\n        // int = log(x)/log(n)\n        // int\
    \ = log(x)/log(n)\n        // int = log(x)/log(n)\n        // int = log(x)/log(n)\n\
    \        // int = log(x)/log(n)\n        // int = log(x)/log(n)\n        // int\
    \ = log(x)/log(n)\n        // int = log(x)/log(n)\n        // int = log(x)/log(n)\n\
    \        // int = log(x)/log(n)\n        // int = log(x)/log(n)\n        // int\
    \ = log(x)/log(n)\n        // int = log(x)/log(n)\n        // int = log(x)/log(n)\n\
    \        // int = log(x)/log(n)\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzs_vl9jc.cs(13,24): error CS0161: ''Problem.IsSimplePower(long, long)'':
    not all code paths return a value

    '
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here.\n    \
    \    // You can add additional functions if needed.\n        // You can use Math.Pow(n,\
    \ k) to calculate n**k.\n        // You can use Math.Log(x, n) to calculate logarithm\
    \ with base n.\n        // You can use Math.Floor(x) to round down a number x.\n\
    \        // You can use Math.Ceiling(x) to round up a number x.\n        // You\
    \ can use Math.Round(x) to round a number x.\n        // You can use Math.Abs(x)\
    \ to calculate absolute value of x.\n        // You can use Math.Sign(x) to calculate\
    \ sign of x.\n        // You can use Math.Sqrt(x) to calculate square root of\
    \ x.\n        // You can use Math.Truncate(x) to truncate x.\n        // You can\
    \ use Math.Max(x, y) to calculate maximum of x and y.\n        // You can use\
    \ Math.Min(x, y) to calculate minimum of x and y.\n        // You can use Math.PI\
    \ to get value of pi.\n        // You can use Math.E to get value of e.\n    \
    \    // You can use Math.Exp(x) to calculate e**x.\n        // You can use Math.Log(x)\
    \ to calculate natural logarithm of x.\n        // You can use Math.Log10(x) to\
    \ calculate logarithm with base 10 of x.\n        // You can use Math.Sin(x) to\
    \ calculate sine of x.\n        // You can use Math.Cos(x) to calculate cosine\
    \ of x.\n        // You can use Math.Tan(x) to calculate tangent of x.\n     \
    \   // You can use Math.Asin(x) to calculate arcsine of x.\n        // You can\
    \ use Math.Acos(x) to calculate arccosine of x.\n        // You can use Math.Atan(x)\
    \ to calculate arctangent of x.\n        // You can use Math.Atan2(y, x) to calculate\
    \ arctangent of y/x.\n        // You can use Math.Sinh(x) to calculate hyperbolic\
    \ sine of x.\n       \n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe8doui7m.cs(13,24): error CS0161: ''Problem.IsSimplePower(long, long)'':
    not all code paths return a value

    '
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        var\
    \ y = (long)Math.Pow(n, Math.Log(x, n));\n        return y == x;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <efebd5ff9a254d4988aaccb8ff3a0e92>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <efebd5ff9a254d4988aaccb8ff3a0e92>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return false;\n        if (x\
    \ == n) return true;\n        if (x < n) return false;\n        if (x % n != 0)\
    \ return false;\n        return IsSimplePower(x / n, n);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x < n)\
    \ return false;\n        if (x % n != 0) return false;\n        return IsSimplePower(x\
    \ / n, n);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        //\
    \ x = n**int\n        // log(x) = log(n**int)\n        // log(x) = int*log(n)\n\
    \        // int = log(x)/log(n)\n        // int = log(x,n)\n        // int = log(x)/log(n)\n\
    \        // int = log(x,n)\n        // int = log(x)/log(n)\n        // int = log(x,n)\n\
    \        // int = log(x)/log(n)\n        // int = log(x,n)\n        // int = log(x)/log(n)\n\
    \        // int = log(x,n)\n        // int = log(x)/log(n)\n        // int = log(x,n)\n\
    \        // int = log(x)/log(n)\n        // int = log(x,n)\n        // int = log(x)/log(n)\n\
    \        // int = log(x,n)\n        // int = log(x)/log(n)\n        // int = log(x,n)\n\
    \        // int = log(x)/log(n)\n        // int = log(x,n)\n        // int = log(x)/log(n)\n\
    \        // int = log(x,n)\n        // int = log(x)/log(n)\n        // int = log(x,n)\n\
    \        // int = log(x)/log(n)\n        // int = log(x,n)\n        // int = log(x)/log(n)\n\
    \        // int = log(x,n)\n        // int = log(x)/log(n)\n        // int = log(x,n)\n\
    \        // int = log(x)/log(n)\n        // int = log(x,n)\n        // int = log(x)/log(n)\n\
    \        // int = log(x,n)\n        // int = log(x)/log(n)\n        // int = log(x,n)\n\
    \        // int = log(x)/log(n)\n        // int = log(x,n)\n        // int = log(x)/log(n)\n\
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3k6d1au8.cs(13,24): error CS0161: ''Problem.IsSimplePower(long, long)'':
    not all code paths return a value

    '
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return false;\n        if (x\
    \ == n) return true;\n        if (x < n) return false;\n        if (x % n != 0)\
    \ return false;\n        var y = x / n;\n        return IsSimplePower(y, n);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x < 0 || n < 0)\n        \
    \    return false;\n        if (x == 0)\n            return true;\n        if\
    \ (n == 0)\n            return false;\n        if (x == 1)\n            return\
    \ true;\n        if (n == 1)\n            return false;\n        if (x == n)\n\
    \            return true;\n        if (x % n != 0)\n            return false;\n\
    \        return IsSimplePower(x / n, n);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return false;\n        if (x\
    \ == n) return true;\n        if (x < n) return false;\n        long p = n;\n\
    \        while (p < x) {\n            p *= n;\n        }\n        return p ==\
    \ x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == n) return true;\n        if (x < n) return false;\n        if (x % n !=\
    \ 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6f81f3719251434e9632e77d0dbdbafc>:0 \n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        var p = (long)Math.Log(x,\
    \ n);\n        return Math.Pow(n, p) == x;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return false;\n        if (x\
    \ == n) return true;\n        if (x < n) return false;\n        if (x % n != 0)\
    \ return false;\n        return IsSimplePower(x / n, n);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return false;\n        if (x\
    \ == n) return true;\n        if (x < n) return false;\n        if (x % n != 0)\
    \ return false;\n        return IsSimplePower(x / n, n);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (n == 0) return false;\n        if (x == 0) return false;\n        if (x < 0)\
    \ return false;\n        if (n < 0) return false;\n        if (x == 2) return\
    \ n == 2;\n        if (x == 3) return n == 3;\n        if (x == 4) return n ==\
    \ 2;\n        if (x == 5) return n == 5;\n        if (x == 6) return n == 2 ||\
    \ n == 3;\n        if (x == 7) return n == 7;\n        if (x == 8) return n ==\
    \ 2;\n        if (x == 9) return n == 3;\n        if (x == 10) return n == 2 ||\
    \ n == 5;\n        if (x == 11) return n == 11;\n        if (x == 12) return n\
    \ == 2 || n == 3;\n        if (x == 13) return n == 13;\n        if (x == 14)\
    \ return n == 2 || n == 7;\n        if (x == 15) return n == 3 || n == 5;\n  \
    \      if (x == 16) return n == 2;\n        if (x == 17) return n == 17;\n   \
    \     if (x == 18) return n == 2 || n == 3;\n        if (x == 19) return n ==\
    \ 19;\n        if (x == 20) return n == 2 || n == 5;\n        if (x == 21) return\
    \ n == 3 || n == 7;\n        if (x == 22) return n == 2 || n == 11;\n        if\
    \ (x == 23) return n == 23;\n        if (x == 24) return n == 2 || n == 3;\n \
    \       if (x == 25) return n == 5;\n        if (x == 26) return n == 2 || n ==\
    \ 13;\n        if (x == 27) return n == 3;\n        if (x == 28) return n == 2\
    \ || n == 7;\n        if (x == 29) return n == 29;\n        if (x == 30) return\
    \ n == 2 || n == 3 || n == 5;\n       \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpprxrilmu.cs(13,24): error CS0161: ''Problem.IsSimplePower(long, long)'':
    not all code paths return a value

    '
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c43a1766aad5489e8aac44d60e9346f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c43a1766aad5489e8aac44d60e9346f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        var\
    \ log = Math.Log(x, n);\n        return log == (int)log;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d4e1c62beb64b4884cd28b6d567f7b8>:0 \n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        //\
    \ return true;\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (n == 2) return (x & (x - 1)) == 0;\n        if (x < n) return false;\n    \
    \    if (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return false;\n        if (x\
    \ == n) return true;\n        if (x < n) return false;\n        if (x % n != 0)\
    \ return false;\n        return IsSimplePower(x / n, n);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        var r = (int)Math.Log(x,\
    \ n);\n        return Math.Pow(n, r) == x;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        return IsSimplePower(x / n, n);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5204cb1bebc497188a35337a29a76cc>:0 \n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        var p = (long)Math.Log(x,\
    \ n);\n        return Math.Pow(n, p) == x;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return false;\n        if (x\
    \ == n) return true;\n        if (x < n) return false;\n        if (x % n != 0)\
    \ return false;\n        return IsSimplePower(x / n, n);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return false;\n        if (x\
    \ == n) return true;\n        if (x < n) return false;\n        if (x % n != 0)\
    \ return false;\n        return IsSimplePower(x / n, n);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        long y = n;\n        while (y\
    \ < x) {\n            y *= n;\n        }\n        return y == x;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37727d4f526a443abfcf21a915f7fbe9>:0 \n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   // n**int = x\n        // n**int = n**(log(x)/log(n))\n        // int = log(x)/log(n)\n\
    \        // int = log(x)/log(n)\n        var log = Math.Log(x) / Math.Log(n);\n\
    \        return log == Math.Round(log);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <150f16b264a74fe0a39e2e1f5fa9a913>:0 \n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        var p = (long)Math.Log(x, n);\n        return\
    \ Math.Pow(n, p) == x;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        double r = Math.Log(x) / Math.Log(n);\n\
    \        return r == (int)r;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e123140e2fa142219f2aa37016775824>:0 \n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        long y = n;\n        while (y\
    \ < x) {\n            y *= n;\n        }\n        return y == x;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37727d4f526a443abfcf21a915f7fbe9>:0 \n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (n == 0) return false;\n        if (x == 0) return\
    \ false;\n        if (x < 0) return false;\n        if (n < 0) return false;\n\
    \        long t = n;\n        while (t < x) {\n            t *= n;\n        }\n\
    \        return t == x;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return false;\n        if (x\
    \ == n) return true;\n        if (x < n) return false;\n        return IsSimplePower(x\
    \ / n, n);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9da080161f24c12a048d9c43c5e4872>:0 \n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return false;\n        if (x\
    \ == n) return true;\n        if (x < n) return false;\n        if (x % n != 0)\
    \ return false;\n        return IsSimplePower(x / n, n);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        double log = Math.Log(x, n);\n        return\
    \ log == Math.Floor(log);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // 1. Find the exponent\n    \
    \    // 2. Check if the exponent is an integer\n        // 3. Check if the exponent\
    \ is simple\n        // 4. Check if the exponent is a power of n\n        // 5.\
    \ Return true if all conditions are met\n        // 6. Return false otherwise\n\
    \        // 7. Return false if x is 0\n        // 8. Return false if n is 0\n\
    \        // 9. Return false if n is 1\n        // 10. Return false if x is 1\n\
    \        // 11. Return false if x is negative\n        // 12. Return false if\
    \ n is negative\n        // 13. Return false if x is negative and n is not -1\n\
    \        // 14. Return false if x is negative and n is -1 and x is not -1\n  \
    \      // 15. Return true if x is negative and n is -1 and x is -1\n        //\
    \ 16. Return false if x is negative and n is -1 and x is not -1\n        // 17.\
    \ Return false if n is negative and x is not negative\n        // 18. Return false\
    \ if n is negative and x is negative and x is not -1\n        // 19. Return true\
    \ if n is negative and x is negative and x is -1\n        // 20. Return false\
    \ if n is negative and x is negative and x is not -1\n        // 21. Return false\
    \ if x is negative and n is not -1\n        // 22. Return false if x is negative\
    \ and n is -1 and x is not -1\n        // 23. Return true if x is negative and\
    \ n is -1 and x is -1\n        // 24. Return false if x is negative and n is -1\
    \ and x is not -1\n        // 25. Return false if x is negative and n is not -1\n\
    \        // 26. Return false if x is negative and n is -1 and x is not -1\n  \
    \      // 27. Return true if x is negative and n is -1 and x is -1\n        //\
    \ 28. Return false if x is negative and n is -1 and x is not -1\n        // 29.\
    \ Return false if x is negative and n is not -1\n        // 30. Return false if\
    \ x is negative and n is -1 and x is not -1\n        // 31. Return true if x is\
    \ negative and n is -1 and x\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqd2bum6g.cs(13,24): error CS0161: ''Problem.IsSimplePower(long, long)'':
    not all code paths return a value

    '
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return false;\n        if (x\
    \ == n) return true;\n        if (x < n) return false;\n        if (x % n != 0)\
    \ return false;\n        return IsSimplePower(x / n, n);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   var log = Math.Log(x, n);\n        return log == Math.Floor(log);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <31b7a0a2d41b4259a13bc6e62fbe5bea>:0 \n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return false;\n        if (x\
    \ == n) return true;\n        if (x < n) return false;\n        if (x % n != 0)\
    \ return false;\n        return IsSimplePower(x / n, n);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return false;\n        if (x\
    \ == n) return true;\n        if (x < n) return false;\n        if (x % n != 0)\
    \ return false;\n        return IsSimplePower(x / n, n);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return false;\n        if (x\
    \ == n) return true;\n        if (x < n) return false;\n        if (x % n != 0)\
    \ return false;\n        return IsSimplePower(x / n, n);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   // 1. find the exponent\n        // 2. check if n^exponent = x\n        //\
    \ 3. return true or false\n        // 4. if x is 0, return false\n        // 5.\
    \ if x is 1, return true\n        // 6. if n is 0, return false\n        // 7.\
    \ if n is 1, return false\n        // 8. if n is negative, return false\n    \
    \    // 9. if x is negative, return false\n        // 10. if x is negative and\
    \ n is negative, return false\n        // 11. if x is negative and n is positive,\
    \ return false\n        // 12. if x is positive and n is negative, return false\n\
    \        // 13. if x is positive and n is positive, return true\n        // 14.\
    \ if x is 0 and n is 0, return false\n        // 15. if x is 0 and n is positive,\
    \ return false\n        // 16. if x is 0 and n is negative, return false\n   \
    \     // 17. if x is 1 and n is 0, return false\n        // 18. if x is 1 and\
    \ n is positive, return true\n        // 19. if x is 1 and n is negative, return\
    \ false\n        // 20. if x is positive and n is 0, return false\n        //\
    \ 21. if x is negative and n is 0, return false\n        // 22. if x is positive\
    \ and n is 1, return true\n        // 23. if x is negative and n is 1, return\
    \ false\n        // 24. if x is 0 and n is 1, return false\n        // 25. if\
    \ x is 1 and n is 1, return true\n        // 26. if x is 0 and n is 0, return\
    \ false\n        // 27. if x is 0 and n is 1, return false\n        // 28. if\
    \ x is 1 and n is 0, return false\n        // 29. if x is 1 and n is 1, return\
    \ true\n        // 30. if x is 0 and n is 0, return false\n        // 31. if x\
    \ is 0 and n is 1, return false\n        // 32. if x is 1 and n is 0, return false\n\
    \        // 33. if x is 1 and n is 1, return true\n        // 34. if x is 0 and\
    \ n is 0, return false\n        //\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7lk8c280.cs(13,24): error CS0161: ''Problem.IsSimplePower(long, long)'':
    not all code paths return a value

    '
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   // return true;\n        if (x == 1) return true;\n        if (n == 1) return\
    \ false;\n        if (x == n) return true;\n        if (x < n) return false;\n\
    \        if (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        var r = Math.Log(x) / Math.Log(n);\n\
    \        return r == (int)r;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <86fae4eaa88d401db63c74edefccaadf>:0 \n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        long\
    \ i = 1;\n        while (i < x) {\n            i *= n;\n        }\n        return\
    \ i == x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        return IsSimplePower(x / n, n);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5204cb1bebc497188a35337a29a76cc>:0 \n"
  stdout: ''
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x < n) return false;\n        if\
    \ (x == n) return true;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        if\
    \ (x == 1) return true;\n        if (n == 1) return false;\n        if (x == n)\
    \ return true;\n        if (x < n) return false;\n        if (x % n != 0) return\
    \ false;\n        return IsSimplePower(x / n, n);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        double log = Math.Log(x, n);\n\
    \        return log == Math.Round(log);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fd8d6f5a35aa431f8db8d99954c26828>:0 \n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   // You can use the following functions:\n        // Math.Pow(x, y) - returns\
    \ x to the power of y\n        // Math.Log(x, y) - returns the logarithm of x\
    \ to the base y\n        // Math.Log(x) - returns the natural logarithm of x\n\
    \        // Math.Log10(x) - returns the logarithm of x to the base 10\n      \
    \  // Math.Sqrt(x) - returns the square root of x\n        // Math.Cbrt(x) - returns\
    \ the cubic root of x\n        // Math.Round(x) - rounds x to the nearest integer\n\
    \        // Math.Floor(x) - rounds x down to the nearest integer\n        // Math.Ceiling(x)\
    \ - rounds x up to the nearest integer\n        // Math.Truncate(x) - truncates\
    \ x to an integer\n        // Math.Abs(x) - returns the absolute value of x\n\
    \        // Math.Sign(x) - returns the sign of x\n        // Math.Min(x, y) -\
    \ returns the minimum of x and y\n        // Math.Max(x, y) - returns the maximum\
    \ of x and y\n        // Math.Exp(x) - returns e to the power of x\n        //\
    \ Math.PI - returns the value of pi\n        // Math.E - returns the value of\
    \ e\n        // Math.Sin(x) - returns the sine of x\n        // Math.Cos(x) -\
    \ returns the cosine of x\n        // Math.Tan(x) - returns the tangent of x\n\
    \        // Math.Asin(x) - returns the arcsine of x\n        // Math.Acos(x) -\
    \ returns the arccosine of x\n        // Math.Atan(x) - returns the arctangent\
    \ of x\n        // Math.Sinh(x) - returns the hyperbolic sine of x\n        //\
    \ Math.Cosh(x) - returns the hyperbolic cosine of x\n        // Math.Tanh(x) -\
    \ returns the hyperbolic tangent of x\n        // Math.Asinh(x) - returns the\
    \ inverse hyperbolic sine of x\n        // Math.Acosh\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbq18pt88.cs(13,24): error CS0161: ''Problem.IsSimplePower(long, long)'':
    not all code paths return a value

    '
  timestamp: 1660010278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x < n) return false;\n        if\
    \ (x == n) return true;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        //\
    \ x = n^k\n        // log(x) = k * log(n)\n        // k = log(x) / log(n)\n  \
    \      // k = log(x) / log(n)\n        // k = log(x) / log(n)\n        // k =\
    \ log(x) / log(n)\n        // k = log(x) / log(n)\n        // k = log(x) / log(n)\n\
    \        // k = log(x) / log(n)\n        // k = log(x) / log(n)\n        // k\
    \ = log(x) / log(n)\n        // k = log(x) / log(n)\n        // k = log(x) / log(n)\n\
    \        // k = log(x) / log(n)\n        // k = log(x) / log(n)\n        // k\
    \ = log(x) / log(n)\n        // k = log(x) / log(n)\n        // k = log(x) / log(n)\n\
    \        // k = log(x) / log(n)\n        // k = log(x) / log(n)\n        // k\
    \ = log(x) / log(n)\n        // k = log(x) / log(n)\n        // k = log(x) / log(n)\n\
    \        // k = log(x) / log(n)\n        // k = log(x) / log(n)\n        // k\
    \ = log(x) / log(n)\n        // k = log(x) / log(n)\n        // k = log(x) / log(n)\n\
    \        // k = log(x) / log(n)\n        // k = log(x) / log(n)\n        // k\
    \ = log(x) / log(n)\n        // k = log(x) / log(n)\n        // k = log(x) / log(n)\n\
    \        // k = log(x) / log(n)\n        // k = log(x) / log(n)\n        // k\
    \ = log(x) / log(n)\n        // k = log(x\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprejntrnd.cs(13,24): error CS0161: ''Problem.IsSimplePower(long, long)'':
    not all code paths return a value

    '
  timestamp: 1660010278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a38cdb2bdfb42d3a121042ee5cd3e0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        //\
    \ x = n^a\n        // log(x) = log(n^a)\n        // log(x) = a * log(n)\n    \
    \    // a = log(x) / log(n)\n        // a = log(x, n)\n        // a = log(x) /\
    \ log(n)\n        // a = log(x, n)\n        // a = log(x) / log(n)\n        //\
    \ a = log(x, n)\n        // a = log(x) / log(n)\n        // a = log(x, n)\n  \
    \      // a = log(x) / log(n)\n        // a = log(x, n)\n        // a = log(x)\
    \ / log(n)\n        // a = log(x, n)\n        // a = log(x) / log(n)\n       \
    \ // a = log(x, n)\n        // a = log(x) / log(n)\n        // a = log(x, n)\n\
    \        // a = log(x) / log(n)\n        // a = log(x, n)\n        // a = log(x)\
    \ / log(n)\n        // a = log(x, n)\n        // a = log(x) / log(n)\n       \
    \ // a = log(x, n)\n        // a = log(x) / log(n)\n        // a = log(x, n)\n\
    \        // a = log(x) / log(n)\n        // a = log(x, n)\n        // a = log(x)\
    \ / log(n)\n        // a = log(x, n)\n        // a = log(x) / log(n)\n       \
    \ // a = log(x, n)\n        // a = log(x) / log(n)\n        // a = log(x, n)\n\
    \        // a = log(x) / log(n)\n        // a = log(x, n)\n        // a = log(x)\
    \ / log(n)\n        // a = log(x, n)\n        // a = log(x) / log(n)\n       \
    \ // a = log\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz7f2bj54.cs(13,24): error CS0161: ''Problem.IsSimplePower(long, long)'':
    not all code paths return a value

    '
  timestamp: 1660010278
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code goes here\n     \
    \   if (x == 1) return true;\n        if (n == 1) return x == 1;\n        if (n\
    \ == 2) return x == 1 || x == 2;\n        if (n == 3) return x == 1 || x == 3;\n\
    \        if (n == 4) return x == 1 || x == 4;\n        if (n == 5) return x ==\
    \ 1 || x == 5;\n        if (n == 6) return x == 1 || x == 6;\n        if (n ==\
    \ 7) return x == 1 || x == 7;\n        if (n == 8) return x == 1 || x == 8;\n\
    \        if (n == 9) return x == 1 || x == 9;\n        if (n == 10) return x ==\
    \ 1 || x == 10;\n        if (n == 11) return x == 1 || x == 11;\n        if (n\
    \ == 12) return x == 1 || x == 12;\n        if (n == 13) return x == 1 || x ==\
    \ 13;\n        if (n == 14) return x == 1 || x == 14;\n        if (n == 15) return\
    \ x == 1 || x == 15;\n        if (n == 16) return x == 1 || x == 16;\n       \
    \ if (n == 17) return x == 1 || x == 17;\n        if (n == 18) return x == 1 ||\
    \ x == 18;\n        if (n == 19) return x == 1 || x == 19;\n        if (n == 20)\
    \ return x == 1 || x == 20;\n        if (n == 21) return x == 1 || x == 21;\n\
    \        if (n == 22) return x == 1 || x == 22;\n        if (n == 23) return x\
    \ == 1 || x == 23;\n        if (n == 24) return x == 1 || x == 24;\n        if\
    \ (n == 25) return x == 1 || x == 25;\n        if (n == 26) return x == 1 || x\
    \ == 26;\n        if (n == 27) return x == 1 || x == 27;\n        if (n == 28)\
    \ return x == 1 || x == 28;\n        if (n == 29) return x == 1 || x == 29;\n\
    \        if (n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf_yearuy.cs(45,14): error CS1026: ) expected

    /tmp/tmpf_yearuy.cs(45,14): error CS1525: Invalid expression term ''}''

    /tmp/tmpf_yearuy.cs(45,14): error CS1002: ; expected

    '
  timestamp: 1660010277
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) {\n            return\
    \ true;\n        }\n        if (n == 1) {\n            return false;\n       \
    \ }\n        if (x == n) {\n            return true;\n        }\n        if (x\
    \ < n) {\n            return false;\n        }\n        long power = n;\n    \
    \    while (power < x) {\n            power *= n;\n        }\n        return power\
    \ == x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        var\
    \ root = (long)Math.Pow(x, 1.0 / n);\n        return root * root == x;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e57269bb1b154239ba14516f6bdebdfd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e57269bb1b154239ba14516f6bdebdfd>:0 \n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) {\n            return\
    \ true;\n        }\n        if (n == 1) {\n            return false;\n       \
    \ }\n        if (x == n) {\n            return true;\n        }\n        if (x\
    \ < n) {\n            return false;\n        }\n        long i = 2;\n        while\
    \ (true) {\n            long p = (long)Math.Pow(n, i);\n            if (p == x)\
    \ {\n                return true;\n            }\n            if (p > x) {\n \
    \               return false;\n            }\n            i++;\n        }\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        long nn = n;\n        while (nn\
    \ < x) {\n            nn *= n;\n        }\n        return nn == x;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d0460f71dde94e11874567637fd72fe9>:0 \n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        long i = 1;\n        while (Math.Pow(n,\
    \ i) <= x) {\n            if (Math.Pow(n, i) == x)\n                return true;\n\
    \            i++;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <edfe331b3d3f4b22abf795bd6ca09f70>:0 \n"
  stdout: ''
  timestamp: 1660010278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        if (x == 1) return true;\n   \
    \     if (n == 1) return false;\n        if (x == n) return true;\n        if\
    \ (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010276
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // Your code here\n        //\
    \ return false;\n        if (x == 1) return true;\n        if (n == 1) return\
    \ false;\n        if (x == n) return true;\n        if (x < n) return false;\n\
    \        if (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1660010278
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    public static\
    \ bool IsSimplePower(long x, long n) {\n        // your code here\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c58cb8578ee94088b54ddb30689d7f1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1660010276
