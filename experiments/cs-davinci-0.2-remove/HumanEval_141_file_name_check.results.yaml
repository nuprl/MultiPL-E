language: cs
name: HumanEval_141_file_name_check
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        var parts = file_name.Split('.');\n        if (parts.Length\
    \ != 2) {\n            return \"No\";\n        }\n        var first = parts[0];\n\
    \        var second = parts[1];\n        if (first.Length == 0 || !Char.IsLetter(first[0]))\
    \ {\n            return \"No\";\n        }\n        if (second != \"txt\" && second\
    \ != \"exe\" && second != \"dll\") {\n            return \"No\";\n        }\n\
    \        if (first.Count(c => c >= '0' && c <= '9') > 3) {\n            return\
    \ \"No\";\n        }\n        return \"Yes\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01eeadcc28ab46bfba0ffedabbedc1bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01eeadcc28ab46bfba0ffedabbedc1bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        int count = 0;\n        int dot = 0;\n        int dot_index\
    \ = 0;\n        int i = 0;\n        for (i = 0; i < file_name.Length; i++) {\n\
    \            if (file_name[i] == '.') {\n                dot++;\n            \
    \    dot_index = i;\n            }\n            if (file_name[i] >= '0' && file_name[i]\
    \ <= '9') {\n                count++;\n            }\n        }\n        if (count\
    \ > 3) {\n            return \"No\";\n        }\n        if (dot != 1) {\n   \
    \         return \"No\";\n        }\n        if (file_name[0] < 'a' || file_name[0]\
    \ > 'z') {\n            return \"No\";\n        }\n        string ext = file_name.Substring(dot_index\
    \ + 1);\n        if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") {\n \
    \           return \"No\";\n        }\n        return \"Yes\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <955cbbb94bf7483eb49db306ebecb240>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <955cbbb94bf7483eb49db306ebecb240>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        int count = 0;\n        bool dot = false;\n        bool\
    \ alpha = false;\n        bool txt = false;\n        bool exe = false;\n     \
    \   bool dll = false;\n        for (int i = 0; i < file_name.Length; i++) {\n\
    \            if (file_name[i] >= '0' && file_name[i] <= '9') {\n             \
    \   count++;\n            }\n            if (file_name[i] == '.') {\n        \
    \        dot = true;\n            }\n            if (file_name[i] >= 'a' && file_name[i]\
    \ <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z') {\n                alpha\
    \ = true;\n            }\n            if (file_name.Substring(i, 3) == \"txt\"\
    ) {\n                txt = true;\n            }\n            if (file_name.Substring(i,\
    \ 3) == \"exe\") {\n                exe = true;\n            }\n            if\
    \ (file_name.Substring(i, 3) == \"dll\") {\n                dll = true;\n    \
    \        }\n        }\n        if (count > 3 || !dot || !alpha || !(txt || exe\
    \ || dll)) {\n            return \"No\";\n        }\n        return \"Yes\";\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index and length\
    \ must refer to a location within the string.\nParameter name: length\n  at System.String.Substring\
    \ (System.Int32 startIndex, System.Int32 length) [0x0004c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FileNameCheck (System.String file_name) [0x0009b] in <c78a913e8c5048bfb1e339ecafc7557e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <c78a913e8c5048bfb1e339ecafc7557e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ and length must refer to a location within the string.\nParameter name: length\n\
    \  at System.String.Substring (System.Int32 startIndex, System.Int32 length) [0x0004c]\
    \ in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.FileNameCheck (System.String\
    \ file_name) [0x0009b] in <c78a913e8c5048bfb1e339ecafc7557e>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <c78a913e8c5048bfb1e339ecafc7557e>:0 \n"
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        int count = 0;\n        int dot = 0;\n        int dot_index\
    \ = 0;\n        int digit_count = 0;\n        int letter_count = 0;\n        int\
    \ letter_index = 0;\n        int extension_index = 0;\n        string extension\
    \ = \"\";\n        for (int i = 0; i < file_name.Length; i++) {\n            if\
    \ (file_name[i] == '.') {\n                dot++;\n                dot_index =\
    \ i;\n            }\n            if (file_name[i] >= '0' && file_name[i] <= '9')\
    \ {\n                digit_count++;\n            }\n            if ((file_name[i]\
    \ >= 'a' && file_name[i] <= 'z') || (file_name[i] >= 'A' && file_name[i] <= 'Z'))\
    \ {\n                letter_count++;\n                letter_index = i;\n    \
    \        }\n        }\n        if (dot == 1 && digit_count <= 3 && letter_count\
    \ > 0 && letter_index < dot_index) {\n            extension_index = dot_index\
    \ + 1;\n            for (int i = extension_index; i < file_name.Length; i++) {\n\
    \                extension += file_name[i];\n            }\n            if (extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n            \
    \    return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ff3f269bdf646f3a8f511a8c367f76a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ff3f269bdf646f3a8f511a8c367f76a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        if (file_name.Count(c => c >= '0' && c <= '9') > 3)\n\
    \            return \"No\";\n        if (file_name.Count(c => c == '.') != 1)\n\
    \            return \"No\";\n        var parts = file_name.Split('.');\n     \
    \   if (parts[0].Length == 0 || !(parts[0][0] >= 'a' && parts[0][0] <= 'z' ||\
    \ parts[0][0] >= 'A' && parts[0][0] <= 'Z'))\n            return \"No\";\n   \
    \     if (parts[1] != \"txt\" && parts[1] != \"exe\" && parts[1] != \"dll\")\n\
    \            return \"No\";\n        return \"Yes\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // your code here\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0000b] in <2a3f2a5890c84e6ebfa53f377a6be573>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0000b] in <2a3f2a5890c84e6ebfa53f377a6be573>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        int count = 0;\n        bool dot = false;\n        bool\
    \ valid = false;\n        for (int i = 0; i < file_name.Length; i++) {\n     \
    \       if (file_name[i] >= '0' && file_name[i] <= '9') {\n                count++;\n\
    \            }\n            if (file_name[i] == '.') {\n                dot =\
    \ true;\n            }\n        }\n        if (count <= 3 && dot) {\n        \
    \    string[] parts = file_name.Split('.');\n            if (parts[0].Length >\
    \ 0 && (parts[0][0] >= 'a' && parts[0][0] <= 'z' || parts[0][0] >= 'A' && parts[0][0]\
    \ <= 'Z')) {\n                if (parts[1] == \"txt\" || parts[1] == \"exe\" ||\
    \ parts[1] == \"dll\") {\n                    valid = true;\n                }\n\
    \            }\n        }\n        return valid ? \"Yes\" : \"No\";\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acb4e080011a4735803994c8f8944304>:0 \n"
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // TODO: Implement this function\n        return \"\"\
    ;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf1b002b8f3c4b97b30693b0641bfb51>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf1b002b8f3c4b97b30693b0641bfb51>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        var parts = file_name.Split('.');\n\
    \        if (parts.Length != 2) return \"No\";\n        if (parts[0].Length ==\
    \ 0) return \"No\";\n        if (parts[0].Any(c => c < 'a' || c > 'z') && parts[0].Any(c\
    \ => c < 'A' || c > 'Z')) return \"No\";\n        if (parts[1] != \"txt\" && parts[1]\
    \ != \"exe\" && parts[1] != \"dll\") return \"No\";\n        if (parts[0].Count(c\
    \ => c >= '0' && c <= '9') > 3) return \"No\";\n        return \"Yes\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d0011eca86584116ad260de365dced69>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d0011eca86584116ad260de365dced69>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        string[] parts = file_name.Split('.');\n        if (parts.Length\
    \ != 2) {\n            return \"No\";\n        }\n        if (parts[0].Length\
    \ == 0) {\n            return \"No\";\n        }\n        if (!char.IsLetter(parts[0][0]))\
    \ {\n            return \"No\";\n        }\n        if (parts[1] != \"txt\" &&\
    \ parts[1] != \"exe\" && parts[1] != \"dll\") {\n            return \"No\";\n\
    \        }\n        int count = 0;\n        foreach (char c in parts[0]) {\n \
    \           if (char.IsDigit(c)) {\n                count++;\n            }\n\
    \        }\n        if (count > 3) {\n            return \"No\";\n        }\n\
    \        return \"Yes\";\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        var parts = file_name.Split('.');\n        if (parts.Length\
    \ != 2) return \"No\";\n        if (parts[0].Length == 0) return \"No\";\n   \
    \     if (parts[1] != \"txt\" && parts[1] != \"exe\" && parts[1] != \"dll\") return\
    \ \"No\";\n        if (parts[0].Count(c => c >= '0' && c <= '9') > 3) return \"\
    No\";\n        if (parts[0][0] < 'a' || parts[0][0] > 'z') return \"No\";\n  \
    \      return \"Yes\";\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6672302e2f5426ca858462a1095b369>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6672302e2f5426ca858462a1095b369>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        var dot = file_name.IndexOf('.');\n        if (dot ==\
    \ -1) return \"No\";\n        if (file_name.Substring(dot + 1) != \"txt\" && file_name.Substring(dot\
    \ + 1) != \"exe\" && file_name.Substring(dot + 1) != \"dll\") return \"No\";\n\
    \        if (file_name.Substring(0, dot).Length == 0) return \"No\";\n       \
    \ if (file_name.Substring(0, dot).Count(c => c >= '0' && c <= '9') > 3) return\
    \ \"No\";\n        if (file_name.Substring(0, dot).Count(c => c == '.') > 0) return\
    \ \"No\";\n        if (file_name.Substring(0, dot).Count(c => c == ' ') > 0) return\
    \ \"No\";\n        if (file_name.Substring(0, dot).Count(c => c == '-') > 0) return\
    \ \"No\";\n        if (file_name.Substring(0, dot).Count(c => c == '_') > 0) return\
    \ \"No\";\n        if (file_name.Substring(0, dot).Count(c => c == '+') > 0) return\
    \ \"No\";\n        if (file_name.Substring(0, dot).Count(c => c == '=') > 0) return\
    \ \"No\";\n        if (file_name.Substring(0, dot).Count(c => c == '!') > 0) return\
    \ \"No\";\n        if (file_name.Substring(0, dot).Count(c => c == '@') > 0) return\
    \ \"No\";\n        if (file_name.Substring(0, dot).Count(c => c == '#') > 0) return\
    \ \"No\";\n        if (file_name.Substring(0, dot).Count(c => c == '$') > 0) return\
    \ \"No\";\n        if (file_name.Substring(0, dot).Count(c => c ==\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq6gefldv.cs(38,56): error CS1525: Invalid expression term ''}''

    /tmp/tmpq6gefldv.cs(38,56): error CS1026: ) expected

    /tmp/tmpq6gefldv.cs(38,56): error CS1002: ; expected

    '
  timestamp: 1659977230
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    /this_is_valid.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n \
    \   Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n \
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    I563_Yes3.txtt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final..txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqv3efr0c.cs(19,26): error CS0161: ''Problem.FileNameCheck(string)'': not
    all code paths return a value

    '
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        int count = 0;\n        int dot = 0;\n        int dot_index\
    \ = 0;\n        int count_after_dot = 0;\n        string sub_before_dot = \"\"\
    ;\n        string sub_after_dot = \"\";\n        for (int i = 0; i < file_name.Length;\
    \ i++) {\n            if (file_name[i] >= '0' && file_name[i] <= '9') {\n    \
    \            count++;\n            }\n            if (file_name[i] == '.') {\n\
    \                dot++;\n                dot_index = i;\n            }\n     \
    \   }\n        if (count > 3 || dot != 1) {\n            return \"No\";\n    \
    \    }\n        sub_before_dot = file_name.Substring(0, dot_index);\n        sub_after_dot\
    \ = file_name.Substring(dot_index + 1);\n        for (int i = 0; i < sub_after_dot.Length;\
    \ i++) {\n            if (sub_after_dot[i] >= 'a' && sub_after_dot[i] <= 'z')\
    \ {\n                count_after_dot++;\n            }\n        }\n        if\
    \ (sub_before_dot == \"\" || sub_before_dot[0] < 'A' || sub_before_dot[0] > 'z'\
    \ || count_after_dot != sub_after_dot.Length || (sub_after_dot != \"txt\" && sub_after_dot\
    \ != \"exe\" && sub_after_dot != \"dll\")) {\n            return \"No\";\n   \
    \     }\n        return \"Yes\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3460f042ccd74b5e9acc7f8631227794>:0 \n"
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        var parts = file_name.Split('.');\n        if (parts.Length\
    \ != 2) return \"No\";\n        if (parts[0].Length == 0) return \"No\";\n   \
    \     if (parts[0].Any(c => !char.IsLetter(c))) return \"No\";\n        if (parts[1]\
    \ != \"txt\" && parts[1] != \"exe\" && parts[1] != \"dll\") return \"No\";\n \
    \       if (parts[0].Count(c => char.IsDigit(c)) > 3) return \"No\";\n       \
    \ return \"Yes\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6482cca3571846898ee33c7aef80f1d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6482cca3571846898ee33c7aef80f1d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0000b] in <dbce75b5ce6d49d582f0edb69dd8ca85>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0000b] in <dbce75b5ce6d49d582f0edb69dd8ca85>:0\
    \ \n"
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        string[] parts = file_name.Split('.');\n        if (parts.Length\
    \ != 2) {\n            return \"No\";\n        }\n        if (parts[0].Length\
    \ == 0) {\n            return \"No\";\n        }\n        if (parts[0].Any(c =>\
    \ !Char.IsLetter(c))) {\n            return \"No\";\n        }\n        if (parts[0].Any(c\
    \ => Char.IsDigit(c))) {\n            return \"No\";\n        }\n        if (parts[1]\
    \ != \"txt\" && parts[1] != \"exe\" && parts[1] != \"dll\") {\n            return\
    \ \"No\";\n        }\n        return \"Yes\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27ccbd42b9434db3ab57d586e0ffba0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27ccbd42b9434db3ab57d586e0ffba0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        // Write your code here\n        // To print results\
    \ to the standard output you can use Console.WriteLine()\n        // Example:\
    \ Console.WriteLine(\"Hello world!\");\n        string[] str = file_name.Split('.');\n\
    \        if (str.Length != 2)\n            return \"No\";\n        if (str[0].Length\
    \ == 0)\n            return \"No\";\n        if (str[1] != \"txt\" && str[1] !=\
    \ \"exe\" && str[1] != \"dll\")\n            return \"No\";\n        if (str[0].Count(c\
    \ => c >= '0' && c <= '9') > 3)\n            return \"No\";\n        if (str[0][0]\
    \ < 'a' || str[0][0] > 'z' && str[0][0] < 'A' || str[0][0] > 'Z')\n          \
    \  return \"No\";\n        return \"Yes\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47f1760b1f5244939fcc2eeddab052a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47f1760b1f5244939fcc2eeddab052a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        string[] parts = file_name.Split('.');\n        if (parts.Length\
    \ != 2) {\n            return \"No\";\n        }\n        if (parts[0].Length\
    \ == 0) {\n            return \"No\";\n        }\n        if (!char.IsLetter(parts[0][0]))\
    \ {\n            return \"No\";\n        }\n        if (parts[1] != \"txt\" &&\
    \ parts[1] != \"exe\" && parts[1] != \"dll\") {\n            return \"No\";\n\
    \        }\n        int count = 0;\n        foreach (char c in parts[0]) {\n \
    \           if (char.IsDigit(c)) {\n                count++;\n            }\n\
    \        }\n        if (count > 3) {\n            return \"No\";\n        }\n\
    \        return \"Yes\";\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // TODO: Implement your solution here\n        return\
    \ \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <923fc76babad426aa183ec02496d66f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <923fc76babad426aa183ec02496d66f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        var dotIndex = file_name.IndexOf('.');\n\
    \        if (dotIndex == -1) {\n            return \"No\";\n        }\n      \
    \  var extension = file_name.Substring(dotIndex + 1);\n        if (extension !=\
    \ \"txt\" && extension != \"exe\" && extension != \"dll\") {\n            return\
    \ \"No\";\n        }\n        var digits = file_name.Where(c => c >= '0' && c\
    \ <= '9').Count();\n        if (digits > 3) {\n            return \"No\";\n  \
    \      }\n        var name = file_name.Substring(0, dotIndex);\n        if (name.Length\
    \ == 0) {\n            return \"No\";\n        }\n        if (name[0] < 'a' ||\
    \ name[0] > 'z' && name[0] < 'A' || name[0] > 'Z') {\n            return \"No\"\
    ;\n        }\n        return \"Yes\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9551ddec5ef843f2a454e1a5be69982a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9551ddec5ef843f2a454e1a5be69982a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        var parts = file_name.Split('.');\n        if (parts.Length\
    \ != 2) {\n            return \"No\";\n        }\n        if (parts[0].Length\
    \ == 0 || parts[1].Length == 0) {\n            return \"No\";\n        }\n   \
    \     if (parts[0].Count(c => c >= '0' && c <= '9') > 3) {\n            return\
    \ \"No\";\n        }\n        if (parts[0][0] < 'A' || parts[0][0] > 'z' || (parts[0][0]\
    \ > 'Z' && parts[0][0] < 'a')) {\n            return \"No\";\n        }\n    \
    \    if (parts[1] != \"txt\" && parts[1] != \"exe\" && parts[1] != \"dll\") {\n\
    \            return \"No\";\n        }\n        return \"Yes\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        string[] parts = file_name.Split('.');\n        if (parts.Length\
    \ != 2)\n            return \"No\";\n        if (parts[0].Length == 0)\n     \
    \       return \"No\";\n        if (parts[1] != \"txt\" && parts[1] != \"exe\"\
    \ && parts[1] != \"dll\")\n            return \"No\";\n        if (parts[0].Count(c\
    \ => c >= '0' && c <= '9') > 3)\n            return \"No\";\n        if (parts[0][0]\
    \ < 'A' || parts[0][0] > 'z' || (parts[0][0] > 'Z' && parts[0][0] < 'a'))\n  \
    \          return \"No\";\n        return \"Yes\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    /this_is_valid.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    this_is_valid.wow\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"Is3youfault.txt\")).Equals((\"Yes\")));\n \
    \   Debug.Assert(FileNameCheck((\"no_one#knows.dll\")).Equals((\"Yes\")));\n \
    \   Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    I563_Yes3.txtt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final..txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"final132\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"_f4indsartal132.\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s.\")).Equals((\"No\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        var dotIndex = file_name.IndexOf('.');\n        if (dotIndex\
    \ == -1) {\n            return \"No\";\n        }\n        var extension = file_name.Substring(dotIndex\
    \ + 1);\n        if (extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\") {\n            return \"No\";\n        }\n        var name = file_name.Substring(0,\
    \ dotIndex);\n        if (name.Length == 0) {\n            return \"No\";\n  \
    \      }\n        var digitCount = 0;\n        foreach (var c in name) {\n   \
    \         if (c >= '0' && c <= '9') {\n                digitCount++;\n       \
    \     }\n        }\n        if (digitCount > 3) {\n            return \"No\";\n\
    \        }\n        if (name[0] < 'a' || name[0] > 'z') {\n            return\
    \ \"No\";\n        }\n        return \"Yes\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6c5bfa7c286459dae0a18660dc0e2e6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6c5bfa7c286459dae0a18660dc0e2e6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f6d3a044ac4d54b75cff195ebd0485>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f6d3a044ac4d54b75cff195ebd0485>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        var dot_index = file_name.IndexOf('.');\n        if\
    \ (dot_index == -1) return \"No\";\n        var extension = file_name.Substring(dot_index\
    \ + 1);\n        if (extension != \"txt\" && extension != \"exe\" && extension\
    \ != \"dll\") return \"No\";\n        var name = file_name.Substring(0, dot_index);\n\
    \        if (name.Length == 0) return \"No\";\n        if (!Char.IsLetter(name[0]))\
    \ return \"No\";\n        var digits = name.Count(c => Char.IsDigit(c));\n   \
    \     if (digits > 3) return \"No\";\n        return \"Yes\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        int count = 0;\n        int dot = 0;\n        int ext\
    \ = 0;\n        for (int i = 0; i < file_name.Length; i++) {\n            if (file_name[i]\
    \ == '.') {\n                dot++;\n            }\n            if (file_name[i]\
    \ >= '0' && file_name[i] <= '9') {\n                count++;\n            }\n\
    \            if (i == file_name.Length - 1) {\n                if (file_name[i]\
    \ == 't' && file_name[i - 1] == 'x' && file_name[i - 2] == 't') {\n          \
    \          ext++;\n                }\n                if (file_name[i] == 'e'\
    \ && file_name[i - 1] == 'x' && file_name[i - 2] == 'e') {\n                 \
    \   ext++;\n                }\n                if (file_name[i] == 'd' && file_name[i\
    \ - 1] == 'l' && file_name[i - 2] == 'l') {\n                    ext++;\n    \
    \            }\n            }\n        }\n        if (count > 3 || dot != 1 ||\
    \ ext != 1) {\n            return \"No\";\n        }\n        return \"Yes\";\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1604c3351ff47e2bfbdaa2cbcf08cac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1604c3351ff47e2bfbdaa2cbcf08cac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        var parts = file_name.Split('.');\n        if (parts.Length\
    \ != 2) return \"No\";\n        if (parts[0].Length == 0) return \"No\";\n   \
    \     if (parts[0].Any(c => c < 'a' || c > 'z') && parts[0].Any(c => c < 'A' ||\
    \ c > 'Z')) return \"No\";\n        if (parts[0].Count(c => c >= '0' && c <= '9')\
    \ > 3) return \"No\";\n        if (parts[1] != \"txt\" && parts[1] != \"exe\"\
    \ && parts[1] != \"dll\") return \"No\";\n        return \"Yes\";\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bac7afd7a79d49048b41097584eebaf1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bac7afd7a79d49048b41097584eebaf1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        if (file_name.Length < 5) {\n            return \"No\"\
    ;\n        }\n        if (file_name.Count(c => c == '.') != 1) {\n           \
    \ return \"No\";\n        }\n        var parts = file_name.Split('.');\n     \
    \   if (parts[0].Length == 0 || parts[0].Length > 5) {\n            return \"\
    No\";\n        }\n        if (parts[0].Count(c => c >= '0' && c <= '9') > 3) {\n\
    \            return \"No\";\n        }\n        if (parts[0].Count(c => c >= 'a'\
    \ && c <= 'z') == 0 && parts[0].Count(c => c >= 'A' && c <= 'Z') == 0) {\n   \
    \         return \"No\";\n        }\n        if (parts[1] != \"txt\" && parts[1]\
    \ != \"exe\" && parts[1] != \"dll\") {\n            return \"No\";\n        }\n\
    \        return \"Yes\";\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3ade304402de4b7b8d3dea5e8780c837>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3ade304402de4b7b8d3dea5e8780c837>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f4c3c754b7483f9909a3c27aaed58f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        int count = 0;\n        int dot = 0;\n        for (int\
    \ i = 0; i < file_name.Length; i++) {\n            if (file_name[i] >= '0' &&\
    \ file_name[i] <= '9') {\n                count++;\n            }\n          \
    \  if (file_name[i] == '.') {\n                dot++;\n            }\n       \
    \ }\n        if (count > 3 || dot != 1) {\n            return \"No\";\n      \
    \  }\n        string[] split = file_name.Split('.');\n        if (split[0].Length\
    \ == 0 || (split[0][0] < 'a' || split[0][0] > 'z') && (split[0][0] < 'A' || split[0][0]\
    \ > 'Z')) {\n            return \"No\";\n        }\n        if (split[1] != \"\
    txt\" && split[1] != \"exe\" && split[1] != \"dll\") {\n            return \"\
    No\";\n        }\n        return \"Yes\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        int count = 0;\n        int dot = 0;\n        int dot_index\
    \ = 0;\n        int dot_index_2 = 0;\n        string extension = \"\";\n     \
    \   string name = \"\";\n        string[] extensions = { \"txt\", \"exe\", \"\
    dll\" };\n        for (int i = 0; i < file_name.Length; i++) {\n            if\
    \ (file_name[i] >= '0' && file_name[i] <= '9') {\n                count++;\n \
    \           }\n            if (file_name[i] == '.') {\n                dot++;\n\
    \                dot_index = i;\n            }\n        }\n        if (count >\
    \ 3 || dot != 1) {\n            return \"No\";\n        }\n        name = file_name.Substring(0,\
    \ dot_index);\n        extension = file_name.Substring(dot_index + 1);\n     \
    \   if (name.Length == 0 || (name[0] < 'a' || name[0] > 'z') && (name[0] < 'A'\
    \ || name[0] > 'Z')) {\n            return \"No\";\n        }\n        for (int\
    \ i = 0; i < extensions.Length; i++) {\n            if (extension == extensions[i])\
    \ {\n                dot_index_2++;\n            }\n        }\n        if (dot_index_2\
    \ == 0) {\n            return \"No\";\n        }\n        return \"Yes\";\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        var dotIndex = file_name.IndexOf('.');\n        if (dotIndex\
    \ == -1) return \"No\";\n        var ext = file_name.Substring(dotIndex + 1);\n\
    \        if (ext != \"txt\" && ext != \"exe\" && ext != \"dll\") return \"No\"\
    ;\n        var name = file_name.Substring(0, dotIndex);\n        if (name.Length\
    \ == 0) return \"No\";\n        if (!char.IsLetter(name[0])) return \"No\";\n\
    \        var digits = 0;\n        foreach (var c in name) {\n            if (char.IsDigit(c))\
    \ digits++;\n        }\n        if (digits > 3) return \"No\";\n        return\
    \ \"Yes\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01eeadcc28ab46bfba0ffedabbedc1bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01eeadcc28ab46bfba0ffedabbedc1bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"example.txt\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n \
    \   Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d4f9bed465c4e5690b68cb9cf3cb197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a52fd011dfea427e967baa4c2fc59a5f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        int count = 0;\n        int dot = 0;\n        int ext\
    \ = 0;\n        int start = 0;\n        for (int i = 0; i < file_name.Length;\
    \ i++) {\n            if (file_name[i] == '.') {\n                dot++;\n   \
    \             start = i + 1;\n            }\n            if (file_name[i] >= '0'\
    \ && file_name[i] <= '9') {\n                count++;\n            }\n       \
    \     if (count > 3) {\n                return \"No\";\n            }\n      \
    \      if (dot > 1) {\n                return \"No\";\n            }\n       \
    \     if (file_name[i] == '.') {\n                if (file_name[i - 1] == '.')\
    \ {\n                    return \"No\";\n                }\n            }\n  \
    \          if (file_name[i] == '.') {\n                if (file_name[i + 1] ==\
    \ '.') {\n                    return \"No\";\n                }\n            }\n\
    \            if (file_name[i] == '.') {\n                if (file_name[i + 1]\
    \ == '.') {\n                    return \"No\";\n                }\n         \
    \   }\n            if (file_name[i] == '.') {\n                if (file_name[i\
    \ + 1] == '.') {\n                    return \"No\";\n                }\n    \
    \        }\n            if (file_name[i] == '.') {\n                if (file_name[i\
    \ + 1] == '.') {\n                    return \"No\";\n                }\n    \
    \        }\n            if (file_name[i] == '.') {\n                if (file_name[i\
    \ + 1] == '.') {\n                    return \"No\";\n                }\n    \
    \        }\n            if (file_name[i] == '.') {\n                if (file_name[i\
    \ + 1] == '.') {\n                    return \"No\";\n                }\n    \
    \        }\n            if (file_name[i] == '.') {\n                if\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq_vj4i3u.cs(77,19): error CS1003: Syntax error, ''('' expected

    /tmp/tmpq_vj4i3u.cs(77,19): error CS1525: Invalid expression term ''}''

    /tmp/tmpq_vj4i3u.cs(77,19): error CS1026: ) expected

    /tmp/tmpq_vj4i3u.cs(77,19): error CS1002: ; expected

    /tmp/tmpq_vj4i3u.cs(79,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpq_vj4i3u.cs(108,2): error CS1513: } expected

    '
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        // To print results to\
    \ the standard output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FileNameCheck((\"example.txt\")).Equals((\"Yes\")));\n\
    \    Debug.Assert(FileNameCheck((\"1example.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    s1sdf3.asd\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"\
    Yes\")));\n    Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    ?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <009b0eb5ff234febb7bd1332d9c5d93c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // TODO: Implement this function\n        return \"\"\
    ;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf1b002b8f3c4b97b30693b0641bfb51>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf1b002b8f3c4b97b30693b0641bfb51>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Create a function which takes a string representing a\
    \ file's name, and returns\n    // 'Yes' if the the file's name is valid, and\
    \ returns 'No' otherwise.\n    // A file's name is considered to be valid if and\
    \ only if all the following conditions \n    // are met:\n    // - There should\
    \ not be more than three digits ('0'-'9') in the file's name.\n    // - The file's\
    \ name contains exactly one dot '.'\n    // - The substring before the dot should\
    \ not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z'\
    \ and 'A'-'Z').\n    // - The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n    // Examples:\n    public static string FileNameCheck(string\
    \ file_name) {\n        // Write your code here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
    example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n  \
    \  Debug.Assert(FileNameCheck((\"MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    His12FILE94.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"/this_is_valid.dll\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"Yes\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
    \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
    Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
    )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
    No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\"\
    )));\n    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n  \
    \  Debug.Assert(FileNameCheck((\"final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
    _f4indsartal132.\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\"\
    )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9475bd67983e45b294f61f8f195262b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659977231
