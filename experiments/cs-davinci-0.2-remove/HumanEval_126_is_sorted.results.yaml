language: cs
name: HumanEval_126_is_sorted
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) return true;\n        long prev = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) return false;\n\
    \            prev = lst[i];\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) return true;\n        long last = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] == last) return false;\n\
    \            if (lst[i] < last) return false;\n            last = lst[i];\n  \
    \      }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78e6a1ddf038450daf099560295a1d91>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a371ed34da24e4fa1081bb3c68581cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a371ed34da24e4fa1081bb3c68581cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count < 2) {\n            return true;\n        }\n        for (int i =\
    \ 1; i < lst.Count; i++) {\n            if (lst[i] < lst[i - 1]) {\n         \
    \       return false;\n            }\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c8d322d901f4c898539f46002e1e406>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c8d322d901f4c898539f46002e1e406>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a371ed34da24e4fa1081bb3c68581cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a371ed34da24e4fa1081bb3c68581cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ <= prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <455066ebcf9340b29c4ef2b3e7271778>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ <= prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <455066ebcf9340b29c4ef2b3e7271778>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b29d9b827710410fbae964155fc7f68b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b29d9b827710410fbae964155fc7f68b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: implement this function\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eeca81b46f4f44418dde5d0f11e21652>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eeca81b46f4f44418dde5d0f11e21652>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ <= prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <455066ebcf9340b29c4ef2b3e7271778>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2396b77855d34ef881f2b06706aa6d94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2396b77855d34ef881f2b06706aa6d94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) return true;\n        long prev = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) return false;\n\
    \            prev = lst[i];\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) return true;\n        long prev = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) return false;\n\
    \            prev = lst[i];\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement me\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bcbf43258dd241e7bcb8b8a0c71aa031>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bcbf43258dd241e7bcb8b8a0c71aa031>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long last =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                return false;\n            }\n            last =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f678910723514ea68f891fd78e387217>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f678910723514ea68f891fd78e387217>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: implement\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f6ec34cffbd42e6aee4990ba5803664>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f6ec34cffbd42e6aee4990ba5803664>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b29d9b827710410fbae964155fc7f68b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b29d9b827710410fbae964155fc7f68b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long last =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                return false;\n            }\n            last =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f678910723514ea68f891fd78e387217>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f678910723514ea68f891fd78e387217>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) return true;\n        long prev = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) return false;\n\
    \            prev = lst[i];\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6133e8320a5e483787466e39218b0c06>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6133e8320a5e483787466e39218b0c06>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ return true if list is sorted in ascending order\n        // return false if\
    \ list is not sorted in ascending order\n        // return false if list has more\
    \ than 1 duplicate of the same number\n        // return false if list has negative\
    \ numbers\n        // return false if list has non-integers\n        // return\
    \ false if list is empty\n        // return false if list is null\n        if\
    \ (lst == null) {\n            return false;\n        }\n        if (lst.Count\
    \ == 0) {\n            return false;\n        }\n        for (int i = 0; i < lst.Count\
    \ - 1; i++) {\n            if (lst[i] > lst[i + 1]) {\n                return\
    \ false;\n            }\n            if (lst[i] == lst[i + 1]) {\n           \
    \     return false;\n            }\n            if (lst[i] < 0) {\n          \
    \      return false;\n            }\n            if (lst[i] != (long)lst[i]) {\n\
    \                return false;\n            }\n        }\n        if (lst[lst.Count\
    \ - 1] < 0) {\n            return false;\n        }\n        if (lst[lst.Count\
    \ - 1] != (long)lst[lst.Count - 1]) {\n            return false;\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7dd4a9f61c5483a8e7a51487448f029>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7dd4a9f61c5483a8e7a51487448f029>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6133e8320a5e483787466e39218b0c06>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6133e8320a5e483787466e39218b0c06>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) return true;\n        long prev = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) return false;\n\
    \            prev = lst[i];\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ <= prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <455066ebcf9340b29c4ef2b3e7271778>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement me!\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad4b7af6075f4f679b5830e042d8a7e6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad4b7af6075f4f679b5830e042d8a7e6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: implement\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7ac09dcdc974a528243777b29f35100>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7ac09dcdc974a528243777b29f35100>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ <= prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <455066ebcf9340b29c4ef2b3e7271778>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4fecfa5dcffc4b508f90da8d7810cf3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4fecfa5dcffc4b508f90da8d7810cf3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a371ed34da24e4fa1081bb3c68581cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a371ed34da24e4fa1081bb3c68581cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) return true;\n        long prev = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) return false;\n\
    \            prev = lst[i];\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be590c09c2804772bc41fdc3a8dfc34a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be590c09c2804772bc41fdc3a8dfc34a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2396b77855d34ef881f2b06706aa6d94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2396b77855d34ef881f2b06706aa6d94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) == (false));\n \
    \   Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be590c09c2804772bc41fdc3a8dfc34a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be590c09c2804772bc41fdc3a8dfc34a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long last =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                return false;\n            }\n            last =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f678910723514ea68f891fd78e387217>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f678910723514ea68f891fd78e387217>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) return true;\n        long prev = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) return false;\n\
    \            prev = lst[i];\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a371ed34da24e4fa1081bb3c68581cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a371ed34da24e4fa1081bb3c68581cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a371ed34da24e4fa1081bb3c68581cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a371ed34da24e4fa1081bb3c68581cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Fill in your code here\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <574a0086ac9949cea79f534bbf2c3b09>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <574a0086ac9949cea79f534bbf2c3b09>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Write your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d92effc09b0f4811b098559882df6da6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d92effc09b0f4811b098559882df6da6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Write your code here\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9551337b58447229d9d71f05eb5fdfa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9551337b58447229d9d71f05eb5fdfa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement me\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bcbf43258dd241e7bcb8b8a0c71aa031>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bcbf43258dd241e7bcb8b8a0c71aa031>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b29d9b827710410fbae964155fc7f68b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b29d9b827710410fbae964155fc7f68b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b29d9b827710410fbae964155fc7f68b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b29d9b827710410fbae964155fc7f68b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a371ed34da24e4fa1081bb3c68581cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a371ed34da24e4fa1081bb3c68581cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) return true;\n        long last = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] <= last) return false;\n\
    \            last = lst[i];\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <288008ce3547457986e97f0d51ccf9aa>:0 \n"
  stdout: ''
  timestamp: 1659976909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this method\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a371ed34da24e4fa1081bb3c68581cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a371ed34da24e4fa1081bb3c68581cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b7b4094ac434cc982ecae660bc87478>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b7b4094ac434cc982ecae660bc87478>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: implement\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f6ec34cffbd42e6aee4990ba5803664>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f6ec34cffbd42e6aee4990ba5803664>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) return true;\n        long prev = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) return false;\n\
    \            prev = lst[i];\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) return true;\n        long prev = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) return false;\n\
    \            prev = lst[i];\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: implement\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f6ec34cffbd42e6aee4990ba5803664>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f6ec34cffbd42e6aee4990ba5803664>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) return true;\n        long last = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) return false;\n\
    \            last = lst[i];\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db6455355e404cd8925c5bee2b47f246>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db6455355e404cd8925c5bee2b47f246>:0 \n"
  stdout: ''
  timestamp: 1659976909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement me\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bcbf43258dd241e7bcb8b8a0c71aa031>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bcbf43258dd241e7bcb8b8a0c71aa031>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <514e2701f3c549739fb4a6bead7a2bf0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <514e2701f3c549739fb4a6bead7a2bf0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d88fd5ca2dd44aacb61e48fd0f0ac3f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Write your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d92effc09b0f4811b098559882df6da6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d92effc09b0f4811b098559882df6da6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60c40abfd14f453ca9954d5acde76a74>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] > lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <486f0486eaaa4634bf380dafe3afae6c>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ Write your code here\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d92effc09b0f4811b098559882df6da6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d92effc09b0f4811b098559882df6da6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ <= prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <455066ebcf9340b29c4ef2b3e7271778>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count < 2) {\n            return true;\n        }\n        long prev =\
    \ lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c962dd4083d848d5afcd8695a8c726ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c962dd4083d848d5afcd8695a8c726ae>:0 \n"
  stdout: ''
  timestamp: 1659976909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        //\
    \ TODO: Implement this function\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)5L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>())) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\
    \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5e3bf7b81aa45d784e29d0b81cb5bce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        for\
    \ (int i = 0; i < lst.Count - 1; i++) {\n            if (lst[i] >= lst[i + 1])\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>())) == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f23a81c3774bfaa440de1eea7826d0>:0 \n"
  stdout: ''
  timestamp: 1659976908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of numbers, return whether or not they are\
    \ sorted\n    // in ascending order. If list has more than 1 duplicate of the\
    \ same\n    // number, return False. Assume no negative numbers and only integers.\n\
    \    // Examples\n    public static bool IsSorted(List<long> lst) {\n        if\
    \ (lst.Count == 0) return true;\n        long prev = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) return false;\n\
    \            prev = lst[i];\n        }\n        return true;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) == (true));\n  \
    \  Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L,\
    \ (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}))) == (true));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
    \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) ==\
    \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L,\
    \ (long)2L, (long)1L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n\
    \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\
    \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65a51cc43be54da787e94f9fb04c3108>:0 \n"
  stdout: ''
  timestamp: 1659976908
