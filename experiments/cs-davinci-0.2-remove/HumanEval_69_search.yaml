name: HumanEval_69_search
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a non-empty list of positive integers. Return\
  \ the greatest integer that is greater than \n    // zero, and has a frequency greater\
  \ than or equal to the value of the integer itself. \n    // The frequency of an\
  \ integer is the number of times it appears in the list.\n    // If no such a value\
  \ exist, return -1.\n    // Examples:\n    public static long Search(List<long>\
  \ lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
  \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
  \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
  \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
  \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
  \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
  \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
  \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
  \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
  \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
  \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
  \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
  \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
  \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
  \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,\
  \ (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,\
  \ (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))\
  \ == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==\
  \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
  \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
  \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
  \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
  \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
  \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
  \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n  \
  \  Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
  \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
  \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
  \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
  \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L,\
  \ (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L,\
  \ (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n\
  \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L, (long)6L,\
  \ (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L, (long)10L,\
  \ (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n\
  \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)3L,\
  \ (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L, (long)6L,\
  \ (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L, (long)7L,\
  \ (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L,\
  \ (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L,\
  \ (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L,\
  \ (long)10L, (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,\
  \ (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,\
  \ (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))\
  \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,\
  \ (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
completions: ["        // Your code goes here.\n        return -1;", "        var\
    \ dict = new Dictionary<long, long>();\n        foreach (var item in lst) {\n\
    \            if (dict.ContainsKey(item)) {\n                dict[item]++;\n  \
    \          } else {\n                dict[item] = 1;\n            }\n        }\n\
    \        var max = -1;\n        foreach (var item in dict) {\n            if (item.Key\
    \ <= item.Value && item.Key > max) {\n                max = item.Key;\n      \
    \      }\n        }\n        return max;", "        // Write your code here\n\
    \        return -1;", "        // Your code goes here.\n        return -1;", " \
    \       // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code here\n        return -1;",
  "        // your code goes here\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Write your code here\n        return\
    \ -1;", "        long max = -1;\n        long maxCount = 0;\n        Dictionary<long,\
    \ long> counts = new Dictionary<long, long>();\n        foreach (long i in lst)\
    \ {\n            if (counts.ContainsKey(i)) {\n                counts[i]++;\n\
    \            } else {\n                counts[i] = 1;\n            }\n       \
    \     if (counts[i] >= i && i > maxCount) {\n                max = i;\n      \
    \          maxCount = counts[i];\n            }\n        }\n        return max;",
  "        // Your code here\n        return -1;", "        // Your code goes here.\n\
    \        return -1;", "        // Your code goes here.\n        return -1;", " \
    \       var dict = new Dictionary<long, long>();\n        foreach (var item in\
    \ lst) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n\
    \            } else {\n                dict[item] = 1;\n            }\n      \
    \  }\n        long max = 0;\n        foreach (var item in dict) {\n          \
    \  if (item.Key <= item.Value && item.Key > max) {\n                max = item.Key;\n\
    \            }\n        }\n        return max;", "        // your code goes here\n\
    \        return 0;", "        // Your code here\n        return -1;", "      \
    \  // Your code goes here.\n        return -1;", "        // Your code goes here.\n\
    \        return -1;", "        // Your code goes here.\n        return -1;", " \
    \       long result = -1;\n        Dictionary<long, long> dict = new Dictionary<long,\
    \ long>();\n        foreach (long i in lst) {\n            if (dict.ContainsKey(i))\
    \ {\n                dict[i]++;\n            } else {\n                dict.Add(i,\
    \ 1);\n            }\n        }\n        foreach (long i in dict.Keys) {\n   \
    \         if (i > 0 && dict[i] >= i) {\n                result = i;\n        \
    \    }\n        }\n        return result;", "        // Your code goes here.\n\
    \        return -1;", "        // Your code goes here.\n        return -1;", " \
    \       // Your code goes here\n        return 0;", "        var counts = lst.GroupBy(x\
    \ => x).ToDictionary(x => x.Key, x => x.Count());\n        var max = counts.Max(x\
    \ => x.Key);\n        var result = counts.Where(x => x.Value >= x.Key).Max(x =>\
    \ x.Key);\n        return result > 0 ? result : -1;", "        // Write your code\
    \ here\n        return -1;", "        // Your code here\n        return 0;", " \
    \       // Your code goes here\n        return -1;", "        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var item in lst) {\n            if (dict.ContainsKey(item))\
    \ {\n                dict[item]++;\n            } else {\n                dict[item]\
    \ = 1;\n            }\n        }\n        var max = -1L;\n        foreach (var\
    \ item in dict) {\n            if (item.Key <= item.Value && item.Key > max) {\n\
    \                max = item.Key;\n            }\n        }\n        return max;",
  "        // Your code here\n        return -1;", "        // Your code here\n  \
    \      return -1;", "        // Your code goes here.\n        return -1;", " \
    \       // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code here\n        return -1;", "        var dict = new\
    \ Dictionary<long, long>();\n        foreach (var i in lst) {\n            if\
    \ (dict.ContainsKey(i)) {\n                dict[i]++;\n            } else {\n\
    \                dict[i] = 1;\n            }\n        }\n        var max = -1L;\n\
    \        foreach (var kvp in dict) {\n            if (kvp.Key <= kvp.Value &&\
    \ kvp.Key > max) {\n                max = kvp.Key;\n            }\n        }\n\
    \        return max;", "        // Your code here\n        return -1;", "    \
    \    // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return 0;", "        // Write your code here\n        return\
    \ -1;", "        var dict = new Dictionary<long, long>();\n        foreach (var\
    \ item in lst) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n\
    \            } else {\n                dict[item] = 1;\n            }\n      \
    \  }\n        var max = dict.Keys.Max();\n        var maxValue = dict[max];\n\
    \        if (maxValue >= max) {\n            return max;\n        }\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        var dict\
    \ = new Dictionary<long, long>();\n        foreach (var item in lst) {\n     \
    \       if (dict.ContainsKey(item)) {\n                dict[item]++;\n       \
    \     } else {\n                dict[item] = 1;\n            }\n        }\n  \
    \      var max = -1L;\n        foreach (var item in dict) {\n            if (item.Key\
    \ <= item.Value && item.Key > max) {\n                max = item.Key;\n      \
    \      }\n        }\n        return max;", "        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var item in lst) {\n            if (dict.ContainsKey(item))\
    \ {\n                dict[item]++;\n            } else {\n                dict[item]\
    \ = 1;\n            }\n        }\n        var max = -1L;\n        foreach (var\
    \ item in dict) {\n            if (item.Key <= item.Value && item.Key > max) {\n\
    \                max = item.Key;\n            }\n        }\n        return max;",
  "        // Your code goes here.\n        return -1;", "        long result = -1;\n\
    \        Dictionary<long, long> dict = new Dictionary<long, long>();\n       \
    \ foreach (long i in lst) {\n            if (dict.ContainsKey(i)) {\n        \
    \        dict[i]++;\n            } else {\n                dict.Add(i, 1);\n \
    \           }\n        }\n        foreach (long i in dict.Keys) {\n          \
    \  if (i > 0 && dict[i] >= i) {\n                result = i;\n            }\n\
    \        }\n        return result;", "        Dictionary<long, long> freq = new\
    \ Dictionary<long, long>();\n        foreach (long i in lst) {\n            if\
    \ (freq.ContainsKey(i)) {\n                freq[i]++;\n            } else {\n\
    \                freq[i] = 1;\n            }\n        }\n        long max = -1;\n\
    \        foreach (long i in freq.Keys) {\n            if (i > 0 && freq[i] >=\
    \ i && i > max) {\n                max = i;\n            }\n        }\n      \
    \  return max;", "        // Your code goes here.\n        return -1;", "    \
    \    // Write your code here\n        return -1;", "        // Your code goes\
    \ here.\n        return 0;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var item in lst) {\n            if (dict.ContainsKey(item))\
    \ {\n                dict[item]++;\n            } else {\n                dict[item]\
    \ = 1;\n            }\n        }\n        var max = -1L;\n        foreach (var\
    \ item in dict) {\n            if (item.Key <= item.Value && item.Key > max) {\n\
    \                max = item.Key;\n            }\n        }\n        return max;",
  "        // Write your code here\n        return -1;", "        var freq = new Dictionary<long,\
    \ long>();\n        foreach (var i in lst) {\n            if (!freq.ContainsKey(i))\
    \ {\n                freq[i] = 0;\n            }\n            freq[i]++;\n   \
    \     }\n        var result = -1;\n        foreach (var kv in freq) {\n      \
    \      if (kv.Key <= kv.Value && kv.Key > result) {\n                result =\
    \ kv.Key;\n            }\n        }\n        return result;", "        // Your\
    \ code goes here.\n        return -1;", "        // Your code goes here.\n   \
    \     return -1;", "        // Write your code here\n        return -1;", "  \
    \      // Your code goes here.\n        return -1;", "        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var i in lst) {\n            if (dict.ContainsKey(i))\
    \ {\n                dict[i]++;\n            } else {\n                dict[i]\
    \ = 1;\n            }\n        }\n        var max = -1L;\n        foreach (var\
    \ kvp in dict) {\n            if (kvp.Key <= kvp.Value && kvp.Key > max) {\n \
    \               max = kvp.Key;\n            }\n        }\n        return max;",
  "        // Your code goes here.\n        return -1;", "        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var item in lst) {\n            if (dict.ContainsKey(item))\
    \ {\n                dict[item]++;\n            } else {\n                dict[item]\
    \ = 1;\n            }\n        }\n        var max = -1L;\n        foreach (var\
    \ item in dict) {\n            if (item.Key <= item.Value && item.Key > max) {\n\
    \                max = item.Key;\n            }\n        }\n        return max;",
  "        var dict = new Dictionary<long, long>();\n        foreach (var i in lst)\
    \ {\n            if (dict.ContainsKey(i)) {\n                dict[i]++;\n    \
    \        } else {\n                dict[i] = 1;\n            }\n        }\n  \
    \      var max = -1L;\n        foreach (var kvp in dict) {\n            if (kvp.Key\
    \ <= kvp.Value && kvp.Key > max) {\n                max = kvp.Key;\n         \
    \   }\n        }\n        return max;", "        // Your code goes here.\n   \
    \     return -1;", "        // Your code goes here.\n        return -1;", "  \
    \      // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here\n        return -1;", "        // Write your code here\n        return\
    \ -1;", "        // Write your code here\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        // Your code goes here.\n   \
    \     return -1;", "        // Your code goes here.\n        return -1;", "  \
    \      // Your code goes here.\n        return 0;", "        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var item in lst) {\n            if (dict.ContainsKey(item))\
    \ {\n                dict[item]++;\n            } else {\n                dict[item]\
    \ = 1;\n            }\n        }\n        var max = -1;\n        foreach (var\
    \ item in dict) {\n            if (item.Key <= item.Value && item.Key > max) {\n\
    \                max = item.Key;\n            }\n        }\n        return max;",
  "        // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code here.\n        return 0;",
  "        // Your code goes here.\n        return -1;", "        // Your code here\n\
    \        return 0;", "        // Write your code here\n        return -1;", " \
    \       // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        var counts = lst.GroupBy(x => x).ToDictionary(g\
    \ => g.Key, g => g.Count());\n        var max = counts.Keys.Max();\n        for\
    \ (long i = max; i > 0; i--) {\n            if (counts.ContainsKey(i) && counts[i]\
    \ >= i) {\n                return i;\n            }\n        }\n        return\
    \ -1;", "        // Your code goes here\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        // Write your code here\n   \
    \     return -1;", "        // Your code goes here.\n        return -1;", "  \
    \      var counts = lst.GroupBy(x => x).ToDictionary(x => x.Key, x => x.Count());\n\
    \        var keys = counts.Keys.OrderByDescending(x => x).ToList();\n        foreach\
    \ (var key in keys) {\n            if (key <= counts[key]) {\n               \
    \ return key;\n            }\n        }\n        return -1;", "        // Write\
    \ your code here\n        return -1;", "        // Write your code here.\n   \
    \     return -1;", "        var dict = new Dictionary<long, long>();\n       \
    \ foreach (var x in lst) {\n            if (dict.ContainsKey(x)) {\n         \
    \       dict[x]++;\n            } else {\n                dict[x] = 1;\n     \
    \       }\n        }\n        var max = -1L;\n        foreach (var kvp in dict)\
    \ {\n            if (kvp.Key <= kvp.Value && kvp.Key > max) {\n              \
    \  max = kvp.Key;\n            }\n        }\n        return max;", "        //\
    \ Your code goes here.\n        return -1;", "        // Your code goes here.\n\
    \        Dictionary<long, long> dict = new Dictionary<long, long>();\n       \
    \ foreach (long item in lst) {\n            if (dict.ContainsKey(item)) {\n  \
    \              dict[item]++;\n            } else {\n                dict.Add(item,\
    \ 1);\n            }\n        }\n        long max = -1;\n        foreach (KeyValuePair<long,\
    \ long> item in dict) {\n            if (item.Key <= item.Value && item.Key >\
    \ max) {\n                max = item.Key;\n            }\n        }\n        return\
    \ max;", "        // Your code goes here.\n        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var item in lst) {\n            if (dict.ContainsKey(item))\
    \ {\n                dict[item]++;\n            } else {\n                dict.Add(item,\
    \ 1);\n            }\n        }\n        var max = -1;\n        foreach (var item\
    \ in dict) {\n            if (item.Key <= item.Value && item.Key > max) {\n  \
    \              max = item.Key;\n            }\n        }\n        return max;",
  "        var freq = new Dictionary<long, long>();\n        foreach (var x in lst)\
    \ {\n            if (!freq.ContainsKey(x)) {\n                freq[x] = 0;\n \
    \           }\n            freq[x]++;\n        }\n        var max = -1L;\n   \
    \     foreach (var x in freq.Keys) {\n            if (x <= freq[x] && x > max)\
    \ {\n                max = x;\n            }\n        }\n        return max;",
  "        // Your code goes here.\n        return 0;", "        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var item in lst) {\n            if (dict.ContainsKey(item))\
    \ {\n                dict[item]++;\n            } else {\n                dict[item]\
    \ = 1;\n            }\n        }\n        var max = -1L;\n        foreach (var\
    \ item in dict) {\n            if (item.Key <= item.Value && item.Key > max) {\n\
    \                max = item.Key;\n            }\n        }\n        return max;",
  "        // Your code goes here\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return 0;", "        // Your\
    \ code goes here.\n        return -1;", "        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var item in lst) {\n            if (dict.ContainsKey(item))\
    \ {\n                dict[item]++;\n            } else {\n                dict[item]\
    \ = 1;\n            }\n        }\n        var max = -1L;\n        foreach (var\
    \ item in dict) {\n            if (item.Key <= item.Value && item.Key > max) {\n\
    \                max = item.Key;\n            }\n        }\n        return max;",
  "        // Your code goes here.\n        return -1;", "        // Write your code\
    \ here\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        var dict = new Dictionary<long, long>();\n        foreach (var\
    \ item in lst) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n\
    \            } else {\n                dict[item] = 1;\n            }\n      \
    \  }\n        var max = -1L;\n        foreach (var item in dict) {\n         \
    \   if (item.Key <= item.Value && item.Key > max) {\n                max = item.Key;\n\
    \            }\n        }\n        return max;", "        // Your code here\n\
    \        return -1;", "        // Your code goes here.\n        return -1;", " \
    \       // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        // your code goes here\n    \
    \    return -1;", "        // Your code goes here\n        return -1;", "    \
    \    // Your code goes here.\n        return -1;", "        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var item in lst) {\n            if (dict.ContainsKey(item))\
    \ {\n                dict[item]++;\n            } else {\n                dict[item]\
    \ = 1;\n            }\n        }\n        var result = -1;\n        foreach (var\
    \ item in dict) {\n            if (item.Key <= item.Value && item.Key > result)\
    \ {\n                result = item.Key;\n            }\n        }\n        return\
    \ result;", "        // Your code goes here.\n        return 0;", "        var\
    \ freq = new Dictionary<long, long>();\n        foreach (var x in lst) {\n   \
    \         if (!freq.ContainsKey(x)) {\n                freq[x] = 0;\n        \
    \    }\n            freq[x]++;\n        }\n        var max = -1L;\n        foreach\
    \ (var x in freq.Keys) {\n            if (x <= freq[x] && x > max) {\n       \
    \         max = x;\n            }\n        }\n        return max;", "        //\
    \ Your code goes here.\n        return -1;", "        // Write your code here\n\
    \        return -1;", "        // Your code goes here.\n        return -1;", " \
    \       var dict = new Dictionary<long, long>();\n        foreach (var i in lst)\
    \ {\n            if (dict.ContainsKey(i)) {\n                dict[i]++;\n    \
    \        } else {\n                dict[i] = 1;\n            }\n        }\n  \
    \      var max = -1L;\n        foreach (var kvp in dict) {\n            if (kvp.Key\
    \ <= kvp.Value && kvp.Key > max) {\n                max = kvp.Key;\n         \
    \   }\n        }\n        return max;", "        // Your code goes here.\n   \
    \     return -1;", "        var dict = new Dictionary<long, long>();\n       \
    \ foreach (var i in lst) {\n            if (dict.ContainsKey(i)) {\n         \
    \       dict[i]++;\n            } else {\n                dict[i] = 1;\n     \
    \       }\n        }\n        var max = -1L;\n        foreach (var kv in dict)\
    \ {\n            if (kv.Key <= kv.Value && kv.Key > max) {\n                max\
    \ = kv.Key;\n            }\n        }\n        return max;", "        // Your\
    \ code goes here.\n        return -1;", "        // Your code goes here.\n   \
    \     return -1;", "        // Your code goes here.\n        return -1;", "  \
    \      // Your code goes here.\n        return -1;", "        // Your code here\n\
    \        return -1;", "        // Your code here.\n        return -1;", "    \
    \    // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ 0;", "        // Your code goes here.\n        return -1;", "        var counts\
    \ = new Dictionary<long, long>();\n        foreach (var i in lst) {\n        \
    \    if (counts.ContainsKey(i)) {\n                counts[i]++;\n            }\
    \ else {\n                counts[i] = 1;\n            }\n        }\n        var\
    \ max = -1L;\n        foreach (var kvp in counts) {\n            if (kvp.Key <=\
    \ kvp.Value && kvp.Key > max) {\n                max = kvp.Key;\n            }\n\
    \        }\n        return max;", "        var dict = new Dictionary<long, long>();\n\
    \        foreach (var i in lst) {\n            if (dict.ContainsKey(i)) {\n  \
    \              dict[i]++;\n            } else {\n                dict[i] = 1;\n\
    \            }\n        }\n        var max = -1L;\n        foreach (var kv in\
    \ dict) {\n            if (kv.Key <= kv.Value && kv.Key > max) {\n           \
    \     max = kv.Key;\n            }\n        }\n        return max;", "       \
    \ // Your code goes here.\n        return -1;", "        // Your code goes here.\n\
    \        Dictionary<long, long> dict = new Dictionary<long, long>();\n       \
    \ foreach (long i in lst) {\n            if (dict.ContainsKey(i)) {\n        \
    \        dict[i]++;\n            } else {\n                dict.Add(i, 1);\n \
    \           }\n        }\n        long max = -1;\n        foreach (long i in dict.Keys)\
    \ {\n            if (i > 0 && dict[i] >= i && i > max) {\n                max\
    \ = i;\n            }\n        }\n        return max;", "        // Your code\
    \ here\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var item in lst) {\n            if (dict.ContainsKey(item))\
    \ {\n                dict[item]++;\n            } else {\n                dict[item]\
    \ = 1;\n            }\n        }\n        var max = -1L;\n        foreach (var\
    \ item in dict) {\n            if (item.Key <= item.Value && item.Key > max) {\n\
    \                max = item.Key;\n            }\n        }\n        return max;",
  "        // Your code here\n        return -1;", "        // Your code goes here.\n\
    \        return -1;", "        // Your code goes here.\n        return -1;", " \
    \       // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here\n        return -1;", "        var dict = new Dictionary<long, long>();\n\
    \        foreach (var i in lst) {\n            if (dict.ContainsKey(i)) {\n  \
    \              dict[i]++;\n            } else {\n                dict[i] = 1;\n\
    \            }\n        }\n        long max = -1;\n        foreach (var kv in\
    \ dict) {\n            if (kv.Key <= kv.Value && kv.Key > max) {\n           \
    \     max = kv.Key;\n            }\n        }\n        return max;", "       \
    \ // Your code goes here.\n        return -1;", "        Dictionary<long, long>\
    \ dic = new Dictionary<long, long>();\n        foreach (long i in lst) {\n   \
    \         if (dic.ContainsKey(i)) {\n                dic[i]++;\n            }\
    \ else {\n                dic.Add(i, 1);\n            }\n        }\n        long\
    \ max = -1;\n        foreach (long i in dic.Keys) {\n            if (i > 0 &&\
    \ dic[i] >= i && i > max) {\n                max = i;\n            }\n       \
    \ }\n        return max;", "        // Your code goes here.\n        return -1;",
  "        long result = -1;\n        Dictionary<long, long> dict = new Dictionary<long,\
    \ long>();\n        foreach (long i in lst) {\n            if (dict.ContainsKey(i))\
    \ {\n                dict[i]++;\n            } else {\n                dict.Add(i,\
    \ 1);\n            }\n        }\n        foreach (KeyValuePair<long, long> kvp\
    \ in dict) {\n            if (kvp.Key <= kvp.Value) {\n                result\
    \ = Math.Max(result, kvp.Key);\n            }\n        }\n        return result;",
  "        // Your code here\n        return -1;", "        // Your code goes here.\n\
    \        return -1;", "        // Your code goes here\n        return -1;", " \
    \       // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Write\
    \ your code here\n        return -1;", "        // Your code goes here.\n    \
    \    return -1;", "        // Your code goes here\n        return -1;", "    \
    \    // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var item in lst) {\n            if (dict.ContainsKey(item))\
    \ {\n                dict[item]++;\n            } else {\n                dict.Add(item,\
    \ 1);\n            }\n        }\n        var max = -1;\n        foreach (var item\
    \ in dict) {\n            if (item.Key <= item.Value && item.Key > max) {\n  \
    \              max = item.Key;\n            }\n        }\n        return max;",
  "        long max = -1;\n        Dictionary<long, long> dict = new Dictionary<long,\
    \ long>();\n        foreach (long i in lst) {\n            if (dict.ContainsKey(i))\
    \ {\n                dict[i]++;\n            } else {\n                dict.Add(i,\
    \ 1);\n            }\n        }\n        foreach (long i in dict.Keys) {\n   \
    \         if (i > 0 && dict[i] >= i && i > max) {\n                max = i;\n\
    \            }\n        }\n        return max;", "        // Your code goes here.\n\
    \        return -1;", "        var counts = new Dictionary<long, long>();\n  \
    \      foreach (var i in lst) {\n            if (counts.ContainsKey(i)) {\n  \
    \              counts[i]++;\n            } else {\n                counts[i] =\
    \ 1;\n            }\n        }\n        var max = -1L;\n        foreach (var kv\
    \ in counts) {\n            if (kv.Key <= kv.Value && kv.Key > max) {\n      \
    \          max = kv.Key;\n            }\n        }\n        return max;", "  \
    \      var dict = new Dictionary<long, long>();\n        foreach (var item in\
    \ lst) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n\
    \            } else {\n                dict[item] = 1;\n            }\n      \
    \  }\n        var max = -1L;\n        foreach (var item in dict) {\n         \
    \   if (item.Key <= item.Value && item.Key > max) {\n                max = item.Key;\n\
    \            }\n        }\n        return max;", "        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var i in lst) {\n            if (dict.ContainsKey(i))\
    \ {\n                dict[i]++;\n            } else {\n                dict[i]\
    \ = 1;\n            }\n        }\n        var max = -1L;\n        foreach (var\
    \ kvp in dict) {\n            if (kvp.Key <= kvp.Value && kvp.Key > max) {\n \
    \               max = kvp.Key;\n            }\n        }\n        return max;",
  "        // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        long max = -1;\n        long\
    \ maxCount = 0;\n        Dictionary<long, long> counts = new Dictionary<long,\
    \ long>();\n        foreach (long i in lst) {\n            if (counts.ContainsKey(i))\
    \ {\n                counts[i]++;\n            } else {\n                counts[i]\
    \ = 1;\n            }\n            if (counts[i] >= i && i > maxCount) {\n   \
    \             max = i;\n                maxCount = counts[i];\n            }\n\
    \        }\n        return max;", "        // Write your code here\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        // Your code goes here.\n   \
    \     return -1;", "        // Your code goes here.\n        return -1;", "  \
    \      // Write your code here\n        return 0;", "        // Your code goes\
    \ here\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        // Your code here\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Write\
    \ your code here\n        return -1;", "        var freq = new Dictionary<long,\
    \ long>();\n        foreach (var i in lst) {\n            if (!freq.ContainsKey(i))\
    \ {\n                freq[i] = 0;\n            }\n            freq[i]++;\n   \
    \     }\n        var max = -1L;\n        foreach (var kv in freq) {\n        \
    \    if (kv.Key <= kv.Value && kv.Key > max) {\n                max = kv.Key;\n\
    \            }\n        }\n        return max;", "        // Your code goes here.\n\
    \        return -1;", "        // Your code goes here.\n        return -1;", " \
    \       // Your code goes here.\n        return -1;", "        // Write your code\
    \ here\n        return -1;"]
stop_tokens:
- "\n    }\n"
