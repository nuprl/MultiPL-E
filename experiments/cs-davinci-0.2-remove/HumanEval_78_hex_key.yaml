name: HumanEval_78_hex_key
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You have been tasked to write a function that receives \n  \
  \  // a hexadecimal number as a string and counts the number of hexadecimal \n \
  \   // digits that are primes (prime number, or a prime, is a natural number \n\
  \    // greater than 1 that is not a product of two smaller natural numbers).\n\
  \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
  \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
  \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
  \ 13).\n    // Note: you may assume the input is always correct or empty string,\
  \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n   \
  \ public static long HexKey(string num) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
  AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
  ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
  123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
  )) == (12L));\n    }\n\n}\n"
completions: ["        long count = 0;\n        for (int i = 0; i < num.Length; i++)\
    \ {\n            if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n                count++;\n    \
    \        }\n        }\n        return count;", "        // your code here\n  \
    \      return 0;", "        // your code here\n        return 0;", "        //\
    \ your code here\n        return 0;", "        var primes = new HashSet<char>\
    \ { '2', '3', '5', '7', 'B', 'D' };\n        return num.Count(c => primes.Contains(c));",
  '        return num.ToUpper().Count(x => "2357BD".Contains(x));', '        return
    num.ToUpper().Count(c => "2357BD".Contains(c));', "        var primes = new HashSet<char>()\
    \ { '2', '3', '5', '7', 'B', 'D' };\n        return num.Count(c => primes.Contains(c));",
  "        // your code here\n        return 0;", "        // your code here\n   \
    \     return 0;", "        // your code here\n        return 0;", '        return
    num.ToCharArray().Count(c => "2357BD".Contains(c));', "        var primes = new[]\
    \ { 2, 3, 5, 7, 11, 13 };\n        return num.ToUpper().Count(c => primes.Contains(c\
    \ - '0'));", "        // Your code here\n        return 0;", "        // your\
    \ code here\n        return 0;", "        long result = 0;\n        var primes\
    \ = new List<int> { 2, 3, 5, 7, 11, 13 };\n        foreach (var c in num) {\n\
    \            var n = (int)c;\n            if (n >= 48 && n <= 57) {\n        \
    \        var d = n - 48;\n                if (primes.Contains(d)) {\n        \
    \            result++;\n                }\n            } else if (n >= 65 && n\
    \ <= 70) {\n                var d = n - 55;\n                if (primes.Contains(d))\
    \ {\n                    result++;\n                }\n            }\n       \
    \ }\n        return result;", "        var primes = new HashSet<int> { 2, 3, 5,\
    \ 7, 11, 13 };\n        return num.ToCharArray().Select(c => (int)c).Where(c =>\
    \ primes.Contains(c)).Count();", "        // Your code here\n        return 0;",
  "        // your code here\n        return 0;", "        // Your code here\n   \
    \     return 0;", "        // your code here\n        return 0;", "        //\
    \ your code here\n        return 0;", "        var primes = new List<int>() {\
    \ 2, 3, 5, 7, 11, 13 };\n        var hex = new List<char>() { '2', '3', '5', '7',\
    \ 'B', 'D' };\n        var count = 0;\n        foreach (var c in num) {\n    \
    \        if (hex.Contains(c)) {\n                count++;\n            }\n   \
    \     }\n        return count;", "        // your code here\n        return 0;",
  "        long count = 0;\n        for (int i = 0; i < num.Length; i++) {\n     \
    \       if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' ||\
    \ num[i] == 'B' || num[i] == 'D') {\n                count++;\n            }\n\
    \        }\n        return count;", "        // your code here\n        return\
    \ 0;", "        // your code here\n        return 0;", "        // your code here\n\
    \        return 0;", "        // your code here\n        return 0;", "       \
    \ var primes = new HashSet<int> { 2, 3, 5, 7, 11, 13 };\n        return num.ToCharArray().Select(c\
    \ => int.Parse(c.ToString(), System.Globalization.NumberStyles.HexNumber)).Count(i\
    \ => primes.Contains(i));", "        // Your code here\n        return 0;", " \
    \       long count = 0;\n        foreach (char c in num) {\n            if (c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n    \
    \            count++;\n            }\n        }\n        return count;", "   \
    \     // your code here\n        return 0;", "        // your code here\n    \
    \    return 0;", "        // your code here\n        return 0;", "        // your\
    \ code here\n        return 0;", "        // Your code here\n        var primes\
    \ = new List<int> { 2, 3, 5, 7, 11, 13 };\n        var hex = \"0123456789ABCDEF\"\
    ;\n        var count = 0;\n        foreach (var c in num) {\n            var i\
    \ = hex.IndexOf(c);\n            if (primes.Contains(i)) {\n                count++;\n\
    \            }\n        }\n        return count;", "        // your code here\n\
    \        return 0;", "        // your code here\n        return 0;", "       \
    \ // your code here\n        return 0;", "        long count = 0;\n        for\
    \ (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        long result = 0;\n        foreach (char c in num) {\n            if (c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n    \
    \            result++;\n            }\n        }\n        return result;", " \
    \       // Your code here\n        return 0;", "        var primes = new HashSet<int>\
    \ { 2, 3, 5, 7, 11, 13 };\n        return num.ToCharArray().Count(c => primes.Contains(int.Parse(c.ToString(),\
    \ System.Globalization.NumberStyles.HexNumber)));", "        // your code here\n\
    \        return 0;", "        // your code here\n        return 0;", "       \
    \ long count = 0;\n        foreach (char c in num) {\n            switch (c) {\n\
    \                case '2':\n                case '3':\n                case '5':\n\
    \                case '7':\n                case 'B':\n                case 'D':\n\
    \                    count++;\n                    break;\n            }\n   \
    \     }\n        return count;", "        var primes = new HashSet<int> { 2, 3,\
    \ 5, 7, 11, 13 };\n        return num.ToCharArray().Count(c => primes.Contains(int.Parse(c.ToString(),\
    \ System.Globalization.NumberStyles.HexNumber)));", "        // Your code here\n\
    \        return 0;", "        // your code here\n        return 0;", "       \
    \ long count = 0;\n        string[] hex = { \"0\", \"1\", \"2\", \"3\", \"4\"\
    , \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    \ };\n        string[] prime = { \"2\", \"3\", \"5\", \"7\", \"B\", \"D\" };\n\
    \        for (int i = 0; i < num.Length; i++) {\n            for (int j = 0; j\
    \ < prime.Length; j++) {\n                if (num[i].ToString() == prime[j]) {\n\
    \                    count++;\n                }\n            }\n        }\n \
    \       return count;", "        var primes = new HashSet<char> { '2', '3', '5',\
    \ '7', 'B', 'D' };\n        return num.Count(c => primes.Contains(c));", "   \
    \     // your code here\n        return 0;", "        // your code here\n    \
    \    return 0;", "        // Your code here\n        return 0;", "        // your\
    \ code here\n        return 0;", "        // your code here\n        return 0;",
  "        // your code here\n        return 0;", "        // your code here\n   \
    \     return 0;", "        // Your code here\n        return 0;", "        var\
    \ primes = new HashSet<char> { '2', '3', '5', '7', 'B', 'D' };\n        return\
    \ num.Count(c => primes.Contains(c));", "        // Your code here\n        return\
    \ 0;", "        // your code here\n        return 0;", "        // your code here\n\
    \        return 0;", "        // your code here\n        return 0;", "       \
    \ // your code here\n        return 0;", "        // your code here\n        return\
    \ 0;", "        // your code here\n        return 0;", "        // your code here\n\
    \        return 0;", '        return num.ToUpper().Count(c => "2357BD".Contains(c));',
  "        // your code here\n        return 0;", "        // your code here\n   \
    \     return 0;", "        // your code here\n        return 0;", "        //\
    \ your code here\n        return 0;", "        // your code here\n        return\
    \ 0;", "        // your code here\n        return 0;", "        // Your code here\n\
    \        return 0;", "        // your code here\n        return 0;", "       \
    \ // your code here\n        return 0;", '        return num.ToUpper().Count(x
    => "2357BD".Contains(x));', "        // your code here\n        return 0;", " \
    \       // your code here\n        return 0;", "        // your code here\n  \
    \      return 0;", "        // Your code here\n        long count = 0;\n     \
    \   for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        // your code here\n        return 0;", "        // your code here\n   \
    \     return 0;", "        // your code here\n        return 0;", "        //\
    \ Your code here\n        return 0;", "        // your code here\n        return\
    \ 0;", "        // your code here\n        return 0;", "        // your code here\n\
    \        return 0;", "        long result = 0;\n        foreach (char c in num)\
    \ {\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B'\
    \ || c == 'D') {\n                result++;\n            }\n        }\n      \
    \  return result;", "        // your code here\n        return 0;", "        //\
    \ your code here\n        return 0;", "        // your code here\n        return\
    \ 0;", "        // Your code here\n        return 0;", "        // Your code here\n\
    \        return 0;", "        long count = 0;\n        foreach (char c in num)\
    \ {\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B'\
    \ || c == 'D') {\n                count++;\n            }\n        }\n       \
    \ return count;", "        // your code here\n        return 0;", "        //\
    \ your code here\n        return 0;", "        // your code goes here\n      \
    \  return 0;", "        // your code here\n        return 0;", "        // your\
    \ code here\n        return 0;", "        // your code here\n        return 0;",
  "        // your code here\n        return 0;", "        // Your code here\n   \
    \     return 0;", '        return num.ToUpper().Count(c => "2357BD".Contains(c));',
  "        // Your code here\n        return 0;", "        // your code here\n   \
    \     return 0;", "        // your code here\n        return 0;", "        //\
    \ your code here\n        return 0;", "        // Your code here\n        return\
    \ 0;", "        // your code here\n        return 0;", "        // your code here\n\
    \        return 0;", "        // your code here\n        return 0;", "       \
    \ // your code here\n        return 0;", "        // your code here\n        return\
    \ 0;", "        // your code here\n        return 0;", "        // Your code here\n\
    \        return 0;", "        var primes = new HashSet<char> { '2', '3', '5',\
    \ '7', 'B', 'D' };\n        return num.Count(c => primes.Contains(c));", "   \
    \     var primes = new HashSet<int> { 2, 3, 5, 7, 11, 13 };\n        return num.Count(c\
    \ => primes.Contains(int.Parse(c.ToString(), System.Globalization.NumberStyles.HexNumber)));",
  "        // your code here\n        return 0;", "        // your code here\n   \
    \     return 0;", "        // your code here\n        return 0;", "        //\
    \ Your code here\n        return 0;", '        return num.ToUpper().Count(c =>
    "2357BD".Contains(c));', "        // your code here\n        return 0;", "   \
    \     // Your code here\n        return 0;", "        // your code here\n    \
    \    return 0;", "        // your code here\n        return 0;", "        // your\
    \ code here\n        return 0;", '        return num.ToUpper().Where(c => "2357BD".Contains(c)).Count();',
  "        // your code here\n        return 0;", "        // Your code here\n   \
    \     return 0;", "        long count = 0;\n        for (int i = 0; i < num.Length;\
    \ i++) {\n            if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n                count++;\n    \
    \        }\n        }\n        return count;", "        // your code here\n  \
    \      long count = 0;\n        foreach (char c in num) {\n            if (c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n       \
    \         count++;\n            }\n        }\n        return count;", "      \
    \  // your code here\n        return 0;", "        // Your code here\n       \
    \ return 0;", "        // your code here\n        return 0;", "        // Your\
    \ code here\n        return 0;", "        // Your code here\n        return 0;",
  "        var primes = new HashSet<char> { '2', '3', '5', '7', 'B', 'D' };\n    \
    \    return num.Count(c => primes.Contains(c));", "        // your code here\n\
    \        return 0;", "        // Your code here\n        return 0;", "       \
    \ // Your code here\n        return 0;", "        // your code here\n        return\
    \ 0;", "        // your code here\n        return 0;", "        // your code here\n\
    \        return 0;", "        // your code here\n        return 0;", "       \
    \ // your code here\n        return 0;", "        // your code here\n        return\
    \ 0;", '        return num.ToUpper().Count(c => "2357BD".Contains(c));', "   \
    \     // Your code here\n        return 0;", "        // your code here\n    \
    \    return 0;", "        // your code here\n        return 0;", "        // your\
    \ code here\n        return 0;", "        // Your code here\n        return 0;",
  "        // Your code here\n        return 0;", "        // your code here\n   \
    \     return 0;", "        // your code here\n        return 0;", "        //\
    \ your code here\n        return 0;", '        return num.ToCharArray().Count(c
    => "2357BD".Contains(c));', "        var primes = new HashSet<int> { 2, 3, 5,\
    \ 7, 11, 13 };\n        return num.ToUpper().ToCharArray().Count(c => primes.Contains(c\
    \ - '0'));", "        long result = 0;\n        foreach (char c in num) {\n  \
    \          if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c ==\
    \ 'D') {\n                result++;\n            }\n        }\n        return\
    \ result;", "        var primes = new HashSet<char> { '2', '3', '5', '7', 'B',\
    \ 'D' };\n        return num.Count(c => primes.Contains(c));", '        return
    num.ToUpper().Count(c => "2357BD".Contains(c));', '        return num.ToUpper().Count(c
    => "2357BD".Contains(c));', "        var hex = new HashSet<char> { '2', '3', '5',\
    \ '7', 'B', 'D' };\n        return num.Count(c => hex.Contains(c));", "      \
    \  // your code here\n        long count = 0;\n        foreach (char c in num)\
    \ {\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B'\
    \ || c == 'D') {\n                count++;\n            }\n        }\n       \
    \ return count;", "        // your code here\n        return 0;", "        //\
    \ your code here\n        return 0;", "        // your code here\n        return\
    \ 0;", "        // Your code here\n        return 0;", '        return num.ToCharArray().Where(c
    => "2357BD".Contains(c)).Count();', "        // your code here\n        return\
    \ 0;", "        var primes = new HashSet<int> { 2, 3, 5, 7, 11, 13 };\n      \
    \  return num.ToCharArray().Count(c => primes.Contains(int.Parse(c.ToString(),\
    \ System.Globalization.NumberStyles.HexNumber)));", "        long result = 0;\n\
    \        // your code here\n        return result;", '        return num.ToUpper().Count(c
    => "2357BD".Contains(c));', "        // your code here\n        return 0;", " \
    \       // your code here\n        return 0;", "        // your code here\n  \
    \      return 0;", "        // your code here\n        return 0;", "        //\
    \ your code here\n        return 0;", "        // your code here\n        return\
    \ 0;", "        // your code here\n        return 0;", "        // your code here\n\
    \        return 0;", '        return num.ToUpper().Count(c => "2357BD".Contains(c));',
  "        long count = 0;\n        for (int i = 0; i < num.Length; i++) {\n     \
    \       if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' ||\
    \ num[i] == 'B' || num[i] == 'D') {\n                count++;\n            }\n\
    \        }\n        return count;", "        // Your code here\n        return\
    \ 0;", "        // your code here\n        return 0;", "        // your code here\n\
    \        return 0;", "        // your code here\n        return 0;", "       \
    \ // your code here\n        return 0;", "        var primes = new HashSet<int>\
    \ { 2, 3, 5, 7, 11, 13 };\n        return num.Count(c => primes.Contains(int.Parse(c.ToString(),\
    \ System.Globalization.NumberStyles.HexNumber)));", "        long count = 0;\n\
    \        foreach (char c in num) {\n            if (c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n  \
    \          }\n        }\n        return count;", "        // your code here\n\
    \        return 0;", "        // Your code here\n        return 0;", "       \
    \ // your code here\n        return 0;", "        // your code here\n        return\
    \ 0;", "        // your code here\n        return 0;"]
stop_tokens:
- "\n    }\n"
