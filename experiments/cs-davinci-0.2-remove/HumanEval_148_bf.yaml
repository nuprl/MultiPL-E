name: HumanEval_148_bf
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // There are eight planets in our solar system: the closerst to\
  \ the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
  \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
  \ names as strings planet1 and planet2. \n    // The function should return a tuple\
  \ containing all planets whose orbits are \n    // located between the orbit of\
  \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
  \ \n    // The function should return an empty tuple if planet1 or planet2\n   \
  \ // are not correct planet names. \n    // Examples\n    public static List<string>\
  \ Bf(string planet1, string planet2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Bf((\"\
  Jupiter\"), (\"Neptune\")).Equals((new List<string>(new string[]{(string)\"Saturn\"\
  , (string)\"Uranus\"}))));\n    Debug.Assert(Bf((\"Earth\"), (\"Mercury\")).Equals((new\
  \ List<string>(new string[]{(string)\"Venus\"}))));\n    Debug.Assert(Bf((\"Mercury\"\
  ), (\"Uranus\")).Equals((new List<string>(new string[]{(string)\"Venus\", (string)\"\
  Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\"}))));\n    Debug.Assert(Bf((\"\
  Neptune\"), (\"Venus\")).Equals((new List<string>(new string[]{(string)\"Earth\"\
  , (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\", (string)\"Uranus\"\
  }))));\n    Debug.Assert(Bf((\"Earth\"), (\"Earth\")).Equals((new List<string>())));\n\
  \    Debug.Assert(Bf((\"Mars\"), (\"Earth\")).Equals((new List<string>())));\n \
  \   Debug.Assert(Bf((\"Jupiter\"), (\"Makemake\")).Equals((new List<string>())));\n\
  \    }\n\n}\n"
completions: ["        var planets = new List<string> { \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n     \
    \   var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        if (p1\
    \ > p2) {\n            var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n\
    \        }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var\
    \ planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return new List<string>();\n        var result = new List<string>();\n     \
    \   if (p1 < p2) {\n            for (int i = p1 + 1; i < p2; i++) {\n        \
    \        result.Add(planets[i]);\n            }\n        } else {\n          \
    \  for (int i = p2 + 1; i < p1; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        }\n        return result;", "        var planets = new\
    \ List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\" };\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) return new List<string>();\n        if (start > end) {\n            var\
    \ temp = start;\n            start = end;\n            end = temp;\n        }\n\
    \        return planets.GetRange(start + 1, end - start - 1);", "        var planets\
    \ = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ {\n            return new List<string>();\n        }\n        var result = new\
    \ List<string>();\n        var start = Math.Min(p1, p2);\n        var end = Math.Max(p1,\
    \ p2);\n        for (int i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        var planets = new List<string> {\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var i1 = planets.IndexOf(planet1);\n        var i2 =\
    \ planets.IndexOf(planet2);\n        if (i1 < 0 || i2 < 0) return new List<string>();\n\
    \        if (i1 > i2) {\n            var tmp = i1;\n            i1 = i2;\n   \
    \         i2 = tmp;\n        }\n        return planets.GetRange(i1 + 1, i2 - i1\
    \ - 1);", "        var planets = new List<string> { \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n     \
    \   var result = new List<string>();\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           var temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        List<string> planets = new List<string>()\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        List<string> result = new List<string>();\n        if\
    \ (planets.Contains(planet1) && planets.Contains(planet2)) {\n            int\
    \ p1 = planets.IndexOf(planet1);\n            int p2 = planets.IndexOf(planet2);\n\
    \            if (p1 < p2) {\n                for (int i = p1 + 1; i < p2; i++)\
    \ {\n                    result.Add(planets[i]);\n                }\n        \
    \    } else {\n                for (int i = p2 + 1; i < p1; i++) {\n         \
    \           result.Add(planets[i]);\n                }\n            }\n      \
    \  }\n        return result;", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) {\n            return new List<string>();\n\
    \        }\n        var min = Math.Min(p1, p2);\n        var max = Math.Max(p1,\
    \ p2);\n        return planets.GetRange(min + 1, max - min - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ {\n            return new List<string>();\n        }\n        var result = new\
    \ List<string>();\n        if (p1 < p2) {\n            for (int i = p1 + 1; i\
    \ < p2; i++) {\n                result.Add(planets[i]);\n            }\n     \
    \   } else {\n            for (int i = p2 + 1; i < p1; i++) {\n              \
    \  result.Add(planets[i]);\n            }\n        }\n        return result;",
  "        var planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 =\
    \ planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n    \
    \    if (p1 == -1 || p2 == -1) {\n            return new List<string>();\n   \
    \     }\n        var min = Math.Min(p1, p2);\n        var max = Math.Max(p1, p2);\n\
    \        return planets.GetRange(min + 1, max - min - 1);", "        var planets\
    \ = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        var i1 = planets.IndexOf(planet1);\n\
    \        var i2 = planets.IndexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ return new List<string>();\n        if (i1 > i2) {\n            var tmp = i1;\n\
    \            i1 = i2;\n            i2 = tmp;\n        }\n        return planets.GetRange(i1\
    \ + 1, i2 - i1 - 1);", "        var planets = new List<string> { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 < 0 || i2 < 0) return new List<string>();\n        if (i1 > i2)\
    \ {\n            var tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        return planets.GetRange(i1 + 1, i2 - i1 - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var result = new List<string>();\n\
    \        var start = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n\
    \        if (start == -1 || end == -1) {\n            return result;\n       \
    \ }\n        if (start > end) {\n            var tmp = start;\n            start\
    \ = end;\n            end = tmp;\n        }\n        for (int i = start + 1; i\
    \ < end; i++) {\n            result.Add(planets[i]);\n        }\n        return\
    \ result;", "        var planets = new List<string> { \"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) return new List<string>();\n        var min\
    \ = Math.Min(i1, i2);\n        var max = Math.Max(i1, i2);\n        return planets.GetRange(min\
    \ + 1, max - min - 1);", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        var result = new List<string>();\n        if (p1 == -1 || p2 == -1) {\n\
    \            return result;\n        }\n        if (p1 > p2) {\n            var\
    \ tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n        for\
    \ (int i = p1 + 1; i < p2; i++) {\n            result.Add(planets[i]);\n     \
    \   }\n        return result;", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        if (p1 < p2) {\n\
    \            for (int i = p1 + 1; i < p2; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        } else {\n            for (int i = p2 + 1; i < p1; i++)\
    \ {\n                result.Add(planets[i]);\n            }\n        }\n     \
    \   return result;", "        var planets = new List<string> { \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        var res\
    \ = new List<string>();\n        if (p1 < p2) {\n            for (int i = p1 +\
    \ 1; i < p2; i++) {\n                res.Add(planets[i]);\n            }\n   \
    \     } else {\n            for (int i = p2 + 1; i < p1; i++) {\n            \
    \    res.Add(planets[i]);\n            }\n        }\n        return res;", " \
    \       string[] planets = new string[] { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        List<string>\
    \ result = new List<string>();\n        int index1 = Array.IndexOf(planets, planet1);\n\
    \        int index2 = Array.IndexOf(planets, planet2);\n        if (index1 ==\
    \ -1 || index2 == -1) {\n            return result;\n        }\n        if (index1\
    \ > index2) {\n            int temp = index1;\n            index1 = index2;\n\
    \            index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2;\
    \ i++) {\n            result.Add(planets[i]);\n        }\n        return result;",
  "        var planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var index1\
    \ = planets.IndexOf(planet1);\n        var index2 = planets.IndexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.Add(planets[i]);\n            }\n        } else {\n            for (int\
    \ i = index2 + 1; i < index1; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        }\n        return result;", "        var planets = new\
    \ List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return new List<string>();\n        if (p1 > p2) {\n            var tmp = p1;\n\
    \            p1 = p2;\n            p2 = tmp;\n        }\n        return planets.GetRange(p1\
    \ + 1, p2 - p1 - 1);", "        var planets = new List<string>() { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        if (p1\
    \ > p2) {\n            var t = p1;\n            p1 = p2;\n            p2 = t;\n\
    \        }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var result = new List<string>();\n\
    \        var start = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n\
    \        if (start == -1 || end == -1) {\n            return result;\n       \
    \ }\n        if (start > end) {\n            var tmp = start;\n            start\
    \ = end;\n            end = tmp;\n        }\n        for (int i = start + 1; i\
    \ < end; i++) {\n            result.Add(planets[i]);\n        }\n        return\
    \ result;", "        var planets = new List<string> { \"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        if (p1 < p2) {\n\
    \            for (int i = p1 + 1; i < p2; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        } else {\n            for (int i = p2 + 1; i < p1; i++)\
    \ {\n                result.Add(planets[i]);\n            }\n        }\n     \
    \   return result;", "        var planets = new List<string> { \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        if (p1\
    \ > p2) {\n            var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n\
    \        }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var result = new List<string>();\n\
    \        var start = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n\
    \        if (start == -1 || end == -1) {\n            return result;\n       \
    \ }\n        if (start > end) {\n            var tmp = start;\n            start\
    \ = end;\n            end = tmp;\n        }\n        for (int i = start + 1; i\
    \ < end; i++) {\n            result.Add(planets[i]);\n        }\n        return\
    \ result;", "        var planets = new List<string>() { \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var res = new List<string>();\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return res;\n        if (p1 > p2) {\n            var t = p1;\n            p1\
    \ = p2;\n            p2 = t;\n        }\n        for (int i = p1 + 1; i < p2;\
    \ i++) {\n            res.Add(planets[i]);\n        }\n        return res;", " \
    \       var planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1\
    \ = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n  \
    \      if (p1 == -1 || p2 == -1) return new List<string>();\n        if (p1 >\
    \ p2) {\n            var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n\
    \        }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var i1 = planets.IndexOf(planet1);\n\
    \        var i2 = planets.IndexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ return new List<string>();\n        var result = new List<string>();\n     \
    \   if (i1 < i2) {\n            for (int i = i1 + 1; i < i2; i++) {\n        \
    \        result.Add(planets[i]);\n            }\n        } else {\n          \
    \  for (int i = i2 + 1; i < i1; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        }\n        return result;", "        var planets = new\
    \ List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return new List<string>();\n        if (p1 > p2) {\n            var tmp = p1;\n\
    \            p1 = p2;\n            p2 = tmp;\n        }\n        return planets.GetRange(p1\
    \ + 1, p2 - p1 - 1);", "        var planets = new List<string> { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) return new List<string>();\n        if (i1\
    \ > i2) {\n            var tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        return planets.GetRange(i1 + 1, i2 - i1 - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var result = new List<string>();\n\
    \        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return result;\n        if (p1 > p2) {\n  \
    \          var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n      \
    \  }\n        for (int i = p1 + 1; i < p2; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        var planets = new List<string>()\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n        var p2 =\
    \ planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1) return new List<string>();\n\
    \        if (p1 > p2) {\n            var tmp = p1;\n            p1 = p2;\n   \
    \         p2 = tmp;\n        }\n        return planets.GetRange(p1 + 1, p2 - p1\
    \ - 1);", "        List<string> planets = new List<string>() { \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        int p1 = planets.IndexOf(planet1);\n        int p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        if (p1\
    \ > p2) {\n            int t = p1;\n            p1 = p2;\n            p2 = t;\n\
    \        }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var\
    \ planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ {\n            return new List<string>();\n        }\n        var min = Math.Min(p1,\
    \ p2);\n        var max = Math.Max(p1, p2);\n        return planets.GetRange(min\
    \ + 1, max - min - 1);", "        var planets = new List<string>() { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var start = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n\
    \        if (start == -1 || end == -1) return new List<string>();\n        if\
    \ (start > end) {\n            var tmp = start;\n            start = end;\n  \
    \          end = tmp;\n        }\n        return planets.GetRange(start + 1, end\
    \ - start - 1);", "        var planets = new List<string> { \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) return new List<string>();\n        if (i1\
    \ > i2) {\n            var t = i1;\n            i1 = i2;\n            i2 = t;\n\
    \        }\n        return planets.GetRange(i1 + 1, i2 - i1 - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var result = new List<string>();\n\
    \        var start = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n\
    \        if (start == -1 || end == -1) {\n            return result;\n       \
    \ }\n        if (start > end) {\n            var t = start;\n            start\
    \ = end;\n            end = t;\n        }\n        for (int i = start + 1; i <\
    \ end; i++) {\n            result.Add(planets[i]);\n        }\n        return\
    \ result;", "        var planets = new List<string>() { \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        if (i1 < i2) {\n\
    \            for (int i = i1 + 1; i < i2; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.Add(planets[i]);\n            }\n        }\n     \
    \   return result;", "        var planets = new List<string>() { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) return new List<string>();\n        if (i1\
    \ > i2) {\n            var tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        return planets.GetRange(i1 + 1, i2 - i1 - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var i1 = planets.IndexOf(planet1);\n\
    \        var i2 = planets.IndexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ return new List<string>();\n        var result = new List<string>();\n     \
    \   if (i1 < i2) {\n            for (int i = i1 + 1; i < i2; i++) {\n        \
    \        result.Add(planets[i]);\n            }\n        } else {\n          \
    \  for (int i = i2 + 1; i < i1; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        }\n        return result;", "        var planets = new\
    \ List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return new List<string>();\n        var res = new List<string>();\n        if\
    \ (p1 < p2) {\n            for (int i = p1 + 1; i < p2; i++) {\n             \
    \   res.Add(planets[i]);\n            }\n        } else {\n            for (int\
    \ i = p2 + 1; i < p1; i++) {\n                res.Add(planets[i]);\n         \
    \   }\n        }\n        return res;", "        var planets = new List<string>\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var result = new List<string>();\n        var start\
    \ = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n \
    \       if (start == -1 || end == -1) {\n            return result;\n        }\n\
    \        if (start > end) {\n            var temp = start;\n            start\
    \ = end;\n            end = temp;\n        }\n        for (int i = start + 1;\
    \ i < end; i++) {\n            result.Add(planets[i]);\n        }\n        return\
    \ result;", "        var planets = new List<string>() { \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        if (p1\
    \ > p2) {\n            var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n\
    \        }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return new List<string>();\n        if (p1 > p2) {\n            var t = p1;\n\
    \            p1 = p2;\n            p2 = t;\n        }\n        return planets.GetRange(p1\
    \ + 1, p2 - p1 - 1);", "        var planets = new List<string> { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var index1 = planets.IndexOf(planet1);\n        var index2 = planets.IndexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1) {\n            return new List<string>();\n\
    \        }\n        var min = Math.Min(index1, index2);\n        var max = Math.Max(index1,\
    \ index2);\n        return planets.GetRange(min + 1, max - min - 1);", "     \
    \   var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return new List<string>();\n        if (p1 > p2) {\n            var tmp = p1;\n\
    \            p1 = p2;\n            p2 = tmp;\n        }\n        return planets.GetRange(p1\
    \ + 1, p2 - p1 - 1);", "        var planets = new List<string> { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        if (p1\
    \ > p2) {\n            var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n\
    \        }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var result = new List<string>();\n\
    \        var start = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n\
    \        if (start == -1 || end == -1) return result;\n        if (start > end)\
    \ {\n            var tmp = start;\n            start = end;\n            end =\
    \ tmp;\n        }\n        for (int i = start + 1; i < end; i++) {\n         \
    \   result.Add(planets[i]);\n        }\n        return result;", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ {\n            return new List<string>();\n        }\n        if (p1 > p2) {\n\
    \            var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n    \
    \    }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var planets\
    \ = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return new List<string>();\n        var result = new List<string>();\n     \
    \   if (p1 < p2) {\n            for (int i = p1 + 1; i < p2; i++) {\n        \
    \        result.Add(planets[i]);\n            }\n        } else {\n          \
    \  for (int i = p2 + 1; i < p1; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        }\n        return result;", "        var planets = new\
    \ List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\" };\n        var idx1 = planets.IndexOf(planet1);\n\
    \        var idx2 = planets.IndexOf(planet2);\n        if (idx1 == -1 || idx2\
    \ == -1) return new List<string>();\n        var min = Math.Min(idx1, idx2);\n\
    \        var max = Math.Max(idx1, idx2);\n        return planets.GetRange(min\
    \ + 1, max - min - 1);", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) return new List<string>();\n        var result\
    \ = new List<string>();\n        if (i1 < i2) {\n            for (int i = i1 +\
    \ 1; i < i2; i++) {\n                result.Add(planets[i]);\n            }\n\
    \        } else {\n            for (int i = i2 + 1; i < i1; i++) {\n         \
    \       result.Add(planets[i]);\n            }\n        }\n        return result;",
  "        List<string> planets = new List<string>() { \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n     \
    \   int i1 = planets.IndexOf(planet1);\n        int i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (i1 > i2) {\n            int tmp = i1;\n            i1\
    \ = i2;\n            i2 = tmp;\n        }\n        return planets.GetRange(i1\
    \ + 1, i2 - i1 - 1);", "        var planets = new List<string> { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var result = new List<string>();\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start < end) {\n \
    \           for (int i = start + 1; i < end; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        } else {\n            for (int i = end + 1; i < start;\
    \ i++) {\n                result.Add(planets[i]);\n            }\n        }\n\
    \        return result;", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var result = new List<string>();\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           var temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        var planets = new List<string>()\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n        var p2 =\
    \ planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1) return new List<string>();\n\
    \        if (p1 > p2) {\n            var tmp = p1;\n            p1 = p2;\n   \
    \         p2 = tmp;\n        }\n        return planets.GetRange(p1 + 1, p2 - p1\
    \ - 1);", "        var planets = new List<string>() { \"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        if (p1\
    \ > p2) {\n            var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n\
    \        }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return new List<string>();\n        if (p1 > p2) {\n            var tmp = p1;\n\
    \            p1 = p2;\n            p2 = tmp;\n        }\n        return planets.GetRange(p1\
    \ + 1, p2 - p1 - 1);", "        var planets = new List<string> { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (p1 > p2) {\n            var tmp = p1;\n            p1\
    \ = p2;\n            p2 = tmp;\n        }\n        return planets.GetRange(p1\
    \ + 1, p2 - p1 - 1);", "        List<string> planets = new List<string>() { \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        int i1 = planets.IndexOf(planet1);\n        int i2 =\
    \ planets.IndexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n           \
    \ return new List<string>();\n        }\n        if (i1 > i2) {\n            int\
    \ t = i1;\n            i1 = i2;\n            i2 = t;\n        }\n        return\
    \ planets.GetRange(i1 + 1, i2 - i1 - 1);", "        List<string> planets = new\
    \ List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\" };\n        int i1 = planets.IndexOf(planet1);\n\
    \        int i2 = planets.IndexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return new List<string>();\n        }\n        if (i1 > i2) {\n\
    \            int t = i1;\n            i1 = i2;\n            i2 = t;\n        }\n\
    \        return planets.GetRange(i1 + 1, i2 - i1 - 1);", "        var planets\
    \ = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        var index1 = planets.IndexOf(planet1);\n\
    \        var index2 = planets.IndexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) return new List<string>();\n        if (index1 > index2) {\n        \
    \    var temp = index1;\n            index1 = index2;\n            index2 = temp;\n\
    \        }\n        return planets.GetRange(index1 + 1, index2 - index1 - 1);",
  "        var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var planet1Index\
    \ = planets.IndexOf(planet1);\n        var planet2Index = planets.IndexOf(planet2);\n\
    \        if (planet1Index == -1 || planet2Index == -1) {\n            return new\
    \ List<string>();\n        }\n        var min = Math.Min(planet1Index, planet2Index);\n\
    \        var max = Math.Max(planet1Index, planet2Index);\n        return planets.GetRange(min\
    \ + 1, max - min - 1);", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        var res\
    \ = new List<string>();\n        if (p1 < p2) {\n            for (int i = p1 +\
    \ 1; i < p2; i++) {\n                res.Add(planets[i]);\n            }\n   \
    \     } else {\n            for (int i = p2 + 1; i < p1; i++) {\n            \
    \    res.Add(planets[i]);\n            }\n        }\n        return res;", " \
    \       var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 =\
    \ planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n    \
    \    if (p1 == -1 || p2 == -1) return new List<string>();\n        var res = new\
    \ List<string>();\n        if (p1 < p2) {\n            for (int i = p1 + 1; i\
    \ < p2; i++) res.Add(planets[i]);\n        } else {\n            for (int i =\
    \ p2 + 1; i < p1; i++) res.Add(planets[i]);\n        }\n        return res;",
  "        var planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var idx1\
    \ = planets.IndexOf(planet1);\n        var idx2 = planets.IndexOf(planet2);\n\
    \        if (idx1 == -1 || idx2 == -1) {\n            return new List<string>();\n\
    \        }\n        var min = Math.Min(idx1, idx2);\n        var max = Math.Max(idx1,\
    \ idx2);\n        return planets.GetRange(min + 1, max - min - 1);", "       \
    \ var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var result = new\
    \ List<string>();\n        var start = planets.IndexOf(planet1);\n        var\
    \ end = planets.IndexOf(planet2);\n        if (start == -1 || end == -1) return\
    \ result;\n        if (start > end) {\n            var tmp = start;\n        \
    \    start = end;\n            end = tmp;\n        }\n        for (int i = start\
    \ + 1; i < end; i++) {\n            result.Add(planets[i]);\n        }\n     \
    \   return result;", "        var planets = new List<string> { \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        var result\
    \ = new List<string>();\n        if (p1 < p2) {\n            for (int i = p1 +\
    \ 1; i < p2; i++) {\n                result.Add(planets[i]);\n            }\n\
    \        } else {\n            for (int i = p2 + 1; i < p1; i++) {\n         \
    \       result.Add(planets[i]);\n            }\n        }\n        return result;",
  "        var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var i1 =\
    \ planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n    \
    \    if (i1 == -1 || i2 == -1) return new List<string>();\n        var min = Math.Min(i1,\
    \ i2);\n        var max = Math.Max(i1, i2);\n        return planets.GetRange(min\
    \ + 1, max - min - 1);", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) return new List<string>();\n        if (i1\
    \ > i2) {\n            var t = i1;\n            i1 = i2;\n            i2 = t;\n\
    \        }\n        return planets.GetRange(i1 + 1, i2 - i1 - 1);", "        List<string>\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        List<string> result\
    \ = new List<string>();\n        int index1 = planets.IndexOf(planet1);\n    \
    \    int index2 = planets.IndexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return result;\n        }\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.Add(planets[i]);\n            }\n        } else {\n            for (int\
    \ i = index2 + 1; i < index1; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        }\n        return result;", "        var planets = new\
    \ List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\" };\n        var res = new List<string>();\n\
    \        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return res;\n        if (p1 > p2) {\n     \
    \       var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n\
    \        for (int i = p1 + 1; i < p2; i++) {\n            res.Add(planets[i]);\n\
    \        }\n        return res;", "        var planets = new List<string> { \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n        var p2 =\
    \ planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1) return new List<string>();\n\
    \        var res = new List<string>();\n        if (p1 < p2) {\n            for\
    \ (int i = p1 + 1; i < p2; i++) {\n                res.Add(planets[i]);\n    \
    \        }\n        } else {\n            for (int i = p2 + 1; i < p1; i++) {\n\
    \                res.Add(planets[i]);\n            }\n        }\n        return\
    \ res;", "        var planets = new List<string> { \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n     \
    \   var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) return new List<string>();\n        var result\
    \ = new List<string>();\n        if (i1 < i2) {\n            for (int i = i1 +\
    \ 1; i < i2; i++) {\n                result.Add(planets[i]);\n            }\n\
    \        } else {\n            for (int i = i2 + 1; i < i1; i++) {\n         \
    \       result.Add(planets[i]);\n            }\n        }\n        return result;",
  "        var planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 =\
    \ planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n    \
    \    if (p1 == -1 || p2 == -1) return new List<string>();\n        var result\
    \ = new List<string>();\n        if (p1 < p2) {\n            for (int i = p1 +\
    \ 1; i < p2; i++) {\n                result.Add(planets[i]);\n            }\n\
    \        } else {\n            for (int i = p2 + 1; i < p1; i++) {\n         \
    \       result.Add(planets[i]);\n            }\n        }\n        return result;",
  "        var planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var result\
    \ = new List<string>();\n        var start = planets.IndexOf(planet1);\n     \
    \   var end = planets.IndexOf(planet2);\n        if (start == -1 || end == -1)\
    \ {\n            return result;\n        }\n        if (start < end) {\n     \
    \       for (int i = start + 1; i < end; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        } else {\n            for (int i = end + 1; i < start;\
    \ i++) {\n                result.Add(planets[i]);\n            }\n        }\n\
    \        return result;", "        var planets = new List<string>() { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        if (p1 < p2) {\n\
    \            for (int i = p1 + 1; i < p2; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        } else {\n            for (int i = p2 + 1; i < p1; i++)\
    \ {\n                result.Add(planets[i]);\n            }\n        }\n     \
    \   return result;", "        // your code here\n        List<string> planets\
    \ = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        List<string> result = new List<string>();\n\
    \        int index1 = planets.IndexOf(planet1);\n        int index2 = planets.IndexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1)\n            return result;\n     \
    \   if (index1 > index2) {\n            int temp = index1;\n            index1\
    \ = index2;\n            index2 = temp;\n        }\n        for (int i = index1\
    \ + 1; i < index2; i++)\n            result.Add(planets[i]);\n        return result;",
  "        var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 =\
    \ planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n    \
    \    if (p1 == -1 || p2 == -1) return new List<string>();\n        var res = new\
    \ List<string>();\n        if (p1 < p2) {\n            for (int i = p1 + 1; i\
    \ < p2; i++) {\n                res.Add(planets[i]);\n            }\n        }\
    \ else {\n            for (int i = p2 + 1; i < p1; i++) {\n                res.Add(planets[i]);\n\
    \            }\n        }\n        return res;", "        var planets = new List<string>\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var planet1Index = planets.IndexOf(planet1);\n     \
    \   var planet2Index = planets.IndexOf(planet2);\n        if (planet1Index ==\
    \ -1 || planet2Index == -1) {\n            return new List<string>();\n      \
    \  }\n        var result = new List<string>();\n        if (planet1Index < planet2Index)\
    \ {\n            for (int i = planet1Index + 1; i < planet2Index; i++) {\n   \
    \             result.Add(planets[i]);\n            }\n        } else {\n     \
    \       for (int i = planet2Index + 1; i < planet1Index; i++) {\n            \
    \    result.Add(planets[i]);\n            }\n        }\n        return result;",
  "        var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 =\
    \ planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n    \
    \    if (p1 == -1 || p2 == -1) return new List<string>();\n        var result\
    \ = new List<string>();\n        if (p1 < p2) {\n            for (int i = p1 +\
    \ 1; i < p2; i++) result.Add(planets[i]);\n        } else {\n            for (int\
    \ i = p2 + 1; i < p1; i++) result.Add(planets[i]);\n        }\n        return\
    \ result;", "        var planets = new List<string> { \"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var start = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n\
    \        if (start == -1 || end == -1) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        if (start < end)\
    \ {\n            for (int i = start + 1; i < end; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        } else {\n            for (int i = start - 1; i > end;\
    \ i--) {\n                result.Add(planets[i]);\n            }\n        }\n\
    \        return result;", "        var planets = new List<string>() { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var result = new List<string>();\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           var tmp = start;\n            start = end;\n            end = tmp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        var planets = new List<string> {\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n        var p2 =\
    \ planets.IndexOf(planet2);\n        if (p1 < 0 || p2 < 0) return new List<string>();\n\
    \        if (p1 > p2) {\n            var tmp = p1;\n            p1 = p2;\n   \
    \         p2 = tmp;\n        }\n        return planets.GetRange(p1 + 1, p2 - p1\
    \ - 1);", "        var planets = new List<string>() { \"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) return new List<string>();\n        if (i1\
    \ > i2) {\n            var tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        return planets.GetRange(i1 + 1, i2 - i1 - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var i1 = planets.IndexOf(planet1);\n\
    \        var i2 = planets.IndexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ return new List<string>();\n        var min = Math.Min(i1, i2);\n        var\
    \ max = Math.Max(i1, i2);\n        return planets.GetRange(min + 1, max - min\
    \ - 1);", "        var planets = new List<string> { \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n     \
    \   var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        var min\
    \ = Math.Min(p1, p2);\n        var max = Math.Max(p1, p2);\n        return planets.GetRange(min\
    \ + 1, max - min - 1);", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var result = new List<string>();\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           var temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        var planets = new List<string> {\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n        var p2 =\
    \ planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1) return new List<string>();\n\
    \        var result = new List<string>();\n        if (p1 < p2) {\n          \
    \  for (int i = p1 + 1; i < p2; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        } else {\n            for (int i = p2 + 1; i < p1; i++)\
    \ {\n                result.Add(planets[i]);\n            }\n        }\n     \
    \   return result;", "        var planets = new List<string>() { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var result = new List<string>();\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           var tmp = start;\n            start = end;\n            end = tmp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        var planets = new List<string> {\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n        var p2 =\
    \ planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1) return new List<string>();\n\
    \        if (p1 > p2) {\n            var tmp = p1;\n            p1 = p2;\n   \
    \         p2 = tmp;\n        }\n        return planets.GetRange(p1 + 1, p2 - p1\
    \ - 1);", "        // your code goes here\n        var planets = new List<string>\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var res = new List<string>();\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return res;\n        if (p1 > p2) {\n            var tmp = p1;\n           \
    \ p1 = p2;\n            p2 = tmp;\n        }\n        for (int i = p1 + 1; i <\
    \ p2; i++) {\n            res.Add(planets[i]);\n        }\n        return res;",
  "        var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var res =\
    \ new List<string>();\n        var p1 = planets.IndexOf(planet1);\n        var\
    \ p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1) return res;\n\
    \        if (p1 > p2) {\n            var tmp = p1;\n            p1 = p2;\n   \
    \         p2 = tmp;\n        }\n        for (int i = p1 + 1; i < p2; i++) {\n\
    \            res.Add(planets[i]);\n        }\n        return res;", "        var\
    \ planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var index1 = planets.IndexOf(planet1);\n\
    \        var index2 = planets.IndexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return new List<string>();\n        }\n        if (index1\
    \ > index2) {\n            var temp = index1;\n            index1 = index2;\n\
    \            index2 = temp;\n        }\n        return planets.GetRange(index1\
    \ + 1, index2 - index1 - 1);", "        var planets = new List<string>() { \"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n        var p2 =\
    \ planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1) {\n           \
    \ return new List<string>();\n        }\n        var min = Math.Min(p1, p2);\n\
    \        var max = Math.Max(p1, p2);\n        return planets.GetRange(min + 1,\
    \ max - min - 1);", "        var planets = new List<string> { \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        var ret\
    \ = new List<string>();\n        if (p1 < p2) {\n            for (int i = p1 +\
    \ 1; i < p2; i++) {\n                ret.Add(planets[i]);\n            }\n   \
    \     } else {\n            for (int i = p2 + 1; i < p1; i++) {\n            \
    \    ret.Add(planets[i]);\n            }\n        }\n        return ret;", " \
    \       var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var i1 =\
    \ planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n    \
    \    if (i1 == -1 || i2 == -1) return new List<string>();\n        var res = new\
    \ List<string>();\n        if (i1 < i2) {\n            for (int i = i1 + 1; i\
    \ < i2; i++) {\n                res.Add(planets[i]);\n            }\n        }\
    \ else {\n            for (int i = i2 + 1; i < i1; i++) {\n                res.Add(planets[i]);\n\
    \            }\n        }\n        return res;", "        var planets = new List<string>\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var i1 = planets.IndexOf(planet1);\n        var i2 =\
    \ planets.IndexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n           \
    \ return new List<string>();\n        }\n        var result = new List<string>();\n\
    \        if (i1 < i2) {\n            for (int i = i1 + 1; i < i2; i++) {\n   \
    \             result.Add(planets[i]);\n            }\n        } else {\n     \
    \       for (int i = i2 + 1; i < i1; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        }\n        return result;", "        var planets = new\
    \ List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\" };\n        var result = new List<string>();\n\
    \        var start = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n\
    \        if (start == -1 || end == -1) return result;\n        if (start > end)\
    \ {\n            var temp = start;\n            start = end;\n            end\
    \ = temp;\n        }\n        for (int i = start + 1; i < end; i++) {\n      \
    \      result.Add(planets[i]);\n        }\n        return result;", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return new List<string>();\n        var min = Math.Min(p1, p2);\n        var\
    \ max = Math.Max(p1, p2);\n        return planets.GetRange(min + 1, max - min\
    \ - 1);", "        var planets = new List<string> { \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n     \
    \   var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        if (p1\
    \ > p2) {\n            var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n\
    \        }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var\
    \ planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var result = new\
    \ List<string>();\n        var p1 = planets.IndexOf(planet1);\n        var p2\
    \ = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1) return result;\n\
    \        if (p1 > p2) {\n            var tmp = p1;\n            p1 = p2;\n   \
    \         p2 = tmp;\n        }\n        for (int i = p1 + 1; i < p2; i++) {\n\
    \            result.Add(planets[i]);\n        }\n        return result;", "  \
    \      var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var idx1\
    \ = planets.IndexOf(planet1);\n        var idx2 = planets.IndexOf(planet2);\n\
    \        if (idx1 == -1 || idx2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (idx1 > idx2) {\n            var tmp = idx1;\n        \
    \    idx1 = idx2;\n            idx2 = tmp;\n        }\n        return planets.GetRange(idx1\
    \ + 1, idx2 - idx1 - 1);", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var result = new List<string>();\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return result;\n        if (p1 > p2) {\n            var tmp = p1;\n        \
    \    p1 = p2;\n            p2 = tmp;\n        }\n        for (int i = p1 + 1;\
    \ i < p2; i++) {\n            result.Add(planets[i]);\n        }\n        return\
    \ result;", "        var planets = new List<string> { \"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        if (p1\
    \ > p2) {\n            var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n\
    \        }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var result = new List<string>();\n\
    \        var start = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n\
    \        if (start == -1 || end == -1) return result;\n        if (start > end)\
    \ {\n            var tmp = start;\n            start = end;\n            end =\
    \ tmp;\n        }\n        for (int i = start + 1; i < end; i++) {\n         \
    \   result.Add(planets[i]);\n        }\n        return result;", "        var\
    \ planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return new List<string>();\n        var res = new List<string>();\n        if\
    \ (p1 < p2) {\n            for (int i = p1 + 1; i < p2; i++) {\n             \
    \   res.Add(planets[i]);\n            }\n        } else {\n            for (int\
    \ i = p2 + 1; i < p1; i++) {\n                res.Add(planets[i]);\n         \
    \   }\n        }\n        return res;", "        var planets = new List<string>\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var idx1 = planets.IndexOf(planet1);\n        var idx2\
    \ = planets.IndexOf(planet2);\n        if (idx1 == -1 || idx2 == -1) return new\
    \ List<string>();\n        var min = Math.Min(idx1, idx2);\n        var max =\
    \ Math.Max(idx1, idx2);\n        return planets.GetRange(min + 1, max - min -\
    \ 1);", "        var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var i1\
    \ = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n  \
    \      if (i1 < 0 || i2 < 0) return new List<string>();\n        var result =\
    \ new List<string>();\n        if (i1 < i2) {\n            for (int i = i1 + 1;\
    \ i < i2; i++) {\n                result.Add(planets[i]);\n            }\n   \
    \     } else {\n            for (int i = i2 + 1; i < i1; i++) {\n            \
    \    result.Add(planets[i]);\n            }\n        }\n        return result;",
  "        var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 =\
    \ planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n    \
    \    if (p1 == -1 || p2 == -1) return new List<string>();\n        var result\
    \ = new List<string>();\n        if (p1 < p2) {\n            for (int i = p1 +\
    \ 1; i < p2; i++) {\n                result.Add(planets[i]);\n            }\n\
    \        } else {\n            for (int i = p2 + 1; i < p1; i++) {\n         \
    \       result.Add(planets[i]);\n            }\n        }\n        return result;",
  "        var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 =\
    \ planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n    \
    \    if (p1 == -1 || p2 == -1) {\n            return new List<string>();\n   \
    \     }\n        var result = new List<string>();\n        if (p1 < p2) {\n  \
    \          for (int i = p1 + 1; i < p2; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        } else {\n            for (int i = p2 + 1; i < p1; i++)\
    \ {\n                result.Add(planets[i]);\n            }\n        }\n     \
    \   return result;", "        var planets = new List<string> { \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        if (i1 < i2) {\n\
    \            for (int i = i1 + 1; i < i2; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.Add(planets[i]);\n            }\n        }\n     \
    \   return result;", "        var planets = new List<string>() { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (p1 > p2) {\n            var tmp = p1;\n            p1\
    \ = p2;\n            p2 = tmp;\n        }\n        return planets.GetRange(p1\
    \ + 1, p2 - p1 - 1);", "        var planets = new List<string> { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var result = new List<string>();\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           var tmp = start;\n            start = end;\n            end = tmp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        var planets = new List<string> {\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var start = planets.IndexOf(planet1);\n        var end\
    \ = planets.IndexOf(planet2);\n        if (start == -1 || end == -1) {\n     \
    \       return new List<string>();\n        }\n        var result = new List<string>();\n\
    \        if (start < end) {\n            for (int i = start + 1; i < end; i++)\
    \ {\n                result.Add(planets[i]);\n            }\n        } else {\n\
    \            for (int i = start - 1; i > end; i--) {\n                result.Add(planets[i]);\n\
    \            }\n        }\n        return result;", "        var planets = new\
    \ List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\" };\n        var result = new List<string>();\n\
    \        var start = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n\
    \        if (start == -1 || end == -1) {\n            return result;\n       \
    \ }\n        if (start > end) {\n            var tmp = start;\n            start\
    \ = end;\n            end = tmp;\n        }\n        for (int i = start + 1; i\
    \ < end; i++) {\n            result.Add(planets[i]);\n        }\n        return\
    \ result;", "        var planets = new List<string>() { \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var result = new List<string>();\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           var tmp = start;\n            start = end;\n            end = tmp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        var planets = new List<string> {\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n        var p2 =\
    \ planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1) return new List<string>();\n\
    \        if (p1 > p2) {\n            var tmp = p1;\n            p1 = p2;\n   \
    \         p2 = tmp;\n        }\n        return planets.GetRange(p1 + 1, p2 - p1\
    \ - 1);", "        var planets = new List<string> { \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n     \
    \   var idx1 = planets.IndexOf(planet1);\n        var idx2 = planets.IndexOf(planet2);\n\
    \        if (idx1 == -1 || idx2 == -1) {\n            return new List<string>();\n\
    \        }\n        var min = Math.Min(idx1, idx2);\n        var max = Math.Max(idx1,\
    \ idx2);\n        return planets.GetRange(min + 1, max - min - 1);", "       \
    \ var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return new List<string>();\n        if (p1 > p2) {\n            var tmp = p1;\n\
    \            p1 = p2;\n            p2 = tmp;\n        }\n        return planets.GetRange(p1\
    \ + 1, p2 - p1 - 1);", "        var planets = new List<string> { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var index1 = planets.IndexOf(planet1);\n        var index2 = planets.IndexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        var min = Math.Min(index1,\
    \ index2);\n        var max = Math.Max(index1, index2);\n        for (int i =\
    \ min + 1; i < max; i++) {\n            result.Add(planets[i]);\n        }\n \
    \       return result;", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 < 0 || p2 < 0) return new List<string>();\n        var res = new\
    \ List<string>();\n        if (p1 < p2) {\n            for (int i = p1 + 1; i\
    \ < p2; i++) {\n                res.Add(planets[i]);\n            }\n        }\
    \ else {\n            for (int i = p2 + 1; i < p1; i++) {\n                res.Add(planets[i]);\n\
    \            }\n        }\n        return res;", "        var planets = new List<string>()\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var i1 = planets.IndexOf(planet1);\n        var i2 =\
    \ planets.IndexOf(planet2);\n        if (i1 == -1 || i2 == -1) return new List<string>();\n\
    \        if (i1 > i2) {\n            var t = i1;\n            i1 = i2;\n     \
    \       i2 = t;\n        }\n        return planets.GetRange(i1 + 1, i2 - i1 -\
    \ 1);", "        var planets = new List<string>() { \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n     \
    \   var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (p1 > p2) {\n            var tmp = p1;\n            p1\
    \ = p2;\n            p2 = tmp;\n        }\n        return planets.GetRange(p1\
    \ + 1, p2 - p1 - 1);", "        var planets = new List<string> { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var res = new List<string>();\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) return res;\n        if (start > end) {\n            var tmp = start;\n\
    \            start = end;\n            end = tmp;\n        }\n        for (int\
    \ i = start + 1; i < end; i++) {\n            res.Add(planets[i]);\n        }\n\
    \        return res;", "        var planets = new List<string> { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) return new List<string>();\n        if (i1\
    \ > i2) {\n            var t = i1;\n            i1 = i2;\n            i2 = t;\n\
    \        }\n        return planets.GetRange(i1 + 1, i2 - i1 - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var idx1 = planets.IndexOf(planet1);\n\
    \        var idx2 = planets.IndexOf(planet2);\n        if (idx1 < 0 || idx2 <\
    \ 0) return new List<string>();\n        if (idx1 > idx2) {\n            var tmp\
    \ = idx1;\n            idx1 = idx2;\n            idx2 = tmp;\n        }\n    \
    \    return planets.GetRange(idx1 + 1, idx2 - idx1 - 1);", "        var planets\
    \ = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        var index1 = planets.IndexOf(planet1);\n\
    \        var index2 = planets.IndexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return new List<string>();\n        }\n        var min\
    \ = Math.Min(index1, index2);\n        var max = Math.Max(index1, index2);\n \
    \       return planets.GetRange(min + 1, max - min - 1);", "        var planets\
    \ = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        var res = new List<string>();\n\
    \        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return res;\n        if (p1 > p2) {\n     \
    \       var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n\
    \        for (int i = p1 + 1; i < p2; i++) {\n            res.Add(planets[i]);\n\
    \        }\n        return res;", "        List<string> planets = new List<string>\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        List<string> result = new List<string>();\n        int\
    \ index1 = planets.IndexOf(planet1);\n        int index2 = planets.IndexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1) {\n            return result;\n   \
    \     }\n        if (index1 > index2) {\n            int temp = index1;\n    \
    \        index1 = index2;\n            index2 = temp;\n        }\n        for\
    \ (int i = index1 + 1; i < index2; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        List<string> planets = new List<string>()\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        int i1 = planets.IndexOf(planet1);\n        int i2 =\
    \ planets.IndexOf(planet2);\n        if (i1 < 0 || i2 < 0) {\n            return\
    \ new List<string>();\n        }\n        if (i1 > i2) {\n            int tmp\
    \ = i1;\n            i1 = i2;\n            i2 = tmp;\n        }\n        return\
    \ planets.GetRange(i1 + 1, i2 - i1 - 1);", "        var planets = new List<string>()\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n        var p2 =\
    \ planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1) return new List<string>();\n\
    \        if (p1 > p2) {\n            var tmp = p1;\n            p1 = p2;\n   \
    \         p2 = tmp;\n        }\n        return planets.GetRange(p1 + 1, p2 - p1\
    \ - 1);", "        var planets = new List<string> { \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n     \
    \   var result = new List<string>();\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) return result;\n        if (start > end) {\n            var temp = start;\n\
    \            start = end;\n            end = temp;\n        }\n        for (int\
    \ i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n      \
    \  }\n        return result;", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        if (p1\
    \ > p2) {\n            var t = p1;\n            p1 = p2;\n            p2 = t;\n\
    \        }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var result = new List<string>();\n\
    \        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) {\n            return result;\n        }\n\
    \        if (p1 > p2) {\n            var tmp = p1;\n            p1 = p2;\n   \
    \         p2 = tmp;\n        }\n        for (int i = p1 + 1; i < p2; i++) {\n\
    \            result.Add(planets[i]);\n        }\n        return result;", "  \
    \      var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var i1 =\
    \ planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n    \
    \    if (i1 == -1 || i2 == -1) return new List<string>();\n        if (i1 > i2)\
    \ {\n            var t = i1;\n            i1 = i2;\n            i2 = t;\n    \
    \    }\n        return planets.GetRange(i1 + 1, i2 - i1 - 1);", "        var planets\
    \ = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        var res = new List<string>();\n\
    \        var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) {\n            return res;\n        }\n   \
    \     var min = Math.Min(i1, i2);\n        var max = Math.Max(i1, i2);\n     \
    \   for (int i = min + 1; i < max; i++) {\n            res.Add(planets[i]);\n\
    \        }\n        return res;", "        var planets = new List<string>() {\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var result = new List<string>();\n        var start\
    \ = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n \
    \       if (start == -1 || end == -1) {\n            return result;\n        }\n\
    \        if (start < end) {\n            for (int i = start + 1; i < end; i++)\
    \ {\n                result.Add(planets[i]);\n            }\n        } else {\n\
    \            for (int i = end + 1; i < start; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        }\n        return result;", "        var planets = new\
    \ List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\" };\n        var result = new List<string>();\n\
    \        var start = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n\
    \        if (start == -1 || end == -1) {\n            return result;\n       \
    \ }\n        if (start > end) {\n            var tmp = start;\n            start\
    \ = end;\n            end = tmp;\n        }\n        for (int i = start + 1; i\
    \ < end; i++) {\n            result.Add(planets[i]);\n        }\n        return\
    \ result;", "        List<string> planets = new List<string>() { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        int index1 = planets.IndexOf(planet1);\n        int index2 = planets.IndexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (index1 > index2) {\n            int temp = index1;\n \
    \           index1 = index2;\n            index2 = temp;\n        }\n        return\
    \ planets.GetRange(index1 + 1, index2 - index1 - 1);", "        var planets =\
    \ new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        var result = new List<string>();\n\
    \        var start = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n\
    \        if (start == -1 || end == -1) {\n            return result;\n       \
    \ }\n        if (start > end) {\n            var tmp = start;\n            start\
    \ = end;\n            end = tmp;\n        }\n        for (int i = start + 1; i\
    \ < end; i++) {\n            result.Add(planets[i]);\n        }\n        return\
    \ result;", "        var planets = new List<string> { \"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (i1 > i2) {\n            var tmp = i1;\n            i1\
    \ = i2;\n            i2 = tmp;\n        }\n        return planets.GetRange(i1\
    \ + 1, i2 - i1 - 1);", "        var planets = new List<string> { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var start = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n\
    \        if (start == -1 || end == -1) {\n            return new List<string>();\n\
    \        }\n        if (start > end) {\n            var tmp = start;\n       \
    \     start = end;\n            end = tmp;\n        }\n        return planets.GetRange(start\
    \ + 1, end - start - 1);", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 < 0 || i2 < 0) return new List<string>();\n        if (i1 > i2)\
    \ {\n            var t = i1;\n            i1 = i2;\n            i2 = t;\n    \
    \    }\n        return planets.GetRange(i1 + 1, i2 - i1 - 1);", "        var planets\
    \ = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 < 0 || p2 < 0) {\n\
    \            return new List<string>();\n        }\n        if (p1 > p2) {\n \
    \           var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n     \
    \   }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var planets\
    \ = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return new List<string>();\n        if (p1 > p2) {\n            var tmp = p1;\n\
    \            p1 = p2;\n            p2 = tmp;\n        }\n        return planets.GetRange(p1\
    \ + 1, p2 - p1 - 1);", "        var planets = new List<string> { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var result = new List<string>();\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           var temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        var planets = new List<string> {\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var i1 = planets.IndexOf(planet1);\n        var i2 =\
    \ planets.IndexOf(planet2);\n        if (i1 == -1 || i2 == -1) return new List<string>();\n\
    \        var res = new List<string>();\n        if (i1 < i2) {\n            for\
    \ (int i = i1 + 1; i < i2; i++) res.Add(planets[i]);\n        } else {\n     \
    \       for (int i = i2 + 1; i < i1; i++) res.Add(planets[i]);\n        }\n  \
    \      return res;", "        var planets = new List<string> { \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        if (p1 < p2) {\n\
    \            for (int i = p1 + 1; i < p2; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        } else {\n            for (int i = p2 + 1; i < p1; i++)\
    \ {\n                result.Add(planets[i]);\n            }\n        }\n     \
    \   return result;", "        var planets = new List<string>() { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (p1 > p2) {\n            var tmp = p1;\n            p1\
    \ = p2;\n            p2 = tmp;\n        }\n        return planets.GetRange(p1\
    \ + 1, p2 - p1 - 1);", "        var planets = new List<string> { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        var result\
    \ = new List<string>();\n        if (p1 < p2) {\n            for (int i = p1 +\
    \ 1; i < p2; i++) {\n                result.Add(planets[i]);\n            }\n\
    \        } else {\n            for (int i = p2 + 1; i < p1; i++) {\n         \
    \       result.Add(planets[i]);\n            }\n        }\n        return result;",
  "        var planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 =\
    \ planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n    \
    \    if (p1 == -1 || p2 == -1) {\n            return new List<string>();\n   \
    \     }\n        if (p1 > p2) {\n            var tmp = p1;\n            p1 = p2;\n\
    \            p2 = tmp;\n        }\n        return planets.GetRange(p1 + 1, p2\
    \ - p1 - 1);", "        var planets = new List<string>() { \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) return new List<string>();\n        var min\
    \ = Math.Min(i1, i2);\n        var max = Math.Max(i1, i2);\n        return planets.GetRange(min\
    \ + 1, max - min - 1);", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        if (p1\
    \ > p2) {\n            var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n\
    \        }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var result = new List<string>();\n\
    \        var start = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n\
    \        if (start == -1 || end == -1) return result;\n        if (start > end)\
    \ {\n            var tmp = start;\n            start = end;\n            end =\
    \ tmp;\n        }\n        for (int i = start + 1; i < end; i++) {\n         \
    \   result.Add(planets[i]);\n        }\n        return result;", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) return new List<string>();\n        if (start > end) {\n            var\
    \ tmp = start;\n            start = end;\n            end = tmp;\n        }\n\
    \        return planets.GetRange(start + 1, end - start - 1);", "        List<string>\
    \ planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        int i1 = planets.IndexOf(planet1);\n\
    \        int i2 = planets.IndexOf(planet2);\n        if (i1 == -1 || i2 == -1)\
    \ return new List<string>();\n        if (i1 > i2) {\n            int t = i1;\n\
    \            i1 = i2;\n            i2 = t;\n        }\n        return planets.GetRange(i1\
    \ + 1, i2 - i1 - 1);", "        string[] planets = { \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n     \
    \   int i1 = Array.IndexOf(planets, planet1);\n        int i2 = Array.IndexOf(planets,\
    \ planet2);\n        if (i1 == -1 || i2 == -1) return new List<string>();\n  \
    \      if (i1 > i2) {\n            int t = i1;\n            i1 = i2;\n       \
    \     i2 = t;\n        }\n        return planets.Skip(i1 + 1).Take(i2 - i1 - 1).ToList();",
  "        var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var index1\
    \ = planets.IndexOf(planet1);\n        var index2 = planets.IndexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        if (index1 < index2)\
    \ {\n            for (int i = index1 + 1; i < index2; i++) {\n               \
    \ result.Add(planets[i]);\n            }\n        } else {\n            for (int\
    \ i = index2 + 1; i < index1; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        }\n        return result;", "        // your code here\n\
    \        return new List<string>();", "        var planets = new List<string>\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var idx1 = planets.IndexOf(planet1);\n        var idx2\
    \ = planets.IndexOf(planet2);\n        if (idx1 == -1 || idx2 == -1) return new\
    \ List<string>();\n        var min = Math.Min(idx1, idx2);\n        var max =\
    \ Math.Max(idx1, idx2);\n        return planets.GetRange(min + 1, max - min -\
    \ 1);", "        var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1\
    \ = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n  \
    \      if (p1 == -1 || p2 == -1) {\n            return new List<string>();\n \
    \       }\n        if (p1 > p2) {\n            var t = p1;\n            p1 = p2;\n\
    \            p2 = t;\n        }\n        return planets.GetRange(p1 + 1, p2 -\
    \ p1 - 1);", "        List<string> planets = new List<string>() { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        List<string> result = new List<string>();\n        int index1 =\
    \ planets.IndexOf(planet1);\n        int index2 = planets.IndexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1) {\n            return result;\n   \
    \     }\n        if (index1 > index2) {\n            int temp = index1;\n    \
    \        index1 = index2;\n            index2 = temp;\n        }\n        for\
    \ (int i = index1 + 1; i < index2; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        var planets = new List<string> {\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n        var p2 =\
    \ planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1) {\n           \
    \ return new List<string>();\n        }\n        if (p1 > p2) {\n            var\
    \ tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n        return\
    \ planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var planets = new List<string>\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n        var p2 =\
    \ planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1) return new List<string>();\n\
    \        var result = new List<string>();\n        if (p1 < p2) {\n          \
    \  for (int i = p1 + 1; i < p2; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        } else {\n            for (int i = p2 + 1; i < p1; i++)\
    \ {\n                result.Add(planets[i]);\n            }\n        }\n     \
    \   return result;", "        var planets = new List<string> { \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var result = new List<string>();\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start < end) {\n \
    \           for (int i = start + 1; i < end; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        } else {\n            for (int i = end + 1; i < start;\
    \ i++) {\n                result.Add(planets[i]);\n            }\n        }\n\
    \        return result;", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var result = new List<string>();\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           var tmp = start;\n            start = end;\n            end = tmp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        var planets = new List<string> {\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var i1 = planets.IndexOf(planet1);\n        var i2 =\
    \ planets.IndexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n           \
    \ return new List<string>();\n        }\n        var min = Math.Min(i1, i2);\n\
    \        var max = Math.Max(i1, i2);\n        return planets.GetRange(min + 1,\
    \ max - min - 1);", "        var planets = new List<string> { \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var result = new List<string>();\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           var tmp = start;\n            start = end;\n            end = tmp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        var planets = new List<string> {\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var i1 = planets.IndexOf(planet1);\n        var i2 =\
    \ planets.IndexOf(planet2);\n        if (i1 == -1 || i2 == -1) return new List<string>();\n\
    \        var result = new List<string>();\n        if (i1 < i2) {\n          \
    \  for (int i = i1 + 1; i < i2; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        } else {\n            for (int i = i2 + 1; i < i1; i++)\
    \ {\n                result.Add(planets[i]);\n            }\n        }\n     \
    \   return result;", "        var planets = new List<string> { \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 < 0 || p2 < 0) return new List<string>();\n        var result\
    \ = new List<string>();\n        if (p1 < p2) {\n            for (int i = p1 +\
    \ 1; i < p2; i++) {\n                result.Add(planets[i]);\n            }\n\
    \        } else {\n            for (int i = p2 + 1; i < p1; i++) {\n         \
    \       result.Add(planets[i]);\n            }\n        }\n        return result;",
  "        var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var result\
    \ = new List<string>();\n        var start = planets.IndexOf(planet1);\n     \
    \   var end = planets.IndexOf(planet2);\n        if (start == -1 || end == -1)\
    \ {\n            return result;\n        }\n        if (start > end) {\n     \
    \       var tmp = start;\n            start = end;\n            end = tmp;\n \
    \       }\n        for (int i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        var planets = new List<string> {\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var i1 = planets.IndexOf(planet1);\n        var i2 =\
    \ planets.IndexOf(planet2);\n        if (i1 < 0 || i2 < 0) return new List<string>();\n\
    \        if (i1 > i2) {\n            var tmp = i1;\n            i1 = i2;\n   \
    \         i2 = tmp;\n        }\n        return planets.GetRange(i1 + 1, i2 - i1\
    \ - 1);", "        var planets = new List<string>() { \"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (p1 > p2) {\n            var temp = p1;\n            p1\
    \ = p2;\n            p2 = temp;\n        }\n        return planets.GetRange(p1\
    \ + 1, p2 - p1 - 1);", "        var planets = new List<string> { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        if (p1\
    \ > p2) {\n            var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n\
    \        }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var\
    \ planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var planets1 =\
    \ planets.IndexOf(planet1);\n        var planets2 = planets.IndexOf(planet2);\n\
    \        var result = new List<string>();\n        if (planets1 == -1 || planets2\
    \ == -1) {\n            return result;\n        }\n        if (planets1 > planets2)\
    \ {\n            var temp = planets1;\n            planets1 = planets2;\n    \
    \        planets2 = temp;\n        }\n        for (int i = planets1 + 1; i < planets2;\
    \ i++) {\n            result.Add(planets[i]);\n        }\n        return result;",
  "        // your code goes here\n        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var result = new List<string>();\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return result;\n        if (p1 > p2) {\n            var tmp = p1;\n        \
    \    p1 = p2;\n            p2 = tmp;\n        }\n        for (int i = p1 + 1;\
    \ i < p2; i++) {\n            result.Add(planets[i]);\n        }\n        return\
    \ result;", "        var planets = new List<string> { \"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        var res\
    \ = new List<string>();\n        if (p1 < p2) {\n            for (int i = p1 +\
    \ 1; i < p2; i++) {\n                res.Add(planets[i]);\n            }\n   \
    \     } else {\n            for (int i = p2 + 1; i < p1; i++) {\n            \
    \    res.Add(planets[i]);\n            }\n        }\n        return res;", " \
    \       var planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var res\
    \ = new List<string>();\n        var p1 = planets.IndexOf(planet1);\n        var\
    \ p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1) return res;\n\
    \        if (p1 > p2) {\n            var tmp = p1;\n            p1 = p2;\n   \
    \         p2 = tmp;\n        }\n        for (int i = p1 + 1; i < p2; i++) {\n\
    \            res.Add(planets[i]);\n        }\n        return res;", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return new List<string>();\n        var res = new List<string>();\n        if\
    \ (p1 < p2) {\n            for (int i = p1 + 1; i < p2; i++) {\n             \
    \   res.Add(planets[i]);\n            }\n        } else {\n            for (int\
    \ i = p2 + 1; i < p1; i++) {\n                res.Add(planets[i]);\n         \
    \   }\n        }\n        return res;", "        var planets = new List<string>\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n        var p2 =\
    \ planets.IndexOf(planet2);\n        if (p1 < 0 || p2 < 0) return new List<string>();\n\
    \        var res = new List<string>();\n        if (p1 < p2) {\n            for\
    \ (int i = p1 + 1; i < p2; i++) {\n                res.Add(planets[i]);\n    \
    \        }\n        } else {\n            for (int i = p2 + 1; i < p1; i++) {\n\
    \                res.Add(planets[i]);\n            }\n        }\n        return\
    \ res;", "        var planets = new List<string> { \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n     \
    \   var result = new List<string>();\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           var temp = start;\n            start = end;\n            end = temp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        var planets = new List<string> {\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var result = new List<string>();\n        var start\
    \ = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n \
    \       if (start == -1 || end == -1) {\n            return result;\n        }\n\
    \        if (start > end) {\n            var temp = start;\n            start\
    \ = end;\n            end = temp;\n        }\n        for (int i = start + 1;\
    \ i < end; i++) {\n            result.Add(planets[i]);\n        }\n        return\
    \ result;", "        var planets = new List<string> { \"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var i1 = planets.IndexOf(planet1);\n        var i2 = planets.IndexOf(planet2);\n\
    \        if (i1 < 0 || i2 < 0) return new List<string>();\n        if (i1 > i2)\
    \ {\n            var tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n\
    \        }\n        return planets.GetRange(i1 + 1, i2 - i1 - 1);", "        var\
    \ planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var planet1Index\
    \ = planets.IndexOf(planet1);\n        var planet2Index = planets.IndexOf(planet2);\n\
    \        if (planet1Index == -1 || planet2Index == -1) {\n            return new\
    \ List<string>();\n        }\n        var result = new List<string>();\n     \
    \   var min = Math.Min(planet1Index, planet2Index);\n        var max = Math.Max(planet1Index,\
    \ planet2Index);\n        for (int i = min + 1; i < max; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        List<string> planets = new List<string>();\n\
    \        planets.Add(\"Mercury\");\n        planets.Add(\"Venus\");\n        planets.Add(\"\
    Earth\");\n        planets.Add(\"Mars\");\n        planets.Add(\"Jupiter\");\n\
    \        planets.Add(\"Saturn\");\n        planets.Add(\"Uranus\");\n        planets.Add(\"\
    Neptune\");\n        int i1 = planets.IndexOf(planet1);\n        int i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (i1 > i2) {\n            int temp = i1;\n            i1\
    \ = i2;\n            i2 = temp;\n        }\n        List<string> result = new\
    \ List<string>();\n        for (int i = i1 + 1; i < i2; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        // your code here\n        return\
    \ new List<string>();", "        var planets = new List<string>() { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        var result\
    \ = new List<string>();\n        if (p1 < p2) {\n            for (int i = p1 +\
    \ 1; i < p2; i++) {\n                result.Add(planets[i]);\n            }\n\
    \        } else {\n            for (int i = p2 + 1; i < p1; i++) {\n         \
    \       result.Add(planets[i]);\n            }\n        }\n        return result;",
  "        var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var idx1\
    \ = planets.IndexOf(planet1);\n        var idx2 = planets.IndexOf(planet2);\n\
    \        if (idx1 == -1 || idx2 == -1) return new List<string>();\n        var\
    \ min = Math.Min(idx1, idx2);\n        var max = Math.Max(idx1, idx2);\n     \
    \   return planets.GetRange(min + 1, max - min - 1);", "        var planets =\
    \ new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        var result = new List<string>();\n\
    \        var start = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n\
    \        if (start == -1 || end == -1) return result;\n        if (start > end)\
    \ {\n            var tmp = start;\n            start = end;\n            end =\
    \ tmp;\n        }\n        for (int i = start + 1; i < end; i++) {\n         \
    \   result.Add(planets[i]);\n        }\n        return result;", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ return new List<string>();\n        var min = Math.Min(p1, p2);\n        var\
    \ max = Math.Max(p1, p2);\n        return planets.GetRange(min + 1, max - min\
    \ - 1);", "        // your code here\n        return new List<string>();", " \
    \       var planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var res =\
    \ new List<string>();\n        var p1 = planets.IndexOf(planet1);\n        var\
    \ p2 = planets.IndexOf(planet2);\n        if (p1 < 0 || p2 < 0) return res;\n\
    \        var min = Math.Min(p1, p2);\n        var max = Math.Max(p1, p2);\n  \
    \      for (int i = min + 1; i < max; i++) {\n            res.Add(planets[i]);\n\
    \        }\n        return res;", "        var planets = new List<string>() {\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n        var p2 =\
    \ planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1) {\n           \
    \ return new List<string>();\n        }\n        var min = Math.Min(p1, p2);\n\
    \        var max = Math.Max(p1, p2);\n        return planets.GetRange(min + 1,\
    \ max - min - 1);", "        var planets = new List<string>() { \"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var result = new List<string>();\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return result;\n        }\n        if (start > end) {\n \
    \           var tmp = start;\n            start = end;\n            end = tmp;\n\
    \        }\n        for (int i = start + 1; i < end; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        List<string> planets = new List<string>()\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        List<string> result = new List<string>();\n        int\
    \ index1 = planets.IndexOf(planet1);\n        int index2 = planets.IndexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1) {\n            return result;\n   \
    \     }\n        if (index1 > index2) {\n            int temp = index1;\n    \
    \        index1 = index2;\n            index2 = temp;\n        }\n        for\
    \ (int i = index1 + 1; i < index2; i++) {\n            result.Add(planets[i]);\n\
    \        }\n        return result;", "        var planets = new List<string> {\
    \ \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var result = new List<string>();\n        var start\
    \ = planets.IndexOf(planet1);\n        var end = planets.IndexOf(planet2);\n \
    \       if (start == -1 || end == -1) {\n            return result;\n        }\n\
    \        if (start > end) {\n            var temp = start;\n            start\
    \ = end;\n            end = temp;\n        }\n        for (int i = start + 1;\
    \ i < end; i++) {\n            result.Add(planets[i]);\n        }\n        return\
    \ result;", "        var planets = new List<string>() { \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n \
    \       var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        if (p1\
    \ > p2) {\n            var t = p1;\n            p1 = p2;\n            p2 = t;\n\
    \        }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var\
    \ planets = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return new List<string>();\n        }\n        if (start\
    \ > end) {\n            var tmp = start;\n            start = end;\n         \
    \   end = tmp;\n        }\n        return planets.GetRange(start + 1, end - start\
    \ - 1);", "        var planets = new List<string> { \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n     \
    \   var p1 = planets.IndexOf(planet1);\n        var p2 = planets.IndexOf(planet2);\n\
    \        if (p1 == -1 || p2 == -1) return new List<string>();\n        if (p1\
    \ > p2) {\n            var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n\
    \        }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);"]
stop_tokens:
- "\n    }\n"
