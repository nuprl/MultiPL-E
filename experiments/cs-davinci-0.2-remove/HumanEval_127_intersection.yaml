name: HumanEval_127_intersection
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given two intervals,\n    // where each interval is\
  \ a pair of integers. For example, interval = (start, end) = (1, 2).\n    // The\
  \ given intervals are closed which means that the interval (start, end)\n    //\
  \ includes both start and end.\n    // For each given interval, it is assumed that\
  \ its start is less or equal its end.\n    // Your task is to determine whether\
  \ the length of intersection of these two \n    // intervals is a prime number.\n\
  \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  \
  \  // which its length is 1, which not a prime number.\n    // If the length of\
  \ the intersection is a prime number, return \"YES\",\n    // otherwise, return\
  \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output]\
  \ samples:\n    public static string Intersection(Tuple<long, long> interval1, Tuple<long,\
  \ long> interval2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(2L, 3L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-1L,\
  \ 1L)), (Tuple.Create(0L, 4L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-3L,\
  \ -1L)), (Tuple.Create(-5L, 5L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L,\
  \ 2L)), (Tuple.Create(-4L, 0L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-11L,\
  \ 2L)), (Tuple.Create(-1L, -1L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(3L, 5L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(1L, 2L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L,\
  \ -2L)), (Tuple.Create(-3L, -2L))).Equals((\"NO\")));\n    }\n\n}\n"
completions: ["        // The intersection of two intervals is the largest interval\
    \ that is contained in both intervals.\n        // The intersection of (1, 3)\
    \ and (2, 4) is (2, 3).\n        // The intersection of (1, 4) and (2, 3) is (2,\
    \ 3).\n        // The intersection of (1, 3) and (4, 5) is the empty interval.\n\
    \        // The intersection of (1, 3) and (5, 6) is the empty interval.\n   \
    \     // The intersection of (1, 3) and (3, 5) is (3, 3).\n        // The intersection\
    \ of (1, 3) and (1, 3) is (1, 3).\n        // The intersection of (1, 3) and (1,\
    \ 2) is (1, 2).\n        // The intersection of (1, 3) and (2, 2) is (2, 2).\n\
    \        // The intersection of (1, 3) and (2, 1) is the empty interval.\n   \
    \     // The intersection of (1, 3) and (1, 1) is (1, 1).\n        // The intersection\
    \ of (1, 3) and (0, 2) is (1, 2).\n        // The intersection of (1, 3) and (0,\
    \ 1) is (1, 1).\n        // The intersection of (1, 3) and (0, 0) is the empty\
    \ interval.\n        // The intersection of (1, 3) and (-1, 1) is (1, 1).\n  \
    \      // The intersection of (1, 3) and (-1, 0) is (1, 0).\n        // The intersection\
    \ of (1, 3) and (-1, -1) is the empty interval.\n        // The intersection of\
    \ (1, 3) and (4, 4) is the empty interval.\n        // The intersection of (1,\
    \ 3) and (4, 5) is the empty interval.\n        // The intersection of (1, 3)\
    \ and (5, 6) is the empty interval.\n        // The intersection of (1, 3) and\
    \ (6, 7) is the empty interval.\n        // The intersection of (1, 3) and (7,\
    \ 8) is the empty interval.\n        // The intersection of (1, 3) and (8, 9)\
    \ is the", "        // your code here\n        return \"\";", "        var start\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        var end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) {\n            return \"NO\";\n\
    \        }\n        return IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "  \
    \      // your code goes here\n        // interval1 = (1, 3)\n        // interval2\
    \ = (2, 4)\n        // intersection = (2, 3)\n        // length = 1\n        //\
    \ return \"NO\"\n        // interval1 = (1, 3)\n        // interval2 = (2, 5)\n\
    \        // intersection = (2, 3)\n        // length = 1\n        // return \"\
    NO\"\n        // interval1 = (1, 3)\n        // interval2 = (2, 6)\n        //\
    \ intersection = (2, 3)\n        // length = 1\n        // return \"NO\"\n   \
    \     // interval1 = (1, 3)\n        // interval2 = (2, 7)\n        // intersection\
    \ = (2, 3)\n        // length = 1\n        // return \"NO\"\n        // interval1\
    \ = (1, 3)\n        // interval2 = (2, 8)\n        // intersection = (2, 3)\n\
    \        // length = 1\n        // return \"NO\"\n        // interval1 = (1, 3)\n\
    \        // interval2 = (2, 9)\n        // intersection = (2, 3)\n        // length\
    \ = 1\n        // return \"NO\"\n        // interval1 = (1, 3)\n        // interval2\
    \ = (2, 10)\n        // intersection = (2, 3)\n        // length = 1\n       \
    \ // return \"NO\"\n        // interval1 = (1, 3)\n        // interval2 = (2,\
    \ 11)\n        // intersection = (2, 3)\n        // length = 1\n        // return\
    \ \"NO\"\n        // interval1 = (1, 3)\n        // interval2 = (2, 12)\n    \
    \    // intersection = (2, 3)\n        // length = 1\n        // return \"NO\"\
    \n        // interval1 = (1, 3)\n        // interval2 = (2, 13)\n        // intersection\
    \ = (2, 3)\n        // length = 1\n        // return \"NO\"\n        // interval1\
    \ = (1, 3)\n        // interval2 = (2, 14)\n        // intersection = (2, 3)\n\
    \        // length = 1\n        // return \"NO\"\n        // interval1 = (1, 3",
  "        // your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // interval1 = (1, 3), interval2 = (2, 4)\n \
    \       // interval1 = (1, 3), interval2 = (2, 3)\n        // interval1 = (1,\
    \ 3), interval2 = (3, 4)\n        // interval1 = (1, 3), interval2 = (4, 5)\n\
    \        // interval1 = (1, 3), interval2 = (5, 6)\n        // interval1 = (1,\
    \ 3), interval2 = (1, 3)\n        // interval1 = (1, 3), interval2 = (1, 2)\n\
    \        // interval1 = (1, 3), interval2 = (2, 4)\n        // interval1 = (1,\
    \ 3), interval2 = (3, 4)\n        // interval1 = (1, 3), interval2 = (4, 5)\n\
    \        // interval1 = (1, 3), interval2 = (5, 6)\n        // interval1 = (1,\
    \ 3), interval2 = (1, 3)\n        // interval1 = (1, 3), interval2 = (1, 2)\n\
    \        // interval1 = (1, 3), interval2 = (2, 4)\n        // interval1 = (1,\
    \ 3), interval2 = (3, 4)\n        // interval1 = (1, 3), interval2 = (4, 5)\n\
    \        // interval1 = (1, 3), interval2 = (5, 6)\n        // interval1 = (1,\
    \ 3), interval2 = (1, 3)\n        // interval1 = (1, 3), interval2 = (1, 2)\n\
    \        // interval1 = (1, 3), interval2 = (2, 4)\n        // interval1 = (1,\
    \ 3), interval2 = (3, 4)\n        // interval1 = (1, 3), interval2 = (4, 5)\n\
    \        // interval1 = (1, 3), interval2 = (5, 6)\n        // interval1 = (1,\
    \ 3), interval2 = (1, 3)\n        // interval1 = (1, 3), interval2 = (1, 2)\n\
    \        // interval1 = (1, 3), interval2 = (2, 4)\n        // interval1 = (1,\
    \ 3), interval2 = (3, 4", "        // Write your code here\n        return \"\"\
    ;", "        // Your code here\n        return \"\";", "        // your code here\n\
    \        return \"\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // Your code here\n        return\
    \ \"\";", "        // Your code here\n        return \"\";", "        // Your\
    \ code here\n        return \"\";", "        // your code here\n        return\
    \ \"\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n        return\
    \ \"\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n \
    \       var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        if (interval1.Item1 > interval2.Item2\
    \ || interval2.Item1 > interval1.Item2) {\n            return \"NO\";\n      \
    \  }\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n     \
    \   long end = Math.Min(interval1.Item2, interval2.Item2);\n        long len =\
    \ end - start + 1;\n        return IsPrime(len) ? \"YES\" : \"NO\";", "      \
    \  long start = Math.Max(interval1.Item1, interval2.Item1);\n        long end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) {\n\
    \            return \"NO\";\n        }\n        return IsPrime(end - start + 1)\
    \ ? \"YES\" : \"NO\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        var length = end -\
    \ start + 1;\n        if (length == 1) {\n            return \"NO\";\n       \
    \ }\n        if (length == 2) {\n            return \"YES\";\n        }\n    \
    \    if (length % 2 == 0) {\n            return \"NO\";\n        }\n        for\
    \ (var i = 3; i * i <= length; i += 2) {\n            if (length % i == 0) {\n\
    \                return \"NO\";\n            }\n        }\n        return \"YES\"\
    ;", "        // your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) return \"NO\";\n        return IsPrime(end - start +\
    \ 1) ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n        return\
    \ \"\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n        return\
    \ \"\";", "        // Your code here\n        return \"\";", "        long start\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) {\n            return \"NO\";\n\
    \        }\n        if (start == end) {\n            return \"YES\";\n       \
    \ }\n        return IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        //\
    \ your code here\n        return \"\";", "        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        var\
    \ length = end - start + 1;\n        if (length == 1) {\n            return \"\
    NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n  \
    \      }\n        if (length % 2 == 0) {\n            return \"NO\";\n       \
    \ }\n        for (var i = 3; i * i <= length; i += 2) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        long length = end -\
    \ start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\";", "        //\
    \ your code here\n        return \"\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        long\
    \ length = end - start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\"\
    ;", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n      \
    \  long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start >\
    \ end) {\n            return \"NO\";\n        }\n        return IsPrime(end -\
    \ start + 1) ? \"YES\" : \"NO\";", "        // Write your code here\n        var\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        var end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) return \"NO\";\n        var len\
    \ = end - start + 1;\n        return IsPrime(len) ? \"YES\" : \"NO\";", "    \
    \    long start = Math.Max(interval1.Item1, interval2.Item1);\n        long end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) {\n\
    \            return \"NO\";\n        }\n        long length = end - start + 1;\n\
    \        return IsPrime(length) ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        // Write your code here\n\
    \        // return \"YES\" or \"NO\"\n        return \"\";", "        // Write\
    \ your code here\n        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        var length = end -\
    \ start + 1;\n        if (length == 1) {\n            return \"NO\";\n       \
    \ }\n        if (length == 2) {\n            return \"YES\";\n        }\n    \
    \    if (length % 2 == 0) {\n            return \"NO\";\n        }\n        var\
    \ sqrt = (long)Math.Sqrt(length);\n        for (var i = 3; i <= sqrt; i += 2)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";", "        // your code here\n\
    \        return \"\";", "        // Write your code here\n        // The two intervals\
    \ are given as a tuple of two integers.\n        // The first integer is the start\
    \ of the interval,\n        // and the second integer is the end of the interval.\n\
    \        // The two intervals are closed, which means that the interval (start,\
    \ end)\n        // includes both start and end.\n        // For each given interval,\
    \ it is assumed that its start is less or equal its end.\n        // Your task\
    \ is to determine whether the length of intersection of these two \n        //\
    \ intervals is a prime number.\n        // Example, the intersection of the intervals\
    \ (1, 3), (2, 4) is (2, 3)\n        // which its length is 1, which not a prime\
    \ number.\n        // If the length of the intersection is a prime number, return\
    \ \"YES\",\n        // otherwise, return \"NO\".\n        // If the two intervals\
    \ don't intersect, return \"NO\".\n        // [input/output] samples:\n      \
    \  // Intersection((1, 3), (2, 4)) => \"NO\"\n        // Intersection((1, 3),\
    \ (3, 4)) => \"YES\"\n        // Intersection((1, 3), (4, 5)) => \"NO\"\n    \
    \    // Intersection((1, 3), (1, 3)) => \"YES\"\n        // Intersection((1, 3),\
    \ (1, 2)) => \"YES\"\n        // Intersection((1, 3), (2, 3)) => \"YES\"\n   \
    \     // Intersection((1, 3), (3, 3)) => \"YES\"\n        // Intersection((1,\
    \ 3), (3, 4)) => \"YES\"\n        // Intersection((1, 3), (4, 5)) => \"NO\"\n\
    \        // Intersection((1, 3), (1, 3)) => \"YES\"\n        // Intersection((1,\
    \ 3), (1, 2)) => \"YES\"\n        // Intersection((1, 3), (2, 3)) => \"YES\"\n\
    \        // Intersection((1, 3), (3, 3)) => \"YES\"\n        // Intersection((1,\
    \ 3), (3, 4)) => \"YES\"\n        // Intersection((1, 3), (4, 5)) => \"NO\"\n\
    \        // Intersection((1, 3),", "        // Your code here\n        return\
    \ \"\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        long length = end -\
    \ start + 1;\n        if (length == 1) {\n            return \"NO\";\n       \
    \ }\n        if (length == 2) {\n            return \"YES\";\n        }\n    \
    \    for (long i = 2; i * i <= length; i++) {\n            if (length % i == 0)\
    \ {\n                return \"NO\";\n            }\n        }\n        return\
    \ \"YES\";", "        // Your code here\n        return \"\";", "        // your\
    \ code here\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start + 1;\n        if (length < 1) return \"NO\";\n        return\
    \ IsPrime(length) ? \"YES\" : \"NO\";", "        // Your code here\n        return\
    \ \"\";", "        // Your code here\n        return \"\";", "        // Your\
    \ code here\n        return \"\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        long\
    \ length = end - start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\"\
    ;", "        // Your code here\n        return \"\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start + 1;\n        if (length < 1) return \"NO\"\
    ;\n        if (length == 1) return \"YES\";\n        if (length == 2) return \"\
    NO\";\n        if (length == 3) return \"YES\";\n        if (length % 2 == 0)\
    \ return \"NO\";\n        if (length % 3 == 0) return \"NO\";\n        if (length\
    \ % 5 == 0) return \"NO\";\n        if (length % 7 == 0) return \"NO\";\n    \
    \    return \"YES\";", "        // your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        var\
    \ length = end - start + 1;\n        if (length == 1) {\n            return \"\
    NO\";\n        }\n        return IsPrime(length) ? \"YES\" : \"NO\";", "     \
    \   // your code here\n        return \"\";", "        // find the intersection\
    \ of the two intervals\n        // if the intersection is empty, return \"NO\"\
    \n        // if the intersection is not empty, return \"YES\" if the length of\
    \ the intersection is a prime number\n        // otherwise, return \"NO\"\n  \
    \      // if the intersection is not empty, find the length of the intersection\n\
    \        // if the length is a prime number, return \"YES\"\n        // otherwise,\
    \ return \"NO\"\n        // if the intersection is empty, return \"NO\"\n    \
    \    // if the intersection is not empty, find the length of the intersection\n\
    \        // if the length is a prime number, return \"YES\"\n        // otherwise,\
    \ return \"NO\"\n        // if the intersection is empty, return \"NO\"\n    \
    \    // if the intersection is not empty, find the length of the intersection\n\
    \        // if the length is a prime number, return \"YES\"\n        // otherwise,\
    \ return \"NO\"\n        // if the intersection is empty, return \"NO\"\n    \
    \    // if the intersection is not empty, find the length of the intersection\n\
    \        // if the length is a prime number, return \"YES\"\n        // otherwise,\
    \ return \"NO\"\n        // if the intersection is empty, return \"NO\"\n    \
    \    // if the intersection is not empty, find the length of the intersection\n\
    \        // if the length is a prime number, return \"YES\"\n        // otherwise,\
    \ return \"NO\"\n        // if the intersection is empty, return \"NO\"\n    \
    \    // if the intersection is not empty, find the length of the intersection\n\
    \        // if the length is a prime number, return \"YES\"\n        // otherwise,\
    \ return \"NO\"\n        // if the intersection is empty, return \"NO\"\n    \
    \    // if the intersection is not empty, find the length of the intersection\n\
    \        // if the length is a prime number, return \"YES\"\n        // otherwise,\
    \ return \"NO\"\n        // if the intersection is empty, return \"NO\"\n    \
    \    // if the intersection is not empty, find the length of the intersection\n\
    \        // if the length is a prime number, return \"YES\"\n        // otherwise,\
    \ return \"NO\"\n        // if the intersection is empty, return \"NO\"\n    \
    \    // if the intersection is not empty, find the length of the intersection\n\
    \        // if the length is a prime number, return \"YES\"\n", "        // Your\
    \ code here\n        return \"\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start + 1;\n        if (length < 1) return \"NO\"\
    ;\n        return IsPrime(length) ? \"YES\" : \"NO\";", "        long start =\
    \ Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) {\n            return \"NO\";\n\
    \        }\n        return IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "  \
    \      // write your code here\n        // return \"YES\" or \"NO\"\n        long\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) {\n            return \"NO\";\n\
    \        }\n        return IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "  \
    \      // your code goes here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // your code goes here\n        long start =\
    \ Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) return \"NO\";\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // Write your code here\n      \
    \  return \"\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        var length = end -\
    \ start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\";", "        //\
    \ interval1 = (1, 3), interval2 = (2, 4)\n        // interval1 = (1, 3), interval2\
    \ = (3, 4)\n        // interval1 = (1, 3), interval2 = (4, 5)\n        // interval1\
    \ = (1, 3), interval2 = (5, 6)\n        // interval1 = (1, 3), interval2 = (6,\
    \ 7)\n        // interval1 = (1, 3), interval2 = (7, 8)\n        // interval1\
    \ = (1, 3), interval2 = (8, 9)\n        // interval1 = (1, 3), interval2 = (9,\
    \ 10)\n        // interval1 = (1, 3), interval2 = (10, 11)\n        // interval1\
    \ = (1, 3), interval2 = (11, 12)\n        // interval1 = (1, 3), interval2 = (12,\
    \ 13)\n        // interval1 = (1, 3), interval2 = (13, 14)\n        // interval1\
    \ = (1, 3), interval2 = (14, 15)\n        // interval1 = (1, 3), interval2 = (15,\
    \ 16)\n        // interval1 = (1, 3), interval2 = (16, 17)\n        // interval1\
    \ = (1, 3), interval2 = (17, 18)\n        // interval1 = (1, 3), interval2 = (18,\
    \ 19)\n        // interval1 = (1, 3), interval2 = (19, 20)\n        // interval1\
    \ = (1, 3), interval2 = (20, 21)\n        // interval1 = (1, 3), interval2 = (21,\
    \ 22)\n        // interval1 = (1, 3), interval2 = (22, 23)\n        // interval1\
    \ = (1, 3), interval2 = (23, 24)\n        // interval1 = (1, 3), interval2 = (24,\
    \ 25)\n        // interval1 = (1, 3), interval2 = (25, 26)\n        // interval1\
    \ = (1, 3), interval2 = (26, 27)\n        // interval1 = (1, 3), interval2 = (27,\
    \ 28)\n        // interval1 = (1, 3), interval2 = (28, 29", "        var start\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        var end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        var length = end - start + 1;\n        if (length\
    \ <= 0) {\n            return \"NO\";\n        }\n        return IsPrime(length)\
    \ ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        long length = end - start + 1;\n        return\
    \ IsPrime(length) ? \"YES\" : \"NO\";", "        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        var\
    \ length = end - start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\"\
    ;", "        // your code here\n        return \"\";", "        // your code here\n\
    \        return \"\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        return IsPrime(end - start + 1) ? \"YES\" : \"\
    NO\";", "        // your code here\n        return \"\";", "        // Write your\
    \ code here\n        return \"\";", "        // your code here\n        return\
    \ \"\";", "        // your code here\n        return \"\";", "        // your\
    \ code here\n        return \"\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end)\
    \ return \"NO\";\n        long length = end - start + 1;\n        return IsPrime(length)\
    \ ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        long length = end -\
    \ start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\";", "        var\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        var end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) {\n            return \"NO\";\n\
    \        }\n        return IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "  \
    \      // Your code goes here\n        return \"\";", "        // your code here\n\
    \        return \"\";", "        // your code here\n        return \"\";", " \
    \       var start = Math.Max(interval1.Item1, interval2.Item1);\n        var end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) {\n\
    \            return \"NO\";\n        }\n        return IsPrime(end - start + 1)\
    \ ? \"YES\" : \"NO\";", "        // your code here\n        return \"\";", " \
    \       // your code here\n        return \"\";", "        // your code here\n\
    \        return \"\";", "        // your code here\n        return \"\";", " \
    \       // Your code here\n        return \"\";", "        // TODO: Implement\
    \ this method\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        // write your code here\n        return \"\";", "        var\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        var end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) {\n            return \"NO\";\n\
    \        }\n        var length = end - start + 1;\n        if (length == 1) {\n\
    \            return \"NO\";\n        }\n        if (length == 2) {\n         \
    \   return \"YES\";\n        }\n        return IsPrime(length) ? \"YES\" : \"\
    NO\";", "        // The intersection of two intervals is the largest interval\
    \ that is contained in both intervals.\n        // The intersection of (1, 5)\
    \ and (2, 6) is (2, 5).\n        // The intersection of (1, 5) and (6, 8) is the\
    \ empty set.\n        // The intersection of (1, 5) and (5, 8) is {5}.\n     \
    \   // The intersection of (1, 5) and (0, 1) is {1}.\n        // The intersection\
    \ of (1, 5) and (2, 2) is {2}.\n        // The intersection of (1, 5) and (5,\
    \ 5) is {5}.\n        // The intersection of (1, 5) and (6, 10) is the empty set.\n\
    \        // The intersection of (1, 5) and (1, 1) is {1}.\n        // The intersection\
    \ of (1, 5) and (5, 6) is {5}.\n        // The intersection of (1, 5) and (0,\
    \ 0) is the empty set.\n        // The intersection of (1, 5) and (6, 7) is the\
    \ empty set.\n        // The intersection of (1, 5) and (0, 6) is (1, 5).\n  \
    \      // The intersection of (1, 5) and (0, 5) is (1, 5).\n        // The intersection\
    \ of (1, 5) and (0, 4) is (1, 4).\n        // The intersection of (1, 5) and (2,\
    \ 5) is (2, 5).\n        // The intersection of (1, 5) and (2, 4) is (2, 4).\n\
    \        // The intersection of (1, 5) and (3, 4) is (3, 4).\n        // The intersection\
    \ of (1, 5) and (3, 5) is (3, 5).\n        // The intersection of (1, 5) and (3,\
    \ 6) is (3, 5).\n        // The intersection of (1, 5) and (4, 6) is (4, 5).\n\
    \        // The intersection of (1, 5) and (0, 3) is (1, 3).\n        // The intersection\
    \ of (1, 5) and (0, 2) is (1, 2).\n        //", "        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        var\
    \ length = end - start + 1;\n        if (length == 1) {\n            return \"\
    NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n  \
    \      }\n        if (length % 2 == 0) {\n            return \"NO\";\n       \
    \ }\n        for (var i = 3; i * i <= length; i += 2) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";", "        // your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        var\
    \ length = end - start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\"\
    ;", "        // your code here\n        return \"\";", "        long a = interval1.Item1;\n\
    \        long b = interval1.Item2;\n        long c = interval2.Item1;\n      \
    \  long d = interval2.Item2;\n        long start = Math.Max(a, c);\n        long\
    \ end = Math.Min(b, d);\n        if (start > end) {\n            return \"NO\"\
    ;\n        }\n        long length = end - start + 1;\n        if (length == 1)\
    \ {\n            return \"YES\";\n        }\n        if (length == 2) {\n    \
    \        return \"NO\";\n        }\n        for (long i = 2; i * i <= length;\
    \ i++) {\n            if (length % i == 0) {\n                return \"NO\";\n\
    \            }\n        }\n        return \"YES\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        // Your code here\n\
    \        return \"\";", "        // your code here\n        return \"\";", " \
    \       // your code here\n        return \"\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) return \"NO\";\n        long length = end - start +\
    \ 1;\n        return IsPrime(length) ? \"YES\" : \"NO\";", "        // Your code\
    \ here\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        // Write your code here\n        return \"\";", "        //\
    \ your code here\n        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        var length = end - start + 1;\n        return\
    \ IsPrime(length) ? \"YES\" : \"NO\";", "        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        var\
    \ length = end - start + 1;\n        if (length == 1) {\n            return \"\
    NO\";\n        }\n        return IsPrime(length) ? \"YES\" : \"NO\";", "     \
    \   long start = Math.Max(interval1.Item1, interval2.Item1);\n        long end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) {\n\
    \            return \"NO\";\n        }\n        return IsPrime(end - start + 1)\
    \ ? \"YES\" : \"NO\";", "        // your code goes here\n        if (interval1.Item1\
    \ > interval2.Item2 || interval2.Item1 > interval1.Item2) {\n            return\
    \ \"NO\";\n        }\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start + 1;\n        if (length <= 1) {\n            return \"\
    NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n  \
    \      }\n        for (long i = 2; i * i <= length; i++) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start + 1;\n        if (length < 0) {\n            return \"\
    NO\";\n        }\n        return IsPrime(length) ? \"YES\" : \"NO\";", "     \
    \   var start = Math.Max(interval1.Item1, interval2.Item1);\n        var end =\
    \ Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) return\
    \ \"NO\";\n        var len = end - start + 1;\n        return IsPrime(len) ? \"\
    YES\" : \"NO\";", "        // your code here\n        return \"\";", "       \
    \ // your code here\n        return \"\";", "        // your code here\n     \
    \   return \"\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        var len = end - start + 1;\n        if (len ==\
    \ 1) return \"NO\";\n        if (len == 2) return \"YES\";\n        if (len %\
    \ 2 == 0) return \"NO\";\n        for (long i = 3; i * i <= len; i += 2) {\n \
    \           if (len % i == 0) return \"NO\";\n        }\n        return \"YES\"\
    ;", "        // Your code here\n        return \"\";", "        if (interval1.Item1\
    \ > interval2.Item2 || interval2.Item1 > interval1.Item2) {\n            return\
    \ \"NO\";\n        }\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\"\
    ;", "        // your code here\n        return \"\";", "        // your code here\n\
    \        return \"\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        var length = end - start + 1;\n        if (length\
    \ == 1) return \"NO\";\n        if (length == 2) return \"YES\";\n        if (length\
    \ % 2 == 0) return \"NO\";\n        for (var i = 3; i * i <= length; i += 2) {\n\
    \            if (length % i == 0) return \"NO\";\n        }\n        return \"\
    YES\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n  \
    \      var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // your code goes here\n       \
    \ return \"\";", "        // Your code goes here\n        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        var\
    \ length = end - start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\"\
    ;", "        // Your code here\n        return \"\";", "        // your code here\n\
    \        return \"\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        if (IsPrime(end - start\
    \ + 1)) {\n            return \"YES\";\n        }\n        return \"NO\";", " \
    \       var start = Math.Max(interval1.Item1, interval2.Item1);\n        var end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) {\n\
    \            return \"NO\";\n        }\n        var length = end - start + 1;\n\
    \        if (IsPrime(length)) {\n            return \"YES\";\n        }\n    \
    \    return \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        long length = end -\
    \ start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\";", "        if\
    \ (interval1.Item1 > interval2.Item2 || interval2.Item1 > interval1.Item2) {\n\
    \            return \"NO\";\n        }\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start + 1;\n        if (length == 1) {\n        \
    \    return \"NO\";\n        }\n        if (length == 2) {\n            return\
    \ \"YES\";\n        }\n        for (long i = 2; i * i <= length; i++) {\n    \
    \        if (length % i == 0) {\n                return \"NO\";\n            }\n\
    \        }\n        return \"YES\";", "        // your code goes here\n      \
    \  long start = Math.Max(interval1.Item1, interval2.Item1);\n        long end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) return\
    \ \"NO\";\n        long len = end - start + 1;\n        return IsPrime(len) ?\
    \ \"YES\" : \"NO\";", "        // your code here\n        return \"\";", "   \
    \     var start = Math.Max(interval1.Item1, interval2.Item1);\n        var end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) return\
    \ \"NO\";\n        return IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "   \
    \     // your code here\n        return \"\";", "        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        var\
    \ length = end - start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\"\
    ;", "        // Write your code here\n        return \"\";", "        // your\
    \ code here\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        long length = end -\
    \ start + 1;\n        if (length == 1) {\n            return \"NO\";\n       \
    \ }\n        if (length == 2) {\n            return \"YES\";\n        }\n    \
    \    for (long i = 2; i < length; i++) {\n            if (length % i == 0) {\n\
    \                return \"NO\";\n            }\n        }\n        return \"YES\"\
    ;", "        // your code here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // your code here\n        return \"\";", " \
    \       long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end)\
    \ {\n            return \"NO\";\n        }\n        if (IsPrime(end - start +\
    \ 1)) {\n            return \"YES\";\n        }\n        return \"NO\";", "  \
    \      long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end)\
    \ {\n            return \"NO\";\n        }\n        return IsPrime(end - start\
    \ + 1) ? \"YES\" : \"NO\";", "        // your code here\n        return \"\";",
  "        var start = Math.Max(interval1.Item1, interval2.Item1);\n        var end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) {\n\
    \            return \"NO\";\n        }\n        var length = end - start + 1;\n\
    \        return IsPrime(length) ? \"YES\" : \"NO\";", "        // your code here\n\
    \        return \"\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n\
    \        return \"\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) return \"NO\";\n        long length = end - start +\
    \ 1;\n        if (length <= 1) return \"NO\";\n        if (length == 2) return\
    \ \"YES\";\n        if (length % 2 == 0) return \"NO\";\n        for (long i =\
    \ 3; i * i <= length; i += 2) {\n            if (length % i == 0) return \"NO\"\
    ;\n        }\n        return \"YES\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n\
    \        return \"\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n        return\
    \ \"\";", "        // your code here\n        return \"\";", "        // your\
    \ code here\n        return \"\";", "        // Write your code here\n       \
    \ return \"\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        if (IsPrime(end - start\
    \ + 1)) {\n            return \"YES\";\n        }\n        return \"NO\";", " \
    \       // your code here\n        return \"\";", "        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        var\
    \ len = end - start + 1;\n        if (len == 1) {\n            return \"NO\";\n\
    \        }\n        var isPrime = true;\n        for (var i = 2; i <= Math.Sqrt(len);\
    \ i++) {\n            if (len % i == 0) {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        return isPrime ? \"\
    YES\" : \"NO\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        var length = end - start + 1;\n        return\
    \ IsPrime(length) ? \"YES\" : \"NO\";", "        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        var\
    \ length = end - start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\"\
    ;", "        // your code here\n        return \"\";", "        // your code here\n\
    \        long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end)\
    \ {\n            return \"NO\";\n        }\n        return IsPrime(end - start\
    \ + 1) ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) return \"NO\";\n        long length = end - start +\
    \ 1;\n        if (length == 1) return \"NO\";\n        if (length == 2) return\
    \ \"YES\";\n        if (length % 2 == 0) return \"NO\";\n        for (long i =\
    \ 3; i * i <= length; i += 2) {\n            if (length % i == 0) return \"NO\"\
    ;\n        }\n        return \"YES\";", "        // check if they intersect\n\
    \        if (interval1.Item1 > interval2.Item2 || interval2.Item1 > interval1.Item2)\
    \ {\n            return \"NO\";\n        }\n        // find the intersection\n\
    \        long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        // check if the length\
    \ is prime\n        if (IsPrime(end - start + 1)) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";", "        // your code here\n        return\
    \ \"\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n \
    \       var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        var length = end -\
    \ start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\";", "        var\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        var end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) {\n            return \"NO\";\n\
    \        }\n        var length = end - start + 1;\n        return IsPrime(length)\
    \ ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n        if (interval1.Item1\
    \ > interval2.Item2 || interval2.Item1 > interval1.Item2) {\n            return\
    \ \"NO\";\n        }\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start + 1;\n        if (length == 1) {\n            return \"\
    NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n  \
    \      }\n        if (length % 2 == 0) {\n            return \"NO\";\n       \
    \ }\n        for (long i = 3; i * i <= length; i += 2) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";", "        // Write your code here\n        long start =\
    \ Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) {\n            return \"NO\";\n\
    \        }\n        return IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "  \
    \      long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end)\
    \ {\n            return \"NO\";\n        }\n        return IsPrime(end - start\
    \ + 1) ? \"YES\" : \"NO\";", "        // your code here\n        return \"\";",
  "        var start = Math.Max(interval1.Item1, interval2.Item1);\n        var end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) {\n\
    \            return \"NO\";\n        }\n        var length = end - start + 1;\n\
    \        if (IsPrime(length)) {\n            return \"YES\";\n        }\n    \
    \    return \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        return IsPrime(end - start + 1) ? \"YES\" : \"\
    NO\";", "        // your code here\n        return \"\";", "        if (interval1.Item1\
    \ > interval2.Item2 || interval2.Item1 > interval1.Item2) {\n            return\
    \ \"NO\";\n        }\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        long\
    \ length = end - start + 1;\n        if (length <= 1) {\n            return \"\
    NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n  \
    \      }\n        for (long i = 2; i * i <= length; i++) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";", "        // your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) return \"NO\";\n        long len = end - start + 1;\n\
    \        if (len == 1) return \"NO\";\n        if (len == 2) return \"YES\";\n\
    \        for (long i = 2; i * i <= len; i++) {\n            if (len % i == 0)\
    \ return \"NO\";\n        }\n        return \"YES\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        long\
    \ length = end - start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\"\
    ;", "        // your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        if\
    \ (IsPrime(end - start + 1)) {\n            return \"YES\";\n        }\n     \
    \   return \"NO\";", "        // your code here\n        return \"\";", "    \
    \    // your code here\n        return \"\";", "        // your code here\n  \
    \      return \"\";", "        // your code here\n        return \"\";", "   \
    \     long start = Math.Max(interval1.Item1, interval2.Item1);\n        long end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) {\n\
    \            return \"NO\";\n        }\n        return IsPrime(end - start + 1)\
    \ ? \"YES\" : \"NO\";", "        // your code here\n        return \"\";", " \
    \       var start = Math.Max(interval1.Item1, interval2.Item1);\n        var end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) {\n\
    \            return \"NO\";\n        }\n        var length = end - start + 1;\n\
    \        return IsPrime(length) ? \"YES\" : \"NO\";", "        // your code here\n\
    \        long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end)\
    \ {\n            return \"NO\";\n        }\n        return IsPrime(end - start\
    \ + 1) ? \"YES\" : \"NO\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        // Your code here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       // your code here\n        return \"\";", "        // The intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n        // which its length is 1,\
    \ which not a prime number.\n        // If the length of the intersection is a\
    \ prime number, return \"YES\",\n        // otherwise, return \"NO\".\n      \
    \  // If the two intervals don't intersect, return \"NO\".\n        // [input/output]\
    \ samples:\n        // [input] tuple<long, long> interval1\n        // The first\
    \ interval.\n        // [input] tuple<long, long> interval2\n        // The second\
    \ interval.\n        // [output] string\n        // \"YES\" if the length of the\
    \ intersection is a prime number,\n        // \"NO\" otherwise.\n        // If\
    \ the two intervals don't intersect, return \"NO\".\n        // [constraints]\n\
    \        // interval1[0] <= interval1[1]\n        // interval2[0] <= interval2[1]\n\
    \        // interval1[0] <= interval2[0]\n        // interval1[1] <= interval2[1]\n\
    \        // [time limit] 5000ms\n        // [input] tuple<long, long> interval1\n\
    \        // The first interval.\n        // [input] tuple<long, long> interval2\n\
    \        // The second interval.\n        // [output] string\n        // \"YES\"\
    \ if the length of the intersection is a prime number,\n        // \"NO\" otherwise.\n\
    \        // If the two intervals don't intersect, return \"NO\".\n        // [constraints]\n\
    \        // interval1[0] <= interval1[1]\n        // interval2[0] <= interval2[1]\n\
    \        // interval1[0] <= interval2[0]\n        // interval1[1] <= interval2[1]\n\
    \        // [time limit] 5000ms\n        // [input] tuple<long, long> interval1\n\
    \        // The first interval.\n        // [input] tuple<long, long> interval2\n\
    \        // The second interval.\n        // [output] string\n        // \"YES\"\
    \ if the length of the intersection is a prime number,\n        // \"NO\" otherwise.\n\
    \        // If the two intervals don't intersect, return \"NO\".\n        // [constraints]"]
stop_tokens:
- "\n    }\n"
