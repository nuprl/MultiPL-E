name: HumanEval_159_eat
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n    // but now you need to eat more carrots to complete the\
  \ day's meals.\n    // you should return an array of [ total number of eaten carrots\
  \ after your meals,\n    // the number of carrots left after your meals ]\n    //\
  \ if there are not enough remaining carrots, you will eat all remaining carrots,\
  \ but will still be hungry.\n    // Example:\n    // Variables:\n    // @number\
  \ : integer\n    // the number of carrots that you have eaten.\n    // @need : integer\n\
  \    // the number of carrots that you need to eat.\n    // @remaining : integer\n\
  \    // the number of remaining carrots thet exist in stock\n    // Constrain:\n\
  \    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining\
  \ <= 1000\n    // Have fun :)\n    public static List<long> Eat(long number, long\
  \ need, long remaining) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Eat((5L),\
  \ (6L), (10L)).Equals((new List<long>(new long[]{(long)11L, (long)4L}))));\n   \
  \ Debug.Assert(Eat((4L), (8L), (9L)).Equals((new List<long>(new long[]{(long)12L,\
  \ (long)1L}))));\n    Debug.Assert(Eat((1L), (10L), (10L)).Equals((new List<long>(new\
  \ long[]{(long)11L, (long)0L}))));\n    Debug.Assert(Eat((2L), (11L), (5L)).Equals((new\
  \ List<long>(new long[]{(long)7L, (long)0L}))));\n    Debug.Assert(Eat((4L), (5L),\
  \ (7L)).Equals((new List<long>(new long[]{(long)9L, (long)2L}))));\n    Debug.Assert(Eat((4L),\
  \ (5L), (1L)).Equals((new List<long>(new long[]{(long)5L, (long)0L}))));\n    }\n\
  \n}\n"
completions: ["        List<long> result = new List<long>();\n        if (remaining\
    \ >= need) {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        // your code here\n        long total =\
    \ number + need;\n        long left = remaining - need;\n        if (left < 0)\n\
    \        {\n            total = total + left;\n            left = 0;\n       \
    \ }\n        return new List<long> { total, left };", "        List<long> result\
    \ = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining >= need) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (remaining < need) {\n\
    \            result.Add(number + remaining);\n            result.Add(0);\n   \
    \     } else {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        }\n        return result;", "        long total = number +\
    \ need;\n        long left = remaining - need;\n        if (left < 0) {\n    \
    \        total += left;\n            left = 0;\n        }\n        return new\
    \ List<long> { total, left };", '        return new List<long> { number + Math.Min(need,
    remaining), remaining - Math.Min(need, remaining) };', "        List<long> result\
    \ = new List<long>();\n        result.Add(number);\n        result.Add(need);\n\
    \        result.Add(remaining);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (remaining < need) {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        } else {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (remaining\
    \ < need) {\n            result.Add(number + remaining);\n            result.Add(0);\n\
    \        } else {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long total = number + remaining;\n        if (total >=\
    \ need) {\n            result.Add(need);\n            result.Add(total - need);\n\
    \        } else {\n            result.Add(total);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining < need) {\n            result.Add(number + remaining);\n\
    \            result.Add(0);\n        } else {\n            result.Add(number +\
    \ need);\n            result.Add(remaining - need);\n        }\n        return\
    \ result;", "        // your code here\n        List<long> result = new List<long>();\n\
    \        if (remaining >= need) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        result.Add(number + Math.Min(need,\
    \ remaining));\n        result.Add(Math.Max(remaining - need, 0));\n        return\
    \ result;", "        long total = number + remaining;\n        long left = total\
    \ - need;\n        if (left < 0) {\n            left = 0;\n        }\n       \
    \ return new List<long> { total, left };", "        List<long> result = new List<long>();\n\
    \        if (remaining < need) {\n            result.Add(number + remaining);\n\
    \            result.Add(0);\n        } else {\n            result.Add(number +\
    \ need);\n            result.Add(remaining - need);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        result.Add(number\
    \ + need);\n        result.Add(remaining - need);\n        return result;", " \
    \       List<long> result = new List<long>();\n        if (number >= need) {\n\
    \            result.Add(need);\n            result.Add(remaining);\n        }\
    \ else {\n            if (remaining >= need - number) {\n                result.Add(need);\n\
    \                result.Add(remaining - (need - number));\n            } else\
    \ {\n                result.Add(number + remaining);\n                result.Add(0);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(number + need);\n        result.Add(remaining\
    \ - need);\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining < need) {\n            result.Add(number + remaining);\n\
    \            result.Add(0);\n        } else {\n            result.Add(number +\
    \ need);\n            result.Add(remaining - need);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        result.Add(number\
    \ + Math.Min(need, remaining));\n        result.Add(Math.Max(remaining - need,\
    \ 0));\n        return result;", "        List<long> result = new List<long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.Add(remaining);\n            result.Add(0);\n        } else {\n\
    \            result.Add(total);\n            result.Add(remaining - total);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining >= need) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        // Your code here\n        return new List<long> { 0, 0 };", "        List<long>\
    \ result = new List<long>();\n        long total = number + remaining;\n     \
    \   if (total >= need) {\n            result.Add(need);\n            result.Add(total\
    \ - need);\n        } else {\n            result.Add(total);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining >= need) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (remaining >= need) {\n\
    \            result.Add(number + need);\n            result.Add(remaining - need);\n\
    \        } else {\n            result.Add(number + remaining);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining >= need) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        // Your code here\n        return new List<long>();", "        // Your\
    \ code here\n        List<long> result = new List<long>();\n        if (remaining\
    \ >= need) {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        // Write\
    \ your code here\n        List<long> result = new List<long>();\n        if (remaining\
    \ >= need) {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        // Your\
    \ code here\n        List<long> result = new List<long>();\n        long total\
    \ = number + remaining;\n        long eaten = 0;\n        if (total >= need) {\n\
    \            eaten = need;\n            total -= need;\n        } else {\n   \
    \         eaten = total;\n            total = 0;\n        }\n        result.Add(eaten);\n\
    \        result.Add(total);\n        return result;", "        long total = number\
    \ + remaining;\n        long eaten = 0;\n        if (total > need) {\n       \
    \     eaten = need;\n            total -= need;\n        } else {\n          \
    \  eaten = total;\n            total = 0;\n        }\n        return new List<long>\
    \ { eaten, total };", "        // your code here\n        List<long> result =\
    \ new List<long>();\n        if (remaining < need) {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        } else {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        }\n        return\
    \ result;", "        // your code here\n        List<long> result = new List<long>();\n\
    \        if (remaining >= need) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        if (remaining < need) {\n            return new List<long> { number + remaining,\
    \ 0 };\n        }\n        return new List<long> { number + need, remaining -\
    \ need };", "        List<long> result = new List<long>();\n        if (remaining\
    \ >= need) {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        long total\
    \ = number + need;\n        long left = 0;\n        if (total > remaining) {\n\
    \            total = remaining;\n            left = 0;\n        } else {\n   \
    \         left = remaining - total;\n        }\n        return new List<long>\
    \ { total, left };", "        // your code here\n        List<long> result = new\
    \ List<long>();\n        if (remaining < need) {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        } else {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        }\n        return\
    \ result;", "        if (number + need <= remaining) {\n            return new\
    \ List<long> { number + need, remaining - (number + need) };\n        } else {\n\
    \            return new List<long> { number + remaining, 0 };\n        }", " \
    \       // Your code here\n        return new List<long>();", "        List<long>\
    \ result = new List<long>();\n        if (number >= need) {\n            result.Add(need);\n\
    \            result.Add(remaining);\n        } else {\n            if (remaining\
    \ >= need - number) {\n                result.Add(need);\n                result.Add(remaining\
    \ - (need - number));\n            } else {\n                result.Add(number\
    \ + remaining);\n                result.Add(0);\n            }\n        }\n  \
    \      return result;", "        // your code here\n        return new List<long>();",
  "        List<long> result = new List<long>();\n        if (remaining < need) {\n\
    \            result.Add(number + remaining);\n            result.Add(0);\n   \
    \     } else {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        }\n        return result;", "        long total = number +\
    \ need;\n        long left = 0;\n        if (total > remaining) {\n          \
    \  total = remaining;\n            left = 0;\n        } else {\n            left\
    \ = remaining - total;\n        }\n        return new List<long> { total, left\
    \ };", "        List<long> result = new List<long>();\n        if (remaining >=\
    \ need) {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        long total\
    \ = number + need;\n        long left = 0;\n        if (total > remaining) {\n\
    \            total = remaining;\n            left = 0;\n        } else {\n   \
    \         left = remaining - total;\n        }\n        return new List<long>\
    \ { total, left };", "        List<long> result = new List<long>();\n        result.Add(number\
    \ + Math.Min(need, remaining));\n        result.Add(Math.Max(remaining - need,\
    \ 0));\n        return result;", '        return new List<long>() { number + Math.Min(need,
    remaining), remaining - Math.Min(need, remaining) };', "        // your code here\n\
    \        List<long> result = new List<long>();\n        if (remaining >= need)\
    \ {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        result.Add(number + Math.Min(need, remaining));\n\
    \        result.Add(Math.Max(remaining - need, 0));\n        return result;",
  "        List<long> result = new List<long>();\n        if (remaining < need) {\n\
    \            result.Add(number + remaining);\n            result.Add(0);\n   \
    \     } else {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        }\n        return result;", "        // Your code here\n \
    \       List<long> result = new List<long>();\n        if (remaining < need) {\n\
    \            result.Add(number + remaining);\n            result.Add(0);\n   \
    \     } else {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long eaten = number;\n        long left = remaining;\n\
    \        if (need > remaining) {\n            eaten += remaining;\n          \
    \  left = 0;\n        } else {\n            eaten += need;\n            left -=\
    \ need;\n        }\n        result.Add(eaten);\n        result.Add(left);\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   if (remaining < need) {\n            result.Add(number + remaining);\n   \
    \         result.Add(0);\n        } else {\n            result.Add(number + need);\n\
    \            result.Add(remaining - need);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        result.Add(number);\n  \
    \      result.Add(need);\n        result.Add(remaining);\n        return result;",
  "        List<long> res = new List<long>();\n        if (remaining < need) {\n \
    \           res.Add(number + remaining);\n            res.Add(0);\n        } else\
    \ {\n            res.Add(number + need);\n            res.Add(remaining - need);\n\
    \        }\n        return res;", "        List<long> result = new List<long>();\n\
    \        long eaten = number;\n        long left = remaining;\n        if (number\
    \ + remaining < need) {\n            eaten += remaining;\n            left = 0;\n\
    \        } else {\n            eaten += need;\n            left -= need;\n   \
    \     }\n        result.Add(eaten);\n        result.Add(left);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (number\
    \ >= need) {\n            result.Add(need);\n            result.Add(remaining);\n\
    \        } else {\n            if (remaining >= need - number) {\n           \
    \     result.Add(need);\n                result.Add(remaining - (need - number));\n\
    \            } else {\n                result.Add(number + remaining);\n     \
    \           result.Add(0);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (remaining >= need) {\n\
    \            result.Add(number + need);\n            result.Add(remaining - need);\n\
    \        } else {\n            result.Add(number + remaining);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining >= need) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long total = number + remaining;\n\
    \        if (total >= need) {\n            result.Add(need);\n            result.Add(total\
    \ - need);\n        } else {\n            result.Add(total);\n            result.Add(0);\n\
    \        }\n        return result;", '        return new List<long> { Math.Min(number
    + remaining, need), Math.Max(remaining - (need - number), 0) };', "        List<long>\
    \ result = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining >= need) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        // Your code goes here\n        long total = number + remaining;\n    \
    \    long left = total - need;\n        if (left < 0) {\n            left = 0;\n\
    \        }\n        return new List<long> { total, left };", "        List<long>\
    \ result = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        // Write your code here\n        List<long>\
    \ result = new List<long>();\n        long eaten = number;\n        long left\
    \ = remaining;\n        if (number + remaining < need) {\n            eaten +=\
    \ remaining;\n            left = 0;\n        } else {\n            eaten += need;\n\
    \            left -= need;\n        }\n        result.Add(eaten);\n        result.Add(left);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     result.Add(number);\n        result.Add(need);\n        result.Add(remaining);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (remaining >= need) {\n            result.Add(number + need);\n     \
    \       result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        // Your code here\n        return new List<long>();", "        List<long>\
    \ result = new List<long>();\n        long total = number + need;\n        long\
    \ left = 0;\n        if (total > remaining) {\n            total = remaining;\n\
    \            left = 0;\n        } else {\n            left = remaining - total;\n\
    \        }\n        result.Add(total);\n        result.Add(left);\n        return\
    \ result;", "        // your code here\n        List<long> result = new List<long>();\n\
    \        long total = number + remaining;\n        if (total >= need) {\n    \
    \        result.Add(need);\n            result.Add(total - need);\n        } else\
    \ {\n            result.Add(total);\n            result.Add(0);\n        }\n \
    \       return result;", "        if (number + need <= remaining) {\n        \
    \    return new List<long> { number + need, remaining - (number + need) };\n \
    \       } else {\n            return new List<long> { remaining, 0 };\n      \
    \  }", "        var result = new List<long>();\n        if (remaining >= need)\
    \ {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        if (number\
    \ >= need) {\n            return new List<long> { number, remaining };\n     \
    \   }\n        if (remaining < need - number) {\n            return new List<long>\
    \ { number + remaining, 0 };\n        }\n        return new List<long> { number\
    \ + need - number, remaining - need + number };", "        long eaten = number\
    \ + need;\n        long left = remaining - need;\n        if (left < 0) {\n  \
    \          eaten = number + remaining;\n            left = 0;\n        }\n   \
    \     return new List<long> { eaten, left };", "        // your code here\n  \
    \      return new List<long>();", "        // your code here\n        return new\
    \ List<long>();", "        List<long> result = new List<long>();\n        if (remaining\
    \ >= need) {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (remaining < need) {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        } else {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        }\n        return\
    \ result;", "        // your code here\n        List<long> result = new List<long>();\n\
    \        long total = number + remaining;\n        if (total >= need) {\n    \
    \        result.Add(need);\n            result.Add(total - need);\n        } else\
    \ {\n            result.Add(total);\n            result.Add(0);\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    if (remaining >= need) {\n            result.Add(number + need);\n      \
    \      result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (remaining >= need) {\n\
    \            result.Add(number + need);\n            result.Add(remaining - need);\n\
    \        } else {\n            result.Add(number + remaining);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining >= need) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (remaining >= need) {\n\
    \            result.Add(number + need);\n            result.Add(remaining - need);\n\
    \        } else {\n            result.Add(number + remaining);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining >= need) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        // Your code here\n        List<long> result = new List<long>();\n    \
    \    if (remaining >= need) {\n            result.Add(number + need);\n      \
    \      result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long total = number + need;\n\
    \        if (total > remaining) {\n            result.Add(remaining);\n      \
    \      result.Add(0);\n        } else {\n            result.Add(total);\n    \
    \        result.Add(remaining - total);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long eaten = number;\n\
    \        long left = remaining;\n        if (remaining < need) {\n           \
    \ eaten += remaining;\n            left = 0;\n        } else {\n            eaten\
    \ += need;\n            left -= need;\n        }\n        result.Add(eaten);\n\
    \        result.Add(left);\n        return result;", "        // Your code goes\
    \ here\n        long total = number + need;\n        if (total > remaining) {\n\
    \            return new List<long> { remaining, 0 };\n        }\n        return\
    \ new List<long> { total, remaining - total };", "        List<long> result =\
    \ new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        // your code here\n        List<long> result\
    \ = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        // Your code goes here\n        long total\
    \ = number + remaining;\n        long eaten = 0;\n        if (total >= need) {\n\
    \            eaten = need;\n            total -= need;\n        } else {\n   \
    \         eaten = total;\n            total = 0;\n        }\n        List<long>\
    \ result = new List<long>();\n        result.Add(eaten);\n        result.Add(total);\n\
    \        return result;", "        long eaten = number + Math.Min(need, remaining);\n\
    \        long left = remaining - Math.Min(need, remaining);\n        return new\
    \ List<long> { eaten, left };", "        List<long> result = new List<long>();\n\
    \        if (remaining < need) {\n            result.Add(number + remaining);\n\
    \            result.Add(0);\n        } else {\n            result.Add(number +\
    \ need);\n            result.Add(remaining - need);\n        }\n        return\
    \ result;", "        // Your code here\n        return new List<long> { number\
    \ + need, remaining - need };", "        List<long> result = new List<long>();\n\
    \        if (remaining >= need) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        // your code here\n        return new List<long>();", "        List<long>\
    \ result = new List<long>();\n        if (remaining < need) {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        } else {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        }\n        return\
    \ result;", "        long total = number + need;\n        long left = 0;\n   \
    \     if (total > remaining) {\n            total = remaining;\n            left\
    \ = 0;\n        } else {\n            left = remaining - total;\n        }\n \
    \       return new List<long> { total, left };", "        List<long> result =\
    \ new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        // your code here\n        return new List<long>();",
  "        List<long> result = new List<long>();\n        long total = number + need;\n\
    \        if (total > remaining) {\n            result.Add(remaining);\n      \
    \      result.Add(0);\n        } else {\n            result.Add(total);\n    \
    \        result.Add(remaining - total);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long total = number + need;\n\
    \        if (total > remaining) {\n            result.Add(remaining);\n      \
    \      result.Add(0);\n        } else {\n            result.Add(total);\n    \
    \        result.Add(remaining - total);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        if (remaining >= need)\
    \ {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        long total = number + need;\n        long\
    \ left = remaining - need;\n        if (left < 0) {\n            total += left;\n\
    \            left = 0;\n        }\n        return new List<long> { total, left\
    \ };", "        List<long> result = new List<long>();\n        if (remaining >=\
    \ need) {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        result.Add(number + Math.Min(need, remaining));\n\
    \        result.Add(Math.Max(remaining - need, 0));\n        return result;",
  "        List<long> result = new List<long>();\n        if (remaining >= need) {\n\
    \            result.Add(number + need);\n            result.Add(remaining - need);\n\
    \        } else {\n            result.Add(number + remaining);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining >= need) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long total = number + remaining;\n\
    \        if (total >= need) {\n            result.Add(need);\n            result.Add(total\
    \ - need);\n        } else {\n            result.Add(total);\n            result.Add(0);\n\
    \        }\n        return result;", "        // your code here\n        List<long>\
    \ result = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (number >= need) {\n            result.Add(need);\n            result.Add(remaining);\n\
    \        } else {\n            if (remaining >= need - number) {\n           \
    \     result.Add(need);\n                result.Add(remaining - (need - number));\n\
    \            } else {\n                result.Add(number + remaining);\n     \
    \           result.Add(0);\n            }\n        }\n        return result;",
  '        return new List<long> { number + Math.Min(need, remaining), Math.Max(0,
    remaining - need) };', "        List<long> result = new List<long>();\n      \
    \  if (remaining >= need) {\n            result.Add(number + need);\n        \
    \    result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (remaining >= need) {\n\
    \            result.Add(number + need);\n            result.Add(remaining - need);\n\
    \        } else {\n            result.Add(number + remaining);\n            result.Add(0);\n\
    \        }\n        return result;", "        long total = number + need;\n  \
    \      long left = 0;\n        if (total > remaining) {\n            left = total\
    \ - remaining;\n            total = remaining;\n        }\n        return new\
    \ List<long> { total, left };", "        long total = number + remaining;\n  \
    \      long eaten = 0;\n        if (total < need) {\n            eaten = total;\n\
    \        } else {\n            eaten = need;\n        }\n        return new List<long>\
    \ { eaten, total - eaten };", "        List<long> result = new List<long>();\n\
    \        if (remaining < need) {\n            result.Add(number + remaining);\n\
    \            result.Add(0);\n        } else {\n            result.Add(number +\
    \ need);\n            result.Add(remaining - need);\n        }\n        return\
    \ result;", "        // Your code here\n        return new List<long>() { 0, 0\
    \ };", "        // Your code here\n        return new List<long> { number + need,\
    \ remaining - need };", "        List<long> result = new List<long>();\n     \
    \   if (number >= need) {\n            result.Add(need);\n            result.Add(remaining);\n\
    \        } else {\n            if (remaining >= need - number) {\n           \
    \     result.Add(need);\n                result.Add(remaining - (need - number));\n\
    \            } else {\n                result.Add(number + remaining);\n     \
    \           result.Add(0);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long eaten = number;\n \
    \       long left = remaining;\n        if (need > remaining) {\n            eaten\
    \ += remaining;\n            left = 0;\n        } else {\n            eaten +=\
    \ need;\n            left -= need;\n        }\n        result.Add(eaten);\n  \
    \      result.Add(left);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining < need) {\n            result.Add(number + remaining);\n\
    \            result.Add(0);\n        } else {\n            result.Add(number +\
    \ need);\n            result.Add(remaining - need);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (remaining\
    \ >= need) {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining < need) {\n            result.Add(number + remaining);\n\
    \            result.Add(0);\n        } else {\n            result.Add(number +\
    \ need);\n            result.Add(remaining - need);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (remaining\
    \ >= need) {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        return new List<long>() {\n           \
    \ Math.Min(number + remaining, need),\n            Math.Max(0, Math.Min(number\
    \ + remaining, need) - need)\n        };", "        List<long> result = new List<long>();\n\
    \        long total = number + need;\n        if (total > remaining) {\n     \
    \       result.Add(remaining);\n            result.Add(0);\n        } else {\n\
    \            result.Add(total);\n            result.Add(remaining - total);\n\
    \        }\n        return result;", "        // Your code here\n        if (number\
    \ + need > remaining) {\n            return new List<long> { remaining, 0 };\n\
    \        }\n        return new List<long> { number + need, remaining - (number\
    \ + need) };", "        List<long> result = new List<long>();\n        if (remaining\
    \ < need) {\n            result.Add(number + remaining);\n            result.Add(0);\n\
    \        } else {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        }\n        return result;", "        long total = number +\
    \ Math.Min(need, remaining);\n        long left = Math.Max(0, remaining - need);\n\
    \        return new List<long> { total, left };", "        List<long> result =\
    \ new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        // Your code here\n        return new List<long>\
    \ { number + Math.Min(need, remaining), Math.Max(0, remaining - need) };", " \
    \       List<long> result = new List<long>();\n        if (remaining >= need)\
    \ {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long total = number + remaining;\n     \
    \   if (total >= need) {\n            result.Add(need);\n            result.Add(total\
    \ - need);\n        } else {\n            result.Add(total);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining < need) {\n            result.Add(number + remaining);\n\
    \            result.Add(0);\n        } else {\n            result.Add(number +\
    \ need);\n            result.Add(remaining - need);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (remaining\
    \ >= need) {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        // Your code goes here\n        List<long>\
    \ result = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long total = number + remaining;\n        if (total >= need) {\n    \
    \        result.Add(need);\n            result.Add(total - need);\n        } else\
    \ {\n            result.Add(total);\n            result.Add(0);\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    if (remaining >= need) {\n            result.Add(number + need);\n      \
    \      result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        // Your code here\n        List<long> result = new List<long>();\n    \
    \    if (remaining >= need) {\n            result.Add(number + need);\n      \
    \      result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        long total = number + remaining;\n        long eaten = total - (total -\
    \ need);\n        long left = total - eaten;\n        return new List<long> {\
    \ eaten, left };", "        List<long> result = new List<long>();\n        if\
    \ (number + need <= remaining) {\n            result.Add(number + need);\n   \
    \         result.Add(remaining - (number + need));\n        } else {\n       \
    \     result.Add(remaining);\n            result.Add(0);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (remaining\
    \ >= need) {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        // your\
    \ code here\n        return new List<long> { };", "        List<long> result =\
    \ new List<long>();\n        long total = number + remaining;\n        if (total\
    \ >= need) {\n            result.Add(need);\n            result.Add(total - need);\n\
    \        } else {\n            result.Add(total);\n            result.Add(0);\n\
    \        }\n        return result;", "        return new List<long> {\n      \
    \      Math.Min(number + remaining, need),\n            Math.Max(number + remaining\
    \ - need, 0)\n        };", "        List<long> result = new List<long>();\n  \
    \      if (remaining >= need) {\n            result.Add(number + need);\n    \
    \        result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        // your code here\n        return new List<long>();", "        List<long>\
    \ result = new List<long>();\n        long total = number + remaining;\n     \
    \   if (total >= need) {\n            result.Add(need);\n            result.Add(total\
    \ - need);\n        } else {\n            result.Add(total);\n            result.Add(0);\n\
    \        }\n        return result;", "        // your code here\n        List<long>\
    \ result = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        // Your code here\n        return new List<long>();",
  "        List<long> result = new List<long>();\n        if (remaining >= need) {\n\
    \            result.Add(number + need);\n            result.Add(remaining - need);\n\
    \        } else {\n            result.Add(number + remaining);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining < need) {\n            result.Add(number + remaining);\n\
    \            result.Add(0);\n        } else {\n            result.Add(number +\
    \ need);\n            result.Add(remaining - need);\n        }\n        return\
    \ result;", "        // Your code here\n        return new List<long>() { number\
    \ + need, remaining - need };", "        long eaten = number + Math.Min(need,\
    \ remaining);\n        long left = Math.Max(0, remaining - need);\n        return\
    \ new List<long> { eaten, left };", "        // your code here\n        return\
    \ new List<long>();", "        // Your code here\n        List<long> result =\
    \ new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        // Your code here\n        List<long> result\
    \ = new List<long>();\n        long total = number + remaining;\n        long\
    \ left = total - need;\n        if (left < 0) {\n            result.Add(total);\n\
    \            result.Add(0);\n        } else {\n            result.Add(need);\n\
    \            result.Add(left);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        result.Add(number);\n        result.Add(need);\n\
    \        result.Add(remaining);\n        return result;", "        // Your code\
    \ here\n        return new List<long> { number + Math.Min(need, remaining), Math.Max(0,\
    \ remaining - need) };", "        List<long> result = new List<long>();\n    \
    \    long total = number + remaining;\n        long remain = total - need;\n \
    \       if (remain < 0) {\n            result.Add(total);\n            result.Add(0);\n\
    \        } else {\n            result.Add(need);\n            result.Add(remain);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (number + need <= remaining) {\n            result.Add(number + need);\n\
    \            result.Add(remaining - (number + need));\n        } else {\n    \
    \        result.Add(remaining);\n            result.Add(0);\n        }\n     \
    \   return result;", "        long total = number + need;\n        long left =\
    \ 0;\n        if (total > remaining) {\n            total = remaining;\n     \
    \       left = 0;\n        } else {\n            left = remaining - total;\n \
    \       }\n        return new List<long> { total, left };", "        // Your code\
    \ here\n        List<long> result = new List<long>();\n        if (remaining >=\
    \ need) {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        // your\
    \ code here\n        return new List<long> { number + need, remaining - need };",
  "        long total = number + need;\n        long left = remaining - total;\n \
    \       if (left < 0) {\n            total = total + left;\n            left =\
    \ 0;\n        }\n        return new List<long> { total, left };", "        List<long>\
    \ result = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining < need) {\n            result.Add(number + remaining);\n\
    \            result.Add(0);\n        } else {\n            result.Add(number +\
    \ need);\n            result.Add(remaining - need);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long total\
    \ = number + remaining;\n        long eaten = 0;\n        if (total >= need) {\n\
    \            eaten = need;\n            total -= need;\n        } else {\n   \
    \         eaten = total;\n            total = 0;\n        }\n        result.Add(eaten);\n\
    \        result.Add(total);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        // your code here\n        return new List<long>();",
  "        // Your code here\n        return new List<long> { 0, 0 };", "        List<long>\
    \ result = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        // your code here\n        long eaten =\
    \ number;\n        long left = remaining;\n        if (need > remaining) {\n \
    \           eaten += remaining;\n            left = 0;\n        } else {\n   \
    \         eaten += need;\n            left -= need;\n        }\n        return\
    \ new List<long> { eaten, left };", "        List<long> result = new List<long>();\n\
    \        long total = number + remaining;\n        if (total < need) {\n     \
    \       result.Add(total);\n            result.Add(0);\n        } else {\n   \
    \         result.Add(need);\n            result.Add(total - need);\n        }\n\
    \        return result;", "        // your code here\n        List<long> result\
    \ = new List<long>();\n        if (number + need <= remaining) {\n           \
    \ result.Add(number + need);\n            result.Add(remaining - (number + need));\n\
    \        } else {\n            result.Add(remaining);\n            result.Add(0);\n\
    \        }\n        return result;", "        // your code here\n        List<long>\
    \ result = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining >= need) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (remaining >= need) {\n\
    \            result.Add(number + need);\n            result.Add(remaining - need);\n\
    \        } else {\n            result.Add(number + remaining);\n            result.Add(0);\n\
    \        }\n        return result;", "        long total = number + Math.Min(need,\
    \ remaining);\n        long left = Math.Max(0, remaining - need);\n        return\
    \ new List<long> { total, left };", "        List<long> result = new List<long>();\n\
    \        if (remaining >= need) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (remaining >= need) {\n\
    \            result.Add(number + need);\n            result.Add(remaining - need);\n\
    \        } else {\n            result.Add(number + remaining);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining >= need) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (remaining < need) {\n\
    \            result.Add(number + remaining);\n            result.Add(0);\n   \
    \     } else {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long total = number + need;\n        long left = remaining\
    \ - need;\n        if (left < 0) {\n            total += left;\n            left\
    \ = 0;\n        }\n        result.Add(total);\n        result.Add(left);\n   \
    \     return result;", "        long total = number + remaining;\n        long\
    \ eaten = 0;\n        if (total >= need) {\n            eaten = need;\n      \
    \      total -= need;\n        } else {\n            eaten = total;\n        \
    \    total = 0;\n        }\n        return new List<long> { eaten, total };",
  "        // your code here\n        return new List<long>();", "        // Your\
    \ code here\n        List<long> result = new List<long>();\n        if (remaining\
    \ >= need) {\n            result.Add(number + need);\n            result.Add(remaining\
    \ - need);\n        } else {\n            result.Add(number + remaining);\n  \
    \          result.Add(0);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (number + need <= remaining) {\n    \
    \        result.Add(number + need);\n            result.Add(remaining - (number\
    \ + need));\n        } else {\n            result.Add(remaining);\n          \
    \  result.Add(0);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (remaining >= need) {\n            result.Add(number\
    \ + need);\n            result.Add(remaining - need);\n        } else {\n    \
    \        result.Add(number + remaining);\n            result.Add(0);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (remaining >= need) {\n            result.Add(number + need);\n  \
    \          result.Add(remaining - need);\n        } else {\n            result.Add(number\
    \ + remaining);\n            result.Add(0);\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
