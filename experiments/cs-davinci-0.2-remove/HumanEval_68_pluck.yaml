name: HumanEval_68_pluck
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n    // your task is to pluck one of the nodes and return it.\n\
  \    // The plucked node should be the node with the smallest even value.\n    //\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n    // The plucked node should be returned in a list,\
  \ [ smalest_value, its index ],\n    // If there are no even values or the given\
  \ array is empty, return [].\n    // Example 1:\n    // Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n    // Example 2:\n    // Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n\
  \    // Example 4:\n    // Explanation: 0 is the smallest value, but  there are\
  \ two zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
  \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    public static List<long> Pluck(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,\
  \ (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,\
  \ (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        // Your code goes here\n        return new List<long>();",
  "        // Your code goes here\n        return new List<long>();", "        //\
    \ Your code goes here\n        return new List<long>();", "        var min = arr.Where(x\
    \ => x % 2 == 0).Min();\n        var minIndex = arr.IndexOf(min);\n        return\
    \ new List<long> { min, minIndex };", "        // Your code goes here\n      \
    \  return new List<long>();", "        // Your code goes here\n        return\
    \ new List<long>();", "        // Your code goes here\n        return new List<long>();",
  "        // Your code goes here.\n        return new List<long>();", "        var\
    \ min = arr.Where(x => x % 2 == 0).Min();\n        var idx = arr.IndexOf(min);\n\
    \        return new List<long> { min, idx };", "        if (arr.Count == 0) return\
    \ new List<long>();\n        long min = long.MaxValue;\n        int minIndex =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n        if (minIndex == -1) return new List<long>();\n\
    \        return new List<long> { min, minIndex };", "        // Your code goes\
    \ here\n        return new List<long>();", "        // Your code goes here\n \
    \       return new List<long>();", "        // Your code goes here.\n        return\
    \ new List<long>();", "        var min = arr.Where(x => x % 2 == 0).Min();\n \
    \       var index = arr.IndexOf(min);\n        return new List<long> { min, index\
    \ };", "        // Your code here\n        return new List<long>();", "      \
    \  // Your code goes here\n        return new List<long>();", "        // Your\
    \ code goes here\n        return new List<long>();", "        // Write your code\
    \ here\n        return new List<long>();", "        // Your code goes here\n \
    \       return new List<long>();", "        // Your code goes here\n        return\
    \ new List<long>();", "        // TODO: Implement your solution here\n       \
    \ return new List<long>();", "        if (arr.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        long min = arr.Min();\n        if (min\
    \ % 2 == 0) {\n            return new List<long> { min, arr.IndexOf(min) };\n\
    \        }\n        return new List<long>();", "        long min = long.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long> { min, minIndex };", "        // Your code goes here.\n        return\
    \ null;", "        // Your code goes here\n        return new List<long>();",
  "        // Write your code here\n        return new List<long>();", "        if\
    \ (arr.Count == 0) return new List<long>();\n        long minEven = long.MaxValue;\n\
    \        long minEvenIndex = -1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven\
    \ = arr[i];\n                minEvenIndex = i;\n            }\n        }\n   \
    \     if (minEvenIndex == -1) return new List<long>();\n        return new List<long>\
    \ { minEven, minEvenIndex };", "        // Your code goes here\n        return\
    \ new List<long>();", "        // Your code goes here\n        return null;",
  "        // Your code goes here.\n        return new List<long>();", "        var\
    \ min = arr.Where(x => x % 2 == 0).Min();\n        var idx = arr.IndexOf(min);\n\
    \        return new List<long> { min, idx };", '        return arr.Select((x,
    i) => new { x, i }).Where(x => x.x % 2 == 0).OrderBy(x => x.x).ThenBy(x => x.i).Select(x
    => new List<long> { x.x, x.i }).FirstOrDefault() ?? new List<long>();', "    \
    \    // Your code goes here\n        return new List<long>();", "        // Your\
    \ code goes here\n        return new List<long>();", "        // your code goes\
    \ here\n        return new List<long>();", "        if (arr.Count == 0) {\n  \
    \          return new List<long>();\n        }\n        long min = long.MaxValue;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long> { min, minIndex };", "        var min = arr.Where(x => x % 2 == 0).Min();\n\
    \        var index = arr.IndexOf(min);\n        return new List<long> { min, index\
    \ };", "        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long minEven = long.MaxValue;\n        long minEvenIndex =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < minEven) {\n                minEven = arr[i];\n         \
    \       minEvenIndex = i;\n            }\n        }\n        if (minEvenIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long> { minEven, minEvenIndex };", "        // Your code goes here\n  \
    \      return new List<long>();", '        return arr.Select((x, i) => new { x,
    i }).Where(x => x.x % 2 == 0).OrderBy(x => x.x).ThenBy(x => x.i).Select(x => new
    List<long> { x.x, x.i }).FirstOrDefault() ?? new List<long>();', "        // Your\
    \ code goes here.\n        return new List<long>();", "        // Your code goes\
    \ here.\n        return new List<long>();", "        long min = Int64.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long> { min, minIndex };", "        // Your code goes here\n        return\
    \ new List<long>();", "        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long min = arr.Min();\n        if (min % 2 == 0) {\n     \
    \       return new List<long> { min, arr.IndexOf(min) };\n        }\n        return\
    \ new List<long>();", "        // Your code goes here\n        return new List<long>();",
  "        // Write your code here\n        return new List<long>();", "        //\
    \ Your code goes here\n        return new List<long>();", "        // Your code\
    \ goes here\n        return new List<long>();", "        // Your code goes here\n\
    \        return new List<long>();", "        // Your code here\n        return\
    \ new List<long>();", "        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long min = arr.Min();\n        if (min % 2 == 0) {\n     \
    \       return new List<long> { min, arr.IndexOf(min) };\n        }\n        return\
    \ new List<long>();", "        // Your code goes here\n        return null;",
  "        // Your code goes here\n        return new List<long>();", "        if\
    \ (arr.Count == 0) {\n            return new List<long>();\n        }\n      \
    \  long min = long.MaxValue;\n        long minIndex = -1;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, minIndex };", "        // Your\
    \ code goes here\n        return new List<long>();", "        // Your code goes\
    \ here\n        return new List<long>();", "        // Your code goes here.\n\
    \        return new List<long>();", "        // Your code goes here.\n       \
    \ return new List<long>();", "        long min = Int64.MaxValue;\n        long\
    \ minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n       \
    \         minIndex = i;\n            }\n        }\n        if (minIndex == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>\
    \ { min, minIndex };", "        // Your code goes here.\n        return new List<long>();",
  "        // Your code goes here\n        return new List<long>();", "        //\
    \ Your code goes here\n        return new List<long>();", "        long min =\
    \ Int64.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long> { min, minIndex };", "        if (arr.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        long min = arr.Min();\n\
    \        if (min % 2 == 0) {\n            return new List<long>() { min, arr.IndexOf(min)\
    \ };\n        }\n        return new List<long>();", "        // Your code goes\
    \ here\n        return new List<long>();", "        // Your code goes here.\n\
    \        return new List<long>();", "        if (arr.Count == 0) return new List<long>();\n\
    \        long min = long.MaxValue;\n        long minIndex = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        if (minIndex == -1) return new List<long>();\n      \
    \  return new List<long> { min, minIndex };", "        // Your code goes here\n\
    \        return null;", "        // Write your code here\n        return new List<long>();",
  "        List<long> result = new List<long>();\n        long min = arr.Where(x =>\
    \ x % 2 == 0).Min();\n        if (min == 0) {\n            result.Add(min);\n\
    \            result.Add(arr.IndexOf(min));\n        }\n        return result;",
  "        // your code here\n        return new List<long>();", "        if (arr.Count\
    \ == 0) return new List<long>();\n        long min = long.MaxValue;\n        int\
    \ index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ index = i;\n            }\n        }\n        if (index == -1) return new List<long>();\n\
    \        return new List<long> { min, index };", "        var min = arr.Where(x\
    \ => x % 2 == 0).Min();\n        var index = arr.IndexOf(min);\n        if (index\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long> { min, index };", "        if (arr.Count == 0) return new List<long>();\n\
    \        long min = arr.Min();\n        if (min % 2 == 1) return new List<long>();\n\
    \        int minIndex = arr.IndexOf(min);\n        return new List<long> { min,\
    \ minIndex };", "        if (arr.Count == 0) return new List<long>();\n      \
    \  long min = arr.Min();\n        if (min % 2 == 1) return new List<long>();\n\
    \        return new List<long>() { min, arr.IndexOf(min) };", "        // Your\
    \ code goes here.\n        return new List<long>();", "        // Write your code\
    \ here\n        return new List<long>();", "        // Your code goes here.\n\
    \        return new List<long>();", "        // Your code goes here\n        return\
    \ new List<long>();", "        // Your code goes here\n        return null;",
  "        // Write your code here\n        return new List<long>();", "        //\
    \ Your code goes here\n        return new List<long>();", "        // Your code\
    \ goes here\n        return new List<long>();", "        // Your code goes here\n\
    \        return new List<long>();", "        // TODO: Implement your solution\
    \ here.\n        return new List<long>();", "        // Your code goes here\n\
    \        return new List<long>();", "        // Your code goes here.\n       \
    \ return new List<long>();", "        // Your code goes here.\n        return\
    \ new List<long>();", "        // Your code goes here\n        return new List<long>();",
  "        // Your code goes here.\n        return new List<long>();", "        var\
    \ min = arr.Where(x => x % 2 == 0).Min();\n        var minIndex = arr.IndexOf(min);\n\
    \        return new List<long> { min, minIndex };", "        if (arr.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        long min = arr.Min();\n\
    \        if (min % 2 == 0) {\n            return new List<long> { min, arr.IndexOf(min)\
    \ };\n        }\n        return new List<long>();", "        // your code goes\
    \ here\n        return new List<long>();", "        // Your code here\n      \
    \  return new List<long>();", "        // Your code here\n        return new List<long>();",
  "        if (arr.Count == 0) return new List<long>();\n        long min = long.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) return new List<long>();\n        return new List<long> { min, minIndex\
    \ };", "        // Your code goes here\n        return new List<long>();", " \
    \       // Your code goes here\n        return new List<long>();", "        //\
    \ Your code goes here\n        return new List<long>();", "        // Your code\
    \ goes here\n        return new List<long>();", "        List<long> result = new\
    \ List<long>();\n        if (arr.Count == 0) {\n            return result;\n \
    \       }\n        long smallestEven = arr[0];\n        int smallestEvenIndex\
    \ = 0;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (!found) {\n     \
    \               smallestEven = arr[i];\n                    smallestEvenIndex\
    \ = i;\n                    found = true;\n                } else {\n        \
    \            if (arr[i] < smallestEven) {\n                        smallestEven\
    \ = arr[i];\n                        smallestEvenIndex = i;\n                \
    \    }\n                }\n            }\n        }\n        if (found) {\n  \
    \          result.Add(smallestEven);\n            result.Add(smallestEvenIndex);\n\
    \        }\n        return result;", "        // Your code goes here.\n      \
    \  return new List<long>();", "        // Your code goes here.\n        return\
    \ new List<long>();", "        // Your code goes here\n        return new List<long>();",
  "        // Your code here\n        return new List<long>();", "        var result\
    \ = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        var minEven = arr.Where(x => x % 2 == 0).Min();\n        var\
    \ minEvenIndex = arr.IndexOf(minEven);\n        result.Add(minEven);\n       \
    \ result.Add(minEvenIndex);\n        return result;", "        // Your code goes\
    \ here\n        return new List<long>();", "        // Your code goes here\n \
    \       return null;", "        // Your code goes here\n        return new List<long>();",
  "        // your code here\n        return null;", "        // Your code goes here.\n\
    \        return new List<long>();", "        // Your code goes here\n        return\
    \ null;", "        if (arr.Count == 0) return new List<long>();\n        long\
    \ min = arr.Min();\n        if (min % 2 == 1) return new List<long>();\n     \
    \   return new List<long> { min, arr.IndexOf(min) };", "        // your code here\n\
    \        return new List<long>();", "        if (arr.Count == 0) {\n         \
    \   return new List<long>();\n        }\n        long min = arr.Min();\n     \
    \   if (min % 2 == 0) {\n            return new List<long> { min, arr.IndexOf(min)\
    \ };\n        }\n        return new List<long>();", "        // Your code goes\
    \ here\n        return null;", "        // Your code goes here\n        return\
    \ new List<long>();", "        if (arr.Count == 0) return new List<long>();\n\
    \        long min = arr.Min();\n        if (min % 2 == 1) return new List<long>();\n\
    \        int minIndex = arr.IndexOf(min);\n        return new List<long> { min,\
    \ minIndex };", "        // your code goes here\n        return new List<long>();",
  "        long min = long.MaxValue;\n        int minIndex = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, minIndex };", "        // Your\
    \ code goes here.\n        return null;", "        // Your code here\n       \
    \ return new List<long>();", "        // your code goes here\n        return new\
    \ List<long>();", "        if (arr.Count == 0) return new List<long>();\n    \
    \    long min = long.MaxValue;\n        int minIndex = -1;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        if (minIndex == -1) return new List<long>();\n      \
    \  return new List<long> { min, minIndex };", "        // Your code goes here.\n\
    \        return new List<long>();", "        // Your code goes here\n        return\
    \ new List<long>();", "        // Your code goes here\n        return new List<long>();",
  "        var result = new List<long>();\n        if (arr.Count == 0) {\n       \
    \     return result;\n        }\n        var min = arr.Min();\n        if (min\
    \ % 2 == 0) {\n            result.Add(min);\n            result.Add(arr.IndexOf(min));\n\
    \        }\n        return result;", "        long min = long.MaxValue;\n    \
    \    int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n     \
    \       if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long> { min, minIndex };", "        // Your code goes here\n        return\
    \ new List<long>();", "        // Your code goes here.\n        return new List<long>();",
  "        // Your code goes here\n        return new List<long>();", "        //\
    \ Your code goes here.\n        return new List<long>();", "        // Your code\
    \ goes here\n        return null;", "        // Your code here\n        return\
    \ new List<long>();", "        // Your code goes here\n        return new List<long>();",
  "        // Your code goes here.\n        return new List<long>();", "        //\
    \ Write your code here\n        return new List<long>();", "        if (arr.Count\
    \ == 0) return new List<long>();\n        long min = arr.Min();\n        if (min\
    \ % 2 == 1) return new List<long>();\n        int index = arr.IndexOf(min);\n\
    \        return new List<long> { min, index };", "        // Your code goes here\n\
    \        return new List<long>();", "        // Your code goes here\n        return\
    \ new List<long>();", "        // Your code here\n        return new List<long>();",
  "        if (arr.Count == 0) {\n            return new List<long>();\n        }\n\
    \        long min = arr.Min();\n        if (min % 2 == 0) {\n            return\
    \ new List<long> { min, arr.IndexOf(min) };\n        }\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                return\
    \ new List<long> { arr[i], i };\n            }\n        }\n        return new\
    \ List<long>();", "        // Your code goes here.\n        return new List<long>();",
  "        // Your code goes here\n        return new List<long>();", "        //\
    \ Your code goes here\n        return new List<long>();", "        // Your code\
    \ goes here\n        return new List<long>();", "        // Your code goes here\n\
    \        return new List<long>();", "        // Your code here\n        return\
    \ null;", "        // Your code goes here\n        return new List<long>();",
  "        // Your code goes here.\n        return new List<long>();", "        //\
    \ your code goes here\n        return new List<long>();", "        // Your code\
    \ goes here.\n        return new List<long>();", "        if (arr.Count == 0)\
    \ {\n            return new List<long>();\n        }\n        long min = long.MaxValue;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (min == long.MaxValue)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>\
    \ { min, minIndex };", "        // Your code goes here\n        return new List<long>();",
  "        // Your code goes here.\n        return new List<long>();", "        long\
    \ min = long.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n  \
    \              min = arr[i];\n                minIndex = i;\n            }\n \
    \       }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, minIndex };", "        // Your\
    \ code goes here.\n        return new List<long>();", "        // Your code goes\
    \ here\n        return new List<long>();", "        // Your code goes here.\n\
    \        return new List<long>();", "        // Your code goes here\n        return\
    \ new List<long>();", "        // Your code here\n        return new List<long>();",
  "        // Your code goes here.\n        return new List<long>();", "        long\
    \ min = -1;\n        long minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (min == -1 ||\
    \ arr[i] < min) {\n                    min = arr[i];\n                    minIndex\
    \ = i;\n                }\n            }\n        }\n        if (min == -1) {\n\
    \            return new List<long>();\n        }\n        return new List<long>\
    \ { min, minIndex };", "        // Your code goes here\n        return null;",
  "        // Your code goes here\n        return new List<long>();", "        //\
    \ Your code here\n        return new List<long>();", "        // Your code here\n\
    \        return new List<long>();", "        if (arr.Count == 0) {\n         \
    \   return new List<long>();\n        }\n        long min = arr.Min();\n     \
    \   if (min % 2 == 0) {\n            return new List<long>() { min, arr.IndexOf(min)\
    \ };\n        }\n        return new List<long>();", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here\n        return\
    \ new List<long>();", "        long min = long.MaxValue;\n        int minIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ minIndex = i;\n            }\n        }\n        if (minIndex == -1) {\n   \
    \         return new List<long>();\n        }\n        return new List<long> {\
    \ min, minIndex };", "        var min = arr.Where(x => x % 2 == 0).Min();\n  \
    \      var index = arr.IndexOf(min);\n        return new List<long> { min, index\
    \ };", "        // Write your code here\n        return new List<long>();", " \
    \       // Your code goes here.\n        return null;", "        // Your code\
    \ goes here\n        return new List<long>();", "        // Your code goes here\n\
    \        return new List<long>();", "        // Your code goes here.\n       \
    \ return new List<long>();", "        // Your code goes here\n        return new\
    \ List<long>();", "        // your code goes here\n        return null;", "  \
    \      // Your code goes here\n        return new List<long>();", "        //\
    \ Your code goes here\n        return null;", "        if (arr.Count == 0) return\
    \ new List<long>();\n        long minEven = long.MaxValue;\n        int minEvenIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < minEven) {\n                minEven = arr[i];\n       \
    \         minEvenIndex = i;\n            }\n        }\n        if (minEvenIndex\
    \ == -1) return new List<long>();\n        return new List<long>() { minEven,\
    \ minEvenIndex };", "        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long min = arr.Min();\n        if (min % 2 == 0) {\n     \
    \       return new List<long> { min, arr.IndexOf(min) };\n        }\n        return\
    \ new List<long>();", "        // Your code goes here.\n        return new List<long>();",
  "        // Your code goes here.\n        return new List<long>();", "        if\
    \ (arr.Count == 0) {\n            return new List<long>();\n        }\n      \
    \  long min = arr.Min();\n        if (min % 2 == 0) {\n            return new\
    \ List<long> { min, arr.IndexOf(min) };\n        }\n        return new List<long>();",
  "        // Your code goes here\n        return new List<long>();", "        if\
    \ (arr.Count == 0) return new List<long>();\n        long min = long.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) return new List<long>();\n        return new List<long> { min, minIndex\
    \ };", "        // Your code here\n        return new List<long>();", "      \
    \  // Your code goes here\n        return new List<long>();", "        // your\
    \ code here\n        return new List<long>();", "        // Your code goes here\n\
    \        return new List<long>();", "        if (arr.Count == 0) return new List<long>();\n\
    \        long min = arr.Min(x => x);\n        if (min % 2 == 1) return new List<long>();\n\
    \        long minEven = arr.Where(x => x % 2 == 0).Min(x => x);\n        long\
    \ index = arr.IndexOf(minEven);\n        return new List<long> { minEven, index\
    \ };", "        // Your code goes here\n        return null;", "        // Your\
    \ code goes here.\n        return new List<long>();", "        // Your code goes\
    \ here\n        return new List<long>();", "        // Write your code here\n\
    \        return new List<long>();", "        // Your code goes here\n        return\
    \ null;"]
stop_tokens:
- "\n    }\n"
