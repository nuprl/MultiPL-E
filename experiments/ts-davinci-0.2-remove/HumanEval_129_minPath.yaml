name: HumanEval_129_minPath
language: ts
prompt: "//Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n// each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
  \ to find the minimum path of length k in the grid. You can start\n// from any cell,\
  \ and in each step you can move to any of the neighbor cells,\n// in other words,\
  \ you can go to cells which share an edge with you current\n// cell.\n// Please\
  \ note that a path of length k means visiting exactly k cells (not\n// necessarily\
  \ distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered\
  \ less than a path B (of length k) if\n// after making the ordered lists of the\
  \ values on the cells that A and B go\n// through (let's call them lst_A and lst_B),\
  \ lst_A is lexicographically less\n// than lst_B, in other words, there exist an\
  \ integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j\
  \ (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer\
  \ is unique.\n// Return an ordered list of the values on the cells that the minimum\
  \ path go through.\n// Examples:\nfunction minPath(grid: number[][], k: number):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = minPath;\n  assert.deepEqual(candidate([[1, 2, 3],\
  \ [4, 5, 6], [7, 8, 9]], 3),[1, 2, 1]);\n  assert.deepEqual(candidate([[5, 9, 3],\
  \ [4, 1, 6], [7, 8, 2]], 1),[1]);\n  assert.deepEqual(candidate([[1, 2, 3, 4], [5,\
  \ 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4),[1, 2, 1, 2]);\n  assert.deepEqual(candidate([[6,\
  \ 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10,\
  \ 1, 10, 1]);\n  assert.deepEqual(candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5,\
  \ 7, 1, 12], [3, 10, 11, 16]], 5),[1, 7, 1, 7, 1]);\n  assert.deepEqual(candidate([[11,\
  \ 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1,\
  \ 6, 1, 6, 1]);\n  assert.deepEqual(candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5,\
  \ 16, 14, 4], [11, 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);\n  assert.deepEqual(candidate([[2,\
  \ 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]);\n  assert.deepEqual(candidate([[6,\
  \ 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]);\n  assert.deepEqual(candidate([[1,\
  \ 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\n  assert.deepEqual(candidate([[1,\
  \ 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);\n}\n\ntest();"
completions: ["  const n = grid.length;\n  const m = grid[0].length;\n  const dp:\
    \ number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for\
    \ (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let i =\
    \ 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for (let l = 0; l\
    \ < k; l++) {\n        dp[i][j][l] = Infinity;\n      }\n    }\n  }\n  for (let\
    \ i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0] =\
    \ grid[i][j];\n    }\n  }\n  for (let l = 1; l < k; l++) {\n    for (let i = 0;\
    \ i < n; i++) {\n      for (let j = 0; j < m; j++) {\n        if (i > 0) {\n \
    \         dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n        }\n\
    \        if (i < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i\
    \ + 1][j][l - 1]);\n        }\n        if (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n        }\n        if (j < m - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n \
    \ }\n  let min = Infinity;\n  let minI = -1;\n  let minJ = -1;\n  for (let i =\
    \ 0; i < n", "    const n = grid.length;\n    const m = grid[0].length;\n    const\
    \ dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n\
    \        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n        }\n\
    \    }\n    const queue: [number, number, number][] = [];\n    queue.push([0,\
    \ 0, 0]);\n    dp[0][0][0] = grid[0][0];\n    while (queue.length > 0) {\n   \
    \     const [i, j, l] = queue.shift()!;\n        if (l === k) {\n            continue;\n\
    \        }\n        if (i > 0 && dp[i - 1][j][l + 1] === undefined) {\n      \
    \      dp[i - 1][j][l + 1] = dp[i][j][l] + grid[i - 1][j];\n            queue.push([i\
    \ - 1, j, l + 1]);\n        }\n        if (i < n - 1 && dp[i + 1][j][l + 1] ===\
    \ undefined) {\n            dp[i + 1][j][l + 1] = dp[i][j][l] + grid[i + 1][j];\n\
    \            queue.push([i + 1, j, l + 1]);\n        }\n        if (j > 0 && dp[i][j\
    \ - 1][l + 1] === undefined) {\n            dp[i][j - 1][l + 1] = dp[i][j][l]\
    \ + grid[i][j - 1];\n            queue.push([i, j - 1, l + 1]);\n        }\n \
    \       if (j < m - 1 && dp[i][j + 1][l + 1] === undefined) {\n            dp[i][j\
    \ + 1][l + 1] = dp[i][j][l] + grid[i][j + 1];\n            queue.push([i, j +\
    \ 1, l + 1]);\n        }\n    }\n    let min = Infinity;\n    let minI =", " \
    \   let n = grid.length;\n    let m = grid[0].length;\n    let minPath: number[]\
    \ = [];\n    let minSum = Infinity;\n    let minPaths: number[][] = [];\n    let\
    \ minPathsSum: number[] = [];\n    let visited: boolean[][] = [];\n    for (let\
    \ i = 0; i < n; i++) {\n        visited[i] = [];\n        for (let j = 0; j <\
    \ m; j++) {\n            visited[i][j] = false;\n        }\n    }\n    function\
    \ dfs(i: number, j: number, path: number[], sum: number) {\n        if (sum >\
    \ minSum) {\n            return;\n        }\n        if (path.length === k) {\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            \
    \    minPaths = [path];\n                minPathsSum = [sum];\n            } else\
    \ if (sum === minSum) {\n                minPaths.push(path);\n              \
    \  minPathsSum.push(sum);\n            }\n            return;\n        }\n   \
    \     if (i > 0 && !visited[i - 1][j]) {\n            visited[i - 1][j] = true;\n\
    \            dfs(i - 1, j, path.concat(grid[i - 1][j]), sum + grid[i - 1][j]);\n\
    \            visited[i - 1][j] = false;\n        }\n        if (i < n - 1 && !visited[i\
    \ + 1][j]) {\n            visited[i + 1][j] = true;\n            dfs(i + 1, j,\
    \ path.concat(grid[i + 1][j]), sum + grid[i + 1][j]);\n            visited[i +\
    \ 1][j] = false;\n        }\n        if (j > 0 && !visited[i][j - 1]) {\n    \
    \        visited[i][j - 1] = true;\n            dfs(i, j - 1, path.concat(grid[i][j\
    \ - 1]), sum + grid[i][j - 1]);\n            visited[i][j - 1] = false;\n    \
    \    }\n       ", "  let minPath: number[] = [];\n  let minSum = Infinity;\n \
    \ const dfs = (\n    i: number,\n    j: number,\n    path: number[],\n    sum:\
    \ number,\n    visited: boolean[][]\n  ) => {\n    if (i < 0 || i >= grid.length\
    \ || j < 0 || j >= grid[0].length) {\n      return;\n    }\n    if (visited[i][j])\
    \ {\n      return;\n    }\n    if (path.length === k) {\n      if (sum < minSum)\
    \ {\n        minSum = sum;\n        minPath = path;\n      }\n      return;\n\
    \    }\n    visited[i][j] = true;\n    dfs(i + 1, j, [...path, grid[i][j]], sum\
    \ + grid[i][j], visited);\n    dfs(i - 1, j, [...path, grid[i][j]], sum + grid[i][j],\
    \ visited);\n    dfs(i, j + 1, [...path, grid[i][j]], sum + grid[i][j], visited);\n\
    \    dfs(i, j - 1, [...path, grid[i][j]], sum + grid[i][j], visited);\n    visited[i][j]\
    \ = false;\n  };\n  for (let i = 0; i < grid.length; i++) {\n    for (let j =\
    \ 0; j < grid[0].length; j++) {\n      dfs(i, j, [grid[i][j]], grid[i][j], []);\n\
    \    }\n  }\n  return minPath;\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 5));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 6));\n\
    console.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 7));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ const dirs = [\n    [0, 1],\n    [0, -1],\n    [1, 0],\n    [-1, 0],\n  ];\n\
    \  const queue: number[][] = [];\n  queue.push([0, 0, 0]);\n  dp[0][0][0] = grid[0][0];\n\
    \  while (queue.length) {\n    const [i, j, l] = queue.shift()!;\n    if (l ===\
    \ k - 1) {\n      return dp[i][j];\n    }\n    for (const [di, dj] of dirs) {\n\
    \      const ni = i + di;\n      const nj = j + dj;\n      if (ni < 0 || ni >=\
    \ n || nj < 0 || nj >= m) {\n        continue;\n      }\n      const newPath =\
    \ dp[i][j].concat(grid[ni][nj]);\n      if (dp[ni][nj][l + 1] === undefined ||\
    \ less(newPath, dp[ni][nj])) {\n        dp[ni][nj] = newPath;\n        queue.push([ni,\
    \ nj, l + 1]);\n      }\n    }\n  }\n  return [];\n}\n", "  const n = grid.length;\n\
    \  const m = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0;\
    \ i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j]\
    \ = [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let i = 0; i\
    \ < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for (let l = 1; l < k;\
    \ l++) {\n        dp[i][j][l] = Infinity;\n        if (i > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (i < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n        }\n        if (j < m - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n \
    \ }\n  let min = Infinity;\n  let minI = -1;\n  let minJ = -1;\n  for (let i =\
    \ 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (dp[i][j][k -\
    \ 1] < min) {\n        min = dp[i][j][k - 1];\n        minI", "  //\n}\n\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 4));", "    const n = grid.length;\n    const\
    \ visited = new Set<string>();\n    const queue = [[0, 0, [grid[0][0]]]];\n  \
    \  let minPath = null;\n    while (queue.length) {\n        const [i, j, path]\
    \ = queue.shift();\n        if (path.length === k) {\n            if (!minPath\
    \ || path.join('') < minPath.join('')) {\n                minPath = path;\n  \
    \          }\n            continue;\n        }\n        if (i > 0 && !visited.has(`${i\
    \ - 1},${j}`)) {\n            visited.add(`${i - 1},${j}`);\n            queue.push([i\
    \ - 1, j, [...path, grid[i - 1][j]]]);\n        }\n        if (i < n - 1 && !visited.has(`${i\
    \ + 1},${j}`)) {\n            visited.add(`${i + 1},${j}`);\n            queue.push([i\
    \ + 1, j, [...path, grid[i + 1][j]]]);\n        }\n        if (j > 0 && !visited.has(`${i},${j\
    \ - 1}`)) {\n            visited.add(`${i},${j - 1}`);\n            queue.push([i,\
    \ j - 1, [...path, grid[i][j - 1]]]);\n        }\n        if (j < n - 1 && !visited.has(`${i},${j\
    \ + 1}`)) {\n            visited.add(`${i},${j + 1}`);\n            queue.push([i,\
    \ j + 1, [...path, grid[i][j + 1]]]);\n        }\n    }\n    return minPath;\n\
    }\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 5));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8,", "    const n = grid.length;\n    const m = grid[0].length;\n    const\
    \ dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n\
    \        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n        }\n\
    \    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++)\
    \ {\n            for (let l = 0; l < k; l++) {\n                dp[i][j][l] =\
    \ Infinity;\n            }\n        }\n    }\n    for (let i = 0; i < n; i++)\
    \ {\n        for (let j = 0; j < m; j++) {\n            dp[i][j][0] = grid[i][j];\n\
    \        }\n    }\n    for (let l = 1; l < k; l++) {\n        for (let i = 0;\
    \ i < n; i++) {\n            for (let j = 0; j < m; j++) {\n                if\
    \ (i > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l\
    \ - 1]);\n                }\n                if (i < n - 1) {\n              \
    \      dp[i][j][l] = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n           \
    \     }\n                if (j > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n                }\n                if (j < m - 1) {\n\
    \                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \                }\n            }\n        }\n    }\n    let min = Infinity;\n\
    \    let minI = -1;\n    let minJ = -1;\n    for (let i = 0; i < n", "  const\
    \ n = grid.length;\n  const m = grid[0].length;\n  const visited = new Set<string>();\n\
    \  const queue = [[0, 0, [grid[0][0]]]];\n  const dirs = [[0, 1], [0, -1], [1,\
    \ 0], [-1, 0]];\n  while (queue.length) {\n    const [i, j, path] = queue.shift()!;\n\
    \    if (path.length === k) {\n      return path;\n    }\n    for (const [di,\
    \ dj] of dirs) {\n      const ni = i + di;\n      const nj = j + dj;\n      if\
    \ (ni < 0 || ni >= n || nj < 0 || nj >= m) {\n        continue;\n      }\n   \
    \   const key = `${ni},${nj}`;\n      if (visited.has(key)) {\n        continue;\n\
    \      }\n      visited.add(key);\n      queue.push([ni, nj, [...path, grid[ni][nj]]]);\n\
    \    }\n  }\n  return [];\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7,\
    \ 8, 9]], 5));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4));\n\
    console.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 2));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 1));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 6));\n\
    console.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 7));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ dp[0][0][0] = grid[0][0];\n  for (let i = 0; i < n; i++) {\n    for (let j =\
    \ 0; j < m; j++) {\n      for (let l = 0; l < k; l++) {\n        if (dp[i][j][l]\
    \ === undefined) {\n          continue;\n        }\n        if (i + 1 < n) {\n\
    \          if (dp[i + 1][j][l + 1] === undefined) {\n            dp[i + 1][j][l\
    \ + 1] = dp[i][j][l];\n          } else {\n            dp[i + 1][j][l + 1] = Math.min(dp[i\
    \ + 1][j][l + 1], dp[i][j][l]);\n          }\n        }\n        if (j + 1 < m)\
    \ {\n          if (dp[i][j + 1][l + 1] === undefined) {\n            dp[i][j +\
    \ 1][l + 1] = dp[i][j][l];\n          } else {\n            dp[i][j + 1][l + 1]\
    \ = Math.min(dp[i][j + 1][l + 1], dp[i][j][l]);\n          }\n        }\n    \
    \  }\n    }\n  }\n  const result: number[] = [];\n  let i = n - 1;\n  let j =\
    \ m - 1;\n  for (let l = k - 1; l >= 0; l--) {\n    result.push(grid[i][j]);\n\
    \    if (i > 0 && dp[i - 1][j][l] !== undefined && dp[i - 1][j][l] <= dp[i][j][l])\
    \ {\n      i--", "  let minPath: number[] = [];\n  let minSum = Infinity;\n  let\
    \ minPaths: number[][] = [];\n  let minPathsSum = Infinity;\n  let paths: number[][]\
    \ = [];\n  let path: number[] = [];\n  let sum = 0;\n  let pathSum = 0;\n  let\
    \ pathSums: number[] = [];\n  let pathSumsIndex = 0;\n  let pathsIndex = 0;\n\
    \  let gridIndex = 0;\n  let gridIndex2 = 0;\n  let gridIndex3 = 0;\n  let gridIndex4\
    \ = 0;\n  let gridIndex5 = 0;\n  let gridIndex6 = 0;\n  let gridIndex7 = 0;\n\
    \  let gridIndex8 = 0;\n  let gridIndex9 = 0;\n  let gridIndex10 = 0;\n  let gridIndex11\
    \ = 0;\n  let gridIndex12 = 0;\n  let gridIndex13 = 0;\n  let gridIndex14 = 0;\n\
    \  let gridIndex15 = 0;\n  let gridIndex16 = 0;\n  let gridIndex17 = 0;\n  let\
    \ gridIndex18 = 0;\n  let gridIndex19 = 0;\n  let gridIndex20 = 0;\n  let gridIndex21\
    \ = 0;\n  let gridIndex22 = 0;\n  let gridIndex23 = 0;\n  let gridIndex24 = 0;\n\
    \  let gridIndex25 = 0;\n  let gridIndex26 = 0;\n  let gridIndex27 = 0;\n  let\
    \ gridIndex28 = 0;\n  let gridIndex29 = 0;\n  let gridIndex30 = 0;\n  let gridIndex31\
    \ = 0;\n  let gridIndex32 = 0;\n  let gridIndex33 = 0;\n  let gridIndex34 = 0;\n\
    \  let gridIndex35 = 0;\n  let gridIndex36 = 0;\n  let gridIndex37 = 0;\n  let\
    \ gridIndex38 = 0;\n  let gridIndex39 = 0;\n  let gridIndex40 = 0;\n  let gridIndex41\
    \ = 0;\n  let gridIndex42 = 0;\n  let gridIndex43 = 0;\n  let gridIndex44 = 0;\n\
    \  let gridIndex45 = 0;\n  let", "  const n = grid.length;\n  const dp: number[][][]\
    \ = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0;\
    \ j < n; j++) {\n      dp[i][j] = [];\n    }\n  }\n  dp[0][0][0] = grid[0][0];\n\
    \  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      for\
    \ (let l = 0; l < k; l++) {\n        if (dp[i][j][l] === undefined) {\n      \
    \    continue;\n        }\n        if (i + 1 < n) {\n          dp[i + 1][j][l\
    \ + 1] = Math.min(\n            dp[i + 1][j][l + 1] || Infinity,\n           \
    \ dp[i][j][l] + grid[i + 1][j]\n          );\n        }\n        if (j + 1 < n)\
    \ {\n          dp[i][j + 1][l + 1] = Math.min(\n            dp[i][j + 1][l + 1]\
    \ || Infinity,\n            dp[i][j][l] + grid[i][j + 1]\n          );\n     \
    \   }\n      }\n    }\n  }\n  let min = Infinity;\n  let minI = -1;\n  let minJ\
    \ = -1;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n\
    \      if (dp[i][j][k - 1] < min) {\n        min = dp[i][j][k - 1];\n        minI\
    \ = i;\n        minJ = j;\n      }\n    }\n  }\n  const res: number[] = [];\n\
    \  res.push(grid[minI][minJ]);\n  for (let l = k - 1; l > 0; l--) {\n    if (minI\
    \ > 0 && dp[minI][minJ][l] === dp[minI - 1][", "  let minPath: number[] = [];\n\
    \  let minSum = Infinity;\n  let minPathSum = Infinity;\n  let minPaths: number[][]\
    \ = [];\n  let minPathsSum: number[] = [];\n  let minPathsSumMap: { [key: number]:\
    \ number[] } = {};\n  let visited: { [key: string]: boolean } = {};\n  let queue:\
    \ { [key: string]: number } = {};\n  let queueSum: { [key: string]: number } =\
    \ {};\n  let queuePath: { [key: string]: number[] } = {};\n  let queuePathSum:\
    \ { [key: string]: number } = {};\n  let queuePathSumMap: { [key: string]: { [key:\
    \ number]: number[] } } = {};\n  let queuePaths: { [key: string]: number[][] }\
    \ = {};\n  let queuePathsSum: { [key: string]: number[] } = {};\n  let queuePathsSumMap:\
    \ { [key: string]: { [key: number]: number[] } } = {};\n  let queuePathsSumMapMap:\
    \ { [key: string]: { [key: number]: { [key: number]: number[] } } } = {};\n  let\
    \ queuePathsSumMapMapMap: { [key: string]: { [key: number]: { [key: number]: {\
    \ [key: number]: number[] } } } } = {};\n  let queuePathsSumMapMapMapMap: { [key:\
    \ string]: { [key: number]: { [key: number]: { [key: number]: { [key: number]:\
    \ number[] } } } } } = {};\n  let queuePathsSumMapMapMapMapMap: { [key: string]:\
    \ { [key: number]: { [key: number]: { [key: number]: { [key: number]: { [key:\
    \ number]: number[] } } } } } } = {};\n  let queuePathsSumMapMapMapMapMapMap:\
    \ { [key: string]: { [key: number]: { [key: number]: { [key: number]: { [key:\
    \ number]: { [key: number]: { [key: number]: number[] } } } } } } } =", "    const\
    \ n = grid.length;\n    const m = grid[0].length;\n    const dp: number[][][]\
    \ = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let\
    \ j = 0; j < m; j++) {\n            dp[i][j] = [];\n        }\n    }\n    for\
    \ (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n         \
    \   for (let l = 0; l < k; l++) {\n                dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n\
    \            }\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        for\
    \ (let j = 0; j < m; j++) {\n            dp[i][j][0] = grid[i][j];\n        }\n\
    \    }\n    for (let l = 1; l < k; l++) {\n        for (let i = 0; i < n; i++)\
    \ {\n            for (let j = 0; j < m; j++) {\n                if (i > 0) {\n\
    \                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n\
    \                }\n                if (i < n - 1) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n                }\n         \
    \       if (j > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n                }\n                if (j < m - 1) {\n\
    \                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \                }\n            }\n        }\n    }\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minI = -1;\n    let", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n       \
    \ dp[i] = [];\n        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n\
    \        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            dp[i][j][0] = grid[i][j];\n        }\n    }\n   \
    \ for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n     \
    \       for (let l = 1; l < k; l++) {\n                dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n\
    \                if (i > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n                }\n                if (j > 0) {\n   \
    \                 dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n\
    \                }\n                if (i < n - 1) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n                }\n         \
    \       if (j < m - 1) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n                }\n            }\n        }\n    }\n\
    \    const res: number[] = [];\n    let i = 0;\n    let j = 0;\n    for (let l\
    \ = 0; l < k; l++) {\n        res.push(dp[i][j][l]);\n        if (i > 0 && dp[i\
    \ - 1][j][l] < dp[i][j][l]) {\n           ", "    const n = grid.length;\n   \
    \ const dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i]\
    \ = [];\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = [];\n \
    \       }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j\
    \ < n; j++) {\n            for (let l = 0; l < k; l++) {\n                dp[i][j][l]\
    \ = Infinity;\n            }\n        }\n    }\n    for (let i = 0; i < n; i++)\
    \ {\n        for (let j = 0; j < n; j++) {\n            dp[i][j][0] = grid[i][j];\n\
    \        }\n    }\n    for (let l = 1; l < k; l++) {\n        for (let i = 0;\
    \ i < n; i++) {\n            for (let j = 0; j < n; j++) {\n                for\
    \ (let di = -1; di <= 1; di++) {\n                    for (let dj = -1; dj <=\
    \ 1; dj++) {\n                        if (di === 0 && dj === 0) {\n          \
    \                  continue;\n                        }\n                    \
    \    const ni = i + di;\n                        const nj = j + dj;\n        \
    \                if (ni < 0 || ni >= n || nj < 0 || nj >= n) {\n             \
    \               continue;\n                        }\n                       \
    \ const cur = dp[i][j][l - 1];\n                        const next = dp[ni][nj][l\
    \ - 1];\n                        if (cur < next) {\n                         \
    \   dp[ni][nj][l] = cur;\n                        } else {\n                 \
    \           dp[ni][nj][l] = next;\n                        }\n               \
    \     }\n                }\n            }\n        }\n    }\n    const ans: number[]\
    \ = [];\n    let i = 0;\n    let j = 0;\n    for (let l = 0; l < k; l++) {\n \
    \       ans.push(dp[i][j][l]);\n       ", "  const n = grid.length;\n  const m\
    \ = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0; i < n;\
    \ i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] =\
    \ [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m;\
    \ j++) {\n      for (let l = 0; l < k; l++) {\n        dp[i][j][l] = Infinity;\n\
    \      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l\
    \ < k; l++) {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m;\
    \ j++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (j < m - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Infinity;\n\
    \  let minI = -1;\n  let minJ = -1;\n  for (let i = 0; i < n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let minPath = [];\n    let minSum = Infinity;\n\
    \    let minPathSum = Infinity;\n    let minPaths = [];\n    let minPathsSum =\
    \ [];\n    let minPathsIndex = [];\n    let minPathsIndexSum = [];\n    let path\
    \ = [];\n    let pathSum = 0;\n    let paths = [];\n    let pathsSum = [];\n \
    \   let pathsIndex = [];\n    let pathsIndexSum = [];\n    let pathIndex = 0;\n\
    \    let pathIndexSum = 0;\n    let pathIndexSumMin = 0;\n    let pathIndexSumMax\
    \ = 0;\n    let pathIndexSumMinIndex = 0;\n    let pathIndexSumMaxIndex = 0;\n\
    \    let pathIndexSumMinIndexSum = 0;\n    let pathIndexSumMaxIndexSum = 0;\n\
    \    let pathIndexSumMinIndexSumIndex = 0;\n    let pathIndexSumMaxIndexSumIndex\
    \ = 0;\n    let pathIndexSumMinIndexSumIndexIndex = 0;\n    let pathIndexSumMaxIndexSumIndexIndex\
    \ = 0;\n    let pathIndexSumMinIndexSumIndexIndexIndex = 0;\n    let pathIndexSumMaxIndexSumIndexIndexIndex\
    \ = 0;\n    let pathIndexSumMinIndexSumIndexIndexIndexIndex = 0;\n    let pathIndexSumMaxIndexSumIndexIndexIndexIndex\
    \ = 0;\n    let pathIndexSumMinIndexSumIndexIndexIndexIndexIndex = 0;\n    let\
    \ pathIndexSumMaxIndexSumIndexIndexIndexIndexIndex = 0;\n    let pathIndexSumMinIndexSumIndexIndexIndexIndexIndexIndex\
    \ = 0;\n    let pathIndexSumMaxIndexSumIndexIndexIndexIndexIndexIndex = 0;\n \
    \   let pathIndexSumMinIndexSumIndexIndexIndexIndexIndexIndexIndex = 0;\n    let\
    \ pathIndexSumMaxIndexSumIndexIndexIndexIndexIndexIndexIndex = 0;\n    let pathIndexSumMinIndexSumIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = 0;\n    let pathIndexSumMaxIndexSumIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = 0;\n    let pathIndexSumMinIndexSumIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = 0;\n    let pathIndexSumMaxIndexSumIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = 0;\n", "  const n = grid.length;\n  const m = grid[0].length;\n  const dp:\
    \ number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for\
    \ (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  const dirs =\
    \ [\n    [0, 1],\n    [0, -1],\n    [1, 0],\n    [-1, 0],\n  ];\n  const queue:\
    \ [number, number, number][] = [];\n  queue.push([0, 0, 0]);\n  dp[0][0][0] =\
    \ grid[0][0];\n  while (queue.length > 0) {\n    const [i, j, l] = queue.shift()!;\n\
    \    if (l === k) {\n      continue;\n    }\n    for (const [di, dj] of dirs)\
    \ {\n      const ni = i + di;\n      const nj = j + dj;\n      if (ni < 0 || ni\
    \ >= n || nj < 0 || nj >= m) {\n        continue;\n      }\n      const nl = l\
    \ + 1;\n      if (dp[ni][nj][nl] === undefined) {\n        dp[ni][nj][nl] = dp[i][j][l]\
    \ + grid[ni][nj];\n        queue.push([ni, nj, nl]);\n      } else if (dp[ni][nj][nl]\
    \ > dp[i][j][l] + grid[ni][nj]) {\n        dp[ni][nj][nl] = dp[i][j][l] + grid[ni][nj];\n\
    \        queue.push([ni, nj, nl]);\n      }\n    }\n  }\n  let min = Infinity;\n\
    \  let res: number[] = [];\n  for (let i = 0; i < n; i++) {\n    for (let j =\
    \ 0; j < m; j++) {\n      if (dp[i][j][k] !== undefined && dp[i][j][", "    const\
    \ N = grid.length;\n    const visited = new Set<string>();\n    const queue =\
    \ [[0, 0, grid[0][0]]];\n    const result = [];\n    while (queue.length) {\n\
    \        const [i, j, sum] = queue.shift();\n        if (i === N - 1 && j ===\
    \ N - 1) {\n            if (sum === k) {\n                result.push(grid[i][j]);\n\
    \            }\n            continue;\n        }\n        if (sum > k) {\n   \
    \         continue;\n        }\n        if (i + 1 < N) {\n            const key\
    \ = `${i + 1}-${j}`;\n            if (!visited.has(key)) {\n                visited.add(key);\n\
    \                queue.push([i + 1, j, sum + grid[i + 1][j]]);\n            }\n\
    \        }\n        if (j + 1 < N) {\n            const key = `${i}-${j + 1}`;\n\
    \            if (!visited.has(key)) {\n                visited.add(key);\n   \
    \             queue.push([i, j + 1, sum + grid[i][j + 1]]);\n            }\n \
    \       }\n    }\n    return result;\n}\n\nconsole.log(minPath([[1, 2, 3], [4,\
    \ 5, 6], [7, 8, 9]], 12));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8,\
    \ 9]], 15));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 16));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 17));\nconsole.log(minPath([[1, 2, 3], [4, 5,\
    \ 6], [7, 8, 9]], 18));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]],\
    \ 19));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7", "    const n = grid.length;\n\
    \    const m = grid[0].length;\n    const dp: number[][][] = [];\n    for (let\
    \ i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++)\
    \ {\n            dp[i][j] = [];\n        }\n    }\n    for (let i = 0; i < n;\
    \ i++) {\n        for (let j = 0; j < m; j++) {\n            for (let l = 0; l\
    \ < k; l++) {\n                dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n      \
    \      }\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let\
    \ j = 0; j < m; j++) {\n            dp[i][j][0] = grid[i][j];\n        }\n   \
    \ }\n    for (let l = 1; l < k; l++) {\n        for (let i = 0; i < n; i++) {\n\
    \            for (let j = 0; j < m; j++) {\n                if (i > 0) {\n   \
    \                 dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n\
    \                }\n                if (i < n - 1) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n                }\n         \
    \       if (j > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n                }\n                if (j < m - 1) {\n\
    \                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \                }\n            }\n        }\n    }\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minI = -1;\n    let", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let visited = new Set<string>();\n    let minPath = [];\n    let minSum =\
    \ Infinity;\n    let minPathSum = Infinity;\n    let minPaths = [];\n    let minPathsSum\
    \ = [];\n    let dirs = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dfs = (i:\
    \ number, j: number, path: number[], sum: number) => {\n        if (i < 0 || i\
    \ >= n || j < 0 || j >= m) return;\n        if (visited.has(`${i}-${j}`)) return;\n\
    \        if (path.length === k) {\n            if (sum < minSum) {\n         \
    \       minSum = sum;\n                minPath = path;\n            }\n      \
    \      if (sum === minSum) {\n                minPaths.push(path);\n         \
    \       minPathsSum.push(sum);\n            }\n            return;\n        }\n\
    \        visited.add(`${i}-${j}`);\n        for (let dir of dirs) {\n        \
    \    dfs(i + dir[0], j + dir[1], [...path, grid[i][j]], sum + grid[i][j]);\n \
    \       }\n        visited.delete(`${i}-${j}`);\n    };\n    for (let i = 0; i\
    \ < n; i++) {\n        for (let j = 0; j < m; j++) {\n            dfs(i, j, [],\
    \ 0);\n        }\n    }\n    if (minPaths.length === 0) return [];\n    if (minPaths.length\
    \ === 1) return minPaths[0];\n    let minPathsStr = minPaths.map(path => path.join(''));\n\
    \    let minPathsStrSorted = minPathsStr.slice().sort();\n    let minPathsSorted\
    \ = minPathsStrSorted.map(path => path.split('').map(Number));\n    return minPathsSorted[0];\n\
    }\n\nconsole.log(minPath(\n", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const visited = new Set<string>();\n  const queue = [[0, 0, grid[0][0], [grid[0][0]]]];\n\
    \  while (queue.length) {\n    const [i, j, sum, path] = queue.shift()!;\n   \
    \ if (sum === k) return path;\n    if (i < n - 1 && !visited.has(`${i + 1},${j}`))\
    \ {\n      visited.add(`${i + 1},${j}`);\n      queue.push([i + 1, j, sum + grid[i\
    \ + 1][j], [...path, grid[i + 1][j]]]);\n    }\n    if (j < m - 1 && !visited.has(`${i},${j\
    \ + 1}`)) {\n      visited.add(`${i},${j + 1}`);\n      queue.push([i, j + 1,\
    \ sum + grid[i][j + 1], [...path, grid[i][j + 1]]]);\n    }\n    if (i > 0 &&\
    \ !visited.has(`${i - 1},${j}`)) {\n      visited.add(`${i - 1},${j}`);\n    \
    \  queue.push([i - 1, j, sum + grid[i - 1][j], [...path, grid[i - 1][j]]]);\n\
    \    }\n    if (j > 0 && !visited.has(`${i},${j - 1}`)) {\n      visited.add(`${i},${j\
    \ - 1}`);\n      queue.push([i, j - 1, sum + grid[i][j - 1], [...path, grid[i][j\
    \ - 1]]]);\n    }\n    queue.sort((a, b) => a[2] - b[2]);\n  }\n  return [];\n\
    }\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 15));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8,", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for\
    \ (let l = 0; l < k; l++) {\n        dp[i][j][l] = Infinity;\n      }\n    }\n\
    \  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n   \
    \   dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l < k; l++) {\n \
    \   for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m; j++) {\n     \
    \   if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l\
    \ - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n        }\n        if (j > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n        }\n        if (j < m\
    \ - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \        }\n      }\n    }\n  }\n  let min = Infinity;\n  let minI = -1;\n  let\
    \ minJ = -1;\n  for (let i = 0; i < n", "    let n = grid.length;\n    let m =\
    \ grid[0].length;\n    let minPath: number[] = [];\n    let minSum = Infinity;\n\
    \    let minPathSum = Infinity;\n    let minPaths: number[][] = [];\n    let path:\
    \ number[] = [];\n    let pathSum = 0;\n    let paths: number[][] = [];\n    let\
    \ visited: boolean[][] = [];\n    for (let i = 0; i < n; i++) {\n        visited[i]\
    \ = [];\n        for (let j = 0; j < m; j++) {\n            visited[i][j] = false;\n\
    \        }\n    }\n    function dfs(i: number, j: number, k: number): void {\n\
    \        if (k === 0) {\n            if (pathSum < minPathSum) {\n           \
    \     minPathSum = pathSum;\n                minPaths = [path.slice()];\n    \
    \        } else if (pathSum === minPathSum) {\n                minPaths.push(path.slice());\n\
    \            }\n            return;\n        }\n        if (i < 0 || i >= n ||\
    \ j < 0 || j >= m || visited[i][j]) {\n            return;\n        }\n      \
    \  visited[i][j] = true;\n        path.push(grid[i][j]);\n        pathSum += grid[i][j];\n\
    \        dfs(i - 1, j, k - 1);\n        dfs(i + 1, j, k - 1);\n        dfs(i,\
    \ j - 1, k - 1);\n        dfs(i, j + 1, k - 1);\n        path.pop();\n       \
    \ pathSum -= grid[i][j];\n        visited[i][j] = false;\n    }\n    for (let\
    \ i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            dfs(i,\
    \ j, k);\n        }\n    }\n    for (let i = 0; i < minPaths.length; i++) {\n\
    \        let sum = 0;\n        for (let j = 0; j < minPaths[i].length; j++) {\n",
  "    //\n}\n", "    const n = grid.length;\n    const m = grid[0].length;\n    const\
    \ dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n\
    \        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n        }\n\
    \    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++)\
    \ {\n            for (let l = 0; l < k; l++) {\n                dp[i][j][l] =\
    \ Number.MAX_SAFE_INTEGER;\n            }\n        }\n    }\n    for (let i =\
    \ 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            dp[i][j][0]\
    \ = grid[i][j];\n        }\n    }\n    for (let l = 1; l < k; l++) {\n       \
    \ for (let i = 0; i < n; i++) {\n            for (let j = 0; j < m; j++) {\n \
    \               if (i > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n                }\n                if (i < n - 1) {\n\
    \                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n\
    \                }\n                if (j > 0) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n                }\n         \
    \       if (j < m - 1) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n                }\n            }\n        }\n    }\n\
    \    let min = Number.MAX_SAFE_INTEGER;\n    let minI = -1;\n    let", "  const\
    \ n = grid.length;\n  const visited = new Set<string>();\n  const queue = [[0,\
    \ 0, grid[0][0], [grid[0][0]]]];\n  while (queue.length) {\n    const [i, j, sum,\
    \ path] = queue.shift()!;\n    if (i === n - 1 && j === n - 1 && path.length ===\
    \ k) return path;\n    if (path.length === k) continue;\n    if (i > 0 && !visited.has(`${i\
    \ - 1},${j}`)) {\n      queue.push([i - 1, j, sum + grid[i - 1][j], [...path,\
    \ grid[i - 1][j]]]);\n      visited.add(`${i - 1},${j}`);\n    }\n    if (i <\
    \ n - 1 && !visited.has(`${i + 1},${j}`)) {\n      queue.push([i + 1, j, sum +\
    \ grid[i + 1][j], [...path, grid[i + 1][j]]]);\n      visited.add(`${i + 1},${j}`);\n\
    \    }\n    if (j > 0 && !visited.has(`${i},${j - 1}`)) {\n      queue.push([i,\
    \ j - 1, sum + grid[i][j - 1], [...path, grid[i][j - 1]]]);\n      visited.add(`${i},${j\
    \ - 1}`);\n    }\n    if (j < n - 1 && !visited.has(`${i},${j + 1}`)) {\n    \
    \  queue.push([i, j + 1, sum + grid[i][j + 1], [...path, grid[i][j + 1]]]);\n\
    \      visited.add(`${i},${j + 1}`);\n    }\n    queue.sort((a, b) => a[2] - b[2]);\n\
    \  }\n  return [];\n}\n\nconsole.log(\n  minPath(\n    [\n      [1, 2, 3, 4],\n\
    \      [5, 6, 7, 8],\n      [9, 10, 11,", "    let n = grid.length;\n    let m\
    \ = grid[0].length;\n    let dp: number[][][] = [];\n    for (let i = 0; i < n;\
    \ i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++) {\n       \
    \     dp[i][j] = [];\n            for (let l = 0; l < k; l++) {\n            \
    \    dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n            }\n        }\n    }\n\
    \    dp[0][0][0] = grid[0][0];\n    for (let i = 0; i < n; i++) {\n        for\
    \ (let j = 0; j < m; j++) {\n            for (let l = 0; l < k; l++) {\n     \
    \           if (i > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l] + grid[i][j]);\n                }\n                if (j > 0)\
    \ {\n                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l] +\
    \ grid[i][j]);\n                }\n                if (l > 0) {\n            \
    \        dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j][l - 1] + grid[i][j]);\n\
    \                }\n            }\n        }\n    }\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minPath: number[] = [];\n    for (let i = 0; i < n; i++) {\n        for\
    \ (let j = 0; j < m; j++) {\n            if (dp[i][j][k - 1] < min) {\n      \
    \          min = dp[i][j][k - 1];\n                minPath = [grid[i][j]];\n \
    \           } else if (dp[i][j][k - 1] === min) {\n                minPath.push(grid[i][j]);\n\
    \            }\n       ", "    //\n}\n", "  const n = grid.length;\n  const m\
    \ = grid[0].length;\n  const visited = new Set<string>();\n  const queue = [[0,\
    \ 0, grid[0][0]]];\n  const result = [];\n  let min = Infinity;\n  while (queue.length)\
    \ {\n    const [i, j, sum] = queue.shift();\n    if (sum > min) continue;\n  \
    \  if (i === n - 1 && j === m - 1) {\n      if (sum < min) {\n        min = sum;\n\
    \        result.length = 0;\n      }\n      result.push(grid[i][j]);\n      continue;\n\
    \    }\n    if (sum > k) continue;\n    if (i > 0) {\n      const key = `${i -\
    \ 1}-${j}`;\n      if (!visited.has(key)) {\n        visited.add(key);\n     \
    \   queue.push([i - 1, j, sum + grid[i - 1][j]]);\n      }\n    }\n    if (j >\
    \ 0) {\n      const key = `${i}-${j - 1}`;\n      if (!visited.has(key)) {\n \
    \       visited.add(key);\n        queue.push([i, j - 1, sum + grid[i][j - 1]]);\n\
    \      }\n    }\n    if (i < n - 1) {\n      const key = `${i + 1}-${j}`;\n  \
    \    if (!visited.has(key)) {\n        visited.add(key);\n        queue.push([i\
    \ + 1, j, sum + grid[i + 1][j]]);\n      }\n    }\n    if (j < m - 1) {\n    \
    \  const key = `${i}-${j + 1}`;\n      if (!visited.has(key)) {\n        visited.add(key);\n\
    \        queue.push([i, j + 1, sum + grid[i][j + 1]]);\n      }\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(\n  minPath(\n    [\n      [1, 2, 3, 4],\n\
    \      [5, 6", "  const n = grid.length;\n  const m = grid[0].length;\n  const\
    \ dp: number[][][] = new Array(n).fill(0).map(() => new Array(m).fill(0).map(()\
    \ => new Array(k + 1).fill(Infinity)));\n  const dirs = [[0, 1], [0, -1], [1,\
    \ 0], [-1, 0]];\n  const queue: [number, number, number][] = [];\n  for (let i\
    \ = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][1] = grid[i][j];\n\
    \      queue.push([i, j, 1]);\n    }\n  }\n  while (queue.length) {\n    const\
    \ [i, j, l] = queue.shift()!;\n    for (const [di, dj] of dirs) {\n      const\
    \ ni = i + di;\n      const nj = j + dj;\n      if (ni < 0 || ni >= n || nj <\
    \ 0 || nj >= m) continue;\n      const nl = l + 1;\n      if (nl > k) continue;\n\
    \      if (dp[ni][nj][nl] > dp[i][j][l] + grid[ni][nj]) {\n        dp[ni][nj][nl]\
    \ = dp[i][j][l] + grid[ni][nj];\n        queue.push([ni, nj, nl]);\n      }\n\
    \    }\n  }\n  let min = Infinity;\n  let ans = [];\n  for (let i = 0; i < n;\
    \ i++) {\n    for (let j = 0; j < m; j++) {\n      if (dp[i][j][k] < min) {\n\
    \        min = dp[i][j][k];\n        ans = [grid[i][j]];\n      } else if (dp[i][j][k]\
    \ === min) {\n        ans.push(grid[i][j]);\n      }\n    }\n  }\n  return ans;\n\
    }\n\nconsole.log(minPath([", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for\
    \ (let l = 0; l < k; l++) {\n        dp[i][j][l] = Infinity;\n      }\n    }\n\
    \  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n   \
    \   dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l < k; l++) {\n \
    \   for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m; j++) {\n     \
    \   if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l\
    \ - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n        }\n        if (j > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n        }\n        if (j < m\
    \ - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \        }\n      }\n    }\n  }\n  let min = Infinity;\n  let minI = -1;\n  let\
    \ minJ = -1;\n  for (let i = 0; i < n", "  const n = grid.length;\n  const m =\
    \ grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++)\
    \ {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n\
    \    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      for (let l = 0; l < k; l++) {\n        dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n\
    \      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l\
    \ < k; l++) {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m;\
    \ j++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (j < m - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Number.MAX_SAFE_INTEGER;\n\
    \  let minI = -1;\n  let", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const dp: number[][][] = [];\n    const visited: boolean[][][] = [];\n  \
    \  for (let i = 0; i < n; i++) {\n        dp.push([]);\n        visited.push([]);\n\
    \        for (let j = 0; j < m; j++) {\n            dp[i].push([]);\n        \
    \    visited[i].push([]);\n            for (let l = 0; l < k; l++) {\n       \
    \         dp[i][j].push(Number.MAX_SAFE_INTEGER);\n                visited[i][j].push(false);\n\
    \            }\n        }\n    }\n    dp[0][0][0] = grid[0][0];\n    visited[0][0][0]\
    \ = true;\n    let min = Number.MAX_SAFE_INTEGER;\n    let minPath = [];\n   \
    \ for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n     \
    \       for (let l = 0; l < k; l++) {\n                if (visited[i][j][l]) {\n\
    \                    if (l === k - 1) {\n                        if (dp[i][j][l]\
    \ < min) {\n                            min = dp[i][j][l];\n                 \
    \           minPath = [grid[i][j]];\n                        } else if (dp[i][j][l]\
    \ === min) {\n                            minPath.push(grid[i][j]);\n        \
    \                }\n                    } else {\n                        if (i\
    \ > 0) {\n                            if (dp[i][j][l] + grid[i - 1][j] < dp[i\
    \ - 1][j][l + 1]) {\n                                dp[i - 1][j][l + 1] = dp[i][j][l]\
    \ + grid[i - 1][j];\n                                visited[i - 1][j][l + 1]\
    \ = true;\n                            }\n                        }\n        \
    \                if (j > 0) {\n                            if (dp[i][j][l", " \
    \ const n = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][]\
    \ = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0;\
    \ j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let i = 0; i < n; i++)\
    \ {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n\
    \  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n   \
    \   for (let l = 1; l < k; l++) {\n        dp[i][j][l] = Infinity;\n        if\
    \ (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n\
    \        }\n        if (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j < m\
    \ - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \        }\n      }\n    }\n  }\n  let min = Infinity;\n  let minI = -1;\n  let\
    \ minJ = -1;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      if (dp[i][j][k - 1] < min) {\n        min = dp[i][j][k - 1];\n    \
    \    minI", "    const n = grid.length;\n    const m = grid[0].length;\n    const\
    \ dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n\
    \        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n        }\n\
    \    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++)\
    \ {\n            for (let l = 0; l < k; l++) {\n                dp[i][j][l] =\
    \ Infinity;\n            }\n        }\n    }\n    for (let i = 0; i < n; i++)\
    \ {\n        for (let j = 0; j < m; j++) {\n            dp[i][j][0] = grid[i][j];\n\
    \        }\n    }\n    for (let l = 1; l < k; l++) {\n        for (let i = 0;\
    \ i < n; i++) {\n            for (let j = 0; j < m; j++) {\n                if\
    \ (i > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l\
    \ - 1]);\n                }\n                if (i < n - 1) {\n              \
    \      dp[i][j][l] = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n           \
    \     }\n                if (j > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n                }\n                if (j < m - 1) {\n\
    \                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \                }\n            }\n        }\n    }\n    const res: number[] =\
    \ [];\n    let i = 0;\n    let j = 0;\n    for (let l = 0; l < k; l", "    let\
    \ n = grid.length;\n    let m = grid[0].length;\n    let visited = new Set<string>();\n\
    \    let minPath: number[] = [];\n    let minSum = Infinity;\n    let minPathSum\
    \ = Infinity;\n    let minPathSum2 = Infinity;\n    let minPathSum3 = Infinity;\n\
    \    let minPathSum4 = Infinity;\n    let minPathSum5 = Infinity;\n    let minPathSum6\
    \ = Infinity;\n    let minPathSum7 = Infinity;\n    let minPathSum8 = Infinity;\n\
    \    let minPathSum9 = Infinity;\n    let minPathSum10 = Infinity;\n    let minPathSum11\
    \ = Infinity;\n    let minPathSum12 = Infinity;\n    let minPathSum13 = Infinity;\n\
    \    let minPathSum14 = Infinity;\n    let minPathSum15 = Infinity;\n    let minPathSum16\
    \ = Infinity;\n    let minPathSum17 = Infinity;\n    let minPathSum18 = Infinity;\n\
    \    let minPathSum19 = Infinity;\n    let minPathSum20 = Infinity;\n    let minPathSum21\
    \ = Infinity;\n    let minPathSum22 = Infinity;\n    let minPathSum23 = Infinity;\n\
    \    let minPathSum24 = Infinity;\n    let minPathSum25 = Infinity;\n    let minPathSum26\
    \ = Infinity;\n    let minPathSum27 = Infinity;\n    let minPathSum28 = Infinity;\n\
    \    let minPathSum29 = Infinity;\n    let minPathSum30 = Infinity;\n    let minPathSum31\
    \ = Infinity;\n    let minPathSum32 = Infinity;\n    let minPathSum33 = Infinity;\n\
    \    let minPathSum34 = Infinity;\n    let minPathSum35 = Infinity;\n    let minPathSum36\
    \ = Infinity;\n    let minPathSum37 = Infinity;\n    let minPathSum38 = Infinity;\n\
    \    let minPathSum39 = Infinity;\n    let minPathSum40 = Infinity;\n    let minPathSum41\
    \ = Infinity;\n    let minPathSum42 = Infinity;\n    let minPathSum43 = Infinity;\n\
    \    let minPathSum44 = Infinity;\n    let minPathSum45 = Infinity;\n    let minPathSum46\
    \ = Infinity;\n    let min", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const visited = new Array(n).fill(0).map(() => new Array(m).fill(false));\n\
    \  const queue = [[0, 0, grid[0][0], [grid[0][0]]]];\n  const dirs = [[0, 1],\
    \ [0, -1], [1, 0], [-1, 0]];\n  let min = Infinity;\n  let ans = [];\n  while\
    \ (queue.length) {\n    const [i, j, sum, path] = queue.shift();\n    if (sum\
    \ > min) continue;\n    if (path.length === k) {\n      if (sum < min) {\n   \
    \     min = sum;\n        ans = path;\n      } else if (sum === min) {\n     \
    \   if (path.join(\"\") < ans.join(\"\")) ans = path;\n      }\n      continue;\n\
    \    }\n    for (const [di, dj] of dirs) {\n      const ni = i + di;\n      const\
    \ nj = j + dj;\n      if (ni < 0 || ni >= n || nj < 0 || nj >= m || visited[ni][nj])\
    \ continue;\n      visited[ni][nj] = true;\n      queue.push([ni, nj, sum + grid[ni][nj],\
    \ [...path, grid[ni][nj]]]);\n    }\n  }\n  return ans;\n}\n\nconsole.log(\n \
    \ minPath(\n    [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n      [9, 10, 11,\
    \ 12],\n      [13, 14, 15, 16],\n    ],\n    4\n  )\n);\nconsole.log(\n  minPath(\n\
    \    [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n      [9, 10, 11, 12],\n   \
    \   [13, 14, 15, 16],\n    ],\n    5\n  )\n);\nconsole.log(\n  minPath(\n    [\n\
    \      [1, 2, 3, 4],\n      [5, 6, 7", "    let n = grid.length;\n    let m =\
    \ grid[0].length;\n    let dp: number[][][] = [];\n    for (let i = 0; i < n;\
    \ i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++) {\n       \
    \     dp[i][j] = [];\n            for (let l = 0; l < k; l++) {\n            \
    \    dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n            }\n        }\n    }\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n  \
    \          dp[i][j][0] = grid[i][j];\n        }\n    }\n    for (let l = 1; l\
    \ < k; l++) {\n        for (let i = 0; i < n; i++) {\n            for (let j =\
    \ 0; j < m; j++) {\n                if (i > 0) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n                }\n         \
    \       if (i < n - 1) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n                }\n                if (j > 0) {\n   \
    \                 dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n\
    \                }\n                if (j < m - 1) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n                }\n         \
    \   }\n        }\n    }\n    let min = Number.MAX_SAFE_INTEGER;\n    let minI\
    \ = -1;\n    let minJ = -1;\n    for (let i = 0; i < n; i++) {\n        for (let\
    \ j = 0; j < m; j++) {", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n       \
    \ dp[i] = [];\n        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n\
    \        }\n    }\n    dp[0][0][0] = grid[0][0];\n    for (let i = 0; i < n; i++)\
    \ {\n        for (let j = 0; j < m; j++) {\n            for (let l = 0; l < k;\
    \ l++) {\n                if (i > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l]\
    \ || Infinity, dp[i - 1][j][l - 1] + grid[i][j]);\n                }\n       \
    \         if (j > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l]\
    \ || Infinity, dp[i][j - 1][l - 1] + grid[i][j]);\n                }\n       \
    \     }\n        }\n    }\n    const res: number[] = [];\n    let i = n - 1;\n\
    \    let j = m - 1;\n    for (let l = k - 1; l >= 0; l--) {\n        res.push(grid[i][j]);\n\
    \        if (i > 0 && dp[i][j][l] === dp[i - 1][j][l - 1] + grid[i][j]) {\n  \
    \          i--;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ res;\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 3));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 4));\nconsole.log(min", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const visited = new Set<string>();\n  const queue = [[0, 0, grid[0][0], [grid[0][0]]]];\n\
    \  while (queue.length) {\n    const [i, j, sum, path] = queue.shift()!;\n   \
    \ if (sum > k) continue;\n    if (i === n - 1 && j === m - 1) return path;\n \
    \   if (visited.has(`${i}-${j}`)) continue;\n    visited.add(`${i}-${j}`);\n \
    \   if (i + 1 < n) {\n      queue.push([i + 1, j, sum + grid[i + 1][j], [...path,\
    \ grid[i + 1][j]]]);\n    }\n    if (j + 1 < m) {\n      queue.push([i, j + 1,\
    \ sum + grid[i][j + 1], [...path, grid[i][j + 1]]]);\n    }\n  }\n  return [];\n\
    }\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 12));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 15));\nconsole.log(minPath([[1, 2, 3], [4, 5,\
    \ 6], [7, 8, 9]], 16));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]],\
    \ 17));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 18));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 19));\nconsole.log(minPath([[1, 2, 3], [4, 5,\
    \ 6], [7, 8, 9]], 20));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]],",
  "  const n = grid.length;\n  const m = grid[0].length;\n  const visited = new Set<string>();\n\
    \  const queue = [[0, 0, grid[0][0]]];\n  const result = [];\n  while (queue.length)\
    \ {\n    const [i, j, sum] = queue.shift();\n    if (i < 0 || i >= n || j < 0\
    \ || j >= m) continue;\n    if (visited.has(`${i},${j}`)) continue;\n    visited.add(`${i},${j}`);\n\
    \    if (sum > k) continue;\n    if (sum === k) {\n      result.push(grid[i][j]);\n\
    \      continue;\n    }\n    queue.push([i + 1, j, sum + grid[i + 1][j]]);\n \
    \   queue.push([i - 1, j, sum + grid[i - 1][j]]);\n    queue.push([i, j + 1, sum\
    \ + grid[i][j + 1]]);\n    queue.push([i, j - 1, sum + grid[i][j - 1]]);\n  }\n\
    \  return result;\n}\n\nconsole.log(\n  minPath(\n    [\n      [1, 2, 3],\n  \
    \    [4, 5, 6],\n      [7, 8, 9],\n    ],\n    12\n  )\n);\nconsole.log(\n  minPath(\n\
    \    [\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9],\n    ],\n    15\n\
    \  )\n);\nconsole.log(\n  minPath(\n    [\n      [1, 2, 3],\n      [4, 5, 6],\n\
    \      [7, 8, 9],\n    ],\n    9\n  )\n);\nconsole.log(\n  minPath(\n    [\n \
    \     [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9],\n    ],\n    10\n  )\n);\n\
    console.log(\n  minPath(\n    [\n      [1, 2, 3],\n      [4, 5, 6],\n", "  const\
    \ n = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][] = [];\n\
    \  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m;\
    \ j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n\
    \    for (let j = 0; j < m; j++) {\n      for (let l = 0; l < k; l++) {\n    \
    \    dp[i][j][l] = Infinity;\n      }\n    }\n  }\n  dp[0][0][0] = grid[0][0];\n\
    \  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for\
    \ (let l = 0; l < k; l++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l] + grid[i][j]);\n        }\n        if (j > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j - 1][l] + grid[i][j]);\n        }\n        if\
    \ (l > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j][l - 1] + grid[i][j]);\n\
    \        }\n      }\n    }\n  }\n  const result: number[] = [];\n  let i = n -\
    \ 1;\n  let j = m - 1;\n  let l = k - 1;\n  while (l >= 0) {\n    result.push(grid[i][j]);\n\
    \    if (i > 0 && dp[i][j][l] === dp[i - 1][j][l] + grid[i][j]) {\n      i--;\n\
    \    } else if (j > 0 && dp[i", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for\
    \ (let l = 0; l < k; l++) {\n        dp[i][j][l] = Infinity;\n      }\n    }\n\
    \  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n   \
    \   dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l < k; l++) {\n \
    \   for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m; j++) {\n     \
    \   if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l\
    \ - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n        }\n        if (j > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n        }\n        if (j < m\
    \ - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \        }\n      }\n    }\n  }\n  let min = Infinity;\n  let minI = -1;\n  let\
    \ minJ = -1;\n  for (let i = 0; i < n", "  const n = grid.length;\n  const m =\
    \ grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++)\
    \ {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n\
    \    }\n  }\n  dp[0][0][0] = grid[0][0];\n  for (let i = 0; i < n; i++) {\n  \
    \  for (let j = 0; j < m; j++) {\n      for (let l = 0; l < k; l++) {\n      \
    \  if (dp[i][j][l] === undefined) {\n          continue;\n        }\n        if\
    \ (i + 1 < n) {\n          const newVal = dp[i][j][l] + grid[i + 1][j];\n    \
    \      if (dp[i + 1][j][l + 1] === undefined || newVal < dp[i + 1][j][l + 1])\
    \ {\n            dp[i + 1][j][l + 1] = newVal;\n          }\n        }\n     \
    \   if (j + 1 < m) {\n          const newVal = dp[i][j][l] + grid[i][j + 1];\n\
    \          if (dp[i][j + 1][l + 1] === undefined || newVal < dp[i][j + 1][l +\
    \ 1]) {\n            dp[i][j + 1][l + 1] = newVal;\n          }\n        }\n \
    \     }\n    }\n  }\n  let min = Infinity;\n  let minI = -1;\n  let minJ = -1;\n\
    \  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if\
    \ (dp[i][j][k - 1] !== undefined && dp[i][j][k - 1] < min) {\n        min = dp[i][j][k\
    \ - 1];\n        minI = i;\n        minJ = j;\n      }\n    }\n  }\n  const",
  "  const n = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][]\
    \ = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0;\
    \ j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let i = 0; i < n; i++)\
    \ {\n    for (let j = 0; j < m; j++) {\n      for (let l = 0; l < k; l++) {\n\
    \        dp[i][j][l] = Infinity;\n      }\n    }\n  }\n  for (let i = 0; i < n;\
    \ i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0] = grid[i][j];\n\
    \    }\n  }\n  for (let l = 1; l < k; l++) {\n    for (let i = 0; i < n; i++)\
    \ {\n      for (let j = 0; j < m; j++) {\n        if (i > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n        }\n        if (i < n\
    \ - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n\
    \        }\n        if (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n        }\n        if (j < m - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n \
    \ }\n  let min = Infinity;\n  let minI = -1;\n  let minJ = -1;\n  for (let i =\
    \ 0; i < n", "  let n = grid.length;\n  let m = grid[0].length;\n  let dp: number[][][]\
    \ = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0;\
    \ j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  let min = Infinity;\n  let\
    \ minPath: number[] = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0;\
    \ j < m; j++) {\n      if (i === 0 && j === 0) {\n        dp[i][j][0] = grid[i][j];\n\
    \      } else if (i === 0) {\n        dp[i][j][0] = dp[i][j - 1][0] + grid[i][j];\n\
    \      } else if (j === 0) {\n        dp[i][j][0] = dp[i - 1][j][0] + grid[i][j];\n\
    \      } else {\n        dp[i][j][0] = Math.min(dp[i - 1][j][0], dp[i][j - 1][0])\
    \ + grid[i][j];\n      }\n      if (dp[i][j][0] < min) {\n        min = dp[i][j][0];\n\
    \        minPath = [grid[i][j]];\n      } else if (dp[i][j][0] === min) {\n  \
    \      minPath = [grid[i][j]];\n      }\n    }\n  }\n  for (let i = 1; i < k;\
    \ i++) {\n    for (let j = 0; j < n; j++) {\n      for (let l = 0; l < m; l++)\
    \ {\n        if (j === 0 && l === 0) {\n          dp[j][l][i] = dp[j][l][i - 1]\
    \ + grid[j][l];\n        } else if (j === 0) {\n          dp[j][l][i] = Math.min(dp[j][l\
    \ - 1", "  const n = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][]\
    \ = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0;\
    \ j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  dp[0][0][0] = grid[0][0];\n\
    \  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for\
    \ (let l = 0; l < k; l++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l]\
    \ || Infinity, dp[i - 1][j][l - 1] + grid[i][j]);\n        }\n        if (j >\
    \ 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l] || Infinity, dp[i][j - 1][l\
    \ - 1] + grid[i][j]);\n        }\n      }\n    }\n  }\n  const result: number[]\
    \ = [];\n  let i = n - 1;\n  let j = m - 1;\n  let l = k - 1;\n  while (l >= 0)\
    \ {\n    result.push(grid[i][j]);\n    if (i > 0 && dp[i][j][l] === dp[i - 1][j][l\
    \ - 1] + grid[i][j]) {\n      i--;\n    } else {\n      j--;\n    }\n    l--;\n\
    \  }\n  return result.reverse();\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5,\
    \ 6], [7, 8, 9]], 4));", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let visited = new Set<string>();\n    let minPath = [];\n    let minSum =\
    \ Infinity;\n    let minPathSum = Infinity;\n    let minPaths = [];\n    let minPathsSum\
    \ = [];\n    let minPathsSumMap = new Map<number, number[][]>();\n    let minPathsMap\
    \ = new Map<number, number[][]>();\n    let minPathsSumMap2 = new Map<number,\
    \ number[][]>();\n    let minPathsMap2 = new Map<number, number[][]>();\n    let\
    \ minPathsSumMap3 = new Map<number, number[][]>();\n    let minPathsMap3 = new\
    \ Map<number, number[][]>();\n    let minPathsSumMap4 = new Map<number, number[][]>();\n\
    \    let minPathsMap4 = new Map<number, number[][]>();\n    let minPathsSumMap5\
    \ = new Map<number, number[][]>();\n    let minPathsMap5 = new Map<number, number[][]>();\n\
    \    let minPathsSumMap6 = new Map<number, number[][]>();\n    let minPathsMap6\
    \ = new Map<number, number[][]>();\n    let minPathsSumMap7 = new Map<number,\
    \ number[][]>();\n    let minPathsMap7 = new Map<number, number[][]>();\n    let\
    \ minPathsSumMap8 = new Map<number, number[][]>();\n    let minPathsMap8 = new\
    \ Map<number, number[][]>();\n    let minPathsSumMap9 = new Map<number, number[][]>();\n\
    \    let minPathsMap9 = new Map<number, number[][]>();\n    let minPathsSumMap10\
    \ = new Map<number, number[][]>();\n    let minPathsMap10 = new Map<number, number[][]>();\n\
    \    let minPathsSumMap11 = new Map<number, number[][]>();\n    let minPathsMap11\
    \ = new Map", "  const n = grid.length;\n  const m = grid[0].length;\n  const\
    \ dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n \
    \   for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let\
    \ i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0] =\
    \ grid[i][j];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0;\
    \ j < m; j++) {\n      for (let l = 1; l < k; l++) {\n        dp[i][j][l] = Infinity;\n\
    \        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l\
    \ - 1]);\n        }\n        if (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j < m\
    \ - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \        }\n      }\n    }\n  }\n  let min = Infinity;\n  let minI = -1;\n  let\
    \ minJ = -1;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      if (dp[i][j][k - 1] < min) {\n        min = dp[i][j][k - 1];\n    \
    \    minI", "  const n = grid.length;\n  const m = grid[0].length;\n  const dp:\
    \ number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for\
    \ (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let i =\
    \ 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for (let l = 0; l\
    \ < k; l++) {\n        dp[i][j][l] = Infinity;\n      }\n    }\n  }\n  for (let\
    \ i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0] =\
    \ grid[i][j];\n    }\n  }\n  for (let l = 1; l < k; l++) {\n    for (let i = 0;\
    \ i < n; i++) {\n      for (let j = 0; j < m; j++) {\n        if (i > 0) {\n \
    \         dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n        }\n\
    \        if (i < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i\
    \ + 1][j][l - 1]);\n        }\n        if (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n        }\n        if (j < m - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n \
    \ }\n  let min = Infinity;\n  let minI = -1;\n  let minJ = -1;\n  for (let i =\
    \ 0; i < n", "  const n = grid.length;\n  const m = grid[0].length;\n  const dp:\
    \ number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for\
    \ (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let i =\
    \ 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0] = grid[i][j];\n\
    \    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      for (let l = 1; l < k; l++) {\n        const up = i > 0 ? dp[i - 1][j][l\
    \ - 1] : Infinity;\n        const left = j > 0 ? dp[i][j - 1][l - 1] : Infinity;\n\
    \        const down = i < n - 1 ? dp[i + 1][j][l - 1] : Infinity;\n        const\
    \ right = j < m - 1 ? dp[i][j + 1][l - 1] : Infinity;\n        dp[i][j][l] = Math.min(up,\
    \ left, down, right);\n      }\n    }\n  }\n  let min = Infinity;\n  let minI\
    \ = -1;\n  let minJ = -1;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0;\
    \ j < m; j++) {\n      if (dp[i][j][k - 1] < min) {\n        min = dp[i][j][k\
    \ - 1];\n        minI = i;\n        minJ = j;\n      }\n    }\n  }\n  const res:\
    \ number[] = [];\n  for (let l = k - 1; l >= 0; l--) {\n    res.push(dp[minI][minJ][l]);\n\
    \    const up = minI > 0 ? dp[minI - 1][minJ][l -", "    //\n}\n", "  const n\
    \ = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][] = [];\n\
    \  const visited: boolean[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp.push([]);\n\
    \    visited.push([]);\n    for (let j = 0; j < m; j++) {\n      dp[i].push([]);\n\
    \      visited[i].push([]);\n      for (let l = 0; l < k; l++) {\n        dp[i][j].push(Infinity);\n\
    \        visited[i][j].push(false);\n      }\n    }\n  }\n  for (let i = 0; i\
    \ < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0] = grid[i][j];\n\
    \    }\n  }\n  const queue: [number, number, number][] = [];\n  for (let i = 0;\
    \ i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      queue.push([i, j, 0]);\n\
    \    }\n  }\n  while (queue.length) {\n    const [i, j, l] = queue.shift()!;\n\
    \    if (visited[i][j][l]) continue;\n    visited[i][j][l] = true;\n    if (i\
    \ > 0) {\n      const newL = l + 1;\n      const newVal = dp[i][j][l] + grid[i\
    \ - 1][j];\n      if (newVal < dp[i - 1][j][newL]) {\n        dp[i - 1][j][newL]\
    \ = newVal;\n        queue.push([i - 1, j, newL]);\n      }\n    }\n    if (i\
    \ < n - 1) {\n      const newL = l + 1;\n      const newVal = dp[i][j][l] + grid[i\
    \ + 1][j];\n      if (newVal < dp[i + 1][j][newL]) {\n        dp", "  const n\
    \ = grid.length;\n  const m = grid[0].length;\n  const visited = Array(n)\n  \
    \  .fill(0)\n    .map(() => Array(m).fill(false));\n  const queue = [[0, 0, grid[0][0],\
    \ [grid[0][0]]]];\n  let minPath = [];\n  while (queue.length) {\n    const [i,\
    \ j, sum, path] = queue.shift();\n    if (sum > k) continue;\n    if (sum ===\
    \ k) {\n      if (!minPath.length || path < minPath) minPath = path;\n      continue;\n\
    \    }\n    if (i + 1 < n && !visited[i + 1][j]) {\n      visited[i + 1][j] =\
    \ true;\n      queue.push([i + 1, j, sum + grid[i + 1][j], [...path, grid[i +\
    \ 1][j]]]);\n    }\n    if (j + 1 < m && !visited[i][j + 1]) {\n      visited[i][j\
    \ + 1] = true;\n      queue.push([i, j + 1, sum + grid[i][j + 1], [...path, grid[i][j\
    \ + 1]]]);\n    }\n  }\n  return minPath;\n}\n\nconsole.log(minPath([[1, 2, 3],\
    \ [4, 5, 6], [7, 8, 9]], 9));", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for\
    \ (let l = 0; l < k; l++) {\n        dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n\
    \      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l\
    \ < k; l++) {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m;\
    \ j++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (j < m - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Number.MAX_SAFE_INTEGER;\n\
    \  let minI = -1;\n  let", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n       \
    \ dp[i] = [];\n        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n\
    \        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            for (let l = 0; l < k; l++) {\n                dp[i][j][l]\
    \ = Number.MAX_SAFE_INTEGER;\n            }\n        }\n    }\n    for (let i\
    \ = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            dp[i][j][0]\
    \ = grid[i][j];\n        }\n    }\n    for (let l = 1; l < k; l++) {\n       \
    \ for (let i = 0; i < n; i++) {\n            for (let j = 0; j < m; j++) {\n \
    \               if (i > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n                }\n                if (i < n - 1) {\n\
    \                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n\
    \                }\n                if (j > 0) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n                }\n         \
    \       if (j < m - 1) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n                }\n            }\n        }\n    }\n\
    \    let min = Number.MAX_SAFE_INTEGER;\n    let minI = -1;\n    let", "  //\n\
    }\n", "    const n = grid.length;\n    const m = grid[0].length;\n    const visited\
    \ = new Set<string>();\n    const queue = [[0, 0, grid[0][0], [grid[0][0]]]];\n\
    \    while (queue.length) {\n        const [i, j, sum, path] = queue.shift()!;\n\
    \        if (path.length === k) {\n            return path;\n        }\n     \
    \   if (i > 0 && !visited.has(`${i - 1} ${j}`)) {\n            queue.push([i -\
    \ 1, j, sum + grid[i - 1][j], [...path, grid[i - 1][j]]]);\n            visited.add(`${i\
    \ - 1} ${j}`);\n        }\n        if (i < n - 1 && !visited.has(`${i + 1} ${j}`))\
    \ {\n            queue.push([i + 1, j, sum + grid[i + 1][j], [...path, grid[i\
    \ + 1][j]]]);\n            visited.add(`${i + 1} ${j}`);\n        }\n        if\
    \ (j > 0 && !visited.has(`${i} ${j - 1}`)) {\n            queue.push([i, j - 1,\
    \ sum + grid[i][j - 1], [...path, grid[i][j - 1]]]);\n            visited.add(`${i}\
    \ ${j - 1}`);\n        }\n        if (j < m - 1 && !visited.has(`${i} ${j + 1}`))\
    \ {\n            queue.push([i, j + 1, sum + grid[i][j + 1], [...path, grid[i][j\
    \ + 1]]]);\n            visited.add(`${i} ${j + 1}`);\n        }\n        queue.sort((a,\
    \ b) => a[2] - b[2]);\n    }\n    return [];\n}\n\nconsole.log(minPath([[1, 2,\
    \ 3], [4, 5, 6], [7, 8, 9]], 2));\nconsole.log(minPath([[1, 2, 3], [4, 5", " \
    \ const n = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][]\
    \ = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0;\
    \ j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let i = 0; i < n; i++)\
    \ {\n    for (let j = 0; j < m; j++) {\n      for (let l = 0; l < k; l++) {\n\
    \        dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n      }\n    }\n  }\n  for (let\
    \ i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0] =\
    \ grid[i][j];\n    }\n  }\n  for (let l = 1; l < k; l++) {\n    for (let i = 0;\
    \ i < n; i++) {\n      for (let j = 0; j < m; j++) {\n        if (i > 0) {\n \
    \         dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n        }\n\
    \        if (i < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i\
    \ + 1][j][l - 1]);\n        }\n        if (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n        }\n        if (j < m - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n \
    \ }\n  let min = Number.MAX_SAFE_INTEGER;\n  let minI = -1;\n  let", "  const\
    \ n = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][] = [];\n\
    \  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m;\
    \ j++) {\n      dp[i][j] = [];\n    }\n  }\n  const dirs = [\n    [0, 1],\n  \
    \  [0, -1],\n    [1, 0],\n    [-1, 0],\n  ];\n  const queue: [number, number,\
    \ number][] = [];\n  queue.push([0, 0, 0]);\n  dp[0][0][0] = grid[0][0];\n  while\
    \ (queue.length) {\n    const [i, j, c] = queue.shift()!;\n    if (c === k - 1)\
    \ {\n      return dp[i][j].slice(0, c + 1);\n    }\n    for (const [di, dj] of\
    \ dirs) {\n      const ni = i + di;\n      const nj = j + dj;\n      if (ni <\
    \ 0 || ni >= n || nj < 0 || nj >= m) {\n        continue;\n      }\n      const\
    \ nc = c + 1;\n      if (dp[ni][nj][nc] === undefined) {\n        dp[ni][nj][nc]\
    \ = grid[ni][nj];\n        queue.push([ni, nj, nc]);\n      }\n      if (dp[ni][nj][nc]\
    \ > grid[ni][nj]) {\n        dp[ni][nj][nc] = grid[ni][nj];\n        queue.push([ni,\
    \ nj, nc]);\n      }\n    }\n  }\n  return [];\n}\n\nconsole.log(\n  minPath(\n\
    \    [\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9],\n    ],\n    3\n\
    \  )\n);\nconsole.log(\n  minPath(\n    [\n      [1, 2, 3],\n      [4, 5", " \
    \   const n = grid.length;\n    const dp: number[][][] = [];\n    for (let i =\
    \ 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < n; j++) {\n\
    \            dp[i][j] = [];\n        }\n    }\n    for (let i = 0; i < n; i++)\
    \ {\n        for (let j = 0; j < n; j++) {\n            dp[i][j][0] = grid[i][j];\n\
    \        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < n; j++) {\n            for (let l = 1; l < k; l++) {\n                let\
    \ min = Infinity;\n                if (i > 0) {\n                    min = Math.min(min,\
    \ dp[i - 1][j][l - 1]);\n                }\n                if (i < n - 1) {\n\
    \                    min = Math.min(min, dp[i + 1][j][l - 1]);\n             \
    \   }\n                if (j > 0) {\n                    min = Math.min(min, dp[i][j\
    \ - 1][l - 1]);\n                }\n                if (j < n - 1) {\n       \
    \             min = Math.min(min, dp[i][j + 1][l - 1]);\n                }\n \
    \               dp[i][j][l] = min;\n            }\n        }\n    }\n    let min\
    \ = Infinity;\n    let minI = 0;\n    let minJ = 0;\n    for (let i = 0; i < n;\
    \ i++) {\n        for (let j = 0; j < n; j++) {\n            if (dp[i][j][k -\
    \ 1] < min) {\n                min = dp[i][j][k - 1];\n                minI =\
    \ i;\n                minJ = j;\n            }\n        }\n    }\n    const res:\
    \ number[] = [];\n    for (let l = k - 1; l >= 0; l--) {\n        res.push(dp[minI][minJ][l",
  "  const n = grid.length;\n  const m = grid[0].length;\n  const visited = new Set<string>();\n\
    \  const queue = [[0, 0, 0, []]];\n  let minPath = [];\n  while (queue.length)\
    \ {\n    const [i, j, pathLength, path] = queue.shift();\n    if (pathLength >\
    \ k) continue;\n    if (pathLength === k) {\n      if (!minPath.length || path.join('')\
    \ < minPath.join('')) {\n        minPath = path;\n      }\n      continue;\n \
    \   }\n    if (i < 0 || i >= n || j < 0 || j >= m) continue;\n    const key =\
    \ `${i}-${j}`;\n    if (visited.has(key)) continue;\n    visited.add(key);\n \
    \   queue.push([i - 1, j, pathLength + 1, [...path, grid[i - 1][j]]]);\n    queue.push([i\
    \ + 1, j, pathLength + 1, [...path, grid[i + 1][j]]]);\n    queue.push([i, j -\
    \ 1, pathLength + 1, [...path, grid[i][j - 1]]]);\n    queue.push([i, j + 1, pathLength\
    \ + 1, [...path, grid[i][j + 1]]]);\n  }\n  return minPath;\n}\n\nconsole.log(\n\
    \  minPath(\n    [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n      [9, 10, 11,\
    \ 12],\n      [13, 14, 15, 16],\n    ],\n    4\n  )\n);", "  const n = grid.length;\n\
    \  const m = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0;\
    \ i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j]\
    \ = [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let i = 0; i\
    \ < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for (let l = 1; l < k;\
    \ l++) {\n        let min = Number.MAX_SAFE_INTEGER;\n        if (i > 0) {\n \
    \         min = Math.min(min, dp[i - 1][j][l - 1]);\n        }\n        if (i\
    \ < n - 1) {\n          min = Math.min(min, dp[i + 1][j][l - 1]);\n        }\n\
    \        if (j > 0) {\n          min = Math.min(min, dp[i][j - 1][l - 1]);\n \
    \       }\n        if (j < m - 1) {\n          min = Math.min(min, dp[i][j + 1][l\
    \ - 1]);\n        }\n        dp[i][j][l] = min;\n      }\n    }\n  }\n  let min\
    \ = Number.MAX_SAFE_INTEGER;\n  let minI = 0;\n  let minJ = 0;\n  for (let i =\
    \ 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (dp[i][j][k -\
    \ 1] < min) {\n        min = dp[i][j][k - 1];\n        minI = i;\n        minJ\
    \ = j;\n      }\n    }\n  }\n  const res: number[] = [];\n  let i =", "  const\
    \ n = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][] = [];\n\
    \  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m;\
    \ j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n\
    \    for (let j = 0; j < m; j++) {\n      for (let l = 0; l < k; l++) {\n    \
    \    dp[i][j][l] = Infinity;\n      }\n    }\n  }\n  for (let i = 0; i < n; i++)\
    \ {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n\
    \  }\n  for (let l = 1; l < k; l++) {\n    for (let i = 0; i < n; i++) {\n   \
    \   for (let j = 0; j < m; j++) {\n        if (i > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n        }\n        if (i < n\
    \ - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n\
    \        }\n        if (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n        }\n        if (j < m - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n \
    \ }\n  const result: number[] = [];\n  for (let i = 0; i < n; i++) {\n    for\
    \ (let j = 0; j < m", "  const N = grid.length;\n  const visited = new Set<string>();\n\
    \  const queue = [[0, 0, 0, [grid[0][0]]]];\n  while (queue.length) {\n    const\
    \ [i, j, steps, path] = queue.shift()!;\n    if (steps === k) return path;\n \
    \   if (i > 0 && !visited.has(`${i - 1},${j}`)) {\n      queue.push([i - 1, j,\
    \ steps + 1, [...path, grid[i - 1][j]]]);\n      visited.add(`${i - 1},${j}`);\n\
    \    }\n    if (i < N - 1 && !visited.has(`${i + 1},${j}`)) {\n      queue.push([i\
    \ + 1, j, steps + 1, [...path, grid[i + 1][j]]]);\n      visited.add(`${i + 1},${j}`);\n\
    \    }\n    if (j > 0 && !visited.has(`${i},${j - 1}`)) {\n      queue.push([i,\
    \ j - 1, steps + 1, [...path, grid[i][j - 1]]]);\n      visited.add(`${i},${j\
    \ - 1}`);\n    }\n    if (j < N - 1 && !visited.has(`${i},${j + 1}`)) {\n    \
    \  queue.push([i, j + 1, steps + 1, [...path, grid[i][j + 1]]]);\n      visited.add(`${i},${j\
    \ + 1}`);\n    }\n  }\n  return [];\n}\n\nconsole.log(\n  minPath(\n    [\n  \
    \    [1, 2, 3, 4],\n      [5, 6, 7, 8],\n      [9, 10, 11, 12],\n      [13, 14,\
    \ 15, 16],\n    ],\n    4\n  )\n);\nconsole.log(\n  minPath(\n    [\n      [1,\
    \ 2, 3, 4],\n      [5, 6, 7, 8],\n      [9, 10, 11, 12],\n      [13", "  const\
    \ n = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][] = [];\n\
    \  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m;\
    \ j++) {\n      dp[i][j] = [];\n    }\n  }\n  dp[0][0][0] = grid[0][0];\n  for\
    \ (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for (let\
    \ l = 0; l < k; l++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l]\
    \ || Infinity, dp[i - 1][j][l] + grid[i][j]);\n        }\n        if (j > 0) {\n\
    \          dp[i][j][l] = Math.min(dp[i][j][l] || Infinity, dp[i][j - 1][l] + grid[i][j]);\n\
    \        }\n        if (l > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l]\
    \ || Infinity, dp[i][j][l - 1] + grid[i][j]);\n        }\n      }\n    }\n  }\n\
    \  return dp[n - 1][m - 1];\n}\n", "    const n = grid.length;\n    const dp:\
    \ number[][][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n\
    \        for (let j = 0; j < n; j++) {\n            dp[i][j] = [];\n        }\n\
    \    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++)\
    \ {\n            for (let l = 0; l < k; l++) {\n                dp[i][j][l] =\
    \ -1;\n            }\n        }\n    }\n    const res = [];\n    for (let i =\
    \ 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            const path\
    \ = minPathHelper(grid, dp, i, j, k);\n            if (res.length === 0 || path\
    \ < res) {\n                res.length = 0;\n                res.push(...path);\n\
    \            }\n        }\n    }\n    return res;\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let dp: number[][][] = [];\n    for (let i =\
    \ 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++) {\n\
    \            dp[i][j] = [];\n            for (let l = 0; l < k; l++) {\n     \
    \           dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n            }\n        }\n\
    \    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++)\
    \ {\n            dp[i][j][0] = grid[i][j];\n        }\n    }\n    for (let l =\
    \ 1; l < k; l++) {\n        for (let i = 0; i < n; i++) {\n            for (let\
    \ j = 0; j < m; j++) {\n                if (i > 0) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n                }\n         \
    \       if (i < n - 1) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n                }\n                if (j > 0) {\n   \
    \                 dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n\
    \                }\n                if (j < m - 1) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n                }\n         \
    \   }\n        }\n    }\n    let result: number[] = [];\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n  \
    \          if (dp[i][j", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0]\
    \ = grid[i][j];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j =\
    \ 0; j < m; j++) {\n      for (let l = 1; l < k; l++) {\n        const min = Math.min(\n\
    \          dp[i][j][l - 1],\n          i > 0 ? dp[i - 1][j][l - 1] : Infinity,\n\
    \          j > 0 ? dp[i][j - 1][l - 1] : Infinity,\n          i < n - 1 ? dp[i\
    \ + 1][j][l - 1] : Infinity,\n          j < m - 1 ? dp[i][j + 1][l - 1] : Infinity\n\
    \        );\n        dp[i][j][l] = min;\n      }\n    }\n  }\n  const res: number[]\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    res.push(dp[0][0][i]);\n  }\n  return\
    \ res;\n}\n\nconsole.log(\n  minPath(\n    [\n      [1, 2, 3],\n      [4, 5, 6],\n\
    \      [7, 8, 9],\n    ],\n    2\n  )\n);", "  const n = grid.length;\n  const\
    \ dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n \
    \   for (let j = 0; j < n; j++) {\n      dp[i][j] = [];\n    }\n  }\n  dp[0][0][0]\
    \ = grid[0][0];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++)\
    \ {\n      for (let l = 0; l < k; l++) {\n        if (dp[i][j][l] === undefined)\
    \ {\n          continue;\n        }\n        if (i + 1 < n) {\n          if (dp[i\
    \ + 1][j][l + 1] === undefined) {\n            dp[i + 1][j][l + 1] = dp[i][j][l];\n\
    \          } else {\n            dp[i + 1][j][l + 1] = Math.min(dp[i + 1][j][l\
    \ + 1], dp[i][j][l]);\n          }\n        }\n        if (j + 1 < n) {\n    \
    \      if (dp[i][j + 1][l + 1] === undefined) {\n            dp[i][j + 1][l +\
    \ 1] = dp[i][j][l];\n          } else {\n            dp[i][j + 1][l + 1] = Math.min(dp[i][j\
    \ + 1][l + 1], dp[i][j][l]);\n          }\n        }\n      }\n    }\n  }\n  let\
    \ min = Infinity;\n  let minI = -1;\n  let minJ = -1;\n  for (let i = 0; i < n;\
    \ i++) {\n    for (let j = 0; j < n; j++) {\n      if (dp[i][j][k - 1] !== undefined\
    \ && dp[i][j][k - 1] < min) {\n        min = dp[i][j][k - 1];\n        minI =\
    \ i;\n        minJ = j", "  const n = grid.length;\n  const visited = new Set<string>();\n\
    \  const queue = [[0, 0, [grid[0][0]]]];\n  const dirs = [[1, 0], [-1, 0], [0,\
    \ 1], [0, -1]];\n  while (queue.length) {\n    const [x, y, path] = queue.shift()!;\n\
    \    if (path.length === k) return path;\n    for (const [dx, dy] of dirs) {\n\
    \      const nx = x + dx;\n      const ny = y + dy;\n      if (nx < 0 || nx >=\
    \ n || ny < 0 || ny >= n) continue;\n      const key = `${nx},${ny}`;\n      if\
    \ (visited.has(key)) continue;\n      visited.add(key);\n      queue.push([nx,\
    \ ny, [...path, grid[nx][ny]]]);\n    }\n  }\n  return [];\n}\n\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 5));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 4));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3));\n\
    console.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 1));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 6));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 7));\n\
    console.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8));\nconsole.log(minPath([[1,\
    \ 2, 3], [", "    let n = grid.length;\n    let m = grid[0].length;\n    let minPath\
    \ = [];\n    let minPathSum = Infinity;\n    let minPathSum2 = Infinity;\n   \
    \ let minPath2 = [];\n    let visited = new Set();\n    let dirs = [[-1, 0], [1,\
    \ 0], [0, -1], [0, 1]];\n    let dfs = (i: number, j: number, path: number[],\
    \ pathSum: number) => {\n        if (path.length === k) {\n            if (pathSum\
    \ < minPathSum) {\n                minPathSum = pathSum;\n                minPath\
    \ = path;\n            } else if (pathSum === minPathSum) {\n                if\
    \ (path < minPath) {\n                    minPath = path;\n                }\n\
    \            }\n            return;\n        }\n        for (let dir of dirs)\
    \ {\n            let x = i + dir[0];\n            let y = j + dir[1];\n      \
    \      if (x < 0 || x >= n || y < 0 || y >= m) {\n                continue;\n\
    \            }\n            if (visited.has(x * m + y)) {\n                continue;\n\
    \            }\n            visited.add(x * m + y);\n            dfs(x, y, [...path,\
    \ grid[x][y]], pathSum + grid[x][y]);\n            visited.delete(x * m + y);\n\
    \        }\n    };\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            visited.add(i * m + j);\n            dfs(i, j, [grid[i][j]],\
    \ grid[i][j]);\n            visited.delete(i * m + j);\n        }\n    }\n   \
    \ return minPath;\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]],\
    \ 4));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5));\nconsole.log(minPath([[1",
  "  const n = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][]\
    \ = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0;\
    \ j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let i = 0; i < n; i++)\
    \ {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n\
    \  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n   \
    \   for (let l = 1; l < k; l++) {\n        dp[i][j][l] = Infinity;\n        if\
    \ (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n\
    \        }\n        if (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j < m\
    \ - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \        }\n      }\n    }\n  }\n  let min = Infinity;\n  let minI = -1;\n  let\
    \ minJ = -1;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      if (dp[i][j][k - 1] < min) {\n        min = dp[i][j][k - 1];\n    \
    \    minI", "  const n = grid.length;\n  const m = grid[0].length;\n  const dp:\
    \ number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for\
    \ (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  const dirs =\
    \ [\n    [0, 1],\n    [0, -1],\n    [1, 0],\n    [-1, 0],\n  ];\n  const queue:\
    \ [number, number, number[]][] = [];\n  for (let i = 0; i < n; i++) {\n    for\
    \ (let j = 0; j < m; j++) {\n      queue.push([i, j, [grid[i][j]]]);\n      dp[i][j][0]\
    \ = grid[i][j];\n    }\n  }\n  let ans: number[] = [];\n  while (queue.length)\
    \ {\n    const [i, j, path] = queue.shift()!;\n    if (path.length === k) {\n\
    \      if (!ans.length || less(path, ans)) {\n        ans = path;\n      }\n \
    \     continue;\n    }\n    for (const [di, dj] of dirs) {\n      const ni = i\
    \ + di;\n      const nj = j + dj;\n      if (ni < 0 || ni >= n || nj < 0 || nj\
    \ >= m) {\n        continue;\n      }\n      const newPath = [...path, grid[ni][nj]];\n\
    \      if (!dp[ni][nj][path.length] || less(newPath, dp[ni][nj][path.length]))\
    \ {\n        dp[ni][nj][path.length] = newPath;\n        queue.push([ni, nj, newPath]);\n\
    \      }\n    }\n  }\n  return ans;\n}\n", "  const n = grid.length;\n  const\
    \ dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n \
    \   for (let j = 0; j < n; j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let\
    \ i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let l =\
    \ 0; l < k; l++) {\n        dp[i][j][l] = Infinity;\n      }\n    }\n  }\n  for\
    \ (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      dp[i][j][0]\
    \ = grid[i][j];\n    }\n  }\n  for (let l = 1; l < k; l++) {\n    for (let i =\
    \ 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let di =\
    \ -1; di <= 1; di++) {\n          for (let dj = -1; dj <= 1; dj++) {\n       \
    \     if (di * di + dj * dj === 1) {\n              const ni = i + di;\n     \
    \         const nj = j + dj;\n              if (ni >= 0 && ni < n && nj >= 0 &&\
    \ nj < n) {\n                dp[i][j][l] = Math.min(dp[i][j][l], dp[ni][nj][l\
    \ - 1]);\n              }\n            }\n          }\n        }\n      }\n  \
    \  }\n  }\n  let ans = Infinity;\n  let ansi = -1;\n  let ansj = -1;\n  for (let\
    \ i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (dp[i][j][k\
    \ - 1] < ans) {\n        ans = dp[i][j][k - 1];\n        ansi = i;\n        ansj\
    \ = j;\n      }\n   ", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ const dirs = [\n    [0, 1],\n    [0, -1],\n    [1, 0],\n    [-1, 0],\n  ];\n\
    \  const queue: [number, number, number][] = [];\n  queue.push([0, 0, 0]);\n \
    \ dp[0][0][0] = grid[0][0];\n  while (queue.length) {\n    const [i, j, l] = queue.shift()!;\n\
    \    if (l === k) {\n      continue;\n    }\n    for (const [di, dj] of dirs)\
    \ {\n      const ni = i + di;\n      const nj = j + dj;\n      if (ni < 0 || ni\
    \ >= n || nj < 0 || nj >= m) {\n        continue;\n      }\n      const nl = l\
    \ + 1;\n      if (dp[ni][nj][nl] === undefined) {\n        dp[ni][nj][nl] = dp[i][j][l]\
    \ + grid[ni][nj];\n        queue.push([ni, nj, nl]);\n      } else if (dp[ni][nj][nl]\
    \ > dp[i][j][l] + grid[ni][nj]) {\n        dp[ni][nj][nl] = dp[i][j][l] + grid[ni][nj];\n\
    \        queue.push([ni, nj, nl]);\n      }\n    }\n  }\n  let min = Infinity;\n\
    \  let minPath: number[] = [];\n  for (let i = 0; i < n; i++) {\n    for (let\
    \ j = 0; j < m; j++) {\n      if (dp[i][j][k] !== undefined && dp[i][j][k", " \
    \   let n = grid.length;\n    let m = grid[0].length;\n    let dp: number[][][]\
    \ = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let\
    \ j = 0; j < m; j++) {\n            dp[i][j] = [];\n            for (let l = 0;\
    \ l < k; l++) {\n                dp[i][j][l] = Infinity;\n            }\n    \
    \    }\n    }\n    dp[0][0][0] = grid[0][0];\n    for (let i = 0; i < n; i++)\
    \ {\n        for (let j = 0; j < m; j++) {\n            for (let l = 0; l < k;\
    \ l++) {\n                if (i > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l] + grid[i][j]);\n                }\n                if (j > 0)\
    \ {\n                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l] +\
    \ grid[i][j]);\n                }\n                if (l > 0) {\n            \
    \        dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j][l - 1] + grid[i][j]);\n\
    \                }\n            }\n        }\n    }\n    let res: number[] = [];\n\
    \    let i = n - 1;\n    let j = m - 1;\n    let l = k - 1;\n    while (l >= 0)\
    \ {\n        res.push(grid[i][j]);\n        if (i > 0 && dp[i][j][l] === dp[i\
    \ - 1][j][l] + grid[i][j]) {\n            i--;\n        } else if (j > 0 && dp[i][j][l]\
    \ === dp[i][j - 1][l] + grid[i][j]) {\n            j--;\n        } else {\n  \
    \          l", "  const n = grid.length;\n  const m = grid[0].length;\n  const\
    \ dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n \
    \   for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  dp[0][0][0]\
    \ = grid[0][0];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      for (let l = 0; l < k; l++) {\n        if (i > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l] || Infinity, dp[i - 1][j][l - 1] + grid[i][j]);\n   \
    \     }\n        if (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l] ||\
    \ Infinity, dp[i][j - 1][l - 1] + grid[i][j]);\n        }\n      }\n    }\n  }\n\
    \  const res: number[] = [];\n  let i = n - 1;\n  let j = m - 1;\n  let l = k\
    \ - 1;\n  while (l >= 0) {\n    res.push(grid[i][j]);\n    if (i > 0 && dp[i][j][l]\
    \ === dp[i - 1][j][l - 1] + grid[i][j]) {\n      i--;\n    } else {\n      j--;\n\
    \    }\n    l--;\n  }\n  return res.reverse();\n}\n\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 3));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 4));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5));",
  "    const n = grid.length;\n    const m = grid[0].length;\n    const dp: number[][][]\
    \ = [];\n    const visited: boolean[][][] = [];\n    for (let i = 0; i < n; i++)\
    \ {\n        dp.push([]);\n        visited.push([]);\n        for (let j = 0;\
    \ j < m; j++) {\n            dp[i].push([]);\n            visited[i].push([]);\n\
    \            for (let l = 0; l < k; l++) {\n                dp[i][j].push(Infinity);\n\
    \                visited[i][j].push(false);\n            }\n        }\n    }\n\
    \    const q: [number, number, number][] = [];\n    for (let i = 0; i < n; i++)\
    \ {\n        for (let j = 0; j < m; j++) {\n            dp[i][j][0] = grid[i][j];\n\
    \            q.push([i, j, 0]);\n        }\n    }\n    while (q.length) {\n  \
    \      const [i, j, l] = q.shift()!;\n        if (visited[i][j][l]) continue;\n\
    \        visited[i][j][l] = true;\n        if (i > 0) {\n            dp[i - 1][j][l\
    \ + 1] = Math.min(dp[i - 1][j][l + 1], dp[i][j][l]);\n            q.push([i -\
    \ 1, j, l + 1]);\n        }\n        if (i < n - 1) {\n            dp[i + 1][j][l\
    \ + 1] = Math.min(dp[i + 1][j][l + 1], dp[i][j][l]);\n            q.push([i +\
    \ 1, j, l + 1]);\n        }\n        if (j > 0) {\n            dp[i][j - 1][l\
    \ + 1] = Math.min(dp[i][j - 1][l + 1], dp[i][j][l]);\n            q.push([i, j\
    \ - 1, l + 1]);\n        }", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for\
    \ (let l = 0; l < k; l++) {\n        dp[i][j][l] = Infinity;\n      }\n    }\n\
    \  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n   \
    \   dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l < k; l++) {\n \
    \   for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m; j++) {\n     \
    \   if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l\
    \ - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n        }\n        if (j > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n        }\n        if (j < m\
    \ - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \        }\n      }\n    }\n  }\n  let min = Infinity;\n  let minI = -1;\n  let\
    \ minJ = -1;\n  for (let i = 0; i < n", "    const n = grid.length;\n    const\
    \ m = grid[0].length;\n    const dp: number[][][] = [];\n    for (let i = 0; i\
    \ < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++) {\n  \
    \          dp[i][j] = [];\n        }\n    }\n    for (let i = 0; i < n; i++) {\n\
    \        for (let j = 0; j < m; j++) {\n            for (let l = 0; l < k; l++)\
    \ {\n                dp[i][j][l] = Infinity;\n            }\n        }\n    }\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n  \
    \          dp[i][j][0] = grid[i][j];\n        }\n    }\n    for (let l = 1; l\
    \ < k; l++) {\n        for (let i = 0; i < n; i++) {\n            for (let j =\
    \ 0; j < m; j++) {\n                if (i > 0) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n                }\n         \
    \       if (i < n - 1) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n                }\n                if (j > 0) {\n   \
    \                 dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n\
    \                }\n                if (j < m - 1) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n                }\n         \
    \   }\n        }\n    }\n    let min = Infinity;\n    let minI = -1;\n    let\
    \ minJ = -1;\n    for (let i = 0; i < n", "  //\n}\n\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 5));", "    const n = grid.length;\n    const\
    \ m = grid[0].length;\n    const dp: number[][][] = [];\n    for (let i = 0; i\
    \ < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++) {\n  \
    \          dp[i][j] = [];\n        }\n    }\n    for (let i = 0; i < n; i++) {\n\
    \        for (let j = 0; j < m; j++) {\n            dp[i][j][0] = grid[i][j];\n\
    \        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            for (let l = 1; l < k; l++) {\n                let\
    \ min = Infinity;\n                if (i > 0) {\n                    min = Math.min(min,\
    \ dp[i - 1][j][l - 1]);\n                }\n                if (i < n - 1) {\n\
    \                    min = Math.min(min, dp[i + 1][j][l - 1]);\n             \
    \   }\n                if (j > 0) {\n                    min = Math.min(min, dp[i][j\
    \ - 1][l - 1]);\n                }\n                if (j < m - 1) {\n       \
    \             min = Math.min(min, dp[i][j + 1][l - 1]);\n                }\n \
    \               dp[i][j][l] = min;\n            }\n        }\n    }\n    const\
    \ res: number[] = [];\n    for (let i = 0; i < k; i++) {\n        res.push(dp[0][0][i]);\n\
    \    }\n    return res;\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8,\
    \ 9]], 3));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n       \
    \ dp[i] = [];\n        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n\
    \        }\n    }\n    dp[0][0][0] = grid[0][0];\n    for (let i = 0; i < n; i++)\
    \ {\n        for (let j = 0; j < m; j++) {\n            for (let l = 0; l < k;\
    \ l++) {\n                if (i > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l]\
    \ || Infinity, dp[i - 1][j][l - 1] + grid[i][j]);\n                }\n       \
    \         if (j > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l]\
    \ || Infinity, dp[i][j - 1][l - 1] + grid[i][j]);\n                }\n       \
    \     }\n        }\n    }\n    const res: number[] = [];\n    let i = n - 1;\n\
    \    let j = m - 1;\n    for (let l = k - 1; l >= 0; l--) {\n        res.push(grid[i][j]);\n\
    \        if (i > 0 && dp[i][j][l] === dp[i - 1][j][l - 1] + grid[i][j]) {\n  \
    \          i--;\n        } else {\n            j--;\n        }\n    }\n    return\
    \ res;\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4));", " \
    \ const n = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][]\
    \ = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0;\
    \ j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  dp[0][0][0] = grid[0][0];\n\
    \  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for\
    \ (let l = 0; l < k; l++) {\n        if (i > 0) {\n          if (dp[i - 1][j][l]\
    \ !== undefined) {\n            dp[i][j][l + 1] = Math.min(\n              dp[i][j][l\
    \ + 1] || Infinity,\n              dp[i - 1][j][l] + grid[i][j]\n            );\n\
    \          }\n        }\n        if (j > 0) {\n          if (dp[i][j - 1][l] !==\
    \ undefined) {\n            dp[i][j][l + 1] = Math.min(\n              dp[i][j][l\
    \ + 1] || Infinity,\n              dp[i][j - 1][l] + grid[i][j]\n            );\n\
    \          }\n        }\n      }\n    }\n  }\n  const result: number[] = [];\n\
    \  let i = n - 1;\n  let j = m - 1;\n  let l = k - 1;\n  while (l >= 0) {\n  \
    \  result.push(grid[i][j]);\n    if (i > 0 && dp[i - 1][j][l] !== undefined) {\n\
    \      if (dp[i - 1][j][l] + grid[i][j] === dp[i][j][l + 1]) {\n        i--;\n\
    \        l--;\n        continue;\n      }\n    }\n    if (j > 0 && dp[i][j - 1][l]\
    \ !== undefined) {\n      if (dp", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for\
    \ (let l = 0; l < k; l++) {\n        dp[i][j][l] = Infinity;\n      }\n    }\n\
    \  }\n  dp[0][0][0] = grid[0][0];\n  for (let i = 0; i < n; i++) {\n    for (let\
    \ j = 0; j < m; j++) {\n      for (let l = 0; l < k; l++) {\n        if (i > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l] + grid[i][j]);\n\
    \        }\n        if (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l] + grid[i][j]);\n        }\n        if (l > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j][l - 1] + grid[i][j]);\n        }\n      }\n\
    \    }\n  }\n  const res: number[] = [];\n  let i = n - 1;\n  let j = m - 1;\n\
    \  let l = k - 1;\n  while (l >= 0) {\n    res.push(grid[i][j]);\n    if (i >\
    \ 0 && dp[i][j][l] - grid[i][j] === dp[i - 1][j][l]) {\n      i--;\n    } else\
    \ if (j > 0 && dp[i", "  let minPath: number[] = [];\n  let minSum = Infinity;\n\
    \  let minPathSum = Infinity;\n  let minPathLength = Infinity;\n  const n = grid.length;\n\
    \  const m = grid[0].length;\n  const visited = new Set();\n  const dfs = (i:\
    \ number, j: number, path: number[], pathSum: number, pathLength: number) => {\n\
    \    if (pathLength > k) {\n      return;\n    }\n    if (pathLength === k) {\n\
    \      if (pathSum < minPathSum) {\n        minPath = path;\n        minPathSum\
    \ = pathSum;\n        minPathLength = pathLength;\n      } else if (pathSum ===\
    \ minPathSum) {\n        if (pathLength < minPathLength) {\n          minPath\
    \ = path;\n          minPathSum = pathSum;\n          minPathLength = pathLength;\n\
    \        } else if (pathLength === minPathLength) {\n          for (let i = 0;\
    \ i < pathLength; i++) {\n            if (path[i] < minPath[i]) {\n          \
    \    minPath = path;\n              minPathSum = pathSum;\n              minPathLength\
    \ = pathLength;\n              break;\n            } else if (path[i] > minPath[i])\
    \ {\n              break;\n            }\n          }\n        }\n      }\n  \
    \    return;\n    }\n    if (i < 0 || i >= n || j < 0 || j >= m) {\n      return;\n\
    \    }\n    if (visited.has(`${i}-${j}`)) {\n      return;\n    }\n    visited.add(`${i}-${j}`);\n\
    \    dfs(i + 1, j, [...path, grid[i][j]], pathSum + grid[i][j], pathLength + 1);\n\
    \    dfs(i - 1, j, [...path, grid[i][j]], pathSum + grid[i][j], pathLength + 1);\n\
    \    dfs(i, j + 1, [...path, grid[i][j]], pathSum + grid[i][j], pathLength + 1);\n\
    \    dfs(i,", "  let minPath: number[] = [];\n  let minSum = Infinity;\n  const\
    \ dfs = (i: number, j: number, path: number[], sum: number) => {\n    if (i <\
    \ 0 || i >= grid.length || j < 0 || j >= grid[0].length) {\n      return;\n  \
    \  }\n    if (path.length === k) {\n      if (sum < minSum) {\n        minSum\
    \ = sum;\n        minPath = path;\n      }\n      return;\n    }\n    dfs(i +\
    \ 1, j, [...path, grid[i + 1][j]], sum + grid[i + 1][j]);\n    dfs(i - 1, j, [...path,\
    \ grid[i - 1][j]], sum + grid[i - 1][j]);\n    dfs(i, j + 1, [...path, grid[i][j\
    \ + 1]], sum + grid[i][j + 1]);\n    dfs(i, j - 1, [...path, grid[i][j - 1]],\
    \ sum + grid[i][j - 1]);\n  };\n  for (let i = 0; i < grid.length; i++) {\n  \
    \  for (let j = 0; j < grid[0].length; j++) {\n      dfs(i, j, [grid[i][j]], grid[i][j]);\n\
    \    }\n  }\n  return minPath;\n}\n\nconsole.log(\n  minPath(\n    [\n      [1,\
    \ 2, 3, 4],\n      [5, 6, 7, 8],\n      [9, 10, 11, 12],\n      [13, 14, 15, 16],\n\
    \    ],\n    4\n  )\n);", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ dp[0][0][0] = grid[0][0];\n  for (let i = 0; i < n; i++) {\n    for (let j =\
    \ 0; j < m; j++) {\n      for (let l = 0; l < k; l++) {\n        if (dp[i][j][l]\
    \ === undefined) {\n          continue;\n        }\n        if (i + 1 < n) {\n\
    \          const val = dp[i][j][l] + grid[i + 1][j];\n          if (dp[i + 1][j][l\
    \ + 1] === undefined || val < dp[i + 1][j][l + 1]) {\n            dp[i + 1][j][l\
    \ + 1] = val;\n          }\n        }\n        if (j + 1 < m) {\n          const\
    \ val = dp[i][j][l] + grid[i][j + 1];\n          if (dp[i][j + 1][l + 1] === undefined\
    \ || val < dp[i][j + 1][l + 1]) {\n            dp[i][j + 1][l + 1] = val;\n  \
    \        }\n        }\n      }\n    }\n  }\n  let min = Infinity;\n  let minI\
    \ = -1;\n  let minJ = -1;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0;\
    \ j < m; j++) {\n      if (dp[i][j][k - 1] !== undefined && dp[i][j][k - 1] <\
    \ min) {\n        min = dp[i][j][k - 1];\n        minI = i;\n        minJ = j;\n\
    \      }\n    }\n  }\n  const res: number[] = [];", "  const n = grid.length;\n\
    \  const m = grid[0].length;\n  const visited = new Set<string>();\n  const queue\
    \ = new Queue<[number[], number[]]>();\n  queue.enqueue([[grid[0][0]], [0, 0]]);\n\
    \  while (!queue.isEmpty()) {\n    const [path, [i, j]] = queue.dequeue();\n \
    \   if (path.length === k) {\n      return path;\n    }\n    if (i + 1 < n &&\
    \ !visited.has(`${i + 1},${j}`)) {\n      queue.enqueue([[...path, grid[i + 1][j]],\
    \ [i + 1, j]]);\n      visited.add(`${i + 1},${j}`);\n    }\n    if (i - 1 >=\
    \ 0 && !visited.has(`${i - 1},${j}`)) {\n      queue.enqueue([[...path, grid[i\
    \ - 1][j]], [i - 1, j]]);\n      visited.add(`${i - 1},${j}`);\n    }\n    if\
    \ (j + 1 < m && !visited.has(`${i},${j + 1}`)) {\n      queue.enqueue([[...path,\
    \ grid[i][j + 1]], [i, j + 1]]);\n      visited.add(`${i},${j + 1}`);\n    }\n\
    \    if (j - 1 >= 0 && !visited.has(`${i},${j - 1}`)) {\n      queue.enqueue([[...path,\
    \ grid[i][j - 1]], [i, j - 1]]);\n      visited.add(`${i},${j - 1}`);\n    }\n\
    \  }\n  return [];\n}\n\nconsole.log(\n  minPath(\n    [\n      [1, 2, 3, 4],\n\
    \      [5, 6, 7, 8],\n      [9, 10, 11, 12],\n      [13, 14, 15, 16],\n    ],\n\
    \    4\n  )\n);\nconsole.log(\n  minPath(\n    [\n", "    let n = grid.length;\n\
    \    let visited = new Set<string>();\n    let minPath = [];\n    let minPathSum\
    \ = Infinity;\n    let minPathSum2 = Infinity;\n    let minPath2 = [];\n    let\
    \ minPathSum3 = Infinity;\n    let minPath3 = [];\n    let minPathSum4 = Infinity;\n\
    \    let minPath4 = [];\n    let minPathSum5 = Infinity;\n    let minPath5 = [];\n\
    \    let minPathSum6 = Infinity;\n    let minPath6 = [];\n    let minPathSum7\
    \ = Infinity;\n    let minPath7 = [];\n    let minPathSum8 = Infinity;\n    let\
    \ minPath8 = [];\n    let minPathSum9 = Infinity;\n    let minPath9 = [];\n  \
    \  let minPathSum10 = Infinity;\n    let minPath10 = [];\n    let minPathSum11\
    \ = Infinity;\n    let minPath11 = [];\n    let minPathSum12 = Infinity;\n   \
    \ let minPath12 = [];\n    let minPathSum13 = Infinity;\n    let minPath13 = [];\n\
    \    let minPathSum14 = Infinity;\n    let minPath14 = [];\n    let minPathSum15\
    \ = Infinity;\n    let minPath15 = [];\n    let minPathSum16 = Infinity;\n   \
    \ let minPath16 = [];\n    let minPathSum17 = Infinity;\n    let minPath17 = [];\n\
    \    let minPathSum18 = Infinity;\n    let minPath18 = [];\n    let minPathSum19\
    \ = Infinity;\n    let minPath19 = [];\n    let minPathSum20 = Infinity;\n   \
    \ let minPath20 = [];\n    let minPathSum21 = Infinity;\n    let minPath21 = [];\n\
    \    let minPathSum22 = Infinity;\n    let minPath22 = [];\n    let minPathSum23\
    \ = Infinity;\n    let minPath23 = [];\n    let minPathSum24 = Infinity;\n   \
    \ let minPath24 = [];\n    let minPathSum25 = Infinity;\n    let minPath25 = [];\n\
    \    let minPathSum26 = Infinity;\n    let minPath26 = [];\n    let minPathSum27\
    \ = Infinity;\n    let minPath27 = [];\n    let minPathSum28 =", "  const n =\
    \ grid.length;\n  const m = grid[0].length;\n  const dp: number[][][] = [];\n\
    \  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m;\
    \ j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n\
    \    for (let j = 0; j < m; j++) {\n      if (i === 0 && j === 0) {\n        dp[i][j][0]\
    \ = grid[i][j];\n      } else if (i === 0) {\n        dp[i][j][0] = dp[i][j -\
    \ 1][0] + grid[i][j];\n      } else if (j === 0) {\n        dp[i][j][0] = dp[i\
    \ - 1][j][0] + grid[i][j];\n      } else {\n        dp[i][j][0] = Math.min(dp[i\
    \ - 1][j][0], dp[i][j - 1][0]) + grid[i][j];\n      }\n    }\n  }\n  for (let\
    \ i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for (let l =\
    \ 1; l < k; l++) {\n        if (i === 0 && j === 0) {\n          dp[i][j][l] =\
    \ grid[i][j];\n        } else if (i === 0) {\n          dp[i][j][l] = dp[i][j\
    \ - 1][l] + grid[i][j];\n        } else if (j === 0) {\n          dp[i][j][l]\
    \ = dp[i - 1][j][l] + grid[i][j];\n        } else {\n          dp[i][j][l] = Math.min(dp[i\
    \ - 1][j][l], dp[i][j - 1][l]) + grid[i][j];\n        }\n      }\n   ", "  let\
    \ n = grid.length;\n  let m = grid[0].length;\n  let min = Infinity;\n  let minPath\
    \ = [];\n  let visited = new Set();\n  let dfs = (i: number, j: number, path:\
    \ number[], sum: number) => {\n    if (i < 0 || i >= n || j < 0 || j >= m || visited.has(i\
    \ * m + j)) {\n      return;\n    }\n    if (path.length === k) {\n      if (sum\
    \ < min) {\n        min = sum;\n        minPath = path;\n      }\n      return;\n\
    \    }\n    visited.add(i * m + j);\n    path.push(grid[i][j]);\n    dfs(i + 1,\
    \ j, path.slice(), sum + grid[i][j]);\n    dfs(i - 1, j, path.slice(), sum + grid[i][j]);\n\
    \    dfs(i, j + 1, path.slice(), sum + grid[i][j]);\n    dfs(i, j - 1, path.slice(),\
    \ sum + grid[i][j]);\n    visited.delete(i * m + j);\n  };\n  for (let i = 0;\
    \ i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dfs(i, j, [], 0);\n\
    \    }\n  }\n  return minPath;\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 4));", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n       \
    \ dp[i] = [];\n        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n\
    \        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            for (let l = 0; l < k; l++) {\n                dp[i][j][l]\
    \ = Number.MAX_SAFE_INTEGER;\n            }\n        }\n    }\n    for (let i\
    \ = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            dp[i][j][0]\
    \ = grid[i][j];\n        }\n    }\n    for (let l = 1; l < k; l++) {\n       \
    \ for (let i = 0; i < n; i++) {\n            for (let j = 0; j < m; j++) {\n \
    \               if (i > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n                }\n                if (i < n - 1) {\n\
    \                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n\
    \                }\n                if (j > 0) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n                }\n         \
    \       if (j < m - 1) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n                }\n            }\n        }\n    }\n\
    \    let min = Number.MAX_SAFE_INTEGER;\n    let minI = -1;\n    let", "  const\
    \ N = grid.length;\n  const dp: number[][][] = [];\n  for (let i = 0; i < N; i++)\
    \ {\n    dp[i] = [];\n    for (let j = 0; j < N; j++) {\n      dp[i][j] = [];\n\
    \    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++)\
    \ {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l < k; l++)\
    \ {\n    for (let i = 0; i < N; i++) {\n      for (let j = 0; j < N; j++) {\n\
    \        const curr = grid[i][j];\n        let min = Infinity;\n        if (i\
    \ > 0) {\n          min = Math.min(min, dp[i - 1][j][l - 1]);\n        }\n   \
    \     if (i < N - 1) {\n          min = Math.min(min, dp[i + 1][j][l - 1]);\n\
    \        }\n        if (j > 0) {\n          min = Math.min(min, dp[i][j - 1][l\
    \ - 1]);\n        }\n        if (j < N - 1) {\n          min = Math.min(min, dp[i][j\
    \ + 1][l - 1]);\n        }\n        dp[i][j][l] = curr + min;\n      }\n    }\n\
    \  }\n  let min = Infinity;\n  let minI = -1;\n  let minJ = -1;\n  for (let i\
    \ = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (dp[i][j][k\
    \ - 1] < min) {\n        min = dp[i][j][k - 1];\n        minI = i;\n        minJ\
    \ = j;\n      }\n    }\n  }\n  const res: number[] = [];\n  res.push(grid[minI][minJ]);\n\
    \  for", "    let n = grid.length;\n    let m = grid[0].length;\n    let visited\
    \ = new Set<string>();\n    let minPath = [];\n    let minSum = Infinity;\n  \
    \  let minPathSum = Infinity;\n    let minPaths = [];\n    let minPathsSum = [];\n\
    \    let minPathsSumMap = new Map<number, number[][]>();\n    let minPathsMap\
    \ = new Map<number, number[][]>();\n    let minPathsSumMap2 = new Map<number,\
    \ number[][]>();\n    let minPathsMap2 = new Map<number, number[][]>();\n    let\
    \ minPathsSumMap3 = new Map<number, number[][]>();\n    let minPathsMap3 = new\
    \ Map<number, number[][]>();\n    let minPathsSumMap4 = new Map<number, number[][]>();\n\
    \    let minPathsMap4 = new Map<number, number[][]>();\n    let minPathsSumMap5\
    \ = new Map<number, number[][]>();\n    let minPathsMap5 = new Map<number, number[][]>();\n\
    \    let minPathsSumMap6 = new Map<number, number[][]>();\n    let minPathsMap6\
    \ = new Map<number, number[][]>();\n    let minPathsSumMap7 = new Map<number,\
    \ number[][]>();\n    let minPathsMap7 = new Map<number, number[][]>();\n    let\
    \ minPathsSumMap8 = new Map<number, number[][]>();\n    let minPathsMap8 = new\
    \ Map<number, number[][]>();\n    let minPathsSumMap9 = new Map<number, number[][]>();\n\
    \    let minPathsMap9 = new Map<number, number[][]>();\n    let minPathsSumMap10\
    \ = new Map<number, number[][]>();\n    let minPathsMap10 = new Map<number, number[][]>();\n\
    \    let minPathsSumMap11 = new Map<number, number[][]>();\n    let minPathsMap11\
    \ = new Map", "  const n = grid.length;\n  const m = grid[0].length;\n  const\
    \ dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n \
    \   for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let\
    \ i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for (let l =\
    \ 0; l < k; l++) {\n        dp[i][j][l] = Infinity;\n      }\n    }\n  }\n  for\
    \ (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0]\
    \ = grid[i][j];\n    }\n  }\n  for (let l = 1; l < k; l++) {\n    for (let i =\
    \ 0; i < n; i++) {\n      for (let j = 0; j < m; j++) {\n        if (i > 0) {\n\
    \          dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n       \
    \ }\n        if (i < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i\
    \ + 1][j][l - 1]);\n        }\n        if (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n        }\n        if (j < m - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n \
    \ }\n  let min = Infinity;\n  let minI = -1;\n  let minJ = -1;\n  for (let i =\
    \ 0; i < n", "    let n = grid.length;\n    let m = grid[0].length;\n    let minPath\
    \ = [];\n    let minPathSum = Infinity;\n    let visited = new Set();\n    let\
    \ queue = [[0, 0, grid[0][0]]];\n    while (queue.length) {\n        let [i, j,\
    \ sum] = queue.shift();\n        if (visited.has(i + ',' + j)) continue;\n   \
    \     visited.add(i + ',' + j);\n        if (sum > minPathSum) continue;\n   \
    \     if (i === n - 1 && j === m - 1) {\n            if (sum < minPathSum) {\n\
    \                minPathSum = sum;\n                minPath = [grid[i][j]];\n\
    \            } else if (sum === minPathSum) {\n                minPath.push(grid[i][j]);\n\
    \            }\n            continue;\n        }\n        if (i + 1 < n) {\n \
    \           queue.push([i + 1, j, sum + grid[i + 1][j]]);\n        }\n       \
    \ if (j + 1 < m) {\n            queue.push([i, j + 1, sum + grid[i][j + 1]]);\n\
    \        }\n    }\n    return minPath;\n}\n\nconsole.log(minPath([[1, 2, 3], [4,\
    \ 5, 6], [7, 8, 9]], 5));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]],\
    \ 2));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 4));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 6));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 7));\n\
    console.log(minPath([[1, 2, 3], [4, 5, 6", "  const n = grid.length;\n  const\
    \ m = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0; i < n;\
    \ i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] =\
    \ [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m;\
    \ j++) {\n      if (i === 0 && j === 0) {\n        dp[i][j][0] = grid[i][j];\n\
    \      } else if (i === 0) {\n        dp[i][j][0] = dp[i][j - 1][0] + grid[i][j];\n\
    \      } else if (j === 0) {\n        dp[i][j][0] = dp[i - 1][j][0] + grid[i][j];\n\
    \      } else {\n        dp[i][j][0] = Math.min(dp[i - 1][j][0], dp[i][j - 1][0])\
    \ + grid[i][j];\n      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for\
    \ (let j = 0; j < m; j++) {\n      for (let l = 1; l < k; l++) {\n        if (i\
    \ === 0 && j === 0) {\n          dp[i][j][l] = grid[i][j];\n        } else if\
    \ (i === 0) {\n          dp[i][j][l] = dp[i][j - 1][l] + grid[i][j];\n       \
    \ } else if (j === 0) {\n          dp[i][j][l] = dp[i - 1][j][l] + grid[i][j];\n\
    \        } else {\n          dp[i][j][l] = Math.min(dp[i - 1][j][l], dp[i][j -\
    \ 1][l]) + grid[i][j];\n        }\n      }\n   ", "  const n = grid.length;\n\
    \  const m = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0;\
    \ i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j]\
    \ = [];\n    }\n  }\n  dp[0][0][0] = grid[0][0];\n  for (let i = 0; i < n; i++)\
    \ {\n    for (let j = 0; j < m; j++) {\n      for (let l = 0; l < k; l++) {\n\
    \        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l] || Infinity,\
    \ dp[i - 1][j][l - 1] + grid[i][j]);\n        }\n        if (j > 0) {\n      \
    \    dp[i][j][l] = Math.min(dp[i][j][l] || Infinity, dp[i][j - 1][l - 1] + grid[i][j]);\n\
    \        }\n      }\n    }\n  }\n  return dp[n - 1][m - 1];\n}\n\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 4));", "  const n = grid.length;\n  const m =\
    \ grid[0].length;\n  const dp: number[][][] = [];\n  const visited: boolean[][][]\
    \ = [];\n  for (let i = 0; i < n; i++) {\n    dp.push([]);\n    visited.push([]);\n\
    \    for (let j = 0; j < m; j++) {\n      dp[i].push([]);\n      visited[i].push([]);\n\
    \      for (let l = 0; l < k; l++) {\n        dp[i][j].push(Infinity);\n     \
    \   visited[i][j].push(false);\n      }\n    }\n  }\n  const q: [number, number,\
    \ number][] = [];\n  q.push([0, 0, 0]);\n  dp[0][0][0] = grid[0][0];\n  visited[0][0][0]\
    \ = true;\n  while (q.length > 0) {\n    const [i, j, l] = q.shift()!;\n    if\
    \ (i > 0) {\n      if (!visited[i - 1][j][l + 1]) {\n        visited[i - 1][j][l\
    \ + 1] = true;\n        dp[i - 1][j][l + 1] = Math.min(\n          dp[i - 1][j][l\
    \ + 1],\n          dp[i][j][l] + grid[i - 1][j]\n        );\n        q.push([i\
    \ - 1, j, l + 1]);\n      }\n    }\n    if (i < n - 1) {\n      if (!visited[i\
    \ + 1][j][l + 1]) {\n        visited[i + 1][j][l + 1] = true;\n        dp[i +\
    \ 1][j][l + 1] = Math.min(\n          dp[i + 1][j][l + 1],\n          dp[i][j][l]\
    \ + grid[i + 1][j]\n        );\n        q.push([i + 1, j, l + 1]);\n      }\n\
    \    }\n    if (j > 0) {\n", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const visited = new Set<string>();\n  const queue = [[0, 0, [grid[0][0]]]];\n\
    \  const minPath: number[] = [];\n  let minSum = Infinity;\n  while (queue.length)\
    \ {\n    const [i, j, path] = queue.shift()!;\n    if (i < 0 || i >= n || j <\
    \ 0 || j >= m) continue;\n    if (visited.has(`${i},${j}`)) continue;\n    if\
    \ (path.length === k) {\n      const sum = path.reduce((acc, curr) => acc + curr,\
    \ 0);\n      if (sum < minSum) {\n        minSum = sum;\n        minPath.length\
    \ = 0;\n        minPath.push(...path);\n      }\n      continue;\n    }\n    visited.add(`${i},${j}`);\n\
    \    queue.push([i - 1, j, [...path, grid[i - 1][j]]]);\n    queue.push([i + 1,\
    \ j, [...path, grid[i + 1][j]]]);\n    queue.push([i, j - 1, [...path, grid[i][j\
    \ - 1]]]);\n    queue.push([i, j + 1, [...path, grid[i][j + 1]]]);\n  }\n  return\
    \ minPath;\n}\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\
    console.log(minPath(grid, 3));", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n       \
    \ dp[i] = [];\n        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n\
    \        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0;\
    \ j < m; j++) {\n            dp[i][j][0] = grid[i][j];\n        }\n    }\n   \
    \ for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n     \
    \       for (let l = 1; l < k; l++) {\n                dp[i][j][l] = Infinity;\n\
    \                if (i > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n                }\n                if (j > 0) {\n   \
    \                 dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n\
    \                }\n                if (i < n - 1) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n                }\n         \
    \       if (j < m - 1) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n                }\n            }\n        }\n    }\n\
    \    let min = Infinity;\n    let minI = -1;\n    let minJ = -1;\n    for (let\
    \ i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if\
    \ (dp[i][j][k - 1] < min) {\n                min = dp[i][j][k - 1];\n        \
    \        minI", "    const N = grid.length;\n    const visited = new Set<string>();\n\
    \    const queue = [[0, 0, grid[0][0]]];\n    const path = [];\n    let min =\
    \ Infinity;\n    while (queue.length) {\n        const [i, j, sum] = queue.shift();\n\
    \        if (sum > min) continue;\n        if (i === N - 1 && j === N - 1) {\n\
    \            if (sum < min) {\n                min = sum;\n                path.length\
    \ = 0;\n            }\n            path.push(grid[i][j]);\n            continue;\n\
    \        }\n        if (i + 1 < N && !visited.has(`${i + 1},${j}`)) {\n      \
    \      queue.push([i + 1, j, sum + grid[i + 1][j]]);\n            visited.add(`${i\
    \ + 1},${j}`);\n        }\n        if (j + 1 < N && !visited.has(`${i},${j + 1}`))\
    \ {\n            queue.push([i, j + 1, sum + grid[i][j + 1]]);\n            visited.add(`${i},${j\
    \ + 1}`);\n        }\n    }\n    return path;\n}\n\nconsole.log(minPath([[1, 2,\
    \ 3], [4, 5, 6], [7, 8, 9]], 4));", "  const n = grid.length;\n  const visited\
    \ = new Set<string>();\n  const queue = [[0, 0, [grid[0][0]]]];\n  while (queue.length)\
    \ {\n    const [x, y, path] = queue.shift()!;\n    if (path.length === k) {\n\
    \      return path;\n    }\n    if (x > 0 && !visited.has(`${x - 1}-${y}`)) {\n\
    \      queue.push([x - 1, y, [...path, grid[x - 1][y]]]);\n      visited.add(`${x\
    \ - 1}-${y}`);\n    }\n    if (x < n - 1 && !visited.has(`${x + 1}-${y}`)) {\n\
    \      queue.push([x + 1, y, [...path, grid[x + 1][y]]]);\n      visited.add(`${x\
    \ + 1}-${y}`);\n    }\n    if (y > 0 && !visited.has(`${x}-${y - 1}`)) {\n   \
    \   queue.push([x, y - 1, [...path, grid[x][y - 1]]]);\n      visited.add(`${x}-${y\
    \ - 1}`);\n    }\n    if (y < n - 1 && !visited.has(`${x}-${y + 1}`)) {\n    \
    \  queue.push([x, y + 1, [...path, grid[x][y + 1]]]);\n      visited.add(`${x}-${y\
    \ + 1}`);\n    }\n    queue.sort((a, b) => {\n      for (let i = 0; i < k; i++)\
    \ {\n        if (a[2][i] < b[2][i]) {\n          return -1;\n        }\n     \
    \   if (a[2][i] > b[2][i]) {\n          return 1;\n        }\n      }\n      return\
    \ 0;\n    });\n  }\n  return [];\n}\n", "  let minPath = [];\n  let minPathSum\
    \ = Infinity;\n  const n = grid.length;\n  const dirs = [\n    [0, 1],\n    [0,\
    \ -1],\n    [1, 0],\n    [-1, 0],\n  ];\n  const dfs = (row: number, col: number,\
    \ path: number[], sum: number) => {\n    if (row < 0 || row >= n || col < 0 ||\
    \ col >= n) return;\n    if (path.length === k) {\n      if (sum < minPathSum)\
    \ {\n        minPathSum = sum;\n        minPath = path;\n      }\n      return;\n\
    \    }\n    for (const [dr, dc] of dirs) {\n      dfs(row + dr, col + dc, [...path,\
    \ grid[row][col]], sum + grid[row][col]);\n    }\n  };\n  for (let row = 0; row\
    \ < n; row++) {\n    for (let col = 0; col < n; col++) {\n      dfs(row, col,\
    \ [], 0);\n    }\n  }\n  return minPath;\n}\n\nconsole.log(minPath([[1, 2, 3],\
    \ [4, 5, 6], [7, 8, 9]], 5));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7,\
    \ 8, 9]], 4));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3));\n\
    console.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 1));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 6));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 7));\n\
    console.log(minPath([[1, 2, 3], [", "    const n = grid.length;\n    const m =\
    \ grid[0].length;\n    const dp: number[][][] = [];\n    for (let i = 0; i < n;\
    \ i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++) {\n       \
    \     dp[i][j] = [];\n        }\n    }\n    for (let i = 0; i < n; i++) {\n  \
    \      for (let j = 0; j < m; j++) {\n            for (let l = 0; l < k; l++)\
    \ {\n                dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n            }\n \
    \       }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j\
    \ < m; j++) {\n            dp[i][j][0] = grid[i][j];\n        }\n    }\n    for\
    \ (let l = 1; l < k; l++) {\n        for (let i = 0; i < n; i++) {\n         \
    \   for (let j = 0; j < m; j++) {\n                if (i > 0) {\n            \
    \        dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n         \
    \       }\n                if (i < n - 1) {\n                    dp[i][j][l] =\
    \ Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n                }\n           \
    \     if (j > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j\
    \ - 1][l - 1]);\n                }\n                if (j < m - 1) {\n       \
    \             dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n    \
    \            }\n            }\n        }\n    }\n    let min = Number.MAX_SAFE_INTEGER;\n\
    \    let minI = -1;\n    let", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n        dp[i]\
    \ = [];\n        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n \
    \           for (let l = 0; l < k; l++) {\n                dp[i][j][l] = Infinity;\n\
    \            }\n        }\n    }\n    dp[0][0][0] = grid[0][0];\n    for (let\
    \ i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            for\
    \ (let l = 0; l < k; l++) {\n                if (i > 0) {\n                  \
    \  dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l] + grid[i][j]);\n      \
    \          }\n                if (j > 0) {\n                    dp[i][j][l] =\
    \ Math.min(dp[i][j][l], dp[i][j - 1][l] + grid[i][j]);\n                }\n  \
    \              if (l > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j][l - 1] + grid[i][j]);\n                }\n            }\n        }\n\
    \    }\n    let min = dp[n - 1][m - 1][k - 1];\n    let res: number[] = [];\n\
    \    for (let i = n - 1, j = m - 1, l = k - 1; i >= 0 && j >= 0 && l >= 0;) {\n\
    \        res.push(grid[i][j]);\n        if (i > 0 && dp[i - 1][j][l] + grid[i][j]\
    \ === min) {\n            i--;\n        } else if (j > 0 && dp[i][j - 1][l] +\
    \ grid[i][j] === min) {\n            j--;\n", "    let n = grid.length;\n    let\
    \ m = grid[0].length;\n    let visited = new Set<string>();\n    let minPath =\
    \ [];\n    let minSum = Infinity;\n    let minPathSum = Infinity;\n    let minPaths\
    \ = [];\n    let minPathsSum = [];\n    let minPathsSet = new Set<string>();\n\
    \    let minPathsSetSum = new Set<string>();\n    let minPathsSetSumMap = new\
    \ Map<number, Set<string>>();\n    let minPathsSetSumMapMap = new Map<number,\
    \ Map<number, Set<string>>>();\n    let minPathsSetSumMapMapMap = new Map<number,\
    \ Map<number, Map<number, Set<string>>>>();\n    let minPathsSetSumMapMapMapMap\
    \ = new Map<number, Map<number, Map<number, Map<number, Set<string>>>>>();\n \
    \   let minPathsSetSumMapMapMapMapMap = new Map<number, Map<number, Map<number,\
    \ Map<number, Map<number, Set<string>>>>>>();\n    let minPathsSetSumMapMapMapMapMapMap\
    \ = new Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Set<string>>>>>>>();\n    let minPathsSetSumMapMapMapMapMapMapMap = new Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Set<string>>>>>>>>();\n\
    \    let minPathsSetSumMapMapMapMapMapMapMapMap = new Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Set<string>>>>>>>>>();\n\
    \    let minPathsSetSumMapMapMapMapMapMapMapMapMap = new Map<number, Map<number,\
    \ Map<number, Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Set<string>>>>>>>>>>();\n    let minPathsSetSumMapMapMapMapMapMapMapMapMapMap\
    \ = new Map<number, Map<number, Map<number, Map<number, Map<number, Map<number,\
    \ Map<", "  const n = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][]\
    \ = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0;\
    \ j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  dp[0][0][0] = grid[0][0];\n\
    \  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for\
    \ (let l = 0; l < k; l++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l]\
    \ || Infinity, dp[i - 1][j][l - 1] + grid[i][j]);\n        }\n        if (j >\
    \ 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l] || Infinity, dp[i][j - 1][l\
    \ - 1] + grid[i][j]);\n        }\n      }\n    }\n  }\n  return dp[n - 1][m -\
    \ 1];\n}\n", "  const N = grid.length;\n  const dp: number[][][] = [];\n  for\
    \ (let i = 0; i < N; i++) {\n    dp[i] = [];\n    for (let j = 0; j < N; j++)\
    \ {\n      dp[i][j] = [];\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for\
    \ (let j = 0; j < N; j++) {\n      for (let l = 0; l < k; l++) {\n        dp[i][j][l]\
    \ = Infinity;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let\
    \ j = 0; j < N; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let\
    \ l = 1; l < k; l++) {\n    for (let i = 0; i < N; i++) {\n      for (let j =\
    \ 0; j < N; j++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n        }\n        if (i < N - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (j < N - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Infinity;\n\
    \  let minI = -1;\n  let minJ = -1;\n  for (let i = 0; i < N; i++) {\n    for\
    \ (let j =", "  const n = grid.length;\n  const m = grid[0].length;\n  const dp:\
    \ number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for\
    \ (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let i =\
    \ 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0] = grid[i][j];\n\
    \    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      for (let l = 1; l < k; l++) {\n        dp[i][j][l] = Infinity;\n  \
    \      if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l\
    \ - 1]);\n        }\n        if (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j < m\
    \ - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \        }\n      }\n    }\n  }\n  let min = Infinity;\n  let minI = -1;\n  let\
    \ minJ = -1;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      if (dp[i][j][k - 1] < min) {\n        min = dp[i][j][k - 1];\n    \
    \    minI", "  const n = grid.length;\n  const m = grid[0].length;\n  const visited\
    \ = new Set<string>();\n  const queue = [[0, 0, 0, [grid[0][0]]]];\n  while (queue.length)\
    \ {\n    const [i, j, steps, path] = queue.shift()!;\n    if (steps === k) {\n\
    \      return path;\n    }\n    if (i > 0 && !visited.has(`${i - 1}-${j}`)) {\n\
    \      queue.push([i - 1, j, steps + 1, [...path, grid[i - 1][j]]]);\n      visited.add(`${i\
    \ - 1}-${j}`);\n    }\n    if (i < n - 1 && !visited.has(`${i + 1}-${j}`)) {\n\
    \      queue.push([i + 1, j, steps + 1, [...path, grid[i + 1][j]]]);\n      visited.add(`${i\
    \ + 1}-${j}`);\n    }\n    if (j > 0 && !visited.has(`${i}-${j - 1}`)) {\n   \
    \   queue.push([i, j - 1, steps + 1, [...path, grid[i][j - 1]]]);\n      visited.add(`${i}-${j\
    \ - 1}`);\n    }\n    if (j < m - 1 && !visited.has(`${i}-${j + 1}`)) {\n    \
    \  queue.push([i, j + 1, steps + 1, [...path, grid[i][j + 1]]]);\n      visited.add(`${i}-${j\
    \ + 1}`);\n    }\n  }\n  return [];\n}\n\nconsole.log(\n  minPath(\n    [\n  \
    \    [1, 2, 3, 4],\n      [5, 6, 7, 8],\n      [9, 10, 11, 12],\n      [13, 14,\
    \ 15, 16],\n    ],\n    4\n  )\n);\nconsole.log(\n  minPath(\n    [\n      [1,\
    \ 2, 3, 4],\n", "  const n = grid.length;\n  const m = grid[0].length;\n  const\
    \ dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n \
    \   for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let\
    \ i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (i === 0 &&\
    \ j === 0) {\n        dp[i][j][0] = grid[i][j];\n      } else if (i === 0) {\n\
    \        dp[i][j][0] = dp[i][j - 1][0] + grid[i][j];\n      } else if (j === 0)\
    \ {\n        dp[i][j][0] = dp[i - 1][j][0] + grid[i][j];\n      } else {\n   \
    \     dp[i][j][0] = Math.min(dp[i - 1][j][0], dp[i][j - 1][0]) + grid[i][j];\n\
    \      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      for (let l = 1; l < k; l++) {\n        if (i === 0 && j ===\
    \ 0) {\n          dp[i][j][l] = grid[i][j];\n        } else if (i === 0) {\n \
    \         dp[i][j][l] = dp[i][j - 1][l] + grid[i][j];\n        } else if (j ===\
    \ 0) {\n          dp[i][j][l] = dp[i - 1][j][l] + grid[i][j];\n        } else\
    \ {\n          dp[i][j][l] = Math.min(dp[i - 1][j][l], dp[i][j - 1][l]) + grid[i][j];\n\
    \        }\n      }\n   ", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for\
    \ (let l = 0; l < k; l++) {\n        dp[i][j][l] = Infinity;\n      }\n    }\n\
    \  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n   \
    \   dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l < k; l++) {\n \
    \   for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m; j++) {\n     \
    \   if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l\
    \ - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n        }\n        if (j > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n        }\n        if (j < m\
    \ - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \        }\n      }\n    }\n  }\n  let min = Infinity;\n  let minI = -1;\n  let\
    \ minJ = -1;\n  for (let i = 0; i < n", "  const n = grid.length;\n  const m =\
    \ grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++)\
    \ {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n\
    \    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let i = 0; i < n; i++)\
    \ {\n    for (let j = 0; j < m; j++) {\n      for (let l = 1; l < k; l++) {\n\
    \        dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n        if (i > 0) {\n      \
    \    dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n        }\n  \
    \      if (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l\
    \ - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n        }\n        if (j < m - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n \
    \ }\n  let min = Number.MAX_SAFE_INTEGER;\n  let minI = 0;\n  let minJ = 0;\n\
    \  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if\
    \ (dp[i][j][k - 1] < min) {\n        min", "  //\n}\n", "  const n = grid.length;\n\
    \  const m = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0;\
    \ i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j]\
    \ = [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      for (let l = 0; l < k; l++) {\n        dp[i][j][l] = Infinity;\n\
    \      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l\
    \ < k; l++) {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m;\
    \ j++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (j < m - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Infinity;\n\
    \  let minI = -1;\n  let minJ = -1;\n  for (let i = 0; i < n", "  const n = grid.length;\n\
    \  const m = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0;\
    \ i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j]\
    \ = [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l\
    \ < k; l++) {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m;\
    \ j++) {\n        const left = i > 0 ? dp[i - 1][j][l - 1] : Infinity;\n     \
    \   const right = i < n - 1 ? dp[i + 1][j][l - 1] : Infinity;\n        const up\
    \ = j > 0 ? dp[i][j - 1][l - 1] : Infinity;\n        const down = j < m - 1 ?\
    \ dp[i][j + 1][l - 1] : Infinity;\n        dp[i][j][l] = Math.min(left, right,\
    \ up, down);\n      }\n    }\n  }\n  let min = Infinity;\n  let minI = -1;\n \
    \ let minJ = -1;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m;\
    \ j++) {\n      if (dp[i][j][k - 1] < min) {\n        min = dp[i][j][k - 1];\n\
    \        minI = i;\n        minJ = j;\n      }\n    }\n  }\n  const res: number[]\
    \ = [];\n  for (let l = k - 1; l >= 0; l--) {\n    res.push(dp[minI][minJ][l]);\n\
    \    if (minI > 0 && dp[minI - 1][minJ][l - 1", "  const n = grid.length;\n  const\
    \ m = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0; i < n;\
    \ i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] =\
    \ [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m;\
    \ j++) {\n      for (let l = 0; l < k; l++) {\n        dp[i][j][l] = Infinity;\n\
    \      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l\
    \ < k; l++) {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m;\
    \ j++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (j < m - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Infinity;\n\
    \  let minI = -1;\n  let minJ = -1;\n  for (let i = 0; i < n", "  const n = grid.length;\n\
    \  const m = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0;\
    \ i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j]\
    \ = [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      if (i === 0 && j === 0) {\n        dp[i][j][0] = grid[i][j];\n\
    \      } else if (i === 0) {\n        dp[i][j][0] = dp[i][j - 1][0] + grid[i][j];\n\
    \      } else if (j === 0) {\n        dp[i][j][0] = dp[i - 1][j][0] + grid[i][j];\n\
    \      } else {\n        dp[i][j][0] = Math.min(dp[i - 1][j][0], dp[i][j - 1][0])\
    \ + grid[i][j];\n      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for\
    \ (let j = 0; j < m; j++) {\n      for (let l = 1; l < k; l++) {\n        if (i\
    \ === 0 && j === 0) {\n          dp[i][j][l] = grid[i][j];\n        } else if\
    \ (i === 0) {\n          dp[i][j][l] = dp[i][j - 1][l] + grid[i][j];\n       \
    \ } else if (j === 0) {\n          dp[i][j][l] = dp[i - 1][j][l] + grid[i][j];\n\
    \        } else {\n          dp[i][j][l] = Math.min(dp[i - 1][j][l], dp[i][j -\
    \ 1][l]) + grid[i][j];\n        }\n      }\n   ", "    const n = grid.length;\n\
    \    const m = grid[0].length;\n    const dp: number[][][] = [];\n    for (let\
    \ i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++)\
    \ {\n            dp[i][j] = [];\n        }\n    }\n    for (let i = 0; i < n;\
    \ i++) {\n        for (let j = 0; j < m; j++) {\n            for (let l = 0; l\
    \ < k; l++) {\n                dp[i][j][l] = Infinity;\n            }\n      \
    \  }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m;\
    \ j++) {\n            dp[i][j][0] = grid[i][j];\n        }\n    }\n    for (let\
    \ l = 1; l < k; l++) {\n        for (let i = 0; i < n; i++) {\n            for\
    \ (let j = 0; j < m; j++) {\n                if (i > 0) {\n                  \
    \  dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n               \
    \ }\n                if (i < n - 1) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n                }\n                if (j > 0) {\n   \
    \                 dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n\
    \                }\n                if (j < m - 1) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n                }\n         \
    \   }\n        }\n    }\n    const res: number[] = [];\n    for (let i = 0; i\
    \ < n; i++) {\n        for (let j = 0; j < m", "  const n = grid.length;\n  const\
    \ m = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0; i < n;\
    \ i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] =\
    \ [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m;\
    \ j++) {\n      if (i === 0 && j === 0) {\n        dp[i][j][0] = grid[i][j];\n\
    \      } else if (i === 0) {\n        dp[i][j][0] = dp[i][j - 1][0] + grid[i][j];\n\
    \      } else if (j === 0) {\n        dp[i][j][0] = dp[i - 1][j][0] + grid[i][j];\n\
    \      } else {\n        dp[i][j][0] = Math.min(dp[i - 1][j][0], dp[i][j - 1][0])\
    \ + grid[i][j];\n      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for\
    \ (let j = 0; j < m; j++) {\n      for (let l = 1; l < k; l++) {\n        if (i\
    \ === 0 && j === 0) {\n          dp[i][j][l] = dp[i][j][l - 1];\n        } else\
    \ if (i === 0) {\n          dp[i][j][l] = Math.min(dp[i][j - 1][l], dp[i][j][l\
    \ - 1]);\n        } else if (j === 0) {\n          dp[i][j][l] = Math.min(dp[i\
    \ - 1][j][l], dp[i][j][l - 1]);\n        } else {\n          dp[i][j][l] = Math.min(\n\
    \            dp[i - 1][j][l],\n            dp", "  const n = grid.length;\n  const\
    \ m = grid[0].length;\n  const visited = new Set<string>();\n  const queue = [[0,\
    \ 0, grid[0][0]]];\n  const res = [];\n  while (queue.length) {\n    const [i,\
    \ j, sum] = queue.shift();\n    if (i === n - 1 && j === m - 1) {\n      if (sum\
    \ === k) {\n        res.push(grid[i][j]);\n      }\n      continue;\n    }\n \
    \   if (sum > k) {\n      continue;\n    }\n    if (i + 1 < n) {\n      const\
    \ key = `${i + 1}-${j}`;\n      if (!visited.has(key)) {\n        visited.add(key);\n\
    \        queue.push([i + 1, j, sum + grid[i + 1][j]]);\n      }\n    }\n    if\
    \ (j + 1 < m) {\n      const key = `${i}-${j + 1}`;\n      if (!visited.has(key))\
    \ {\n        visited.add(key);\n        queue.push([i, j + 1, sum + grid[i][j\
    \ + 1]]);\n      }\n    }\n  }\n  return res;\n}\n\nconsole.log(minPath([[1, 2,\
    \ 3], [4, 5, 6], [7, 8, 9]], 12));", "    const n = grid.length;\n    const m\
    \ = grid[0].length;\n    const dp: number[][][] = [];\n    for (let i = 0; i <\
    \ n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++) {\n    \
    \        dp[i][j] = [];\n        }\n    }\n    dp[0][0][0] = grid[0][0];\n   \
    \ for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n     \
    \       for (let l = 0; l < k; l++) {\n                if (dp[i][j][l] === undefined)\
    \ {\n                    continue;\n                }\n                if (i +\
    \ 1 < n) {\n                    if (dp[i + 1][j][l + 1] === undefined) {\n   \
    \                     dp[i + 1][j][l + 1] = dp[i][j][l];\n                   \
    \ } else {\n                        dp[i + 1][j][l + 1] = Math.min(dp[i + 1][j][l\
    \ + 1], dp[i][j][l]);\n                    }\n                }\n            \
    \    if (j + 1 < m) {\n                    if (dp[i][j + 1][l + 1] === undefined)\
    \ {\n                        dp[i][j + 1][l + 1] = dp[i][j][l];\n            \
    \        } else {\n                        dp[i][j + 1][l + 1] = Math.min(dp[i][j\
    \ + 1][l + 1], dp[i][j][l]);\n                    }\n                }\n     \
    \       }\n        }\n    }\n    const result: number[] = [];\n    for (let i\
    \ = 0; i < k; i++) {\n        result.push(dp[n - 1][m - 1][i]);\n    }\n    return\
    \ result;\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3));",
  "  let minPath = [];\n  let minPathSum = Infinity;\n  const n = grid.length;\n \
    \ const visited = new Set();\n  const dfs = (row: number, col: number, path: number[],\
    \ pathSum: number) => {\n    if (path.length === k) {\n      if (pathSum < minPathSum)\
    \ {\n        minPathSum = pathSum;\n        minPath = path;\n      }\n      return;\n\
    \    }\n    if (pathSum > minPathSum) return;\n    for (let [dr, dc] of [[0, 1],\
    \ [0, -1], [1, 0], [-1, 0]]) {\n      const r = row + dr;\n      const c = col\
    \ + dc;\n      if (r < 0 || r >= n || c < 0 || c >= n) continue;\n      if (visited.has(r\
    \ * n + c)) continue;\n      visited.add(r * n + c);\n      dfs(r, c, [...path,\
    \ grid[r][c]], pathSum + grid[r][c]);\n      visited.delete(r * n + c);\n    }\n\
    \  };\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n  \
    \    visited.add(i * n + j);\n      dfs(i, j, [grid[i][j]], grid[i][j]);\n   \
    \   visited.delete(i * n + j);\n    }\n  }\n  return minPath;\n}\n\nconsole.log(\n\
    \  minPath(\n    [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n      [9, 10, 11,\
    \ 12],\n      [13, 14, 15, 16],\n    ],\n    4\n  )\n);", "    const n = grid.length;\n\
    \    const m = grid[0].length;\n    const dp: number[][][] = [];\n    for (let\
    \ i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++)\
    \ {\n            dp[i][j] = [];\n        }\n    }\n    dp[0][0][0] = grid[0][0];\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n  \
    \          for (let l = 0; l < k; l++) {\n                if (dp[i][j][l] ===\
    \ undefined) {\n                    continue;\n                }\n           \
    \     if (i + 1 < n) {\n                    if (dp[i + 1][j][l + 1] === undefined)\
    \ {\n                        dp[i + 1][j][l + 1] = dp[i][j][l];\n            \
    \        } else {\n                        dp[i + 1][j][l + 1] = Math.min(dp[i\
    \ + 1][j][l + 1], dp[i][j][l]);\n                    }\n                }\n  \
    \              if (j + 1 < m) {\n                    if (dp[i][j + 1][l + 1] ===\
    \ undefined) {\n                        dp[i][j + 1][l + 1] = dp[i][j][l];\n \
    \                   } else {\n                        dp[i][j + 1][l + 1] = Math.min(dp[i][j\
    \ + 1][l + 1], dp[i][j][l]);\n                    }\n                }\n     \
    \       }\n        }\n    }\n    const result: number[] = [];\n    let i = n -\
    \ 1;\n    let j = m - 1;\n    let l = k - 1;\n    while (l >= 0) {\n        result.push(grid[i][j]);\n\
    \        if (i > 0 && dp[i - 1][j][l] !== undefined && dp[i - 1][j][l] <= dp[i][j][l])\
    \ {\n            i--;", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const dp: number[][][] = [];\n    const visited: boolean[][][] = [];\n  \
    \  for (let i = 0; i < n; i++) {\n        dp.push([]);\n        visited.push([]);\n\
    \        for (let j = 0; j < m; j++) {\n            dp[i].push([]);\n        \
    \    visited[i].push([]);\n            for (let l = 0; l < k; l++) {\n       \
    \         dp[i][j].push(Infinity);\n                visited[i][j].push(false);\n\
    \            }\n        }\n    }\n    const q: [number, number, number][] = [];\n\
    \    q.push([0, 0, 0]);\n    dp[0][0][0] = grid[0][0];\n    visited[0][0][0] =\
    \ true;\n    while (q.length > 0) {\n        const [i, j, l] = q.shift()!;\n \
    \       const val = dp[i][j][l];\n        if (i > 0) {\n            const newVal\
    \ = val + grid[i - 1][j];\n            if (newVal < dp[i - 1][j][l + 1]) {\n \
    \               dp[i - 1][j][l + 1] = newVal;\n                if (!visited[i\
    \ - 1][j][l + 1]) {\n                    q.push([i - 1, j, l + 1]);\n        \
    \            visited[i - 1][j][l + 1] = true;\n                }\n           \
    \ }\n        }\n        if (i < n - 1) {\n            const newVal = val + grid[i\
    \ + 1][j];\n            if (newVal < dp[i + 1][j][l + 1]) {\n                dp[i\
    \ + 1][j][l + 1] = newVal;\n                if (!visited[i + 1][j][l + 1]) {\n\
    \                    q.push([i + 1, j, l + 1]);\n                    visited[i\
    \ + 1][j][l + 1] = true;\n                }", "  const n = grid.length;\n  const\
    \ m = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0; i < n;\
    \ i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] =\
    \ [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m;\
    \ j++) {\n      for (let l = 0; l < k; l++) {\n        dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n\
    \      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l\
    \ < k; l++) {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m;\
    \ j++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (j < m - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Number.MAX_SAFE_INTEGER;\n\
    \  let minI = -1;\n  let", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const dirs = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n    const visited = new\
    \ Set<string>();\n    const queue = [[0, 0, grid[0][0]]];\n    let minPath = [];\n\
    \    let minSum = Infinity;\n    while (queue.length) {\n        const [i, j,\
    \ sum] = queue.shift();\n        if (sum > minSum) continue;\n        if (i ===\
    \ n - 1 && j === m - 1 && sum < minSum) {\n            minSum = sum;\n       \
    \     minPath = [grid[i][j]];\n        }\n        for (const [di, dj] of dirs)\
    \ {\n            const ni = i + di;\n            const nj = j + dj;\n        \
    \    if (ni < 0 || ni >= n || nj < 0 || nj >= m) continue;\n            const\
    \ key = `${ni},${nj}`;\n            if (visited.has(key)) continue;\n        \
    \    visited.add(key);\n            queue.push([ni, nj, sum + grid[ni][nj]]);\n\
    \        }\n    }\n    return minPath;\n}\n\nconsole.log(minPath([[1, 2, 3], [4,\
    \ 5, 6], [7, 8, 9]], 1));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]],\
    \ 2));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 4));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 5));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 6));\n\
    console.log(minPath([[1, 2, 3], [4, 5", "  const N = grid.length;\n  const dp:\
    \ number[][][] = [];\n  for (let i = 0; i < N; i++) {\n    dp[i] = [];\n    for\
    \ (let j = 0; j < N; j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let i =\
    \ 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      dp[i][j][0] = grid[i][j];\n\
    \    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++)\
    \ {\n      for (let l = 1; l < k; l++) {\n        const neighbors = getNeighbors(i,\
    \ j, N);\n        let min = Infinity;\n        for (const [x, y] of neighbors)\
    \ {\n          if (dp[x][y][l - 1] < min) {\n            min = dp[x][y][l - 1];\n\
    \          }\n        }\n        dp[i][j][l] = min;\n      }\n    }\n  }\n  let\
    \ min = Infinity;\n  let minI = 0;\n  let minJ = 0;\n  for (let i = 0; i < N;\
    \ i++) {\n    for (let j = 0; j < N; j++) {\n      if (dp[i][j][k - 1] < min)\
    \ {\n        min = dp[i][j][k - 1];\n        minI = i;\n        minJ = j;\n  \
    \    }\n    }\n  }\n  const res: number[] = [];\n  for (let i = k - 1; i >= 0;\
    \ i--) {\n    res.push(dp[minI][minJ][i]);\n    const neighbors = getNeighbors(minI,\
    \ minJ, N);\n    let min = Infinity;\n    let minI = 0;\n    let minJ = 0;\n \
    \   for (const [x, y] of neighbors) {\n      if (dp[x][y][i - 1] < min) {\n  \
    \      min", "  const n = grid.length;\n  const m = grid[0].length;\n  const dp:\
    \ number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for\
    \ (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let i =\
    \ 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for (let l = 0; l\
    \ < k; l++) {\n        dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n      }\n    }\n\
    \  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n   \
    \   dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l < k; l++) {\n \
    \   for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m; j++) {\n     \
    \   if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l\
    \ - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n        }\n        if (j > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n        }\n        if (j < m\
    \ - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \        }\n      }\n    }\n  }\n  let min = Number.MAX_SAFE_INTEGER;\n  let minI\
    \ = -1;\n  let", "  const n = grid.length;\n  const m = grid[0].length;\n  const\
    \ dp: number[][][] = [];\n  const visited: boolean[][][] = [];\n  for (let i =\
    \ 0; i < n; i++) {\n    dp.push([]);\n    visited.push([]);\n    for (let j =\
    \ 0; j < m; j++) {\n      dp[i].push([]);\n      visited[i].push([]);\n      for\
    \ (let l = 0; l < k; l++) {\n        dp[i][j].push(Infinity);\n        visited[i][j].push(false);\n\
    \      }\n    }\n  }\n  const q: [number, number, number][] = [];\n  for (let\
    \ i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0] =\
    \ grid[i][j];\n      visited[i][j][0] = true;\n      q.push([i, j, 0]);\n    }\n\
    \  }\n  while (q.length) {\n    const [i, j, l] = q.shift()!;\n    if (i > 0 &&\
    \ !visited[i - 1][j][l + 1]) {\n      dp[i - 1][j][l + 1] = Math.min(dp[i - 1][j][l\
    \ + 1], dp[i][j][l]);\n      visited[i - 1][j][l + 1] = true;\n      q.push([i\
    \ - 1, j, l + 1]);\n    }\n    if (i < n - 1 && !visited[i + 1][j][l + 1]) {\n\
    \      dp[i + 1][j][l + 1] = Math.min(dp[i + 1][j][l + 1], dp[i][j][l]);\n   \
    \   visited[i + 1][j][l + 1] = true;\n      q.push([i + 1, j, l + 1]);\n    }\n\
    \    if (j > 0 && !visited[i][j - 1][l + 1])", "    let n = grid.length;\n   \
    \ let m = grid[0].length;\n    let visited = new Set<string>();\n    let queue\
    \ = [[0, 0, grid[0][0]]];\n    let minPath = [];\n    let minSum = Infinity;\n\
    \    while (queue.length) {\n        let [i, j, sum] = queue.shift();\n      \
    \  if (i < 0 || i >= n || j < 0 || j >= m) continue;\n        if (visited.has(`${i},${j}`))\
    \ continue;\n        visited.add(`${i},${j}`);\n        if (sum > minSum) continue;\n\
    \        if (sum > k) continue;\n        if (sum === k) {\n            if (sum\
    \ < minSum) {\n                minSum = sum;\n                minPath = [grid[i][j]];\n\
    \            } else if (sum === minSum) {\n                minPath.push(grid[i][j]);\n\
    \            }\n            continue;\n        }\n        queue.push([i + 1, j,\
    \ sum + grid[i + 1][j]]);\n        queue.push([i - 1, j, sum + grid[i - 1][j]]);\n\
    \        queue.push([i, j + 1, sum + grid[i][j + 1]]);\n        queue.push([i,\
    \ j - 1, sum + grid[i][j - 1]]);\n    }\n    return minPath;\n}\n\nconsole.log(minPath(\n\
    \    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ],\n  \
    \  12\n));", "  //\n}\n", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n       \
    \ dp[i] = [];\n        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n\
    \        }\n    }\n    dp[0][0][0] = grid[0][0];\n    for (let i = 0; i < n; i++)\
    \ {\n        for (let j = 0; j < m; j++) {\n            for (let l = 0; l < k;\
    \ l++) {\n                if (i > 0) {\n                    if (dp[i - 1][j][l]\
    \ !== undefined) {\n                        dp[i][j][l + 1] = Math.min(dp[i][j][l\
    \ + 1] || Infinity, dp[i - 1][j][l] + grid[i][j]);\n                    }\n  \
    \              }\n                if (j > 0) {\n                    if (dp[i][j\
    \ - 1][l] !== undefined) {\n                        dp[i][j][l + 1] = Math.min(dp[i][j][l\
    \ + 1] || Infinity, dp[i][j - 1][l] + grid[i][j]);\n                    }\n  \
    \              }\n            }\n        }\n    }\n    const res: number[] = [];\n\
    \    let i = n - 1;\n    let j = m - 1;\n    let l = k - 1;\n    while (l >= 0)\
    \ {\n        res.push(grid[i][j]);\n        if (i > 0 && dp[i - 1][j][l] !== undefined\
    \ && dp[i - 1][j][l] + grid[i][j] === dp[i][j][l + 1]) {\n            i--;\n \
    \       } else {\n            j--;\n        }\n        l--;\n    }\n    return\
    \ res.reverse();\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]],\
    \ 3));", "  const n = grid.length;\n  const dp: number[][][] = [];\n  for (let\
    \ i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n \
    \     dp[i][j] = [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let\
    \ j = 0; j < n; j++) {\n      for (let l = 0; l < k; l++) {\n        dp[i][j][l]\
    \ = Infinity;\n      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let\
    \ j = 0; j < n; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let\
    \ l = 1; l < k; l++) {\n    for (let i = 0; i < n; i++) {\n      for (let j =\
    \ 0; j < n; j++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (j < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Infinity;\n\
    \  let minI = -1;\n  let minJ = -1;\n  for (let i = 0; i < n; i++) {\n    for\
    \ (let j =", "    let n = grid.length;\n    let m = grid[0].length;\n    let minPath:\
    \ number[] = [];\n    let minPathSum = Infinity;\n    let visited: boolean[][]\
    \ = [];\n    for (let i = 0; i < n; i++) {\n        visited[i] = [];\n       \
    \ for (let j = 0; j < m; j++) {\n            visited[i][j] = false;\n        }\n\
    \    }\n    let dfs = (i: number, j: number, path: number[], pathSum: number)\
    \ => {\n        if (i < 0 || i >= n || j < 0 || j >= m || visited[i][j]) {\n \
    \           return;\n        }\n        if (path.length === k) {\n           \
    \ if (pathSum < minPathSum) {\n                minPathSum = pathSum;\n       \
    \         minPath = path.slice();\n            }\n            return;\n      \
    \  }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n        pathSum\
    \ += grid[i][j];\n        dfs(i - 1, j, path, pathSum);\n        dfs(i + 1, j,\
    \ path, pathSum);\n        dfs(i, j - 1, path, pathSum);\n        dfs(i, j + 1,\
    \ path, pathSum);\n        path.pop();\n        pathSum -= grid[i][j];\n     \
    \   visited[i][j] = false;\n    };\n    for (let i = 0; i < n; i++) {\n      \
    \  for (let j = 0; j < m; j++) {\n            dfs(i, j, [], 0);\n        }\n \
    \   }\n    return minPath;\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7,\
    \ 8, 9]], 5));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 6));\n\
    console.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 7));\nconsole.log(minPath([",
  "  const n = grid.length;\n  const m = grid[0].length;\n  const visited = new Set<string>();\n\
    \  const queue = [[0, 0, grid[0][0]]];\n  const res = [];\n  while (queue.length)\
    \ {\n    const [i, j, sum] = queue.shift();\n    if (visited.has(`${i}-${j}`))\
    \ continue;\n    visited.add(`${i}-${j}`);\n    if (sum > k) continue;\n    if\
    \ (i === n - 1 && j === m - 1) {\n      if (sum === k) {\n        res.push(grid[i][j]);\n\
    \        return res;\n      }\n      continue;\n    }\n    if (i + 1 < n) {\n\
    \      queue.push([i + 1, j, sum + grid[i + 1][j]]);\n    }\n    if (j + 1 < m)\
    \ {\n      queue.push([i, j + 1, sum + grid[i][j + 1]]);\n    }\n    res.push(grid[i][j]);\n\
    \  }\n  return res;\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]],\
    \ 9));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 7));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 6));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5));\n\
    console.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 3));\nconsole.log(minPath([[1, 2,", "  const n\
    \ = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][] = [];\n\
    \  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m;\
    \ j++) {\n      dp[i][j] = [];\n    }\n  }\n  dp[0][0][0] = grid[0][0];\n  for\
    \ (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for (let\
    \ l = 0; l < k; l++) {\n        if (i > 0) {\n          if (dp[i - 1][j][l] !==\
    \ undefined) {\n            dp[i][j][l + 1] = Math.min(\n              dp[i][j][l\
    \ + 1] || Infinity,\n              dp[i - 1][j][l] + grid[i][j]\n            );\n\
    \          }\n        }\n        if (j > 0) {\n          if (dp[i][j - 1][l] !==\
    \ undefined) {\n            dp[i][j][l + 1] = Math.min(\n              dp[i][j][l\
    \ + 1] || Infinity,\n              dp[i][j - 1][l] + grid[i][j]\n            );\n\
    \          }\n        }\n      }\n    }\n  }\n  const res: number[] = [];\n  let\
    \ i = n - 1;\n  let j = m - 1;\n  let l = k - 1;\n  while (l >= 0) {\n    res.push(grid[i][j]);\n\
    \    if (i > 0 && dp[i - 1][j][l] !== undefined) {\n      if (dp[i - 1][j][l]\
    \ + grid[i][j] === dp[i][j][l + 1]) {\n        i--;\n        l--;\n        continue;\n\
    \      }\n    }\n    if (j > 0 && dp[i][j - 1][l] !== undefined) {\n      if (dp",
  "  const n = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][]\
    \ = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0;\
    \ j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let i = 0; i < n; i++)\
    \ {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n\
    \  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n   \
    \   for (let l = 1; l < k; l++) {\n        dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n\
    \        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l\
    \ - 1]);\n        }\n        if (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j < m\
    \ - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \        }\n      }\n    }\n  }\n  let min = Number.MAX_SAFE_INTEGER;\n  let minI\
    \ = 0;\n  let minJ = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0;\
    \ j < m; j++) {\n      if (dp[i][j][k - 1] < min) {\n        min", "    const\
    \ n = grid.length;\n    const m = grid[0].length;\n    const dp: number[][][]\
    \ = [];\n    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let\
    \ j = 0; j < m; j++) {\n            dp[i][j] = [];\n        }\n    }\n    for\
    \ (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n         \
    \   for (let l = 0; l < k; l++) {\n                dp[i][j][l] = Infinity;\n \
    \           }\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        for\
    \ (let j = 0; j < m; j++) {\n            dp[i][j][0] = grid[i][j];\n        }\n\
    \    }\n    for (let l = 1; l < k; l++) {\n        for (let i = 0; i < n; i++)\
    \ {\n            for (let j = 0; j < m; j++) {\n                if (i > 0) {\n\
    \                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n\
    \                }\n                if (i < n - 1) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n                }\n         \
    \       if (j > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n                }\n                if (j < m - 1) {\n\
    \                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \                }\n            }\n        }\n    }\n    let min = Infinity;\n\
    \    let minI = -1;\n    let minJ = -1;\n    for (let i = 0; i < n", "  let n\
    \ = grid.length;\n  let m = grid[0].length;\n  let minPath: number[] = [];\n \
    \ let minPathSum = Infinity;\n  let visited: boolean[][] = [];\n  for (let i =\
    \ 0; i < n; i++) {\n    visited[i] = [];\n    for (let j = 0; j < m; j++) {\n\
    \      visited[i][j] = false;\n    }\n  }\n  let dfs = (i: number, j: number,\
    \ path: number[], sum: number) => {\n    if (i < 0 || i >= n || j < 0 || j >=\
    \ m || visited[i][j]) {\n      return;\n    }\n    if (path.length === k) {\n\
    \      if (sum < minPathSum) {\n        minPathSum = sum;\n        minPath = path;\n\
    \      }\n      return;\n    }\n    visited[i][j] = true;\n    dfs(i + 1, j, path.concat(grid[i][j]),\
    \ sum + grid[i][j]);\n    dfs(i - 1, j, path.concat(grid[i][j]), sum + grid[i][j]);\n\
    \    dfs(i, j + 1, path.concat(grid[i][j]), sum + grid[i][j]);\n    dfs(i, j -\
    \ 1, path.concat(grid[i][j]), sum + grid[i][j]);\n    visited[i][j] = false;\n\
    \  };\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n  \
    \    dfs(i, j, [], 0);\n    }\n  }\n  return minPath;\n}\n\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 4));", "  const n = grid.length;\n  const m =\
    \ grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++)\
    \ {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n\
    \    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      for (let l = 0; l < k; l++) {\n        dp[i][j][l] = Infinity;\n  \
    \    }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m;\
    \ j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l < k;\
    \ l++) {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m; j++)\
    \ {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i\
    \ - 1][j][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (j < m - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Infinity;\n\
    \  let minI = -1;\n  let minJ = -1;\n  for (let i = 0; i < n", "  //\n}\n\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 4)); // [1, 2, 3, 6, 9]\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 5)); // [1, 2, 3, 6, 8, 9]\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 6)); // [1, 2, 3, 6, 7, 8, 9]\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 7)); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 8)); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 9)); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 10)); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 11)); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 12)); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 13)); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\nconsole.log",
  "  const n = grid.length;\n  const m = grid[0].length;\n  const visited = new Set<string>();\n\
    \  const queue = [[0, 0, [grid[0][0]]]];\n  const dirs = [[0, 1], [0, -1], [1,\
    \ 0], [-1, 0]];\n  const res = [];\n  while (queue.length) {\n    const [x, y,\
    \ path] = queue.shift();\n    if (path.length === k) {\n      res.push(path);\n\
    \      continue;\n    }\n    for (const [dx, dy] of dirs) {\n      const nx =\
    \ x + dx;\n      const ny = y + dy;\n      if (nx < 0 || nx >= n || ny < 0 ||\
    \ ny >= m) continue;\n      const key = `${nx},${ny}`;\n      if (visited.has(key))\
    \ continue;\n      visited.add(key);\n      queue.push([nx, ny, [...path, grid[nx][ny]]]);\n\
    \    }\n  }\n  res.sort((a, b) => {\n    for (let i = 0; i < k; i++) {\n     \
    \ if (a[i] < b[i]) return -1;\n      if (a[i] > b[i]) return 1;\n    }\n    return\
    \ 0;\n  });\n  return res[0];\n}\n\nconsole.log(\n  minPath(\n    [\n      [1,\
    \ 2, 3, 4],\n      [5, 6, 7, 8],\n      [9, 10, 11, 12],\n      [13, 14, 15, 16],\n\
    \    ],\n    4\n  )\n);", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for\
    \ (let l = 0; l < k; l++) {\n        dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n\
    \      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l\
    \ < k; l++) {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m;\
    \ j++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (j < m - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Number.MAX_SAFE_INTEGER;\n\
    \  let minI = -1;\n  let", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n       \
    \ dp[i] = [];\n        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n\
    \        }\n    }\n    const dirs = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n    const\
    \ q: [number, number, number][] = [];\n    q.push([0, 0, grid[0][0]]);\n    dp[0][0][grid[0][0]]\
    \ = 0;\n    while (q.length) {\n        const [i, j, sum] = q.shift()!;\n    \
    \    for (const [di, dj] of dirs) {\n            const ni = i + di;\n        \
    \    const nj = j + dj;\n            if (ni < 0 || ni >= n || nj < 0 || nj >=\
    \ m) {\n                continue;\n            }\n            const nsum = sum\
    \ + grid[ni][nj];\n            if (dp[ni][nj][nsum] === undefined) {\n       \
    \         dp[ni][nj][nsum] = dp[i][j][sum] + 1;\n                q.push([ni, nj,\
    \ nsum]);\n            }\n        }\n    }\n    let min = Infinity;\n    let minI\
    \ = -1;\n    let minJ = -1;\n    for (let i = 0; i < n; i++) {\n        for (let\
    \ j = 0; j < m; j++) {\n            for (let sum = 1; sum <= n * n; sum++) {\n\
    \                if (dp[i][j][sum] === k) {\n                    if (sum < min)\
    \ {\n                        min = sum;\n                        minI = i;\n \
    \                       minJ = j;\n                    }\n                }\n\
    \            }\n        }\n    }\n    const res: number[] = [];\n    let i = minI;\n\
    \    let j = minJ;\n    let sum = min;\n    while (", "  const n = grid.length;\n\
    \  const m = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0;\
    \ i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j]\
    \ = [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      for (let l = 0; l < k; l++) {\n        dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n\
    \      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l\
    \ < k; l++) {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m;\
    \ j++) {\n        for (let di = -1; di <= 1; di++) {\n          for (let dj =\
    \ -1; dj <= 1; dj++) {\n            if (di === 0 && dj === 0) {\n            \
    \  continue;\n            }\n            const ni = i + di;\n            const\
    \ nj = j + dj;\n            if (ni < 0 || ni >= n || nj < 0 || nj >= m) {\n  \
    \            continue;\n            }\n            dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[ni][nj][l - 1]);\n          }\n        }\n      }\n    }\n  }\n  let min\
    \ = Number.MAX_SAFE_INTEGER;\n  let minI = -1;\n  let minJ = -1;\n  for (let i\
    \ = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (dp[i][j][k\
    \ - 1] < min)", "  const n = grid.length;\n  const m = grid[0].length;\n  const\
    \ visited = new Set<string>();\n  const queue = [[0, 0, [grid[0][0]]]];\n  const\
    \ dirs = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n  while (queue.length) {\n    const\
    \ [i, j, path] = queue.shift()!;\n    if (path.length === k) {\n      return path;\n\
    \    }\n    for (const [di, dj] of dirs) {\n      const ni = i + di;\n      const\
    \ nj = j + dj;\n      if (ni < 0 || ni >= n || nj < 0 || nj >= m) {\n        continue;\n\
    \      }\n      const key = `${ni}-${nj}`;\n      if (visited.has(key)) {\n  \
    \      continue;\n      }\n      visited.add(key);\n      queue.push([ni, nj,\
    \ [...path, grid[ni][nj]]]);\n    }\n  }\n  return [];\n}\n\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 4));", "  const n = grid.length;\n  const m =\
    \ grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++)\
    \ {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n\
    \    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let i = 0; i < n; i++)\
    \ {\n    for (let j = 0; j < m; j++) {\n      for (let l = 1; l < k; l++) {\n\
    \        dp[i][j][l] = Infinity;\n        if (i > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (i < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n        }\n        if (j < m - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n \
    \ }\n  const res: number[] = [];\n  let i = 0;\n  let j = 0;\n  for (let l = 0;\
    \ l < k; l++) {\n    res.push(dp[i][j][l]);\n    if (i > 0 && dp[i][j][l + 1]\
    \ === dp[i - 1][j][l]) {\n      i--;\n    } else", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let visited = new Set<string>();\n    let minPath\
    \ = [];\n    let minSum = Infinity;\n    let minPathSum = Infinity;\n    let dfs\
    \ = (i: number, j: number, path: number[], sum: number) => {\n        if (i <\
    \ 0 || i >= n || j < 0 || j >= m) {\n            return;\n        }\n        let\
    \ key = `${i}-${j}`;\n        if (visited.has(key)) {\n            return;\n \
    \       }\n        visited.add(key);\n        path.push(grid[i][j]);\n       \
    \ sum += grid[i][j];\n        if (path.length === k) {\n            if (sum <\
    \ minSum) {\n                minSum = sum;\n                minPath = path.slice();\n\
    \            } else if (sum === minSum) {\n                if (path.join('') <\
    \ minPath.join('')) {\n                    minPath = path.slice();\n         \
    \       }\n            }\n        } else {\n            dfs(i + 1, j, path, sum);\n\
    \            dfs(i - 1, j, path, sum);\n            dfs(i, j + 1, path, sum);\n\
    \            dfs(i, j - 1, path, sum);\n        }\n        path.pop();\n     \
    \   visited.delete(key);\n    }\n    for (let i = 0; i < n; i++) {\n        for\
    \ (let j = 0; j < m; j++) {\n            dfs(i, j, [], 0);\n        }\n    }\n\
    \    return minPath;\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]],\
    \ 5));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 3));\nconsole.log(minPath([[1, 2, 3],", "    const\
    \ n = grid.length;\n    const m = grid[0].length;\n    const visited = new Set<string>();\n\
    \    const queue = [[0, 0, grid[0][0]]];\n    const res = [];\n    while (queue.length)\
    \ {\n        const [i, j, sum] = queue.shift();\n        if (i === n - 1 && j\
    \ === m - 1) {\n            if (sum === k) {\n                res.push(grid[i][j]);\n\
    \            }\n            continue;\n        }\n        if (sum > k) {\n   \
    \         continue;\n        }\n        if (i + 1 < n && !visited.has(`${i + 1}\
    \ ${j}`)) {\n            queue.push([i + 1, j, sum + grid[i + 1][j]]);\n     \
    \       visited.add(`${i + 1} ${j}`);\n        }\n        if (j + 1 < m && !visited.has(`${i}\
    \ ${j + 1}`)) {\n            queue.push([i, j + 1, sum + grid[i][j + 1]]);\n \
    \           visited.add(`${i} ${j + 1}`);\n        }\n    }\n    return res;\n\
    }\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 12));", "  const n\
    \ = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][] = [];\n\
    \  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m;\
    \ j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n\
    \    for (let j = 0; j < m; j++) {\n      for (let l = 0; l < k; l++) {\n    \
    \    dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n      }\n    }\n  }\n  for (let i\
    \ = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0] = grid[i][j];\n\
    \    }\n  }\n  for (let l = 1; l < k; l++) {\n    for (let i = 0; i < n; i++)\
    \ {\n      for (let j = 0; j < m; j++) {\n        if (i > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n        }\n        if (i < n\
    \ - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n\
    \        }\n        if (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n        }\n        if (j < m - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n \
    \ }\n  let min = Number.MAX_SAFE_INTEGER;\n  let minI = -1;\n  let", "  const\
    \ n = grid.length;\n  const visited = new Set<string>();\n  const queue = [[0,\
    \ 0, grid[0][0]]];\n  let minPath: number[] = [];\n  let minSum = Infinity;\n\
    \  while (queue.length) {\n    const [i, j, sum] = queue.shift()!;\n    if (sum\
    \ > minSum) continue;\n    if (i === n - 1 && j === n - 1) {\n      if (sum <\
    \ minSum) {\n        minSum = sum;\n        minPath = [grid[i][j]];\n      } else\
    \ if (sum === minSum) {\n        minPath.push(grid[i][j]);\n      }\n      continue;\n\
    \    }\n    if (i > 0 && !visited.has(`${i - 1}-${j}`)) {\n      queue.push([i\
    \ - 1, j, sum + grid[i - 1][j]]);\n      visited.add(`${i - 1}-${j}`);\n    }\n\
    \    if (j > 0 && !visited.has(`${i}-${j - 1}`)) {\n      queue.push([i, j - 1,\
    \ sum + grid[i][j - 1]]);\n      visited.add(`${i}-${j - 1}`);\n    }\n    if\
    \ (i < n - 1 && !visited.has(`${i + 1}-${j}`)) {\n      queue.push([i + 1, j,\
    \ sum + grid[i + 1][j]]);\n      visited.add(`${i + 1}-${j}`);\n    }\n    if\
    \ (j < n - 1 && !visited.has(`${i}-${j + 1}`)) {\n      queue.push([i, j + 1,\
    \ sum + grid[i][j + 1]]);\n      visited.add(`${i}-${j + 1}`);\n    }\n  }\n \
    \ return minPath;\n}\n\nconsole.log(\n  minPath(\n    [\n      [1, 2, 3, 4],\n\
    \      [5, 6, 7, 8],\n      [", "    const n = grid.length;\n    const m = grid[0].length;\n\
    \    const dp: number[][][] = [];\n    for (let i = 0; i < n; i++) {\n       \
    \ dp[i] = [];\n        for (let j = 0; j < m; j++) {\n            dp[i][j] = [];\n\
    \        }\n    }\n    const queue: [number, number, number][] = [];\n    queue.push([0,\
    \ 0, 0]);\n    dp[0][0][0] = grid[0][0];\n    while (queue.length > 0) {\n   \
    \     const [i, j, l] = queue.shift()!;\n        if (l === k) {\n            return\
    \ dp[i][j].slice(0, l + 1);\n        }\n        for (const [di, dj] of [[0, 1],\
    \ [0, -1], [1, 0], [-1, 0]]) {\n            const ni = i + di;\n            const\
    \ nj = j + dj;\n            if (ni < 0 || ni >= n || nj < 0 || nj >= m) {\n  \
    \              continue;\n            }\n            const nl = l + 1;\n     \
    \       if (dp[ni][nj][nl] === undefined) {\n                dp[ni][nj][nl] =\
    \ dp[i][j][l] + grid[ni][nj];\n                queue.push([ni, nj, nl]);\n   \
    \         } else if (dp[ni][nj][nl] > dp[i][j][l] + grid[ni][nj]) {\n        \
    \        dp[ni][nj][nl] = dp[i][j][l] + grid[ni][nj];\n                queue.push([ni,\
    \ nj, nl]);\n            }\n        }\n    }\n    return [];\n}\n\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 4));", "  let n = grid.length;\n  let m = grid[0].length;\n\
    \  let min = Infinity;\n  let res: number[] = [];\n  let dirs = [\n    [0, 1],\n\
    \    [0, -1],\n    [1, 0],\n    [-1, 0],\n  ];\n  function dfs(i: number, j: number,\
    \ k: number, path: number[]) {\n    if (k === 0) {\n      if (path.length < min)\
    \ {\n        min = path.length;\n        res = path;\n      } else if (path.length\
    \ === min) {\n        for (let i = 0; i < path.length; i++) {\n          if (path[i]\
    \ < res[i]) {\n            res = path;\n            break;\n          } else if\
    \ (path[i] > res[i]) {\n            break;\n          }\n        }\n      }\n\
    \      return;\n    }\n    for (let dir of dirs) {\n      let x = i + dir[0];\n\
    \      let y = j + dir[1];\n      if (x < 0 || x >= n || y < 0 || y >= m) continue;\n\
    \      dfs(x, y, k - 1, [...path, grid[x][y]]);\n    }\n  }\n  for (let i = 0;\
    \ i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dfs(i, j, k, [grid[i][j]]);\n\
    \    }\n  }\n  return res;\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7,\
    \ 8, 9]], 2));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3));\n\
    console.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 5));\nconsole.log(minPath([[1", "  const n = grid.length;\n\
    \  const m = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0;\
    \ i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j]\
    \ = [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      for (let l = 0; l < k; l++) {\n        dp[i][j][l] = Infinity;\n\
    \      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l\
    \ < k; l++) {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m;\
    \ j++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (j < m - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Infinity;\n\
    \  let minI = -1;\n  let minJ = -1;\n  for (let i = 0; i < n", "  let minPath:\
    \ number[] = [];\n  let minSum = Infinity;\n  let minPathSum = Infinity;\n  let\
    \ minPaths: number[][] = [];\n  let minPathsSum: number[] = [];\n  let minPathsSumIndex\
    \ = 0;\n  let minPathsSumIndex2 = 0;\n  let minPathsSumIndex3 = 0;\n  let minPathsSumIndex4\
    \ = 0;\n  let minPathsSumIndex5 = 0;\n  let minPathsSumIndex6 = 0;\n  let minPathsSumIndex7\
    \ = 0;\n  let minPathsSumIndex8 = 0;\n  let minPathsSumIndex9 = 0;\n  let minPathsSumIndex10\
    \ = 0;\n  let minPathsSumIndex11 = 0;\n  let minPathsSumIndex12 = 0;\n  let minPathsSumIndex13\
    \ = 0;\n  let minPathsSumIndex14 = 0;\n  let minPathsSumIndex15 = 0;\n  let minPathsSumIndex16\
    \ = 0;\n  let minPathsSumIndex17 = 0;\n  let minPathsSumIndex18 = 0;\n  let minPathsSumIndex19\
    \ = 0;\n  let minPathsSumIndex20 = 0;\n  let minPathsSumIndex21 = 0;\n  let minPathsSumIndex22\
    \ = 0;\n  let minPathsSumIndex23 = 0;\n  let minPathsSumIndex24 = 0;\n  let minPathsSumIndex25\
    \ = 0;\n  let minPathsSumIndex26 = 0;\n  let minPathsSumIndex27 = 0;\n  let minPathsSumIndex28\
    \ = 0;\n  let minPathsSumIndex29 = 0;\n  let minPathsSumIndex30 = 0;\n  let minPathsSumIndex31\
    \ = 0;\n  let minPathsSumIndex32 = 0;\n  let minPathsSumIndex33 = 0;\n  let minPathsSumIndex34\
    \ = 0;\n  let minPathsSumIndex35 = 0;\n  let minPathsSumIndex36 = 0;\n  let minPathsSumIndex37\
    \ = 0;\n  let minPathsSumIndex38 = 0;\n  let minPath", "    const N = grid.length;\n\
    \    const visited = new Set<string>();\n    const queue = [[0, 0, grid[0][0]]];\n\
    \    let minPath = Infinity;\n    let minPathValues = [];\n    while (queue.length)\
    \ {\n        const [x, y, pathSum] = queue.shift();\n        if (x < 0 || x >=\
    \ N || y < 0 || y >= N) continue;\n        if (visited.has(`${x},${y}`)) continue;\n\
    \        if (pathSum > minPath) continue;\n        if (x === N - 1 && y === N\
    \ - 1) {\n            if (pathSum < minPath) {\n                minPath = pathSum;\n\
    \                minPathValues = [grid[x][y]];\n            } else if (pathSum\
    \ === minPath) {\n                minPathValues.push(grid[x][y]);\n          \
    \  }\n            continue;\n        }\n        visited.add(`${x},${y}`);\n  \
    \      queue.push([x - 1, y, pathSum + grid[x - 1][y]]);\n        queue.push([x\
    \ + 1, y, pathSum + grid[x + 1][y]]);\n        queue.push([x, y - 1, pathSum +\
    \ grid[x][y - 1]]);\n        queue.push([x, y + 1, pathSum + grid[x][y + 1]]);\n\
    \    }\n    return minPathValues;\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5,\
    \ 6], [7, 8, 9]], 5));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]],\
    \ 6));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 7));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 8));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 9));\nconsole.log(minPath([[", "    let N = grid.length;\n    let\
    \ visited = new Set<string>();\n    let minPath = [];\n    let minPathSum = Infinity;\n\
    \    let dirs = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    let dfs = (i: number,\
    \ j: number, path: number[], pathSum: number) => {\n        if (i < 0 || i >=\
    \ N || j < 0 || j >= N) return;\n        if (path.length === k) {\n          \
    \  if (pathSum < minPathSum) {\n                minPathSum = pathSum;\n      \
    \          minPath = path;\n            }\n            return;\n        }\n  \
    \      for (let dir of dirs) {\n            let x = i + dir[0];\n            let\
    \ y = j + dir[1];\n            if (x < 0 || x >= N || y < 0 || y >= N) continue;\n\
    \            let key = `${x},${y}`;\n            if (visited.has(key)) continue;\n\
    \            visited.add(key);\n            dfs(x, y, [...path, grid[x][y]], pathSum\
    \ + grid[x][y]);\n            visited.delete(key);\n        }\n    };\n    for\
    \ (let i = 0; i < N; i++) {\n        for (let j = 0; j < N; j++) {\n         \
    \   visited.add(`${i},${j}`);\n            dfs(i, j, [grid[i][j]], grid[i][j]);\n\
    \            visited.delete(`${i},${j}`);\n        }\n    }\n    return minPath;\n\
    }\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 4));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 5));\nconsole.log(minPath([[1, 2, 3], [4, 5,", "  const m = grid.length;\n\
    \  const n = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0;\
    \ i < m; i++) {\n    dp[i] = [];\n    for (let j = 0; j < n; j++) {\n      dp[i][j]\
    \ = [];\n    }\n  }\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j <\
    \ n; j++) {\n      for (let l = 0; l < k; l++) {\n        dp[i][j][l] = Infinity;\n\
    \      }\n    }\n  }\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j <\
    \ n; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l\
    \ < k; l++) {\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n;\
    \ j++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n        }\n        if (i < m - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (j < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Infinity;\n\
    \  let minI = -1;\n  let minJ = -1;\n  for (let i = 0; i < m", "    const n =\
    \ grid.length;\n    const m = grid[0].length;\n    const dp: number[][][] = [];\n\
    \    for (let i = 0; i < n; i++) {\n        dp[i] = [];\n        for (let j =\
    \ 0; j < m; j++) {\n            dp[i][j] = [];\n        }\n    }\n    for (let\
    \ i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            for\
    \ (let l = 0; l < k; l++) {\n                dp[i][j][l] = Infinity;\n       \
    \     }\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let\
    \ j = 0; j < m; j++) {\n            dp[i][j][0] = grid[i][j];\n        }\n   \
    \ }\n    for (let l = 1; l < k; l++) {\n        for (let i = 0; i < n; i++) {\n\
    \            for (let j = 0; j < m; j++) {\n                if (i > 0) {\n   \
    \                 dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n\
    \                }\n                if (i < n - 1) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n                }\n         \
    \       if (j > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j - 1][l - 1]);\n                }\n                if (j < m - 1) {\n\
    \                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n\
    \                }\n            }\n        }\n    }\n    let min = Infinity;\n\
    \    let minI = -1;\n    let minJ = -1;\n    for (let i = 0; i < n", "    const\
    \ n = grid.length;\n    const m = grid[0].length;\n    const dirs = [[-1, 0],\
    \ [1, 0], [0, -1], [0, 1]];\n    const visited = new Set<string>();\n    const\
    \ queue = [[0, 0, grid[0][0]]];\n    let minPath = [];\n    let minSum = Infinity;\n\
    \    while (queue.length) {\n        const [i, j, sum] = queue.shift();\n    \
    \    if (sum > minSum) continue;\n        if (i === n - 1 && j === m - 1 && sum\
    \ < minSum) {\n            minSum = sum;\n            minPath = [grid[i][j]];\n\
    \        }\n        for (const [di, dj] of dirs) {\n            const ni = i +\
    \ di;\n            const nj = j + dj;\n            if (ni < 0 || ni >= n || nj\
    \ < 0 || nj >= m) continue;\n            const key = `${ni}-${nj}`;\n        \
    \    if (visited.has(key)) continue;\n            visited.add(key);\n        \
    \    queue.push([ni, nj, sum + grid[ni][nj]]);\n        }\n    }\n    return minPath;\n\
    }\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 5));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 6));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 7));\n\
    console.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 9));\nconsole.log(minPath([[1, 2, 3], [4", " \
    \ const n = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][]\
    \ = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0;\
    \ j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  dp[0][0][0] = grid[0][0];\n\
    \  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for\
    \ (let l = 0; l < k; l++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l]\
    \ || Infinity, dp[i - 1][j][l - 1] + grid[i][j]);\n        }\n        if (j >\
    \ 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l] || Infinity, dp[i][j - 1][l\
    \ - 1] + grid[i][j]);\n        }\n      }\n    }\n  }\n  const res: number[] =\
    \ [];\n  let i = n - 1;\n  let j = m - 1;\n  for (let l = k - 1; l >= 0; l--)\
    \ {\n    res.push(grid[i][j]);\n    if (i > 0 && dp[i][j][l] === dp[i - 1][j][l\
    \ - 1] + grid[i][j]) {\n      i--;\n    } else {\n      j--;\n    }\n  }\n  return\
    \ res;\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 4));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 5));\nconsole.log(min", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0]\
    \ = grid[i][j];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j =\
    \ 0; j < m; j++) {\n      for (let l = 1; l < k; l++) {\n        let min = Infinity;\n\
    \        if (i > 0) {\n          min = Math.min(min, dp[i - 1][j][l - 1]);\n \
    \       }\n        if (i < n - 1) {\n          min = Math.min(min, dp[i + 1][j][l\
    \ - 1]);\n        }\n        if (j > 0) {\n          min = Math.min(min, dp[i][j\
    \ - 1][l - 1]);\n        }\n        if (j < m - 1) {\n          min = Math.min(min,\
    \ dp[i][j + 1][l - 1]);\n        }\n        dp[i][j][l] = min;\n      }\n    }\n\
    \  }\n  let min = Infinity;\n  let minI = 0;\n  let minJ = 0;\n  for (let i =\
    \ 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (dp[i][j][k -\
    \ 1] < min) {\n        min = dp[i][j][k - 1];\n        minI = i;\n        minJ\
    \ = j;\n      }\n    }\n  }\n  const res: number[] = [];\n  for (let i = k - 1;\
    \ i >= 0; i--) {\n    res.", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0]\
    \ = grid[i][j];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j =\
    \ 0; j < m; j++) {\n      for (let l = 1; l < k; l++) {\n        dp[i][j][l] =\
    \ Infinity;\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n        }\n        if (j > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n        }\n        if (i < n\
    \ - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n\
    \        }\n        if (j < m - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Infinity;\n\
    \  let minI = -1;\n  let minJ = -1;\n  for (let i = 0; i < n; i++) {\n    for\
    \ (let j = 0; j < m; j++) {\n      if (dp[i][j][k - 1] < min) {\n        min =\
    \ dp[i][j][k - 1];\n        minI", "  const n = grid.length;\n  const visited\
    \ = new Set<string>();\n  const queue = [[0, 0, [grid[0][0]]]];\n  while (queue.length)\
    \ {\n    const [i, j, path] = queue.shift()!;\n    if (path.length === k) return\
    \ path;\n    if (i > 0 && !visited.has(`${i - 1},${j}`)) {\n      queue.push([i\
    \ - 1, j, [...path, grid[i - 1][j]]]);\n      visited.add(`${i - 1},${j}`);\n\
    \    }\n    if (i < n - 1 && !visited.has(`${i + 1},${j}`)) {\n      queue.push([i\
    \ + 1, j, [...path, grid[i + 1][j]]]);\n      visited.add(`${i + 1},${j}`);\n\
    \    }\n    if (j > 0 && !visited.has(`${i},${j - 1}`)) {\n      queue.push([i,\
    \ j - 1, [...path, grid[i][j - 1]]]);\n      visited.add(`${i},${j - 1}`);\n \
    \   }\n    if (j < n - 1 && !visited.has(`${i},${j + 1}`)) {\n      queue.push([i,\
    \ j + 1, [...path, grid[i][j + 1]]]);\n      visited.add(`${i},${j + 1}`);\n \
    \   }\n    queue.sort((a, b) => {\n      for (let i = 0; i < k; i++) {\n     \
    \   if (a[2][i] < b[2][i]) return -1;\n        if (a[2][i] > b[2][i]) return 1;\n\
    \      }\n      return 0;\n    });\n  }\n  return [];\n}\n\nconsole.log(\n  minPath(\n\
    \    [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n      [9, 10, 11, 12],\n   \
    \   [13, 14, 15, 16", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let visited = new Set<number>();\n    let minPath = [];\n    let minSum =\
    \ Infinity;\n    let minPathSum = Infinity;\n    let minPaths = [];\n    let minPathsSum\
    \ = [];\n    let dirs = [[0, 1], [0, -1], [1, 0], [-1, 0]];\n    let dfs = (i:\
    \ number, j: number, path: number[], sum: number) => {\n        if (i < 0 || i\
    \ >= n || j < 0 || j >= m || visited.has(i * m + j)) {\n            return;\n\
    \        }\n        if (path.length === k) {\n            if (sum < minSum) {\n\
    \                minSum = sum;\n                minPath = path;\n            }\n\
    \            return;\n        }\n        visited.add(i * m + j);\n        for\
    \ (let dir of dirs) {\n            dfs(i + dir[0], j + dir[1], [...path, grid[i][j]],\
    \ sum + grid[i][j]);\n        }\n        visited.delete(i * m + j);\n    };\n\
    \    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n  \
    \          dfs(i, j, [], 0);\n        }\n    }\n    for (let i = 0; i < n; i++)\
    \ {\n        for (let j = 0; j < m; j++) {\n            visited = new Set<number>();\n\
    \            dfs(i, j, [], 0);\n            if (minPathSum === minSum) {\n   \
    \             minPaths.push(minPath);\n                minPathsSum.push(minSum);\n\
    \            } else if (minPathSum > minSum) {\n                minPaths = [minPath];\n\
    \                minPathsSum = [minSum];\n                minPathSum = minSum;\n\
    \            }\n        }\n    }\n    let minPathsStr = minPaths.map(path => path.join(''));\n\
    \    let minPathsStrSorted =", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i][j][0]\
    \ = grid[i][j];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j =\
    \ 0; j < m; j++) {\n      for (let l = 1; l < k; l++) {\n        dp[i][j][l] =\
    \ Infinity;\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n        }\n        if (j > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n        }\n        if (i < n\
    \ - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n\
    \        }\n        if (j < m - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Infinity;\n\
    \  let minI = 0;\n  let minJ = 0;\n  for (let i = 0; i < n; i++) {\n    for (let\
    \ j = 0; j < m; j++) {\n      if (dp[i][j][k - 1] < min) {\n        min = dp[i][j][k\
    \ - 1];\n        minI = i", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ dp[0][0][0] = grid[0][0];\n  for (let i = 0; i < n; i++) {\n    for (let j =\
    \ 0; j < m; j++) {\n      for (let l = 0; l < k; l++) {\n        if (i > 0) {\n\
    \          dp[i][j][l] = Math.min(dp[i][j][l] || Infinity, dp[i - 1][j][l - 1]\
    \ + grid[i][j]);\n        }\n        if (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l]\
    \ || Infinity, dp[i][j - 1][l - 1] + grid[i][j]);\n        }\n      }\n    }\n\
    \  }\n  const result: number[] = [];\n  let i = n - 1;\n  let j = m - 1;\n  let\
    \ l = k - 1;\n  while (l >= 0) {\n    result.push(grid[i][j]);\n    if (i > 0\
    \ && dp[i][j][l] === dp[i - 1][j][l - 1] + grid[i][j]) {\n      i--;\n    } else\
    \ {\n      j--;\n    }\n    l--;\n  }\n  return result.reverse();\n}\n\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 3));", "  const n = grid.length;\n  const m =\
    \ grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++)\
    \ {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n\
    \    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let i = 0; i < n; i++)\
    \ {\n    for (let j = 0; j < m; j++) {\n      for (let l = 1; l < k; l++) {\n\
    \        dp[i][j][l] = Infinity;\n        if (i > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (i < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n        }\n        if (j < m - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n \
    \ }\n  let min = Infinity;\n  let minI = -1;\n  let minJ = -1;\n  for (let i =\
    \ 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (dp[i][j][k -\
    \ 1] < min) {\n        min = dp[i][j][k - 1];\n        minI", "  const n = grid.length;\n\
    \  const m = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0;\
    \ i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j]\
    \ = [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      for (let l = 0; l < k; l++) {\n        dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n\
    \      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l\
    \ < k; l++) {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m;\
    \ j++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (j < m - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Number.MAX_SAFE_INTEGER;\n\
    \  let minI = -1;\n  let", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const visited = new Set<string>();\n  const queue = [[0, 0, 0, []]];\n  let\
    \ minPath = [];\n  while (queue.length > 0) {\n    const [i, j, pathLength, path]\
    \ = queue.shift();\n    if (pathLength > k) continue;\n    if (pathLength ===\
    \ k) {\n      if (minPath.length === 0 || path < minPath) {\n        minPath =\
    \ path;\n      }\n      continue;\n    }\n    if (i < 0 || i >= n || j < 0 ||\
    \ j >= m) continue;\n    const key = `${i},${j}`;\n    if (visited.has(key)) continue;\n\
    \    visited.add(key);\n    const newPath = [...path, grid[i][j]];\n    queue.push([i\
    \ + 1, j, pathLength + 1, newPath]);\n    queue.push([i - 1, j, pathLength + 1,\
    \ newPath]);\n    queue.push([i, j + 1, pathLength + 1, newPath]);\n    queue.push([i,\
    \ j - 1, pathLength + 1, newPath]);\n  }\n  return minPath;\n}\n\nconsole.log(\n\
    \  minPath(\n    [\n      [1, 2, 3],\n      [4, 5, 6],\n      [7, 8, 9],\n   \
    \ ],\n    5\n  )\n);", "  const n = grid.length;\n  const visited = new Set<string>();\n\
    \  const queue = [[0, 0, [grid[0][0]]]];\n  while (queue.length) {\n    const\
    \ [i, j, path] = queue.shift()!;\n    if (path.length === k) return path;\n  \
    \  if (i > 0 && !visited.has(`${i - 1}-${j}`)) {\n      queue.push([i - 1, j,\
    \ [...path, grid[i - 1][j]]]);\n      visited.add(`${i - 1}-${j}`);\n    }\n \
    \   if (i < n - 1 && !visited.has(`${i + 1}-${j}`)) {\n      queue.push([i + 1,\
    \ j, [...path, grid[i + 1][j]]]);\n      visited.add(`${i + 1}-${j}`);\n    }\n\
    \    if (j > 0 && !visited.has(`${i}-${j - 1}`)) {\n      queue.push([i, j - 1,\
    \ [...path, grid[i][j - 1]]]);\n      visited.add(`${i}-${j - 1}`);\n    }\n \
    \   if (j < n - 1 && !visited.has(`${i}-${j + 1}`)) {\n      queue.push([i, j\
    \ + 1, [...path, grid[i][j + 1]]]);\n      visited.add(`${i}-${j + 1}`);\n   \
    \ }\n    queue.sort((a, b) => {\n      const len = Math.min(a[2].length, b[2].length);\n\
    \      for (let i = 0; i < len; i++) {\n        if (a[2][i] !== b[2][i]) return\
    \ a[2][i] - b[2][i];\n      }\n      return a[2].length - b[2].length;\n    });\n\
    \  }\n  return [];\n}\n\nconsole.log(\n  minPath(\n    [\n      [1, 2, 3, 4],\n\
    \     ", "  let minPath: number[] = [];\n  let minSum = Infinity;\n  let minPathSum\
    \ = Infinity;\n  let minPaths: number[][] = [];\n  let minPathsSum: number[] =\
    \ [];\n  let path: number[] = [];\n  let pathSum = 0;\n  let paths: number[][]\
    \ = [];\n  let pathsSum: number[] = [];\n  let visited: boolean[][] = [];\n  let\
    \ rows = grid.length;\n  let cols = grid[0].length;\n  let dirs = [\n    [0, 1],\n\
    \    [0, -1],\n    [1, 0],\n    [-1, 0],\n  ];\n  for (let i = 0; i < rows; i++)\
    \ {\n    visited.push([]);\n    for (let j = 0; j < cols; j++) {\n      visited[i].push(false);\n\
    \    }\n  }\n  function dfs(i: number, j: number, k: number) {\n    if (k ===\
    \ 0) {\n      path.push(grid[i][j]);\n      pathSum += grid[i][j];\n      paths.push(path.slice());\n\
    \      pathsSum.push(pathSum);\n      if (pathSum < minPathSum) {\n        minPath\
    \ = path.slice();\n        minPathSum = pathSum;\n        minPaths = paths.slice();\n\
    \        minPathsSum = pathsSum.slice();\n      } else if (pathSum === minPathSum)\
    \ {\n        for (let i = 0; i < minPath.length; i++) {\n          if (path[i]\
    \ < minPath[i]) {\n            minPath = path.slice();\n            minPaths =\
    \ paths.slice();\n            minPathsSum = pathsSum.slice();\n            break;\n\
    \          } else if (path[i] > minPath[i]) {\n            break;\n          }\n\
    \        }\n      }\n      path.pop();\n      pathSum -= grid[i][j];\n      paths.pop();\n\
    \      pathsSum.pop();\n      return;\n    }\n    visited[i][j] = true;\n    path.push(grid[i][",
  "  let minPath = [];\n  let minPathSum = Infinity;\n  const n = grid.length;\n \
    \ const dfs = (row: number, col: number, path: number[], pathSum: number) => {\n\
    \    if (path.length === k) {\n      if (pathSum < minPathSum) {\n        minPathSum\
    \ = pathSum;\n        minPath = path;\n      }\n      return;\n    }\n    if (pathSum\
    \ > minPathSum) return;\n    if (row > 0) dfs(row - 1, col, [...path, grid[row\
    \ - 1][col]], pathSum + grid[row - 1][col]);\n    if (row < n - 1) dfs(row + 1,\
    \ col, [...path, grid[row + 1][col]], pathSum + grid[row + 1][col]);\n    if (col\
    \ > 0) dfs(row, col - 1, [...path, grid[row][col - 1]], pathSum + grid[row][col\
    \ - 1]);\n    if (col < n - 1) dfs(row, col + 1, [...path, grid[row][col + 1]],\
    \ pathSum + grid[row][col + 1]);\n  };\n  for (let i = 0; i < n; i++) {\n    for\
    \ (let j = 0; j < n; j++) {\n      dfs(i, j, [grid[i][j]], grid[i][j]);\n    }\n\
    \  }\n  return minPath;\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8,\
    \ 9]], 4)); // [1, 2, 4, 5]\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8,\
    \ 9]], 5)); // [1, 2, 3, 5, 6]\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7,\
    \ 8, 9]], 6)); // [1, 2, 3, 4, 5, 6]\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7,", "  const n = grid.length;\n  const visited = new Set<string>();\n  const\
    \ queue = [[0, 0, grid[0][0]]];\n  let minPath = [];\n  while (queue.length) {\n\
    \    const [i, j, pathSum] = queue.shift();\n    if (pathSum > k) continue;\n\
    \    if (pathSum === k) {\n      if (!minPath.length || pathSum < minPath.reduce((a,\
    \ b) => a + b, 0)) {\n        minPath = [grid[i][j]];\n      }\n      continue;\n\
    \    }\n    if (i + 1 < n && !visited.has(`${i + 1} ${j}`)) {\n      queue.push([i\
    \ + 1, j, pathSum + grid[i + 1][j]]);\n      visited.add(`${i + 1} ${j}`);\n \
    \   }\n    if (j + 1 < n && !visited.has(`${i} ${j + 1}`)) {\n      queue.push([i,\
    \ j + 1, pathSum + grid[i][j + 1]]);\n      visited.add(`${i} ${j + 1}`);\n  \
    \  }\n  }\n  return minPath;\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 12));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 11));\n\
    console.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 9));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 8));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 7));\n\
    console.log(minPath([[1, 2, 3], [4, 5, 6", "  const n = grid.length;\n  const\
    \ m = grid[0].length;\n  const seen = new Set<string>();\n  const queue = [[0,\
    \ 0, [grid[0][0]]]];\n  while (queue.length) {\n    const [i, j, path] = queue.shift()!;\n\
    \    if (path.length === k) {\n      return path;\n    }\n    if (i > 0 && !seen.has(`${i\
    \ - 1}-${j}`)) {\n      seen.add(`${i - 1}-${j}`);\n      queue.push([i - 1, j,\
    \ [...path, grid[i - 1][j]]]);\n    }\n    if (i < n - 1 && !seen.has(`${i + 1}-${j}`))\
    \ {\n      seen.add(`${i + 1}-${j}`);\n      queue.push([i + 1, j, [...path, grid[i\
    \ + 1][j]]]);\n    }\n    if (j > 0 && !seen.has(`${i}-${j - 1}`)) {\n      seen.add(`${i}-${j\
    \ - 1}`);\n      queue.push([i, j - 1, [...path, grid[i][j - 1]]]);\n    }\n \
    \   if (j < m - 1 && !seen.has(`${i}-${j + 1}`)) {\n      seen.add(`${i}-${j +\
    \ 1}`);\n      queue.push([i, j + 1, [...path, grid[i][j + 1]]]);\n    }\n  }\n\
    \  return [];\n}\n\nconsole.log(\n  minPath(\n    [\n      [1, 2, 3, 4],\n   \
    \   [5, 6, 7, 8],\n      [9, 10, 11, 12],\n      [13, 14, 15, 16],\n    ],\n \
    \   4\n  )\n);\nconsole.log(\n  minPath(\n    [\n      [1, 2, 3, 4],\n      [5,\
    \ 6, 7, 8],\n      [9, 10, 11, 12],\n", "    let n = grid.length;\n    let m =\
    \ grid[0].length;\n    let dp: number[][][] = [];\n    for (let i = 0; i < n;\
    \ i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++) {\n       \
    \     dp[i][j] = [];\n            for (let l = 0; l < k; l++) {\n            \
    \    dp[i][j][l] = Infinity;\n            }\n        }\n    }\n    dp[0][0][0]\
    \ = grid[0][0];\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j\
    \ < m; j++) {\n            for (let l = 0; l < k; l++) {\n                if (i\
    \ > 0) {\n                    dp[i][j][l] = Math.min(dp[i][j][l], dp[i - 1][j][l]\
    \ + grid[i][j]);\n                }\n                if (j > 0) {\n          \
    \          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l] + grid[i][j]);\n\
    \                }\n                if (l > 0) {\n                    dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j][l - 1] + grid[i][j]);\n                }\n\
    \            }\n        }\n    }\n    let res: number[] = [];\n    let cur = dp[n\
    \ - 1][m - 1][k - 1];\n    let i = n - 1;\n    let j = m - 1;\n    let l = k -\
    \ 1;\n    while (l >= 0) {\n        res.push(grid[i][j]);\n        if (i > 0 &&\
    \ dp[i - 1][j][l] + grid[i][j] === cur) {\n            i--;\n        } else if\
    \ (j > 0 && dp[i][j - 1][l] + grid[i][j] === cur) {\n            j--;\n       ",
  "    let result: number[] = [];\n    let min = Infinity;\n    let minPath: number[]\
    \ = [];\n    const dfs = (i: number, j: number, path: number[], sum: number) =>\
    \ {\n        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) {\n\
    \            return;\n        }\n        if (path.length === k) {\n          \
    \  if (sum < min) {\n                min = sum;\n                minPath = path;\n\
    \            }\n            return;\n        }\n        path.push(grid[i][j]);\n\
    \        dfs(i + 1, j, path.slice(), sum + grid[i][j]);\n        dfs(i - 1, j,\
    \ path.slice(), sum + grid[i][j]);\n        dfs(i, j + 1, path.slice(), sum +\
    \ grid[i][j]);\n        dfs(i, j - 1, path.slice(), sum + grid[i][j]);\n    };\n\
    \    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[0].length;\
    \ j++) {\n            dfs(i, j, [], 0);\n        }\n    }\n    return minPath;\n\
    }\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 5));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 6));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 7));\n\
    console.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 9));\nconsole.log(minPath([[1, 2, 3], [4,", " \
    \ const n = grid.length;\n  const visited = new Set<string>();\n  const queue\
    \ = [[0, 0, grid[0][0]]];\n  let minPath: number[] = [];\n  let minPathSum = Infinity;\n\
    \  while (queue.length) {\n    const [i, j, sum] = queue.shift()!;\n    if (i\
    \ === n - 1 && j === n - 1) {\n      if (sum < minPathSum) {\n        minPathSum\
    \ = sum;\n        minPath = [grid[i][j]];\n      } else if (sum === minPathSum)\
    \ {\n        minPath.push(grid[i][j]);\n      }\n      continue;\n    }\n    if\
    \ (sum > minPathSum) continue;\n    if (i > 0 && !visited.has(`${i - 1}-${j}`))\
    \ {\n      queue.push([i - 1, j, sum + grid[i - 1][j]]);\n      visited.add(`${i\
    \ - 1}-${j}`);\n    }\n    if (j > 0 && !visited.has(`${i}-${j - 1}`)) {\n   \
    \   queue.push([i, j - 1, sum + grid[i][j - 1]]);\n      visited.add(`${i}-${j\
    \ - 1}`);\n    }\n    if (i < n - 1 && !visited.has(`${i + 1}-${j}`)) {\n    \
    \  queue.push([i + 1, j, sum + grid[i + 1][j]]);\n      visited.add(`${i + 1}-${j}`);\n\
    \    }\n    if (j < n - 1 && !visited.has(`${i}-${j + 1}`)) {\n      queue.push([i,\
    \ j + 1, sum + grid[i][j + 1]]);\n      visited.add(`${i}-${j + 1}`);\n    }\n\
    \  }\n  return minPath;\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8,\
    \ 9]], 5)); //", "  const n = grid.length;\n  const m = grid[0].length;\n  const\
    \ dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n \
    \   for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n  dp[0][0][0]\
    \ = grid[0][0];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      for (let l = 0; l < k; l++) {\n        if (dp[i][j][l] === undefined)\
    \ {\n          continue;\n        }\n        if (i + 1 < n) {\n          if (dp[i\
    \ + 1][j][l + 1] === undefined) {\n            dp[i + 1][j][l + 1] = dp[i][j][l];\n\
    \          } else {\n            dp[i + 1][j][l + 1] = Math.min(dp[i + 1][j][l\
    \ + 1], dp[i][j][l]);\n          }\n        }\n        if (j + 1 < m) {\n    \
    \      if (dp[i][j + 1][l + 1] === undefined) {\n            dp[i][j + 1][l +\
    \ 1] = dp[i][j][l];\n          } else {\n            dp[i][j + 1][l + 1] = Math.min(dp[i][j\
    \ + 1][l + 1], dp[i][j][l]);\n          }\n        }\n      }\n    }\n  }\n  let\
    \ min = Infinity;\n  let minI = -1;\n  let minJ = -1;\n  for (let i = 0; i < n;\
    \ i++) {\n    for (let j = 0; j < m; j++) {\n      if (dp[i][j][k - 1] !== undefined\
    \ && dp[i][j][k - 1] < min) {\n        min = dp[i][j][k - 1];\n       ", "  const\
    \ n = grid.length;\n  const m = grid[0].length;\n  const dp: number[][][] = [];\n\
    \  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m;\
    \ j++) {\n      dp[i][j] = [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n\
    \    for (let j = 0; j < m; j++) {\n      for (let l = 0; l < k; l++) {\n    \
    \    dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n      }\n    }\n  }\n  dp[0][0][0]\
    \ = grid[0][0];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      for (let l = 0; l < k; l++) {\n        if (i > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i - 1][j][l] + grid[i][j]);\n        }\n        if\
    \ (j > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l] + grid[i][j]);\n\
    \        }\n        if (l > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j][l - 1] + grid[i][j]);\n        }\n      }\n    }\n  }\n  const result:\
    \ number[] = [];\n  let i = n - 1;\n  let j = m - 1;\n  let l = k - 1;\n  while\
    \ (l >= 0) {\n    result.push(grid[i][j]);\n    if (i > 0 && dp[i][j][l] === dp[i\
    \ - 1][j][l] + grid[i][j]) {\n      i--;\n    } else if", "    const n = grid.length;\n\
    \    const m = grid[0].length;\n    const visited = new Set<string>();\n    const\
    \ queue = [{\n        x: 0,\n        y: 0,\n        path: [grid[0][0]],\n    \
    \    length: 1,\n    }];\n    let minPath = null;\n    while (queue.length) {\n\
    \        const { x, y, path, length } = queue.shift();\n        if (length ===\
    \ k) {\n            if (!minPath || path.join('') < minPath.join('')) {\n    \
    \            minPath = path;\n            }\n            continue;\n        }\n\
    \        const key = `${x}-${y}`;\n        if (visited.has(key)) {\n         \
    \   continue;\n        }\n        visited.add(key);\n        if (x > 0) {\n  \
    \          queue.push({\n                x: x - 1,\n                y,\n     \
    \           path: [...path, grid[x - 1][y]],\n                length: length +\
    \ 1,\n            });\n        }\n        if (x < n - 1) {\n            queue.push({\n\
    \                x: x + 1,\n                y,\n                path: [...path,\
    \ grid[x + 1][y]],\n                length: length + 1,\n            });\n   \
    \     }\n        if (y > 0) {\n            queue.push({\n                x,\n\
    \                y: y - 1,\n                path: [...path, grid[x][y - 1]],\n\
    \                length: length + 1,\n            });\n        }\n        if (y\
    \ < m - 1) {\n            queue.push({\n                x,\n                y:\
    \ y + 1,\n                path: [...path, grid[x][y + 1]],\n                length:\
    \ length + 1,\n            });\n        }\n    }\n    return minPath;\n}\n\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 7));", "  const n = grid.length;\n  const m =\
    \ grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++)\
    \ {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n\
    \    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let i = 0; i < n; i++)\
    \ {\n    for (let j = 0; j < m; j++) {\n      for (let l = 1; l < k; l++) {\n\
    \        dp[i][j][l] = Infinity;\n        if (i > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i - 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (i < n - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i + 1][j][l - 1]);\n        }\n        if (j < m - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n \
    \ }\n  let min = Infinity;\n  let minI = 0;\n  let minJ = 0;\n  for (let i = 0;\
    \ i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (dp[i][j][k - 1]\
    \ < min) {\n        min = dp[i][j][k - 1];\n        minI = i", "  const n = grid.length;\n\
    \  const m = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0;\
    \ i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j]\
    \ = [];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let i = 0; i\
    \ < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for (let l = 1; l < k;\
    \ l++) {\n        const up = i > 0 ? dp[i - 1][j][l - 1] : Infinity;\n       \
    \ const left = j > 0 ? dp[i][j - 1][l - 1] : Infinity;\n        const down = i\
    \ < n - 1 ? dp[i + 1][j][l - 1] : Infinity;\n        const right = j < m - 1 ?\
    \ dp[i][j + 1][l - 1] : Infinity;\n        dp[i][j][l] = Math.min(up, left, down,\
    \ right);\n      }\n    }\n  }\n  let min = Infinity;\n  let minI = 0;\n  let\
    \ minJ = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      if (dp[i][j][k - 1] < min) {\n        min = dp[i][j][k - 1];\n    \
    \    minI = i;\n        minJ = j;\n      }\n    }\n  }\n  const res: number[]\
    \ = [];\n  res.push(grid[minI][minJ]);\n  for (let l = k - 1; l > 0; l--) {\n\
    \    const up = minI > 0 ? dp[minI - 1][minJ][l - 1] : Infinity", "  const n =\
    \ grid.length;\n  const m = grid[0].length;\n  const dp: number[][][] = [];\n\
    \  for (let i = 0; i < n; i++) {\n    dp[i] = [];\n    for (let j = 0; j < m;\
    \ j++) {\n      dp[i][j] = [];\n    }\n  }\n  dp[0][0][grid[0][0]] = 1;\n  for\
    \ (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for (let\
    \ l = 1; l <= k; l++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n        }\n        if (j > 0) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n        }\n      }\n    }\n \
    \ }\n  return dp[n - 1][m - 1];\n}\n", "  const n = grid.length;\n  const m =\
    \ grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++)\
    \ {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n\
    \    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++)\
    \ {\n      for (let l = 0; l < k; l++) {\n        dp[i][j][l] = Infinity;\n  \
    \    }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m;\
    \ j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l < k;\
    \ l++) {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m; j++)\
    \ {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i\
    \ - 1][j][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (j < m - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Infinity;\n\
    \  let minI = -1;\n  let minJ = -1;\n  for (let i = 0; i < n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let dp: number[][][] = [];\n    for (let i =\
    \ 0; i < n; i++) {\n        dp[i] = [];\n        for (let j = 0; j < m; j++) {\n\
    \            dp[i][j] = [];\n            for (let l = 0; l < k; l++) {\n     \
    \           dp[i][j][l] = Infinity;\n            }\n        }\n    }\n    for\
    \ (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n         \
    \   dp[i][j][0] = grid[i][j];\n        }\n    }\n    for (let l = 1; l < k; l++)\
    \ {\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < m;\
    \ j++) {\n                for (let di = -1; di <= 1; di++) {\n               \
    \     for (let dj = -1; dj <= 1; dj++) {\n                        if (di * di\
    \ + dj * dj === 1) {\n                            let ni = i + di;\n         \
    \                   let nj = j + dj;\n                            if (ni >= 0\
    \ && ni < n && nj >= 0 && nj < m) {\n                                dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[ni][nj][l - 1]);\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    let min = Infinity;\n    let minI = -1;\n    let\
    \ minJ = -1;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m;\
    \ j++) {\n            if (dp[i][j][k - 1] < min) {\n                min = dp[i][j][k\
    \ - 1];\n                minI = i;\n                minJ = j;\n            }\n\
    \        }\n    }\n    let res: number[] = [];\n    for (let l = k -", "    let\
    \ n = grid.length;\n    let m = grid[0].length;\n    let visited = new Array(n).fill(0).map(()\
    \ => new Array(m).fill(0));\n    let minPath = [];\n    let minSum = Infinity;\n\
    \    let minPathSum = Infinity;\n    function dfs(i: number, j: number, path:\
    \ number[], sum: number) {\n        if (visited[i][j]) return;\n        if (path.length\
    \ === k) {\n            if (sum < minSum) {\n                minSum = sum;\n \
    \               minPath = path;\n            }\n            return;\n        }\n\
    \        visited[i][j] = 1;\n        if (i > 0) dfs(i - 1, j, path.concat(grid[i\
    \ - 1][j]), sum + grid[i - 1][j]);\n        if (i < n - 1) dfs(i + 1, j, path.concat(grid[i\
    \ + 1][j]), sum + grid[i + 1][j]);\n        if (j > 0) dfs(i, j - 1, path.concat(grid[i][j\
    \ - 1]), sum + grid[i][j - 1]);\n        if (j < m - 1) dfs(i, j + 1, path.concat(grid[i][j\
    \ + 1]), sum + grid[i][j + 1]);\n        visited[i][j] = 0;\n    }\n    for (let\
    \ i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            dfs(i,\
    \ j, [grid[i][j]], grid[i][j]);\n        }\n    }\n    return minPath;\n}\n\n\
    console.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 5));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 6));\nconsole.log", "  let n = grid.length;\n  let m = grid[0].length;\n\
    \  let visited = new Set();\n  let queue = [[0, 0, grid[0][0]]];\n  let minPath\
    \ = [];\n  let minSum = Infinity;\n  while (queue.length) {\n    let [i, j, sum]\
    \ = queue.shift();\n    if (visited.has(`${i}${j}`)) continue;\n    visited.add(`${i}${j}`);\n\
    \    if (sum > minSum) continue;\n    if (sum > k) continue;\n    if (i === n\
    \ - 1 && j === m - 1) {\n      if (sum < minSum) {\n        minSum = sum;\n  \
    \      minPath = [grid[i][j]];\n      } else if (sum === minSum) {\n        minPath.push(grid[i][j]);\n\
    \      }\n      continue;\n    }\n    if (i + 1 < n) {\n      queue.push([i +\
    \ 1, j, sum + grid[i + 1][j]]);\n    }\n    if (j + 1 < m) {\n      queue.push([i,\
    \ j + 1, sum + grid[i][j + 1]]);\n    }\n  }\n  return minPath;\n}\n\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 12));", "  const n = grid.length;\n  const m =\
    \ grid[0].length;\n  const visited = new Set<string>();\n  const q = [[0, 0, 0,\
    \ []]];\n  let min = Infinity;\n  let minPath = [];\n  while (q.length) {\n  \
    \  const [i, j, len, path] = q.shift();\n    if (i < 0 || i >= n || j < 0 || j\
    \ >= m) continue;\n    if (visited.has(`${i},${j}`)) continue;\n    visited.add(`${i},${j}`);\n\
    \    path.push(grid[i][j]);\n    if (len === k) {\n      if (path.join('') < minPath.join(''))\
    \ {\n        minPath = path;\n      }\n      continue;\n    }\n    q.push([i -\
    \ 1, j, len + 1, [...path]]);\n    q.push([i + 1, j, len + 1, [...path]]);\n \
    \   q.push([i, j - 1, len + 1, [...path]]);\n    q.push([i, j + 1, len + 1, [...path]]);\n\
    \  }\n  return minPath;\n}\n\nconsole.log(\n  minPath(\n    [\n      [1, 2, 3],\n\
    \      [4, 5, 6],\n      [7, 8, 9],\n    ],\n    4\n  )\n);\n", "  const N = grid.length;\n\
    \  const M = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0;\
    \ i < N; i++) {\n    dp[i] = [];\n    for (let j = 0; j < M; j++) {\n      dp[i][j]\
    \ = [];\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j <\
    \ M; j++) {\n      if (i === 0 && j === 0) {\n        dp[i][j][0] = grid[i][j];\n\
    \      } else if (i === 0) {\n        dp[i][j][0] = dp[i][j - 1][0] + grid[i][j];\n\
    \      } else if (j === 0) {\n        dp[i][j][0] = dp[i - 1][j][0] + grid[i][j];\n\
    \      } else {\n        dp[i][j][0] = Math.min(dp[i - 1][j][0], dp[i][j - 1][0])\
    \ + grid[i][j];\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for\
    \ (let j = 0; j < M; j++) {\n      for (let l = 1; l < k; l++) {\n        if (i\
    \ === 0 && j === 0) {\n          dp[i][j][l] = grid[i][j];\n        } else if\
    \ (i === 0) {\n          dp[i][j][l] = Math.min(dp[i][j - 1][l], dp[i][j - 1][l\
    \ - 1] + grid[i][j]);\n        } else if (j === 0) {\n          dp[i][j][l] =\
    \ Math.min(dp[i - 1][j][l], dp[i - 1][j][l - 1] + grid[i][j]);\n        } else\
    \ {\n          dp[i][j][l] = Math.min(dp[i -", "  const n = grid.length;\n  const\
    \ m = grid[0].length;\n  const dp: number[][][] = [];\n  for (let i = 0; i < n;\
    \ i++) {\n    dp[i] = [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] =\
    \ [];\n    }\n  }\n  dp[0][0][0] = grid[0][0];\n  for (let i = 0; i < n; i++)\
    \ {\n    for (let j = 0; j < m; j++) {\n      for (let l = 0; l < k; l++) {\n\
    \        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l] || Infinity,\
    \ dp[i - 1][j][l - 1] + grid[i][j]);\n        }\n        if (j > 0) {\n      \
    \    dp[i][j][l] = Math.min(dp[i][j][l] || Infinity, dp[i][j - 1][l - 1] + grid[i][j]);\n\
    \        }\n      }\n    }\n  }\n  const ans: number[] = [];\n  let i = n - 1;\n\
    \  let j = m - 1;\n  let l = k - 1;\n  while (l >= 0) {\n    ans.push(grid[i][j]);\n\
    \    if (i > 0 && dp[i][j][l] === dp[i - 1][j][l - 1] + grid[i][j]) {\n      i--;\n\
    \    } else {\n      j--;\n    }\n    l--;\n  }\n  return ans.reverse();\n}\n\n\
    console.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3));\nconsole.log(minPath([[1,\
    \ 2, 3], [4, 5, 6], [7, 8, 9]], 4));\nconsole.log(minPath([[1, 2, 3], [4, 5, 6],\
    \ [7, 8, 9]], 5));", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      for\
    \ (let l = 0; l < k; l++) {\n        dp[i][j][l] = Number.MAX_SAFE_INTEGER;\n\
    \      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <\
    \ m; j++) {\n      dp[i][j][0] = grid[i][j];\n    }\n  }\n  for (let l = 1; l\
    \ < k; l++) {\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m;\
    \ j++) {\n        if (i > 0) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1]);\n        }\n        if (i < n - 1) {\n          dp[i][j][l]\
    \ = Math.min(dp[i][j][l], dp[i + 1][j][l - 1]);\n        }\n        if (j > 0)\
    \ {\n          dp[i][j][l] = Math.min(dp[i][j][l], dp[i][j - 1][l - 1]);\n   \
    \     }\n        if (j < m - 1) {\n          dp[i][j][l] = Math.min(dp[i][j][l],\
    \ dp[i][j + 1][l - 1]);\n        }\n      }\n    }\n  }\n  let min = Number.MAX_SAFE_INTEGER;\n\
    \  let minI = -1;\n  let", "  const n = grid.length;\n  const m = grid[0].length;\n\
    \  const dp: number[][][] = [];\n  for (let i = 0; i < n; i++) {\n    dp[i] =\
    \ [];\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = [];\n    }\n  }\n \
    \ dp[0][0][0] = grid[0][0];\n  for (let i = 0; i < n; i++) {\n    for (let j =\
    \ 0; j < m; j++) {\n      for (let l = 0; l < k; l++) {\n        if (dp[i][j][l]\
    \ === undefined) {\n          continue;\n        }\n        if (i + 1 < n) {\n\
    \          if (dp[i + 1][j][l + 1] === undefined) {\n            dp[i + 1][j][l\
    \ + 1] = dp[i][j][l];\n          } else {\n            dp[i + 1][j][l + 1] = Math.min(\n\
    \              dp[i + 1][j][l + 1],\n              dp[i][j][l]\n            );\n\
    \          }\n        }\n        if (j + 1 < m) {\n          if (dp[i][j + 1][l\
    \ + 1] === undefined) {\n            dp[i][j + 1][l + 1] = dp[i][j][l];\n    \
    \      } else {\n            dp[i][j + 1][l + 1] = Math.min(\n              dp[i][j\
    \ + 1][l + 1],\n              dp[i][j][l]\n            );\n          }\n     \
    \   }\n      }\n    }\n  }\n  let min = Infinity;\n  let minIndex = -1;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (dp[n - 1][m - 1][i] !== undefined) {\n  \
    \    if (dp[n - 1][m - 1][i] < min) {\n        min = dp[n - 1][m - 1][i];\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
