name: HumanEval_49_modp
language: ts
prompt: "//Return 2^n modulo p (be aware of numerics).\nfunction modp(n: number, p:\
  \ number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
  \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
  \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
  \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
completions: ["    let res = 1;\n    let a = 2;\n    while (n > 0) {\n        if (n\
    \ % 2 == 1) {\n            res = (res * a) % p;\n        }\n        a = (a * a)\
    \ % p;\n        n = Math.floor(n / 2);\n    }\n    return res;\n}\n", "    if\
    \ (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return\
    \ modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", " \
    \   if (n === 0) {\n        return 1;\n    }\n    if (n === 1) {\n        return\
    \ 2;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n\
    \    }\n    return (modp(n - 1, p) ** 2 * 2) % p;\n}\n", "    if (n === 0) {\n\
    \        return 1;\n    } else if (n % 2 === 0) {\n        return modp(n / 2,\
    \ p) ** 2 % p;\n    } else {\n        return 2 * modp(n - 1, p) % p;\n    }\n\
    }\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n\
    \        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2\
    \ % p;\n}\n", "    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0)\
    \ {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n", "    if (n === 0) {\n        return 1;\n  \
    \  } else if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    } else\
    \ {\n        return 2 * modp(n - 1, p) % p;\n    }\n}\n", "    if (n === 0) {\n\
    \        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2,\
    \ p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n ===\
    \ 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n\
    \ / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if\
    \ (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return\
    \ modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", " \
    \   if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n       \
    \ return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n\
    }\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n\
    \        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2\
    \ % p;\n}\n", "    let res = 1;\n    while (n > 0) {\n        if (n & 1) {\n \
    \           res = (res * 2) % p;\n        }\n        n >>= 1;\n        if (n >\
    \ 0) {\n            res = (res * res) % p;\n        }\n    }\n    return res;\n\
    }\n", "    if (n === 0) return 0;\n    if (n === 1) return 1;\n    if (n % 2 ===\
    \ 0) {\n        const t = modp(n / 2, p);\n        return (2 * t) % p;\n    }\n\
    \    return (2 * modp(n - 1, p)) % p;\n}\n", "    if (n === 0) {\n        return\
    \ 1;\n    }\n    if (n === 1) {\n        return 2;\n    }\n    if (n % 2 === 0)\
    \ {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return (modp(n - 1, p)\
    \ ** 2 * 2) % p;\n}\n", "  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 ===\
    \ 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * modp(n,\
    \ p) % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2\
    \ === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if\
    \ (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n", "  if (n === 0) {\n    return 1;\n  } else if\
    \ (n === 1) {\n    return 2;\n  } else if (n % 2 === 0) {\n    return modp(n /\
    \ 2, p) ** 2 % p;\n  } else {\n    return 2 * modp(n - 1, p) % p;\n  }\n}\n",
  "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return\
    \ modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", " \
    \   if (n == 0) {\n        return 1;\n    } else if (n % 2 == 0) {\n        const\
    \ t = modp(n / 2, p);\n        return (t * t) % p;\n    } else {\n        return\
    \ (2 * modp(n - 1, p)) % p;\n    }\n}\n", "    if (n == 0) {\n        return 1;\n\
    \    }\n    var r = modp(Math.floor(n / 2), p);\n    r = r * r % p;\n    if (n\
    \ % 2 == 1) {\n        r = r * 2 % p;\n    }\n    return r;\n}\n", "    if (n\
    \ === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n\
    \ / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "  if (n\
    \ == 0) {\n    return 1;\n  } else if (n % 2 == 0) {\n    let c = modp(n / 2,\
    \ p);\n    return (c * c) % p;\n  } else {\n    return (2 * modp(n - 1, p)) %\
    \ p;\n  }\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2\
    \ === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n", "    if (n === 0) {\n        return 1;\n  \
    \  }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n\
    \    return modp(n - 1, p) * modp(n, p) % p;\n}\n", "    if (n == 0) {\n     \
    \   return 1;\n    }\n    if (n % 2 == 0) {\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n\
    \        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2,\
    \ p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n ===\
    \ 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n\
    \ / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if\
    \ (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return\
    \ modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", " \
    \ if (p == 2) {\n    return n & 1;\n  }\n  if (n < p) {\n    return n;\n  }\n\
    \  if (n >= 2 * p) {\n    return modp(n, 2 * p) % p;\n  }\n  return (modp(n, p\
    \ / 2) * modp(2, p)) % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n\
    \    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n\
    \    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n", "  if (n == 0) return 1;\n  if (n == 1) return\
    \ 2;\n  if (n % 2 == 0) {\n    let t = modp(n / 2, p);\n    return (t * t) % p;\n\
    \  } else {\n    return (2 * modp(n - 1, p)) % p;\n  }\n}\n", "    if (n === 0)\
    \ {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n /\
    \ 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n\
    \ === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n\
    \ / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if\
    \ (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return\
    \ modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", " \
    \   if (n === 0) {\n        return 1;\n    } else if (n % 2 === 0) {\n       \
    \ return modp(n / 2, p) ** 2 % p;\n    } else {\n        return 2 * modp(n - 1,\
    \ p) % p;\n    }\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if\
    \ (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n\
    \    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n\
    \    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n", "  if (n == 0) {\n    return 1;\n  } else if\
    \ (n % 2 == 0) {\n    return modp(n / 2, p) ** 2 % p;\n  } else {\n    return\
    \ 2 * modp(n - 1, p) % p;\n  }\n}\n", "  if (n === 0) {\n    return 1;\n  } else\
    \ if (n % 2 === 0) {\n    return modp(n / 2, p) ** 2 % p;\n  } else {\n    return\
    \ 2 * modp(n - 1, p) % p;\n  }\n}\n", "    if (n === 0) {\n        return 1;\n\
    \    } else if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\
    \ else {\n        return 2 * modp(n - 1, p) % p;\n    }\n}\n", "  if (n === 0)\
    \ {\n    return 1;\n  } else if (n % 2 === 0) {\n    return modp(n / 2, p) **\
    \ 2 % p;\n  } else {\n    return modp(n - 1, p) * 2 % p;\n  }\n}\n", "    if (n\
    \ === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n\
    \ / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if\
    \ (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return\
    \ modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", " \
    \ if (n === 0) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return modp(n\
    \ / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * modp(n, p) % p;\n}\n", " \
    \   if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        return\
    \ modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n    return modp(n - 1, p) * modp(n,\
    \ p) % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2\
    \ === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n", "    if (n === 0) {\n        return 1;\n  \
    \  }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n\
    \    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n\
    \    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n == 0) {\n       \
    \ return 1;\n    }\n    if (n % 2 == 0) {\n        return modp(n / 2, p) * modp(n\
    \ / 2, p) % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n ===\
    \ 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n\
    \ / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * modp(n, p) % p;\n}\n",
  "    if (n == 0) {\n        return 1;\n    } else if (n == 1) {\n        return\
    \ 2;\n    } else {\n        let x = modp(n >> 1, p);\n        x = (x * x) % p;\n\
    \        if (n & 1) {\n            x = (x * 2) % p;\n        }\n        return\
    \ x;\n    }\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n %\
    \ 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n", "    if (n < 0) {\n        return modp(-n, p);\n   \
    \ }\n    if (n === 0) {\n        return 1;\n    }\n    if (n === 1) {\n      \
    \  return 2;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    return 2 * modp(n - 1, p) % p;\n}\n", "    if (n === 0) {\n\
    \        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2,\
    \ p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n ==\
    \ 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        return modp(n\
    \ / 2, p) * modp(n / 2, p) % p;\n    }\n    else {\n        return 2 * modp(n\
    \ - 1, p) % p;\n    }\n}\n", "    if (n === 0) {\n        return 1;\n    }\n \
    \   if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n\
    \    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n", "    if (n == 0) {\n        return 1;\n    }\n\
    \    if (n % 2 == 0) {\n        let t = modp(n / 2, p);\n        return (t * t)\
    \ % p;\n    }\n    return (2 * modp(n - 1, p)) % p;\n}\n", "    if (n === 0) {\n\
    \        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2,\
    \ p) ** 2 % p;\n    }\n    return modp(n - 1, p) * modp(n, p) % p;\n}\n", "  \
    \  if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return\
    \ modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", " \
    \   if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n       \
    \ return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n\
    }\n", "    if (n === 0) {\n        return 1;\n    } else if (n % 2 === 0) {\n\
    \        return modp(n / 2, p) ** 2 % p;\n    } else {\n        return 2 * modp(n\
    \ - 1, p) % p;\n    }\n}\n", "  if (n === 0) {\n    return 1;\n  }\n  if (n %\
    \ 2 === 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p)\
    \ * 2 % p;\n}\n", "  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n\
    \ % 2 === 0) {\n    const t = modp(n / 2, p);\n    return (2 * t) % p;\n  }\n\
    \  return (2 * modp(n - 1, p)) % p;\n}\n", "    if (n === 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n\
    \    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n      \
    \  return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n == 0) {\n\
    \        return 1;\n    } else if (n == 1) {\n        return 2;\n    } else {\n\
    \        let r = modp(n >> 1, p);\n        r = (r * r) % p;\n        if (n & 1)\
    \ {\n            r = (r * 2) % p;\n        }\n        return r;\n    }\n}\n",
  "  if (n === 0) {\n    return 1;\n  } else if (n % 2 === 0) {\n    return modp(n\
    \ / 2, p) ** 2 % p;\n  } else {\n    return modp(n - 1, p) * 2 % p;\n  }\n}\n",
  "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return\
    \ modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", " \
    \   if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n       \
    \ return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n\
    }\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n\
    \        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2\
    \ % p;\n}\n", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        let t\
    \ = modp(n / 2, p);\n        return (t * t) % p;\n    }\n    return (2 * modp(n\
    \ - 1, p)) % p;\n}\n", "    if (n == 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n  \
    \  return modp(n - 1, p) * modp(n, p) % p;\n}\n", "  if (n === 0) {\n    return\
    \ 1;\n  }\n  if (n % 2 === 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return\
    \ modp(n - 1, p) * modp(n, p) % p;\n}\n", "    if (n === 0) {\n        return\
    \ 1;\n    } else if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n\
    \    } else {\n        return 2 * modp(n - 1, p) % p;\n    }\n}\n", "    if (n\
    \ == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        return modp(n\
    \ / 2, p) * modp(n / 2, p) % p;\n    }\n    return modp(n - 1, p) * modp(n, p)\
    \ % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2 ===\
    \ 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1,\
    \ p) * 2 % p;\n}\n", "    if (n == 0) {\n        return 1;\n    }\n    if (n %\
    \ 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n\
    \    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n\
    \    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n\
    \    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n\
    \    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * modp(n, p) % p;\n}\n", "    if (n === 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n\
    \    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n      \
    \  return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n == 0) {\n\
    \        return 1;\n    }\n    if (n % 2 == 0) {\n        return modp(n / 2, p)\
    \ * modp(n / 2, p) % p;\n    }\n    return modp(n - 1, p) * modp(n, p) % p;\n\
    }\n", "  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return\
    \ modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * 2 % p;\n}\n", "   \
    \ if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return\
    \ modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", " \
    \ if (n == 0) {\n    return 1;\n  } else if (n % 2 == 0) {\n    return modp(n\
    \ / 2, p) ** 2 % p;\n  } else {\n    return modp(n - 1, p) * 2 % p;\n  }\n}\n",
  "    if (n === 0) {\n        return 1;\n    }\n    if (n === 1) {\n        return\
    \ 2;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n\
    \    }\n    return (modp(n - 1, p) ** 2 * 2) % p;\n}\n", "    if (n === 0) {\n\
    \        return 1;\n    } else if (n % 2 === 0) {\n        return modp(n / 2,\
    \ p) ** 2 % p;\n    } else {\n        return modp(n - 1, p) * 2 % p;\n    }\n\
    }\n", "    if (n === 0) {\n        return 1;\n    } else if (n % 2 === 0) {\n\
    \        return modp(n / 2, p) ** 2 % p;\n    } else {\n        return 2 * modp(n\
    \ - 1, p) % p;\n    }\n}\n", "    if (n === 0) {\n        return 1;\n    } else\
    \ if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    } else {\n\
    \        return 2 * modp(n - 1, p) % p;\n    }\n}\n", "    if (n === 0) {\n  \
    \      return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p)\
    \ ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n == 0)\
    \ {\n        return 1;\n    }\n    if (n == 1) {\n        return 2;\n    }\n \
    \   if (n % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n \
    \   }\n    return modp(n - 1, p) * modp(1, p) % p;\n}\n", "  if (n === 0) {\n\
    \    return 1;\n  }\n  if (n % 2 === 0) {\n    return modp(n / 2, p) ** 2 % p;\n\
    \  }\n  return modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n\
    \    }\n    return modp(n - 1, p) * modp(n, p) % p;\n}\n", "    if (n == 0) {\n\
    \        return 1;\n    }\n    if (n % 2 == 0) {\n        return modp(n / 2, p)\
    \ * modp(n / 2, p) % p;\n    }\n    return 2 * modp(n - 1, p) % p;\n}\n", "  \
    \  if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return\
    \ modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", " \
    \ if (n === 0) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return modp(n\
    \ / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * modp(n, p) % p;\n}\n", " \
    \   if (n == 0) {\n        return 1;\n    }\n    if (n == 1) {\n        return\
    \ 2;\n    }\n    let res = modp(n >> 1, p);\n    res = (res * res) % p;\n    if\
    \ (n & 1) {\n        res = (res * 2) % p;\n    }\n    return res;\n}\n", "   \
    \ if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return\
    \ modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", " \
    \   if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n       \
    \ return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n\
    }\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n\
    \        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2\
    \ % p;\n}\n", "    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0)\
    \ {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n    else {\n\
    \        return 2 * modp(n - 1, p) % p;\n    }\n}\n", "    if (n === 0) {\n  \
    \      return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p)\
    \ ** 2 % p;\n    }\n    return modp(n - 1, p) * modp(n, p) % p;\n}\n", "    let\
    \ result = 1;\n    let a = 2;\n    while (n > 0) {\n        if (n % 2 == 1) {\n\
    \            result = (result * a) % p;\n        }\n        n = Math.floor(n /\
    \ 2);\n        a = (a * a) % p;\n    }\n    return result;\n}\n", "    if (n ===\
    \ 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n\
    \ / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    let\
    \ res = 1;\n    let a = 2;\n    while (n > 0) {\n        if (n % 2 == 1) {\n \
    \           res = (res * a) % p;\n        }\n        a = (a * a) % p;\n      \
    \  n = Math.floor(n / 2);\n    }\n    return res;\n}\n", "    if (n == 0) {\n\
    \        return 1;\n    }\n    if (n % 2 == 0) {\n        return modp(n / 2, p)\
    \ * modp(n / 2, p) % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "  \
    \  if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        return\
    \ modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n    return modp(n - 1, p) * modp(n,\
    \ p) % p;\n}\n", "  if (n === 0) {\n    return 1;\n  } else if (n % 2 === 0) {\n\
    \    return modp(n / 2, p) ** 2 % p;\n  } else {\n    return modp(n - 1, p) *\
    \ 2 % p;\n  }\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n\
    \ % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n", "    if (n == 0) {\n        return 1;\n    }\n    if\
    \ (n % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n\
    \    return modp(n - 1, p) * modp(n, p) % p;\n}\n", "    if (n === 0) {\n    \
    \    return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    let res = 1;\n\
    \    for (let i = 0; i < n; i++) {\n        res = (res * 2) % p;\n    }\n    return\
    \ res;\n}\n", "    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0)\
    \ {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n", "  let res = 1;\n  while (n > 0) {\n    if (n & 1) res\
    \ = (res * 2) % p;\n    n >>= 1;\n  }\n  return res;\n}\n", "  if (n === 0) {\n\
    \    return 1;\n  }\n  if (n % 2 === 0) {\n    return modp(n / 2, p) ** 2 % p;\n\
    \  }\n  return modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n\
    \    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) return 0;\n\
    \    if (n === 1) return 1;\n    if (n % 2 === 0) {\n        const x = modp(n\
    \ / 2, p);\n        return (x * x) % p;\n    }\n    return (2 * modp(n - 1, p))\
    \ % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2 ===\
    \ 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1,\
    \ p) * modp(n, p) % p;\n}\n", "  if (n === 0) {\n    return 1;\n  }\n  if (n %\
    \ 2 === 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p)\
    \ * 2 % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    let res =\
    \ 1;\n    let x = 2;\n    let y = n;\n    while (y > 0) {\n        if (y % 2 ===\
    \ 1) {\n            res = (res * x) % p;\n        }\n        x = (x * x) % p;\n\
    \        y = Math.floor(y / 2);\n    }\n    return res;\n}\n", "    if (n == 0)\
    \ {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        return modp(n /\
    \ 2, p) * modp(n / 2, p) % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n",
  "  if (n === 0) {\n    return 1;\n  } else if (n === 1) {\n    return 2;\n  } else\
    \ if (n % 2 === 0) {\n    return modp(n / 2, p) ** 2 % p;\n  } else {\n    return\
    \ 2 * modp(n - 1, p) % p;\n  }\n}\n", "    if (n === 0) {\n        return 1;\n\
    \    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n\
    \    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n == 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2,\
    \ p) % p;\n    }\n    return modp(n - 1, p) * modp(n, p) % p;\n}\n", "  if (n\
    \ === 0) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return modp(n / 2, p)\
    \ ** 2 % p;\n  }\n  return modp(n - 1, p) * 2 % p;\n}\n", "    if (n == 0) {\n\
    \        return 1;\n    }\n    if (n % 2 == 0) {\n        return modp(n / 2, p)\
    \ * modp(n / 2, p) % p;\n    }\n    return modp(n - 1, p) * modp(n, p) % p;\n\
    }\n", "  if (n === 0) {\n    return 1;\n  } else if (n % 2 === 0) {\n    return\
    \ modp(n / 2, p) ** 2 % p;\n  } else {\n    return 2 * modp(n - 1, p) % p;\n \
    \ }\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0)\
    \ {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p)\
    \ * modp(n, p) % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n   \
    \ if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * modp(n, p) % p;\n}\n", "  if (n === 0) {\n    return 1;\n \
    \ }\n  if (n % 2 === 0) {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return\
    \ modp(n - 1, p) * modp(n, p) % p;\n}\n", "    if (n === 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n\
    \    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n      \
    \  return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n\
    \        return 1;\n    } else if (n % 2 === 0) {\n        return modp(n / 2,\
    \ p) ** 2 % p;\n    } else {\n        return modp(n - 1, p) * 2 % p;\n    }\n\
    }\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n\
    \        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2\
    \ % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2 ===\
    \ 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1,\
    \ p) * 2 % p;\n}\n", "  if (n === 0) {\n    return 1;\n  }\n  if (n % 2 === 0)\
    \ {\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return modp(n - 1, p) * 2 % p;\n\
    }\n", "  if (n === 0) return 1;\n  if (n % 2 === 0) {\n    let t = modp(n / 2,\
    \ p);\n    return (t * t) % p;\n  } else {\n    return (2 * modp(n - 1, p)) %\
    \ p;\n  }\n}\n", "    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 ==\
    \ 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n\
    \    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\
    \ else if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    } else\
    \ {\n        return modp(n - 1, p) * 2 % p;\n    }\n}\n", "    if (n == 0) {\n\
    \        return 1;\n    }\n    if (n % 2 == 0) {\n        return modp(n / 2, p)\
    \ * modp(n / 2, p) % p;\n    }\n    return modp(n - 1, p) * modp(n, p) % p;\n\
    }\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n\
    \        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2\
    \ % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2 ===\
    \ 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1,\
    \ p) * 2 % p;\n}\n", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n     \
    \   let t = modp(n / 2, p);\n        return (t * t) % p;\n    }\n    return (2\
    \ * modp(n - 1, p)) % p;\n}\n", "  if (n === 0) {\n    return 1;\n  } else if\
    \ (n % 2 === 0) {\n    return modp(n / 2, p) ** 2 % p;\n  } else {\n    return\
    \ modp(n - 1, p) * 2 % p;\n  }\n}\n", "    if (n == 0) {\n        return 1;\n\
    \    }\n    if (n % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p)\
    \ % p;\n    }\n    return modp(n - 1, p) * modp(n, p) % p;\n}\n", "    if (n ===\
    \ 0) {\n        return 1;\n    } else if (n === 1) {\n        return 2;\n    }\
    \ else if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    } else\
    \ {\n        return 2 * modp(n - 1, p) % p;\n    }\n}\n", "  if (n === 0) {\n\
    \    return 1;\n  }\n  if (n % 2 === 0) {\n    return modp(n / 2, p) ** 2 % p;\n\
    \  }\n  return modp(n - 1, p) * 2 % p;\n}\n", "    if (n == 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2,\
    \ p) % p;\n    }\n    return modp(n - 1, p) * modp(n, p) % p;\n}\n", "  if (n\
    \ === 0) {\n    return 1;\n  } else if (n === 1) {\n    return 2;\n  } else if\
    \ (n % 2 === 0) {\n    return modp(n / 2, p) ** 2 % p;\n  } else {\n    return\
    \ (modp(n - 1, p) * 2) % p;\n  }\n}\n", "    if (n == 0) return 1;\n    if (n\
    \ == 1) return 2;\n    if (n % 2 == 0) return modp(n / 2, p) * modp(n / 2, p)\
    \ % p;\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n      \
    \  return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    return 2 * modp(n - 1, p) % p;\n}\n", "    if (n === 0) {\n\
    \        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2,\
    \ p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "  if (n ===\
    \ 0) {\n    return 1;\n  } else if (n % 2 === 0) {\n    return modp(n / 2, p)\
    \ ** 2 % p;\n  } else {\n    return modp(n - 1, p) * 2 % p;\n  }\n}\n", "    if\
    \ (n == 0) {\n        return 1;\n    }\n    if (n == 1) {\n        return 2;\n\
    \    }\n    if (n % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p)\
    \ % p;\n    }\n    return modp(n - 1, p) * modp(1, p) % p;\n}\n", "    if (n ===\
    \ 0) {\n        return 1;\n    }\n    if (n === 1) {\n        return 2;\n    }\n\
    \    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ (modp(n - 1, p) ** 2 * 2) % p;\n}\n", "    if (n === 0) {\n        return 1;\n\
    \    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n\
    \    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n\
    \    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n      \
    \  return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "  if (n === 0) {\n\
    \    return 1;\n  }\n  if (n % 2 === 0) {\n    return modp(n / 2, p) ** 2 % p;\n\
    \  }\n  return modp(n - 1, p) * modp(n, p) % p;\n}\n", "    if (n === 0) {\n \
    \       return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p)\
    \ ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n == 0)\
    \ {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        let x = modp(n /\
    \ 2, p);\n        return (x * x) % p;\n    }\n    else {\n        return (2 *\
    \ modp(n - 1, p)) % p;\n    }\n}\n", "    if (n === 0) {\n        return 1;\n\
    \    }\n    let res = 1;\n    let b = 2;\n    while (n > 0) {\n        if (n %\
    \ 2 === 1) {\n            res = (res * b) % p;\n        }\n        n = Math.floor(n\
    \ / 2);\n        b = (b * b) % p;\n    }\n    return res;\n}\n", "    if (n ===\
    \ 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n\
    \ / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if\
    \ (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return\
    \ modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", " \
    \   if (n == 0) {\n        return 1;\n    }\n    let res = 1;\n    let a = 2;\n\
    \    while (n > 0) {\n        if (n % 2 == 1) {\n            res = (res * a) %\
    \ p;\n        }\n        a = (a * a) % p;\n        n = Math.floor(n / 2);\n  \
    \  }\n    return res;\n}\n", "  if (n == 0) return 1;\n  if (n % 2 == 0) return\
    \ modp(n / 2, p) ** 2 % p;\n  return modp(n - 1, p) * 2 % p;\n}\n", "  if (n ===\
    \ 0) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return modp(n / 2, p) **\
    \ 2 % p;\n  }\n  return modp(n - 1, p) * modp(n, p) % p;\n}\n", "  if (n === 0)\
    \ {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return modp(n / 2, p) ** 2\
    \ % p;\n  }\n  return modp(n - 1, p) * modp(n, p) % p;\n}\n", "    if (n === 0)\
    \ {\n        return 1;\n    } else if (n % 2 === 0) {\n        return modp(n /\
    \ 2, p) ** 2 % p;\n    } else {\n        return 2 * modp(n - 1, p) % p;\n    }\n\
    }\n", "    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n  \
    \      return sqrmod(modp(n / 2, p), p) % p;\n    }\n    return (modp(n - 1, p)\
    \ * 2) % p;\n}\n", "    if (n == 0) {\n        return 1;\n    }\n    if (n % 2\
    \ == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n    return\
    \ modp(n - 1, p) * modp(n, p) % p;\n}\n", "    if (n === 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n\
    \    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n == 0) {\n       \
    \ return 1;\n    }\n    if (n % 2 == 0) {\n        return modp(n / 2, p) * modp(n\
    \ / 2, p) % p;\n    }\n    return modp(n - 1, p) * modp(n, p) % p;\n}\n", "  \
    \  if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        return\
    \ modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n    return modp(n - 1, p) * modp(n,\
    \ p) % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2\
    \ === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if\
    \ (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n\
    \    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n\
    \    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * modp(n, p) % p;\n}\n", "    if (n === 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n\
    \    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) return 0;\n\
    \    if (n === 1) return 1;\n    if (n % 2 === 0) {\n        const t = modp(n\
    \ / 2, p);\n        return (2 * t) % p;\n    }\n    return (2 * modp(n - 1, p))\
    \ % p;\n}\n", "    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0)\
    \ {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n    return modp(n\
    \ - 1, p) * modp(n, p) % p;\n}\n", "    if (n === 0) {\n        return 1;\n  \
    \  }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n\
    \    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return\
    \ 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n\
    \    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "  if (n < 0) {\n    return\
    \ modp(p - (-n % p), p);\n  }\n  let result = 1;\n  let x = 2;\n  let power =\
    \ n;\n  while (power > 0) {\n    const bit = power % 2;\n    if (bit === 1) {\n\
    \      result = (result * x) % p;\n    }\n    x = (x * x) % p;\n    power = power\
    \ >> 1;\n  }\n  return result;\n}\n", "    if (n == 0) {\n        return 1;\n\
    \    }\n    if (n % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p)\
    \ % p;\n    }\n    return modp(n - 1, p) * modp(n, p) % p;\n}\n", "    if (n ==\
    \ 0) {\n        return 1;\n    }\n    if (n == 1) {\n        return 2;\n    }\n\
    \    if (n % 2 == 0) {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n\
    \    }\n    return modp(n - 1, p) * modp(1, p) % p;\n}\n", "    if (n === 0) {\n\
    \        return 1;\n    }\n    if (n % 2 === 0) {\n        return modp(n / 2,\
    \ p) ** 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n", "    if (n ==\
    \ 0) {\n        return 1;\n    }\n    else if (n == 1) {\n        return 2;\n\
    \    }\n    else {\n        let a = modp(Math.floor(n / 2), p);\n        a = (a\
    \ * a) % p;\n        if (n % 2 == 0) {\n            return a;\n        }\n   \
    \     else {\n            return (a * 2) % p;\n        }\n    }\n}\n", "    if\
    \ (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n        return\
    \ modp(n / 2, p) ** 2 % p;\n    }\n    return modp(n - 1, p) * modp(n, p) % p;\n\
    }\n", "    if (n === 0) {\n        return 1;\n    }\n    if (n % 2 === 0) {\n\
    \        return modp(n / 2, p) ** 2 % p;\n    }\n    return 2 * modp(n - 1, p)\
    \ % p;\n}\n", "    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0)\
    \ {\n        return modp(n / 2, p) * modp(n / 2, p) % p;\n    }\n    return modp(n\
    \ - 1, p) * 2 % p;\n}\n", "    if (n === 0) {\n        return 1;\n    }\n    if\
    \ (n % 2 === 0) {\n        return modp(n / 2, p) ** 2 % p;\n    }\n    return\
    \ modp(n - 1, p) * 2 % p;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
