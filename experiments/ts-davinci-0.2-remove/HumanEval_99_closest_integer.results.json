{
  "language": "ts",
  "name": "HumanEval_99_closest_integer",
  "results": [
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n14\n-14\n15\n-15\n14\n-14\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor < ceil - num) {\n    return floor;\n  } else {\n    return ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp1i23tfgr.js:28:12)\n    at Object.<anonymous> (/tmp/tmp1i23tfgr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  let diffFloor = Math.abs(num - floor);\n  let diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpf1g6t824.js:25:12)\n    at Object.<anonymous> (/tmp/tmpf1g6t824.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpi_tc3t6n.js:30:12)\n    at Object.<anonymous> (/tmp/tmpi_tc3t6n.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n-14\n-14\n-15\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const decimal = num - Math.floor(num);\n  if (decimal < 0.5) {\n    return Math.floor(num);\n  } else {\n    return Math.ceil(num);\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmppsdyvx9n.js:27:12)\n    at Object.<anonymous> (/tmp/tmppsdyvx9n.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  let num1 = Math.ceil(num);\n  let num2 = Math.floor(num);\n  if (num - num2 < num1 - num) {\n    return num2;\n  } else {\n    return num1;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpvp6vtnep.js:28:12)\n    at Object.<anonymous> (/tmp/tmpvp6vtnep.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334000
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.99\"));\nconsole.log(closest_integer(\"-14.9999\"));\nconsole.log(closest_integer(\"-14.999999\"));\nconsole.log(closest_integer(\"-14.99999999\"));\nconsole.log(closest_integer(\"-14.9999999999\"));\nconsole.log(closest_integer(\"-14.999999999999\"));\nconsole.log(closest_integer(\"-14.99999999999999\"));\nconsole.log(closest_integer(\"-14.9999999999999999\"));\nconsole.log(closest_integer(\"-14.999999999999999999\"));\nconsole.log(closest_integer(\"-14.99999999999999999999\"));\nconsole.log(closest_integer(\"-14.9999999999999999999999\"));\nconsole.log(closest_integer(\"-14.999999999999999999999999\"));\nconsole.log(closest_integer(\"-14.99999999999999999999999999\"));\nconsole.log(closest_integer(\"-14.9999999999999999999999999999\"));\nconsole.log(closest_integer(\"-14.999999999999999999999999999999\"));\nconsole.log(closest_integer(\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpv3eyk6du.ts(41,30): error TS1002: Unterminated string literal.\n../../../../tmp/tmpv3eyk6du.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpv3eyk6du.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpfr2mvajt.js:27:12)\n    at Object.<anonymous> (/tmp/tmpfr2mvajt.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const ceil = Math.ceil(num);\n  const floor = Math.floor(num);\n  const diffCeil = ceil - num;\n  const diffFloor = num - floor;\n  return diffCeil < diffFloor ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmpw3yf9s8o.js:32:12)\n    at Object.<anonymous> (/tmp/tmpw3yf9s8o.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n-14\n-15\n-14\n-14\n-15\n14\n14\n15\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const numFloor = Math.floor(num);\n  const numCeil = Math.ceil(num);\n  const numFloorDiff = Math.abs(num - numFloor);\n  const numCeilDiff = Math.abs(num - numCeil);\n  return numFloorDiff > numCeilDiff ? numCeil : numFloor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.99\"));\nconsole.log(closest_integer(\"-14.99999\"));\nconsole.log(closest_integer(\"-14.999999\"));\nconsole.log(closest_integer(\"-14.9999999\"));\nconsole.log(closest_integer(\"-14.99999999\"));\nconsole.log(closest_integer(\"-14.999999999\"));\nconsole.log(closest_integer(\"-14.9999999999\"));\nconsole.log(closest_integer(\"-14.99999999999\"));\nconsole.log(closest_integer(\"-14.999999999999\"));\nconsole.log(closest_integer(\"-14.9999999999999\"));\nconsole.log(closest_integer(\"-14.99999999999999\"));\nconsole.log(closest_integer(\"-14.999999999999999\"));\nconsole.log(closest_integer(\"-14.9999999999999999\"));\nconsole.log(closest_integer(\"-14.99999999999999999\"));\nconsole.log(closest_integer(\"-14.999999999999999999\"));\nconsole.log(cl\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpljgc0hr3.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpljgc0hr3.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334000
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpoza6srpo.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoza6srpo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpi7usqfg_.js:29:12)\n    at Object.<anonymous> (/tmp/tmpi7usqfg_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff = num - floor;\n  if (diff === 0.5) {\n    return num > 0 ? ceil : floor;\n  }\n  return diff > 0.5 ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor < diffCeil) {\n    return floor;\n  } else if (diffFloor > diffCeil) {\n    return ceil;\n  } else {\n    return num < 0 ? floor : ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"14.9\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn6o589da.ts(47,33): error TS1002: Unterminated string literal.\n../../../../tmp/tmpn6o589da.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpn6o589da.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"14.2\"));\nconsole.log(closest_integer(\"14.3\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"14.7\"));\nconsole.log(closest_integer(\"14.8\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n-14\n-14\n-14\n-14\n-15\n-15\n-15\n-15\n-15\n14\n14\n14\n14\n14\n15\n15\n15\n15\n15\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  if (num - floor < ceil - num) {\n    return floor;\n  } else {\n    return ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp7d_svtvk.js:28:12)\n    at Object.<anonymous> (/tmp/tmp7d_svtvk.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"14.2\"));\nconsole.log(closest_integer(\"14.3\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"14.7\"));\nconsole.log(closest_integer(\"14.8\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-15\n-14\n-14\n-14\n-14\n-14\n-14\n-15\n-15\n-15\n-15\n-15\n14\n14\n14\n14\n14\n15\n15\n15\n15\n15\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp3srmauk0.js:25:12)\n    at Object.<anonymous> (/tmp/tmp3srmauk0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.10\"));\nconsole.log(closest_integer(\"-14.11\"));\nconsole.log(closest_integer(\"-14.12\"));\nconsole.log(closest_integer(\"-14.13\"));\nconsole.log(closest_integer(\"-14.14\"));\nconsole.log(closest_integer(\"-14.15\"));\nconsole.log(closest_integer(\"-14.16\"));\nconsole.log(closest_integer(\"-14.17\"));\nconsole.log(closest_integer(\"-14.18\"));\nconsole.log(clos\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp_79_q8gx.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp_79_q8gx.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334000
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const num1 = Math.ceil(num);\n  const num2 = Math.floor(num);\n  if (num1 - num === 0.5) {\n    return num1;\n  } else if (num - num2 === 0.5) {\n    return num2;\n  } else if (num1 - num < 0.5) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp9h1mvt1y.js:38:12)\n    at Object.<anonymous> (/tmp/tmp9h1mvt1y.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n-14\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpu9tron25.js:49:12)\n    at Object.<anonymous> (/tmp/tmpu9tron25.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n-14\n-14\n-14\n-14\n-14\n-14\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n-15\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpke2ohvl4.js:49:12)\n    at Object.<anonymous> (/tmp/tmpke2ohvl4.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n15\n-15\n14\n-14\n-15\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"14.2\"));\nconsole.log(closest_integer(\"14.3\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"14.7\"));\nconsole.log(closest_integer(\"14.8\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n-14\n-14\n-14\n-14\n-15\n-15\n-15\n-15\n-15\n14\n14\n14\n14\n14\n15\n15\n15\n15\n15\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp2rudwe78.js:21:12)\n    at Object.<anonymous> (/tmp/tmp2rudwe78.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  let num1 = Math.ceil(num);\n  let num2 = Math.floor(num);\n  if (num - num2 > num1 - num) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmpi9m_0bfw.js:27:12)\n    at Object.<anonymous> (/tmp/tmpi9m_0bfw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor === 0.5) {\n    return num > 0 ? ceil : floor;\n  }\n  return num - floor < ceil - num ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const decimal = num - Math.floor(num);\n  if (decimal === 0.5) {\n    return num > 0 ? Math.ceil(num) : Math.floor(num);\n  }\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-15\n-14\n-14\n14\n14\n15\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpoza6srpo.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoza6srpo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpba0kxzkw.js:25:12)\n    at Object.<anonymous> (/tmp/tmpba0kxzkw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgxtt_8lq.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpgxtt_8lq.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor < ceil - num) {\n    return floor;\n  } else {\n    return ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpit6g93rl.ts(47,34): error TS1002: Unterminated string literal.\n../../../../tmp/tmpit6g93rl.ts(48,1): error TS1005: ',' expected.\n../../../../tmp/tmpit6g93rl.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor === 0.5) {\n    return num > 0 ? ceil : floor;\n  }\n  return num - floor < ceil - num ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpoza6srpo.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoza6srpo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp3srmauk0.js:25:12)\n    at Object.<anonymous> (/tmp/tmp3srmauk0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0 ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpa2qhta86.js:33:12)\n    at Object.<anonymous> (/tmp/tmpa2qhta86.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n-14\n-14\n-15\n14\n14\n15\n",
      "timestamp": 1660334005
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0 ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp7p7lf4jx.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp7p7lf4jx.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n    let num = parseFloat(value);\n    let num1 = Math.ceil(num);\n    let num2 = Math.floor(num);\n    if (num1 - num > 0.5) {\n        return num2;\n    } else {\n        return num1;\n    }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpwjonkdpy.js:28:12)\n    at Object.<anonymous> (/tmp/tmpwjonkdpy.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq3hlks8m.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpq3hlks8m.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  let diff1 = Math.abs(num - floor);\n  let diff2 = Math.abs(num - ceil);\n  return diff1 > diff2 ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmpu30lbdfl.js:26:12)\n    at Object.<anonymous> (/tmp/tmpu30lbdfl.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n-14\n15\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"14.3\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.9\"));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-15\n15\n-14\n14\n-14\n14\n-14\n14\n-14\n14\n-14\n14\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  if (num - Math.floor(num) === 0.5) {\n    return num > 0 ? Math.ceil(num) : Math.floor(num);\n  }\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n14\n15\n-15\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp3srmauk0.js:25:12)\n    at Object.<anonymous> (/tmp/tmp3srmauk0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  let num1 = Math.ceil(num);\n  let num2 = Math.floor(num);\n  if (num - num2 > num1 - num) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmpi9m_0bfw.js:27:12)\n    at Object.<anonymous> (/tmp/tmpi9m_0bfw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num - ceil);\n  if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  }\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n",
      "timestamp": 1660334005
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor > diffCeil ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmph678xxyu.js:28:12)\n    at Object.<anonymous> (/tmp/tmph678xxyu.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334005
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff = num - floor;\n  return diff < 0.5 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp_cl8dlq3.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_cl8dlq3.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n-14\n-14\n-15\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpw5rrj7y6.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw5rrj7y6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-15.0\"));\nconsole.log(closest_integer(\"15.0\"));\nconsole.log(closest_integer(\"-15.1\"));\nconsole.log(closest_integer(\"15.1\"));\nconsole.log(closest_integer(\"-15.5\"));\nconsole.log(closest_integer(\"15.5\"));\nconsole.log(closest_integer(\"-15.9\"));\nconsole.log(closest_integer(\"15.9\"));\nconsole.log(closest_integer(\"-16.0\"));\nconsole.log(closest_integer(\"16.0\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpicnm3lu5.js:41:12)\n    at Object.<anonymous> (/tmp/tmpicnm3lu5.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n14\n-15\n15\n-14\n14\n-15\n15\n-15\n15\n-15\n16\n-16\n16\n-16\n16\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp_w2c1g32.js:30:12)\n    at Object.<anonymous> (/tmp/tmp_w2c1g32.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n-14\n-14\n-15\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp3srmauk0.js:25:12)\n    at Object.<anonymous> (/tmp/tmp3srmauk0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const floorDiff = Math.abs(num - floor);\n  const ceilDiff = Math.abs(num - ceil);\n  return floorDiff < ceilDiff ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(cl\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp868l42s9.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp868l42s9.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334007
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8th9wz33.ts(44,35): error TS1002: Unterminated string literal.\n../../../../tmp/tmp8th9wz33.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp8th9wz33.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334007
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num - ceil);\n  return diff1 > diff2 ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmpy4f61l4_.js:24:12)\n    at Object.<anonymous> (/tmp/tmpy4f61l4_.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  return num - floor >= ceil - num ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp2y4q2cj7.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2y4q2cj7.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor === 0.5) {\n    return num > 0 ? ceil : floor;\n  }\n  return num - floor < ceil - num ? floor : ceil;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"14.9\"));\nconsole.log(closest_integer(\"14.8\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp4ukge6vv.js:35:12)\n    at Object.<anonymous> (/tmp/tmp4ukge6vv.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n-14\n-14\n-15\n-15\n14\n14\n15\n15\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num - ceil);\n  if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  }\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\")\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp28ng2d_p.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp28ng2d_p.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n14\n-14\n15\n-15\n-15\n-14\n-15\n-15\n-14\n-15\n",
      "timestamp": 1660334007
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp3srmauk0.js:25:12)\n    at Object.<anonymous> (/tmp/tmp3srmauk0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  let diff1 = Math.abs(num - floor);\n  let diff2 = Math.abs(num - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp5lvmlt_v.js:25:12)\n    at Object.<anonymous> (/tmp/tmp5lvmlt_v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"14.2\"));\nconsole.log(closest_integer(\"14.3\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"14.7\"));\nconsole.log(closest_integer(\"14.8\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n-14\n-14\n-14\n-14\n-15\n-15\n-15\n-15\n-15\n14\n14\n14\n14\n14\n15\n15\n15\n15\n15\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkv1zzkpl.ts(44,35): error TS1002: Unterminated string literal.\n../../../../tmp/tmpkv1zzkpl.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmpkv1zzkpl.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  return num - floor > ceil - num ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmpdrijfd68.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdrijfd68.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  let diffFloor = Math.abs(num - floor);\n  let diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpl3qeaqm3.js:29:12)\n    at Object.<anonymous> (/tmp/tmpl3qeaqm3.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n14\n-15\n15\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp5uvt49y6.js:27:12)\n    at Object.<anonymous> (/tmp/tmp5uvt49y6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpoza6srpo.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoza6srpo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpnnz4jobw.js:27:12)\n    at Object.<anonymous> (/tmp/tmpnnz4jobw.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n14\n-14\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  let diff1 = Math.abs(num - floor);\n  let diff2 = Math.abs(num - ceil);\n  if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  } else {\n    return diff1 < diff2 ? floor : ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpatz_kk2s.ts(48,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff = num - floor;\n  if (diff === 0.5) {\n    return num > 0 ? ceil : floor;\n  }\n  return diff > 0.5 ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n-14\n-15\n14\n14\n15\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpoza6srpo.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoza6srpo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  let num1 = Math.ceil(num);\n  let num2 = Math.floor(num);\n  if (num - num2 > num1 - num) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmpi9m_0bfw.js:27:12)\n    at Object.<anonymous> (/tmp/tmpi9m_0bfw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  if (num - floor === 0.5) {\n    if (floor < 0) {\n      return floor;\n    } else {\n      return ceil;\n    }\n  } else {\n    return Math.round(num);\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor < ceil - num) {\n    return floor;\n  } else {\n    return ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp1i23tfgr.js:28:12)\n    at Object.<anonymous> (/tmp/tmp1i23tfgr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num: number = Number(value);\n  let floor: number = Math.floor(num);\n  let ceil: number = Math.ceil(num);\n  let diffFloor: number = Math.abs(num - floor);\n  let diffCeil: number = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  } else {\n    return diffFloor < diffCeil ? floor : ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n14\n-15\n15\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp_jayfcju.js:21:12)\n    at Object.<anonymous> (/tmp/tmp_jayfcju.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp3srmauk0.js:25:12)\n    at Object.<anonymous> (/tmp/tmp3srmauk0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n14\n-14\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-15\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  let int = Math.round(num);\n  if (num - int === 0.5) {\n    return int + 1;\n  } else {\n    return int;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpyda9bb6q.js:27:12)\n    at Object.<anonymous> (/tmp/tmpyda9bb6q.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n-14\n-15\n14\n14\n15\n",
      "timestamp": 1660334010
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor === 0.5) {\n    return num > 0 ? ceil : floor;\n  }\n  return num - floor < ceil - num ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n",
      "timestamp": 1660334010
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  let num1 = Math.floor(num);\n  let num2 = Math.ceil(num);\n  if (num - num1 < num2 - num) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpbtujid6m.js:28:12)\n    at Object.<anonymous> (/tmp/tmpbtujid6m.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334011
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpnnz4jobw.js:27:12)\n    at Object.<anonymous> (/tmp/tmpnnz4jobw.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpazrug006.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpazrug006.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334011
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.9\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"14.3\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp3hi8h54n.js:43:12)\n    at Object.<anonymous> (/tmp/tmp3hi8h54n.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n14\n-15\n15\n-15\n15\n-15\n15\n-15\n15\n-14\n14\n-14\n14\n-14\n14\n-14\n14\n",
      "timestamp": 1660334011
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpg6ufh1m7.js:26:12)\n    at Object.<anonymous> (/tmp/tmpg6ufh1m7.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n",
      "timestamp": 1660334011
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp_w2c1g32.js:30:12)\n    at Object.<anonymous> (/tmp/tmp_w2c1g32.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n-14\n-14\n-15\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0 ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n",
      "timestamp": 1660334011
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp3srmauk0.js:25:12)\n    at Object.<anonymous> (/tmp/tmp3srmauk0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpoza6srpo.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoza6srpo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  return num - floor > ceil - num ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmpdrijfd68.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdrijfd68.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334011
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  return num - floor >= ceil - num ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp2y4q2cj7.js:23:12)\n    at Object.<anonymous> (/tmp/tmp2y4q2cj7.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp3srmauk0.js:25:12)\n    at Object.<anonymous> (/tmp/tmp3srmauk0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  let num1 = Math.ceil(num);\n  let num2 = Math.floor(num);\n  if (num - num2 > num1 - num) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmpi9m_0bfw.js:27:12)\n    at Object.<anonymous> (/tmp/tmpi9m_0bfw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const number = Number(value);\n  const floor = Math.floor(number);\n  const ceil = Math.ceil(number);\n  if (number - floor < ceil - number) {\n    return floor;\n  } else {\n    return ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpdvhcwsi2.js:28:12)\n    at Object.<anonymous> (/tmp/tmpdvhcwsi2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334011
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor > diffCeil ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmptla95_22.js:24:12)\n    at Object.<anonymous> (/tmp/tmptla95_22.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n",
      "timestamp": 1660334011
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n",
      "timestamp": 1660334012
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpv42i_gxs.js:25:12)\n    at Object.<anonymous> (/tmp/tmpv42i_gxs.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334012
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(clos\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvap7xnqm.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpvap7xnqm.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334011
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpu6gu8j1e.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334011
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff = num - floor;\n  return diff < 0.5 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp9e_69n00.js:24:12)\n    at Object.<anonymous> (/tmp/tmp9e_69n00.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334012
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff = num - floor;\n  if (diff === 0.5) {\n    return num > 0 ? ceil : floor;\n  }\n  return diff > 0.5 ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.49\"));\nconsole.log(closest_integer(\"-14.49\"));\nconsole.log(closest_integer(\"14.51\"));\nconsole.log(closest_integer(\"-14.51\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n14\n-14\n15\n-15\n",
      "timestamp": 1660334012
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpba0kxzkw.js:25:12)\n    at Object.<anonymous> (/tmp/tmpba0kxzkw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff = num - floor;\n  return diff < 0.5 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpce7zizxq.js:28:12)\n    at Object.<anonymous> (/tmp/tmpce7zizxq.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n14\n15\n",
      "timestamp": 1660334012
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor === 0.5) {\n    return num > 0 ? ceil : floor;\n  }\n  return num - floor < ceil - num ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.6\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n14\n-15\n15\n",
      "timestamp": 1660334012
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const numFloor = Math.floor(num);\n  const numCeil = Math.ceil(num);\n  const numFloorDiff = Math.abs(num - numFloor);\n  const numCeilDiff = Math.abs(num - numCeil);\n  if (numFloorDiff === numCeilDiff) {\n    return num > 0 ? numCeil : numFloor;\n  }\n  return numFloorDiff < numCeilDiff ? numFloor : numCeil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n",
      "timestamp": 1660334012
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor === 0.5) {\n    return num > 0 ? ceil : floor;\n  }\n  return num - floor < ceil - num ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num - ceil);\n  if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  }\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n14\n-15\n15\n",
      "timestamp": 1660334012
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  let diff1 = Math.abs(num - floor);\n  let diff2 = Math.abs(num - ceil);\n  if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  } else {\n    return diff1 < diff2 ? floor : ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n",
      "timestamp": 1660334012
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp3srmauk0.js:25:12)\n    at Object.<anonymous> (/tmp/tmp3srmauk0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor > ceil - num) {\n    return ceil;\n  } else {\n    return floor;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmppz2gaa8y.js:27:12)\n    at Object.<anonymous> (/tmp/tmppz2gaa8y.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n",
      "timestamp": 1660334012
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  if (num - floor > ceil - num) {\n    return ceil;\n  } else {\n    return floor;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmpbnv_bxcy.js:27:12)\n    at Object.<anonymous> (/tmp/tmpbnv_bxcy.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n",
      "timestamp": 1660334012
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0 ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpgzj03it_.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpgzj03it_.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334014
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  let num1 = Math.ceil(num);\n  let num2 = Math.floor(num);\n  if (num1 - num === 0.5) {\n    return num1;\n  } else if (num - num2 === 0.5) {\n    return num2;\n  } else if (num1 - num < 0.5) {\n    return num1;\n  } else {\n    return num2;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpawq6xfw5.js:38:12)\n    at Object.<anonymous> (/tmp/tmpawq6xfw5.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334014
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpoza6srpo.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoza6srpo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  let diff1 = Math.abs(num - floor);\n  let diff2 = Math.abs(num - ceil);\n  if (diff1 < diff2) {\n    return floor;\n  } else {\n    return ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmphawu3th5.js:34:12)\n    at Object.<anonymous> (/tmp/tmphawu3th5.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n14\n-15\n15\n",
      "timestamp": 1660334014
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpe1g06hx5.js:25:12)\n    at Object.<anonymous> (/tmp/tmpe1g06hx5.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334015
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff = num - floor;\n  if (diff === 0.5) {\n    return floor < 0 ? floor : ceil;\n  }\n  return diff < 0.5 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334014
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpoza6srpo.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoza6srpo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.99\"));\nconsole.log(closest_integer(\"-14.01\"));\nconsole.log(closest_integer(\"-14.001\"));\nconsole.log(closest_integer(\"-14.0001\"));\nconsole.log(closest_integer(\"-14.00001\"));\nconsole.log(closest_integer(\"-14.000001\"));\nconsole.log(closest_integer(\"-14.0000001\"));\nconsole.log(closest_integer(\"-14.00000001\"));\nconsole.log(closest_integer(\"-14.000000001\"));\nconsole.log(closest_integer(\"-14.0000000001\"));\nconsole.log(closest_integer(\"-14.00000000001\"));\nconsole.log(closest_integer(\"-14.000000000001\"));\nconsole.log(closest_integer(\"-14.0000000000001\"));\nconsole.log(closest_integer(\"-14.00000000000001\"));\nconsole.log(closest_integer(\"-14.000000000000001\"));\nconsole.log(closest_integer(\"-14.0000000000000001\"));\nconsole.log(closest_integer(\"-14.00000000000000001\"));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn3yhtbtc.ts(43,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334014
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor > ceil - num) {\n    return ceil;\n  } else {\n    return floor;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmppz2gaa8y.js:27:12)\n    at Object.<anonymous> (/tmp/tmppz2gaa8y.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n",
      "timestamp": 1660334012
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpi7usqfg_.js:29:12)\n    at Object.<anonymous> (/tmp/tmpi7usqfg_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  return num - floor > ceil - num ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmpdrijfd68.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdrijfd68.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  return num - floor > ceil - num ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmpdrijfd68.js:22:12)\n    at Object.<anonymous> (/tmp/tmpdrijfd68.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp5uvt49y6.js:27:12)\n    at Object.<anonymous> (/tmp/tmp5uvt49y6.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const numFloor = Math.floor(num);\n  const numCeil = Math.ceil(num);\n  const numFloorDiff = Math.abs(num - numFloor);\n  const numCeilDiff = Math.abs(num - numCeil);\n  return numFloorDiff < numCeilDiff ? numFloor : numCeil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpejpn90j0.js:27:12)\n    at Object.<anonymous> (/tmp/tmpejpn90j0.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n",
      "timestamp": 1660334015
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp_jayfcju.js:21:12)\n    at Object.<anonymous> (/tmp/tmp_jayfcju.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpndn8oo7i.js:33:12)\n    at Object.<anonymous> (/tmp/tmpndn8oo7i.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n-14\n-14\n-15\n14\n14\n15\n",
      "timestamp": 1660334015
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num - ceil);\n  if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  }\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-15\n-14\n-15\n",
      "timestamp": 1660334015
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  let diffFloor = Math.abs(num - floor);\n  let diffCeil = Math.abs(num - ceil);\n  if (diffFloor < diffCeil) {\n    return floor;\n  } else {\n    return ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpt22qhtpe.js:30:12)\n    at Object.<anonymous> (/tmp/tmpt22qhtpe.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334015
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0 ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfx34gjas.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpfx34gjas.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334014
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpygocx75j.ts(44,34): error TS1002: Unterminated string literal.\n../../../../tmp/tmpygocx75j.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmpygocx75j.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334015
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n-14\n-15\n14\n14\n15\n",
      "timestamp": 1660334010
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0 ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n14\n15\n",
      "timestamp": 1660334015
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor > diffCeil ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmpwashurbl.js:33:12)\n    at Object.<anonymous> (/tmp/tmpwashurbl.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n-15\n-14\n-14\n-14\n-14\n-14\n-15\n-15\n-15\n",
      "timestamp": 1660334015
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff = num - floor;\n  return diff < 0.5 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.99\"));\nconsole.log(closest_integer(\"-14.999\"));\nconsole.log(closest_integer(\"-14.9999\"));\nconsole.log(closest_integer(\"-14.99999\"));\nconsole.log(closest_integer(\"-14.999999\"));\nconsole.log(closest_integer(\"-14.9999999\"));\nconsole.log(closest_integer(\"-14.99999999\"));\nconsole.log(closest_integer(\"-14.999999999\"));\nconsole.log(closest_integer(\"-14.9999999999\"));\nconsole.log(closest_integer(\"-14.99999999999\"));\nconsole.log(closest_integer(\"-14.999999999999\"));\nconsole.log(closest_integer(\"-14.9999999999999\"));\nconsole.log(closest_integer(\"-14.99999999999999\"));\nconsole.log(closest_integer(\"-14.999999999999999\"));\nconsole.log(closest_integer(\"-14.9999999999999999\"));\nconsole.log(closest_integer(\"-14.99999999999999999\"));\nconsole.log(closest_integer(\"-14.999999999999999999\"));\nconsole.log(closest_integer(\"-14\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmps4xhqqpz.ts(42,33): error TS1002: Unterminated string literal.\n../../../../tmp/tmps4xhqqpz.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmps4xhqqpz.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334015
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n15\n-15\n14\n-14\n14\n-14\n15\n-15\n15\n-15\n14\n-14\n14\n-14\n",
      "timestamp": 1660334015
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpv42i_gxs.js:25:12)\n    at Object.<anonymous> (/tmp/tmpv42i_gxs.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334012
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const number = Number(value);\n  const floor = Math.floor(number);\n  const ceil = Math.ceil(number);\n  const diffFloor = Math.abs(number - floor);\n  const diffCeil = Math.abs(number - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpwe2x7yrf.js:25:12)\n    at Object.<anonymous> (/tmp/tmpwe2x7yrf.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334015
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff = num - floor;\n  return diff > 0.5 ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmps03rzens.js:33:12)\n    at Object.<anonymous> (/tmp/tmps03rzens.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n-14\n-15\n14\n15\n14\n-15\n-14\n-15\n14\n15\n",
      "timestamp": 1660334015
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n14\n15\n",
      "timestamp": 1660334015
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor === 0.5) {\n    return num > 0 ? ceil : floor;\n  }\n  return num - floor < ceil - num ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff = num - floor;\n  return diff < 0.5 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp9e_69n00.js:24:12)\n    at Object.<anonymous> (/tmp/tmp9e_69n00.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334012
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor > diffCeil ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmp3y4ilxf4.js:29:12)\n    at Object.<anonymous> (/tmp/tmp3y4ilxf4.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n-14\n-15\n-14\n-14\n-15\n",
      "timestamp": 1660334015
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0 ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpldl6l8u1.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpldl6l8u1.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334016
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = parseFloat(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp_jayfcju.js:21:12)\n    at Object.<anonymous> (/tmp/tmp_jayfcju.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334008
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"14.2\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"14.3\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"14.7\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"14.8\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"14.9\"));\nconsole.log(closest_integer(\"-14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp13owcm0x.js:43:12)\n    at Object.<anonymous> (/tmp/tmp13owcm0x.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n15\n-15\n14\n-14\n14\n-14\n14\n-14\n14\n-14\n14\n-14\n15\n-15\n15\n-15\n15\n-15\n",
      "timestamp": 1660334016
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num - ceil);\n  if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  }\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334016
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0 ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpi41xwpgh.js:28:12)\n    at Object.<anonymous> (/tmp/tmpi41xwpgh.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n-14\n",
      "timestamp": 1660334017
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = Number(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmptj7fokgb.js:21:12)\n    at Object.<anonymous> (/tmp/tmptj7fokgb.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334018
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor < diffCeil) {\n    return floor;\n  } else if (diffFloor > diffCeil) {\n    return ceil;\n  } else {\n    return num > 0 ? ceil : floor;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334018
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (floor === ceil) return floor;\n  return num - floor < ceil - num ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"0.0\"));\nconsole.log(closest_integer(\"0.1\"));\nconsole.log(closest_integer(\"0.5\"));\nconsole.log(closest_integer(\"0.9\"));\nconsole.log(closest_integer(\"1.0\"));\nconsole.log(closest_integer(\"1.1\"));\nconsole.log(closest_integer(\"1.5\"));\nconsole.log(closest_integer(\"1.9\"));\nconsole.log(closest_integer(\"2.0\"));\nconsole.log(closest_integer(\"2.1\"));\nconsole.log(closest_integer(\"2.5\"));\nconsole.log(closest_integer(\"2.9\"));\nconsole.log(closest_integer(\"3.0\"));\nconsole.log(closest_integer(\"3.1\"));\nconsole.log(closest_integer(\"3.5\"));\nconsole.log(closest_integer(\"3.9\"));\nconsole.log(closest_integer(\"4.0\"));\nconsole.log(closest_integer(\"4.1\"));\nconsole.log(closest_integer(\"4.5\"));\nconsole.log(closest_integer(\"4.9\"));\nconsole.log(closest_integer(\"5.0\"));\nconsole.log(closest_integer(\"5.1\"));\nconsole.log(closest_integer(\"\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpvk09yc15.ts(45,30): error TS1002: Unterminated string literal.\n../../../../tmp/tmpvk09yc15.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpvk09yc15.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334017
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  let diff = num - floor;\n  if (diff === 0.5) {\n    return num > 0 ? ceil : floor;\n  }\n  return diff > 0.5 ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n",
      "timestamp": 1660334018
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num: number = Number(value);\n  const floor: number = Math.floor(num);\n  const ceil: number = Math.ceil(num);\n  const diffFloor: number = Math.abs(num - floor);\n  const diffCeil: number = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4qllydtt.ts(44,35): error TS1002: Unterminated string literal.\n../../../../tmp/tmp4qllydtt.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmp4qllydtt.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334018
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp64koh9qh.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334018
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  let diff1 = num - floor;\n  let diff2 = ceil - num;\n  if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  } else {\n    return diff1 < diff2 ? floor : ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n14\n15\n",
      "timestamp": 1660334018
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpoza6srpo.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoza6srpo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  return Math.round(parseFloat(value));\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpoza6srpo.js:20:12)\n    at Object.<anonymous> (/tmp/tmpoza6srpo.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-15\n-14\n-14\n14\n14\n15\n",
      "timestamp": 1660334018
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpn98hfqc9.ts(45,1): error TS1005: ',' expected.\n../../../../tmp/tmpn98hfqc9.ts(45,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334018
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmphyz2gphm.js:31:12)\n    at Object.<anonymous> (/tmp/tmphyz2gphm.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n-14\n14\n14\n15\n",
      "timestamp": 1660334019
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpq3hlks8m.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpq3hlks8m.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.10\"));\nconsole.log(closest_integer(\"-14.11\"));\nconsole.log(closest_integer(\"-14.12\"));\nconsole.log(closest_integer(\"-14.13\"));\nconsole.log(closest_integer(\"-14.14\"));\nconsole.log(closest_integer(\"-14.15\"));\nconsole.log(closest_integer(\"-14.16\"));\nconsole.log(closest_integer(\"-14.17\"));\nconsole.log(closest_integer(\"-14.18\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpc3s9e4nc.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpc3s9e4nc.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334018
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n    const num = Number(value);\n    const floor = Math.floor(num);\n    const ceil = Math.ceil(num);\n    const diffFloor = Math.abs(num - floor);\n    const diffCeil = Math.abs(num - ceil);\n    return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.99\"));\nconsole.log(closest_integer(\"-14.999\"));\nconsole.log(closest_integer(\"-14.9999\"));\nconsole.log(closest_integer(\"-14.99999\"));\nconsole.log(closest_integer(\"-14.999999\"));\nconsole.log(closest_integer(\"-14.9999999\"));\nconsole.log(closest_integer(\"-14.99999999\"));\nconsole.log(closest_integer(\"-14.999999999\"));\nconsole.log(closest_integer(\"-14.9999999999\"));\nconsole.log(closest_integer(\"-14.99999999999\"));\nconsole.log(closest_integer(\"-14.999999999999\"));\nconsole.log(closest_integer(\"-14.9999999999999\"));\nconsole.log(closest_integer(\"-14.99999999999999\"));\nconsole.log(closest_integer(\"-14.999999999999999\"));\nconsole.log(closest_integer(\"-14.9999999999999999\"));\nconsole.log(closest_integer(\"-14.99999999999999999\"));\nconsole.log(closest_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpoq69gwwd.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmpoq69gwwd.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334018
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpw5rrj7y6.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw5rrj7y6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0 ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660334019
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp3srmauk0.js:25:12)\n    at Object.<anonymous> (/tmp/tmp3srmauk0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp3srmauk0.js:25:12)\n    at Object.<anonymous> (/tmp/tmp3srmauk0.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpwowmm4r4.js:39:12)\n    at Object.<anonymous> (/tmp/tmpwowmm4r4.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n14\n-15\n15\n-14\n14\n-14\n15\n-14\n14\n-15\n15\n-14\n14\n",
      "timestamp": 1660334019
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpw5rrj7y6.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw5rrj7y6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  let diff1 = Math.abs(num - floor);\n  let diff2 = Math.abs(num - ceil);\n  if (diff1 === diff2) {\n    return num > 0 ? ceil : floor;\n  } else {\n    return diff1 < diff2 ? floor : ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n",
      "timestamp": 1660334012
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0 ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n14\n15\n",
      "timestamp": 1660334019
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n14\n15\n",
      "timestamp": 1660334019
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n-14\n-15\n14\n14\n15\n",
      "timestamp": 1660334019
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  if (num - floor === 0.5) {\n    return num > 0 ? ceil : floor;\n  }\n  return num - floor < ceil - num ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n14\n15\n-15\n",
      "timestamp": 1660334019
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num = Number(value);\n  let floor = Math.floor(num);\n  let ceil = Math.ceil(num);\n  let diffFloor = Math.abs(num - floor);\n  let diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  } else {\n    return diffFloor < diffCeil ? floor : ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334019
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0 ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.10\"));\nconsole.log(closest_integer(\"-14.11\"));\nconsole.log(closest_integer(\"-14.12\"));\nconsole.log(closest_integer(\"-14.13\"));\nconsole.log(closest_integer(\"-14.14\"));\nconsole.log(closest_integer(\"-14.15\"));\nconsole.log(closest_integer(\"-14.16\"));\nconsole.log(closest_integer(\"-14.17\"));\nconsole.log(closest_integer(\"-14.18\"));\nconsole.log(clos\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpouzaxc0f.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpouzaxc0f.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334019
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diff1 = Math.abs(num - floor);\n  const diff2 = Math.abs(num - ceil);\n  return diff1 < diff2 ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpe1g06hx5.js:25:12)\n    at Object.<anonymous> (/tmp/tmpe1g06hx5.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334015
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num < 0 ? floor : ceil;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.2\"));\nconsole.log(closest_integer(\"-14.3\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.7\"));\nconsole.log(closest_integer(\"-14.8\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"-14.10\"));\nconsole.log(closest_integer(\"-14.11\"));\nconsole.log(closest_integer(\"-14.12\"));\nconsole.log(closest_integer(\"-14.13\"));\nconsole.log(closest_integer(\"-14.14\"));\nconsole.log(closest_integer(\"-14.15\"));\nconsole.log(closest_integer(\"-14.16\"));\nconsole.log(closest_integer(\"-14.17\"));\nconsole.log(closest_integer(\"-14.18\"));\nconsole.log(closest\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpk0et266p.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmpk0et266p.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334019
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const number = parseFloat(value);\n  const floor = Math.floor(number);\n  const ceil = Math.ceil(number);\n  if (number - floor < ceil - number) {\n    return floor;\n  } else {\n    return ceil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmplzs1qen5.js:28:12)\n    at Object.<anonymous> (/tmp/tmplzs1qen5.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334019
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  let num: number = parseFloat(value);\n  let numFloor: number = Math.floor(num);\n  let numCeil: number = Math.ceil(num);\n  let numFloorDiff: number = Math.abs(num - numFloor);\n  let numCeilDiff: number = Math.abs(num - numCeil);\n  if (numFloorDiff === numCeilDiff) {\n    return num > 0 ? numCeil : numFloor;\n  } else {\n    return numFloorDiff < numCeilDiff ? numFloor : numCeil;\n  }\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-15.0\"));\nconsole.log(closest_integer(\"-15.1\"));\nconsole.log(closest_integer(\"-15.5\"));\nconsole.log(closest_integer(\"-15.6\"));\nconsole.log(closest_integer(\"-15.9\"));\nconsole.log(closest_integer(\"-16.0\"));\nconsole.log(closest_integer(\"-16.1\"));\nconsole.log(closest_integer(\"-16.5\"));\nconsole.log(closest_integer(\"-16.6\"));\nconsole.log(closest_integer(\"-16.9\"));\nconsole.log(closest_integer(\"-17.0\"));\nconsole.log(closest_integer(\"-17.1\"));\nconsole.log(closest_integer(\"-17.5\"));\nconsole.log(closest_integer(\"-17.6\"));\nconsole.log(closest_integer(\"-17.9\"));\nconsole.log(closest_integer(\"-18.0\"));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n-15\n-15\n-16\n-16\n-16\n-16\n-16\n-17\n-17\n-17\n-17\n-17\n-18\n-18\n-18\n-18\n",
      "timestamp": 1660334020
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmp3tv81mjn.js:33:12)\n    at Object.<anonymous> (/tmp/tmp3tv81mjn.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n-14\n-14\n-15\n14\n14\n15\n",
      "timestamp": 1660334020
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  return Math.round(num);\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpw5rrj7y6.js:21:12)\n    at Object.<anonymous> (/tmp/tmpw5rrj7y6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n",
      "timestamp": 1660334004
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n14\n",
      "timestamp": 1660334001
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp4m77imqq.ts(46,1): error TS1005: ',' expected.\n../../../../tmp/tmp4m77imqq.ts(46,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334020
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor > diffCeil ? ceil : floor;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely deep-equal\n\n15\n    at test (/tmp/tmprmi39tya.js:24:12)\n    at Object.<anonymous> (/tmp/tmprmi39tya.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "14\n-15\n",
      "timestamp": 1660334020
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const decimal = num - Math.floor(num);\n  return decimal < 0.5 ? Math.floor(num) : Math.ceil(num);\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpzkfus7vv.js:30:12)\n    at Object.<anonymous> (/tmp/tmpzkfus7vv.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n-14\n-15\n-14\n-14\n-15\n14\n14\n15\n",
      "timestamp": 1660334020
    },
    {
      "exit_code": 0,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  if (diffFloor === diffCeil) {\n    return num > 0 ? ceil : floor;\n  }\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"-14.1\"));\nconsole.log(closest_integer(\"-14.9\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"14.1\"));\nconsole.log(closest_integer(\"14.9\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "15\n-15\n-14\n-15\n-14\n-14\n-15\n14\n14\n15\n",
      "timestamp": 1660334010
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"14.6\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "15\n-14\n-14\n-15\n-14\n-14\n-15\n15\n14\n15\n15\n14\n15\n",
      "timestamp": 1660334020
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = Number(value);\n  const floor = Math.floor(num);\n  const ceil = Math.ceil(num);\n  const diffFloor = Math.abs(num - floor);\n  const diffCeil = Math.abs(num - ceil);\n  return diffFloor < diffCeil ? floor : ceil;\n}\n\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-14.0\"));\nconsole.log(closest_integer(\"14.5\"));\nconsole.log(closest_integer(\"-14.5\"));\nconsole.log(closest_integer(\"14.6\"));\nconsole.log(closest_integer(\"-14.6\"));\nconsole.log(closest_integer(\"14.4\"));\nconsole.log(closest_integer(\"-14.4\"));\nconsole.log(closest_integer(\"14.0\"));\nconsole.log(closest_integer(\"-14.0\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould loosely deep-equal\n\n-16\n    at test (/tmp/tmpajd4xn2i.js:39:12)\n    at Object.<anonymous> (/tmp/tmpajd4xn2i.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "15\n-14\n15\n-15\n14\n-14\n14\n-14\n15\n-14\n15\n-15\n14\n-14\n14\n-14\n",
      "timestamp": 1660334021
    }
  ]
}