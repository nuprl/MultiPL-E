{
  "language": "ts",
  "name": "HumanEval_92_any_int",
  "results": [
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkgtq_ipz.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbgk9vrr1.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpbgk9vrr1.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph2zoe5a9.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbgk9vrr1.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpbgk9vrr1.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 3.5));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpihid7ttk.js:23:12)\n    at Object.<anonymous> (/tmp/tmpihid7ttk.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\ntrue\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph2zoe5a9.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(3, 4, 7));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 6));\nconsole.log(any_int(3, 4, 8));\nconsole.log(any_int(3, 4, 9));\nconsole.log(any_int(3, 4, 10));\nconsole.log(any_int(3, 4, 11));\nconsole.log(any_int(3, 4, 12));\nconsole.log(any_int(3, 4, 13));\nconsole.log(any_int(3, 4, 14));\nconsole.log(any_int(3, 4, 15));\nconsole.log(any_int(3, 4, 16));\nconsole.log(any_int(3, 4, 17));\nconsole.log(any_int(3, 4, 18));\nconsole.log(any_int(3, 4, 19));\nconsole.log(any_int(3, 4, 20));\nconsole.log(any_int(3, 4, 21));\nconsole.log(any_int(3, 4, 22));\nconsole.log(any_int(3, 4, 23));\nconsole.log(any_int(3, 4, 24));\nconsole.log(any_int(3, 4, 25));\nconsole.log(any_int(3, 4, 26));\nconsole.log(any_int(3, 4, 27));\nconsole.log(any_int(3, 4, 28));\nconsole.log(any_int(3, 4, 29));\nconsole.log(any_int(3, 4, 30));\nconsole.log(any_int(3, 4, 31));\nconsole.log(any_int(3, 4, 32));\nconsole.log(any_int(3, 4, 33));\nconsole.log(any_int(3, 4, 34));\nconsole.log(any_int(3, 4, 35));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphrpwhgs5.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplkbruojg.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmplkbruojg.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5aveiuxh.js:23:12)\n    at Object.<anonymous> (/tmp/tmp5aveiuxh.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp82fc8eur.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpq4e6da_t.js:50:12)\n    at Object.<anonymous> (/tmp/tmpq4e6da_t.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgdy2y4x1.js:50:12)\n    at Object.<anonymous> (/tmp/tmpgdy2y4x1.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp34k37cba.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp34k37cba.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqshi0psc.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpeo9xpek2.js:50:12)\n    at Object.<anonymous> (/tmp/tmpeo9xpek2.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.log(any_int(2, 3, 35));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpke7dn0xi.js:50:12)\n    at Object.<anonymous> (/tmp/tmpke7dn0xi.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt3yw9dub.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr8h4xg1z.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt3yw9dub.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp34k37cba.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp34k37cba.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp34k37cba.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp34k37cba.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp07u58irw.js:50:12)\n    at Object.<anonymous> (/tmp/tmp07u58irw.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "false\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbgk9vrr1.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpbgk9vrr1.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbgk9vrr1.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpbgk9vrr1.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp99era595.js:21:12)\n    at Object.<anonymous> (/tmp/tmp99era595.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.log(any_int(2, 3, 35));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpke7dn0xi.js:50:12)\n    at Object.<anonymous> (/tmp/tmpke7dn0xi.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp34k37cba.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp34k37cba.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjzr7az8_.js:22:12)\n    at Object.<anonymous> (/tmp/tmpjzr7az8_.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr8h4xg1z.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph2zoe5a9.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr8h4xg1z.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z) {\n        return true;\n    } else if (x + z === y) {\n        return true;\n    } else if (y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsfl0co0h.js:52:12)\n    at Object.<anonymous> (/tmp/tmpsfl0co0h.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo1d0i8l0.js:23:12)\n    at Object.<anonymous> (/tmp/tmpo1d0i8l0.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmph45p5v3b.js:50:12)\n    at Object.<anonymous> (/tmp/tmph45p5v3b.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbgk9vrr1.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpbgk9vrr1.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp82fc8eur.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr8h4xg1z.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z) {\n        return true;\n    } else if (x + z === y) {\n        return true;\n    } else if (y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 7));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqq1ngjmg.js:28:12)\n    at Object.<anonymous> (/tmp/tmpqq1ngjmg.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z) {\n        return true;\n    } else if (x + z === y) {\n        return true;\n    } else if (y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp8b_0s4q3.ts(47,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if ((x + y === z) || (x + z === y) || (y + z === x)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcgirx735.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxrwwisxn.js:23:12)\n    at Object.<anonymous> (/tmp/tmpxrwwisxn.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqshi0psc.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmph45p5v3b.js:50:12)\n    at Object.<anonymous> (/tmp/tmph45p5v3b.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(5, 6, 11));\nconsole.log(any_int(5, 6, 12));\nconsole.log(any_int(5, 6, 10));\nconsole.log(any_int(5, 6, 9));\nconsole.log(any_int(5, 6, 8));\nconsole.log(any_int(5, 6, 7));\nconsole.log(any_int(5, 6, 6));\nconsole.log(any_int(5, 6, 5));\nconsole.log(any_int(5, 6, 4));\nconsole.log(any_int(5, 6, 3));\nconsole.log(any_int(5, 6, 2));\nconsole.log(any_int(5, 6, 1));\nconsole.log(any_int(5, 6, 0));\nconsole.log(any_int(5, 6, -1));\nconsole.log(any_int(5, 6, -2));\nconsole.log(any_int(5, 6, -3));\nconsole.log(any_int(5, 6, -4));\nconsole.log(any_int(5, 6, -5));\nconsole.log(any_int(5, 6, -6));\nconsole.log(any_int(5, 6, -7));\nconsole.log(any_int(5, 6, -8));\nconsole.log(any_int(5, 6, -9));\nconsole.log(any_int(5, 6, -10));\nconsole.log(any_int(5, 6, -11));\nconsole.log(any_int(5, 6, -12));\nconsole.log(any_int(5, 6, -13));\nconsole.log(any_int(5, 6, -14));\nconsole.log(any_int(5, 6, -15));\nconsole.log(any_int(5, 6, -16));\nconsole.log(any_int(5, 6, -17));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpacf28zw9.js:49:12)\n    at Object.<anonymous> (/tmp/tmpacf28zw9.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqshi0psc.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpecrzdijg.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp82fc8eur.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z) {\n        return true;\n    } else if (x + z === y) {\n        return true;\n    } else if (y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(5, 4, 9));\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(8, 2, 6));\nconsole.log(any_int(100, 200, 300));\nconsole.log(any_int(0.1, 0.2, 0.3));\nconsole.log(any_int(5, 4, 8));\nconsole.log(any_int(5, 4, 7));\nconsole.log(any_int(5, 4, 6));\nconsole.log(any_int(5, 4, 5));\nconsole.log(any_int(5, 4, 4));\nconsole.log(any_int(5, 4, 3));\nconsole.log(any_int(5, 4, 2));\nconsole.log(any_int(5, 4, 1));\nconsole.log(any_int(5, 4, 0));\nconsole.log(any_int(5, 4, -1));\nconsole.log(any_int(5, 4, -2));\nconsole.log(any_int(5, 4, -3));\nconsole.log(any_int(5, 4, -4));\nconsole.log(any_int(5, 4, -5));\nconsole.log(any_int(5, 4, -6));\nconsole.log(any_int(5, 4, -7));\nconsole.log(any_int(5, 4, -8));\nconsole.log(any_int(5, 4, -9));\nconsole.log(any_int(5, 4, -10));\nconsole.log(any_int(5, 4, -11));\nconsole.log(any_int(5, 4, -12));\nconsole.log(any_int(5, 4, -13));\nconsole.log(any_int(5, 4, -14));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdphxeg04.js:53:12)\n    at Object.<anonymous> (/tmp/tmpdphxeg04.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpjo_ellhf.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpjo_ellhf.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph2zoe5a9.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 7));\nconsole.log(any_int(3, 3, 3));\nconsole.log(any_int(3, 3, 2.5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgn7tcqpc.js:22:12)\n    at Object.<anonymous> (/tmp/tmpgn7tcqpc.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "false\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp34k37cba.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp34k37cba.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqshi0psc.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjfhpovoy.js:22:12)\n    at Object.<anonymous> (/tmp/tmpjfhpovoy.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbgk9vrr1.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpbgk9vrr1.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp34k37cba.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp34k37cba.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbgk9vrr1.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpbgk9vrr1.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 5));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo1d0i8l0.js:23:12)\n    at Object.<anonymous> (/tmp/tmpo1d0i8l0.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    return x + y === z || x + z === y || y + z === x;\n}\n\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.log(any_int(2, 3, 35));\nconsole.log(any_int\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmplsu1irek.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmplsu1irek.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr8h4xg1z.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpg3miiytv.js:24:12)\n    at Object.<anonymous> (/tmp/tmpg3miiytv.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\nfalse\ntrue\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjzr7az8_.js:22:12)\n    at Object.<anonymous> (/tmp/tmpjzr7az8_.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt3yw9dub.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 3.5));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -3.5));\nconsole.log(any_int(1, 2, -4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpw43vad87.js:24:12)\n    at Object.<anonymous> (/tmp/tmpw43vad87.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(3, 4, 7));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 6));\nconsole.log(any_int(3, 4, 9));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjxr6dcx9.js:22:12)\n    at Object.<anonymous> (/tmp/tmpjxr6dcx9.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqshi0psc.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbgk9vrr1.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpbgk9vrr1.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr8h4xg1z.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbgk9vrr1.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpbgk9vrr1.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp34k37cba.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp34k37cba.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    return x + y === z || x + z === y || y + z === x;\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int(1, 2, -26));\nconsole.log(any_int(1, 2\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp0m6bpjit.ts(40,1): error TS1005: ',' expected.\n../../../../tmp/tmp0m6bpjit.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpde5ov9c9.js:49:12)\n    at Object.<anonymous> (/tmp/tmpde5ov9c9.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqshi0psc.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmperw3mteq.js:26:12)\n    at Object.<anonymous> (/tmp/tmperw3mteq.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpr8h4xg1z.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpll1s3xvs.js:23:12)\n    at Object.<anonymous> (/tmp/tmpll1s3xvs.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\nfalse\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpd82xnzkt.js:22:12)\n    at Object.<anonymous> (/tmp/tmpd82xnzkt.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334640
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3hd1zo82.js:26:12)\n    at Object.<anonymous> (/tmp/tmp3hd1zo82.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\n",
      "timestamp": 1660334640
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp34k37cba.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp34k37cba.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    return (x + y === z || x + z === y || y + z === x) && (x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1.5));\nconsole.log(any_int(1, 2, 1.2));\nconsole.log(any_int(1, 2, 1.0));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpu4hw2qxu.js:26:12)\n    at Object.<anonymous> (/tmp/tmpu4hw2qxu.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\ntrue\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpkalrljs8.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334641
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbgk9vrr1.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpbgk9vrr1.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3)); // false\nconsole.log(any_int(1, 2, 2)); // true\nconsole.log(any_int(1, 2, 4)); // false\nconsole.log(any_int(1, 2, 1)); // true\nconsole.log(any_int(1, 2, 0)); // false\nconsole.log(any_int(1, 2, -1)); // true\nconsole.log(any_int(1, 2, -2)); // false\nconsole.log(any_int(1, 2, -3)); // false\nconsole.log(any_int(1, 2, -4)); // false\nconsole.log(any_int(1, 2, -5)); // false\nconsole.log(any_int(1, 2, -6)); // false\nconsole.log(any_int(1, 2, -7)); // false\nconsole.log(any_int(1, 2, -8)); // false\nconsole.log(any_int(1, 2, -9)); // false\nconsole.log(any_int(1, 2, -10)); // false\nconsole.log(any_int(1, 2, -11)); // false\nconsole.log(any_int(1, 2, -12)); // false\nconsole.log(any_int(1, 2, -13)); // false\nconsole.log(any_int(1, 2, -14)); // false\nconsole.log(any_int(1, 2, -15)); // false\nconsole.log(any_int(1, 2, -16)); // false\nconsole.log(any_int(1, 2, -17)); // false\nconsole.log(any_int(1, 2, -18)); // false\nconsole.log(any_int(1, 2, -19)); // false\nconsole.log(any_int(1, 2, -20)); // false\nconsole.log(any_int(1, 2, -21)); // false\nconsole.log(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpqjgyxs49.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334641
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmph2zoe5a9.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x && typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpe7d1dqcs.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmpe7d1dqcs.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334641
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbgk9vrr1.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpbgk9vrr1.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmpq4e6da_t.js:50:12)\n    at Object.<anonymous> (/tmp/tmpq4e6da_t.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\ntrue\nfalse\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp07u58irw.js:50:12)\n    at Object.<anonymous> (/tmp/tmp07u58irw.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "false\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp34k37cba.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp34k37cba.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbgk9vrr1.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpbgk9vrr1.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbgk9vrr1.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpbgk9vrr1.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0nyyo7qo.js:23:12)\n    at Object.<anonymous> (/tmp/tmp0nyyo7qo.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334641
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4mvp6gne.js:26:12)\n    at Object.<anonymous> (/tmp/tmp4mvp6gne.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334641
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpecrzdijg.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334639
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp34k37cba.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp34k37cba.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbgk9vrr1.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpbgk9vrr1.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp34k37cba.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp34k37cba.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(3, 4, 7));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 6));\nconsole.log(any_int(3, 4, 8));\nconsole.log(any_int(3, 4, 9));\nconsole.log(any_int(3, 4, 10));\nconsole.log(any_int(3, 4, 11));\nconsole.log(any_int(3, 4, 12));\nconsole.log(any_int(3, 4, 13));\nconsole.log(any_int(3, 4, 14));\nconsole.log(any_int(3, 4, 15));\nconsole.log(any_int(3, 4, 16));\nconsole.log(any_int(3, 4, 17));\nconsole.log(any_int(3, 4, 18));\nconsole.log(any_int(3, 4, 19));\nconsole.log(any_int(3, 4, 20));\nconsole.log(any_int(3, 4, 21));\nconsole.log(any_int(3, 4, 22));\nconsole.log(any_int(3, 4, 23));\nconsole.log(any_int(3, 4, 24));\nconsole.log(any_int(3, 4, 25));\nconsole.log(any_int(3, 4, 26));\nconsole.log(any_int(3, 4, 27));\nconsole.log(any_int(3, 4, 28));\nconsole.log(any_int(3, 4, 29));\nconsole.log(any_int(3, 4, 30));\nconsole.log(any_int(3, 4, 31));\nconsole.log(any_int(3, 4, 32));\nconsole.log(any_int(3, 4, 33));\nconsole.log(any_int(3, 4, 34));\nconsole.log(any_int(3, 4, 35));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2sozsea_.js:50:12)\n    at Object.<anonymous> (/tmp/tmp2sozsea_.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334641
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0cy3ymhf.js:50:12)\n    at Object.<anonymous> (/tmp/tmp0cy3ymhf.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "true\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbgk9vrr1.ts(42,1): error TS1005: ',' expected.\n../../../../tmp/tmpbgk9vrr1.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 1,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(2, 3, 4));\nconsole.log(any_int(2, 3, 5));\nconsole.log(any_int(2, 3, 6));\nconsole.log(any_int(2, 3, 7));\nconsole.log(any_int(2, 3, 8));\nconsole.log(any_int(2, 3, 9));\nconsole.log(any_int(2, 3, 10));\nconsole.log(any_int(2, 3, 11));\nconsole.log(any_int(2, 3, 12));\nconsole.log(any_int(2, 3, 13));\nconsole.log(any_int(2, 3, 14));\nconsole.log(any_int(2, 3, 15));\nconsole.log(any_int(2, 3, 16));\nconsole.log(any_int(2, 3, 17));\nconsole.log(any_int(2, 3, 18));\nconsole.log(any_int(2, 3, 19));\nconsole.log(any_int(2, 3, 20));\nconsole.log(any_int(2, 3, 21));\nconsole.log(any_int(2, 3, 22));\nconsole.log(any_int(2, 3, 23));\nconsole.log(any_int(2, 3, 24));\nconsole.log(any_int(2, 3, 25));\nconsole.log(any_int(2, 3, 26));\nconsole.log(any_int(2, 3, 27));\nconsole.log(any_int(2, 3, 28));\nconsole.log(any_int(2, 3, 29));\nconsole.log(any_int(2, 3, 30));\nconsole.log(any_int(2, 3, 31));\nconsole.log(any_int(2, 3, 32));\nconsole.log(any_int(2, 3, 33));\nconsole.log(any_int(2, 3, 34));\nconsole.log\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould loosely deep-equal\n\nfalse\n    at test (/tmp/tmp07u58irw.js:50:12)\n    at Object.<anonymous> (/tmp/tmp07u58irw.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "false\ntrue\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\nfalse\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    return x + y === z || x + z === y || y + z === x;\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int(1, 2,\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpeqgvxzqp.ts(40,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334641
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpt3yw9dub.ts(42,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp82fc8eur.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(3, 4, 7));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 6));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.log(any_int(3, 4, 5));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpiiz7t89j.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334641
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp34k37cba.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp34k37cba.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp34k37cba.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp34k37cba.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpdw0lgvjh.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 4));\nconsole.log(any_int(1, 2, 5));\nconsole.log(any_int(1, 2, 6));\nconsole.log(any_int(1, 2, 7));\nconsole.log(any_int(1, 2, 8));\nconsole.log(any_int(1, 2, 9));\nconsole.log(any_int(1, 2, 10));\nconsole.log(any_int(1, 2, 11));\nconsole.log(any_int(1, 2, 12));\nconsole.log(any_int(1, 2, 13));\nconsole.log(any_int(1, 2, 14));\nconsole.log(any_int(1, 2, 15));\nconsole.log(any_int(1, 2, 16));\nconsole.log(any_int(1, 2, 17));\nconsole.log(any_int(1, 2, 18));\nconsole.log(any_int(1, 2, 19));\nconsole.log(any_int(1, 2, 20));\nconsole.log(any_int(1, 2, 21));\nconsole.log(any_int(1, 2, 22));\nconsole.log(any_int(1, 2, 23));\nconsole.log(any_int(1, 2, 24));\nconsole.log(any_int(1, 2, 25));\nconsole.log(any_int(1, 2, 26));\nconsole.log(any_int(1, 2, 27));\nconsole.log(any_int(1, 2, 28));\nconsole.log(any_int(1, 2, 29));\nconsole.log(any_int(1, 2, 30));\nconsole.log(any_int(1, 2, 31));\nconsole.log(any_int(1, 2, 32));\nconsole.log(any_int(1, 2, 33));\nconsole.\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpbz_i7c0x.ts(44,9): error TS1003: Identifier expected.\n",
      "timestamp": 1660334635
    },
    {
      "exit_code": 2,
      "program": "//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconsole.log(any_int(1, 2, 3));\nconsole.log(any_int(1, 2, 2));\nconsole.log(any_int(1, 2, 1));\nconsole.log(any_int(1, 2, 0));\nconsole.log(any_int(1, 2, -1));\nconsole.log(any_int(1, 2, -2));\nconsole.log(any_int(1, 2, -3));\nconsole.log(any_int(1, 2, -4));\nconsole.log(any_int(1, 2, -5));\nconsole.log(any_int(1, 2, -6));\nconsole.log(any_int(1, 2, -7));\nconsole.log(any_int(1, 2, -8));\nconsole.log(any_int(1, 2, -9));\nconsole.log(any_int(1, 2, -10));\nconsole.log(any_int(1, 2, -11));\nconsole.log(any_int(1, 2, -12));\nconsole.log(any_int(1, 2, -13));\nconsole.log(any_int(1, 2, -14));\nconsole.log(any_int(1, 2, -15));\nconsole.log(any_int(1, 2, -16));\nconsole.log(any_int(1, 2, -17));\nconsole.log(any_int(1, 2, -18));\nconsole.log(any_int(1, 2, -19));\nconsole.log(any_int(1, 2, -20));\nconsole.log(any_int(1, 2, -21));\nconsole.log(any_int(1, 2, -22));\nconsole.log(any_int(1, 2, -23));\nconsole.log(any_int(1, 2, -24));\nconsole.log(any_int(1, 2, -25));\nconsole.log(any_int\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp34k37cba.ts(43,1): error TS1005: ',' expected.\n../../../../tmp/tmp34k37cba.ts(43,9): error TS1005: ',' expected.\n",
      "timestamp": 1660334636
    }
  ]
}