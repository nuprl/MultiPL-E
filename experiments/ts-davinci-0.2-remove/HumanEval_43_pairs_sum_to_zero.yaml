name: HumanEval_43_pairs_sum_to_zero
language: ts
prompt: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
  \ True if there are two distinct elements in the list that\n// sum to zero, and\
  \ False otherwise.\nfunction pairs_sum_to_zero(l: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
  \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3, 9,\
  \ -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
  \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
completions: ["    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        let x = l[i];\n        if (seen.indexOf(-x) !== -1) {\n         \
    \   return true;\n        }\n        seen.push(x);\n    }\n    return false;\n\
    }\n", "    // YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero not implemented\
    \ yet\");\n}\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n            return true;\n\
    \        }\n        seen.push(l[i]);\n    }\n    return false;\n}\n", "    //\
    \ YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero not implemented yet\"\
    );\n}\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.indexOf(-l[i]) !== -1) {\n            return true;\n   \
    \     }\n        seen.push(l[i]);\n    }\n    return false;\n}\n", "    let seen:\
    \ number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ !== -1) {\n            return true;\n        }\n        seen.push(l[i]);\n \
    \   }\n    return false;\n}\n", "    // TODO: implement this function\n    return\
    \ false;\n}\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n            return true;\n\
    \        }\n        seen.push(l[i]);\n    }\n    return false;\n}\n", "    let\
    \ seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ != -1) {\n            return true;\n        }\n        seen.push(l[i]);\n  \
    \  }\n    return false;\n}\n", "    let i: number = 0;\n    let j: number = 0;\n\
    \    let sum: number = 0;\n    while (i < l.length) {\n        j = i + 1;\n  \
    \      while (j < l.length) {\n            sum = l[i] + l[j];\n            if\
    \ (sum === 0) {\n                return true;\n            }\n            j =\
    \ j + 1;\n        }\n        i = i + 1;\n    }\n    return false;\n}\n", "   \
    \ let seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n       \
    \ if (seen.indexOf(-l[i]) !== -1) {\n            return true;\n        }\n   \
    \     seen.push(l[i]);\n    }\n    return false;\n}\n", "    let seen: number[]\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        let num = l[i];\n \
    \       if (seen.indexOf(-num) !== -1) {\n            return true;\n        }\n\
    \        seen.push(num);\n    }\n    return false;\n}\n", "    let seen: number[]\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ !== -1) {\n            return true;\n        }\n        seen.push(l[i]);\n \
    \   }\n    return false;\n}\n", "    let found = false;\n    for (let i = 0; i\
    \ < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n     \
    \       if (l[i] + l[j] === 0) {\n                found = true;\n            }\n\
    \        }\n    }\n    return found;\n}\n", "    // YOUR CODE HERE\n    throw\
    \ new Error(\"pairs_sum_to_zero not implemented yet\");\n}\n", "    let seen:\
    \ number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ >= 0) {\n            return true;\n        }\n        seen.push(l[i]);\n   \
    \ }\n    return false;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero\
    \ not implemented yet\");\n}\n", "    let s: number[] = [];\n    for (let i =\
    \ 0; i < l.length; i++) {\n        if (l[i] === 0) {\n            if (s.includes(0))\
    \ {\n                return true;\n            }\n            s.push(0);\n   \
    \     } else {\n            if (s.includes(-l[i])) {\n                return true;\n\
    \            }\n            s.push(l[i]);\n        }\n    }\n    return false;\n\
    }\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (seen.indexOf(-l[i]) != -1) {\n            return true;\n        }\n\
    \        seen.push(l[i]);\n    }\n    return false;\n}\n", "    // YOUR CODE HERE\n\
    \    throw new Error(\"Not implemented yet.\");\n}\n", "    // YOUR CODE HERE\n\
    \    throw new Error(\"pairs_sum_to_zero not implemented yet\");\n}\n", "    let\
    \ seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ !== -1) {\n            return true;\n        }\n        seen.push(l[i]);\n \
    \   }\n    return false;\n}\n", "  // YOUR CODE HERE\n  let hash: { [index: number]:\
    \ number } = {};\n  for (let i = 0; i < l.length; i++) {\n    if (hash[l[i]])\
    \ {\n      return true;\n    } else {\n      hash[-l[i]] = l[i];\n    }\n  }\n\
    \  return false;\n}\n", "    let seen: number[] = [];\n    for (let i = 0; i <\
    \ l.length; i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n            return\
    \ true;\n        }\n        seen.push(l[i]);\n    }\n    return false;\n}\n",
  "    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n      \
    \  if (seen.indexOf(-l[i]) !== -1) {\n            return true;\n        }\n  \
    \      seen.push(l[i]);\n    }\n    return false;\n}\n", "    // TODO: implement\
    \ this function\n    return false;\n}\n", "    let found: boolean = false;\n \
    \   for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length;\
    \ j++) {\n            if (l[i] + l[j] === 0) {\n                found = true;\n\
    \            }\n        }\n    }\n    return found;\n}\n", "    // YOUR CODE HERE\n\
    \    throw new Error(\"pairs_sum_to_zero not implemented\");\n}\n", "    let set:\
    \ Set<number> = new Set();\n    for (let i = 0; i < l.length; i++) {\n       \
    \ if (set.has(l[i])) {\n            return true;\n        }\n        set.add(-l[i]);\n\
    \    }\n    return false;\n}\n", "    let seen: number[] = [];\n    for (let i\
    \ = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n     \
    \       return true;\n        }\n        seen.push(l[i]);\n    }\n    return false;\n\
    }\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (seen.indexOf(-l[i]) !== -1) {\n            return true;\n       \
    \ }\n        seen.push(l[i]);\n    }\n    return false;\n}\n", "    let i: number\
    \ = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let sum: number =\
    \ 0;\n    let found: boolean = false;\n    for (i = 0; i < l.length; i++) {\n\
    \        for (j = i + 1; j < l.length; j++) {\n            sum = l[i] + l[j];\n\
    \            if (sum === 0) {\n                found = true;\n            }\n\
    \        }\n    }\n    return found;\n}\n", "    for (let i = 0; i < l.length;\
    \ i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i]\
    \ + l[j] === 0) {\n                return true;\n            }\n        }\n  \
    \  }\n    return false;\n}\n", "    // TODO: implement this function\n    return\
    \ false;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"Not implemented\"\
    );\n}\n", "  let seen: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n\
    \    if (seen.indexOf(-l[i]) !== -1) {\n      return true;\n    }\n    seen.push(l[i]);\n\
    \  }\n  return false;\n}\n", "    let s: Set<number> = new Set();\n    for (let\
    \ i = 0; i < l.length; i++) {\n        if (s.has(l[i])) {\n            return\
    \ true;\n        }\n        s.add(-l[i]);\n    }\n    return false;\n}\n", " \
    \   // TODO: implement this function\n    return false;\n}\n", "    let dict:\
    \ { [key: number]: boolean } = {};\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (dict[-l[i]]) {\n            return true;\n        }\n        dict[l[i]]\
    \ = true;\n    }\n    return false;\n}\n", "    let seen: number[] = [];\n   \
    \ for (let i = 0; i < l.length; i++) {\n        let num = l[i];\n        if (seen.indexOf(-num)\
    \ !== -1) {\n            return true;\n        }\n        seen.push(num);\n  \
    \  }\n    return false;\n}\n", "    for (let i = 0; i < l.length; i++) {\n   \
    \     for (let j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] ===\
    \ 0) {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n            return true;\n\
    \        }\n        seen.push(l[i]);\n    }\n    return false;\n}\n", "    let\
    \ set = new Set();\n    for (let i = 0; i < l.length; i++) {\n        if (set.has(l[i]))\
    \ {\n            return true;\n        }\n        set.add(-l[i]);\n    }\n   \
    \ return false;\n}\n", "    let seen: number[] = [];\n    for (let i = 0; i <\
    \ l.length; i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n            return\
    \ true;\n        }\n        seen.push(l[i]);\n    }\n    return false;\n}\n",
  "    // TODO: implement this function\n    return false;\n}\n", "    let set = new\
    \ Set();\n    for (let i = 0; i < l.length; i++) {\n        if (set.has(l[i]))\
    \ {\n            return true;\n        }\n        set.add(-l[i]);\n    }\n   \
    \ return false;\n}\n", "    // TODO: implement this function\n    return false;\n\
    }\n", "    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\");\n\
    }\n", "    let s: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n \
    \       if (s.indexOf(-l[i]) !== -1) {\n            return true;\n        }\n\
    \        s.push(l[i]);\n    }\n    return false;\n}\n", "    let h: { [key: number]:\
    \ boolean } = {};\n    for (let i = 0; i < l.length; i++) {\n        let x = l[i];\n\
    \        if (h[-x]) {\n            return true;\n        }\n        h[x] = true;\n\
    \    }\n    return false;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"\
    Not implemented yet.\");\n}\n", "    // TODO: implement this function\n    return\
    \ false;\n}\n", "    let s: Set<number> = new Set<number>();\n    for (let i =\
    \ 0; i < l.length; i++) {\n        if (s.has(l[i])) {\n            return true;\n\
    \        }\n        s.add(-l[i]);\n    }\n    return false;\n}\n", "    let s:\
    \ Set<number> = new Set();\n    for (let i = 0; i < l.length; i++) {\n       \
    \ if (s.has(l[i])) {\n            return true;\n        }\n        s.add(-l[i]);\n\
    \    }\n    return false;\n}\n", "    let seen: number[] = [];\n    for (let i\
    \ = 0; i < l.length; i++) {\n        let x = l[i];\n        if (seen.indexOf(-x)\
    \ !== -1) {\n            return true;\n        }\n        seen.push(x);\n    }\n\
    \    return false;\n}\n", "    // TODO: implement this function\n    return false;\n\
    }\n", "    // TODO: implement this function\n    return false;\n}\n", "    //\
    \ YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\");\n}\n", "    let\
    \ mySet = new Set();\n    for (let i = 0; i < l.length; i++) {\n        if (mySet.has(l[i]))\
    \ {\n            return true;\n        }\n        else {\n            mySet.add(-l[i]);\n\
    \        }\n    }\n    return false;\n}\n", "    let i: number = 0;\n    let j:\
    \ number = 0;\n    for (i = 0; i < l.length; i++) {\n        for (j = i + 1; j\
    \ < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\n", "    // YOUR\
    \ CODE HERE\n    throw new Error(\"pairs_sum_to_zero not implemented yet\");\n\
    }\n", "    // YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero not implemented\
    \ yet\");\n}\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n            return true;\n\
    \        }\n        seen.push(l[i]);\n    }\n    return false;\n}\n", "    let\
    \ seen = new Set();\n    for (let i = 0; i < l.length; i++) {\n        if (seen.has(-l[i]))\
    \ {\n            return true;\n        }\n        seen.add(l[i]);\n    }\n   \
    \ return false;\n}\n", "    let seen: number[] = [];\n    for (let i = 0; i <\
    \ l.length; i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n            return\
    \ true;\n        }\n        seen.push(l[i]);\n    }\n    return false;\n}\n",
  "    // YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero not implemented\
    \ yet\");\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero\
    \ not implemented\");\n}\n", "    let seen: number[] = [];\n    for (let i = 0;\
    \ i < l.length; i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n          \
    \  return true;\n        }\n        seen.push(l[i]);\n    }\n    return false;\n\
    }\n", "    let set: Set<number> = new Set();\n    for (let i of l) {\n       \
    \ if (set.has(-i)) {\n            return true;\n        }\n        set.add(i);\n\
    \    }\n    return false;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"\
    pairs_sum_to_zero not implemented yet\");\n}\n", "    // YOUR CODE HERE\n    throw\
    \ new Error(\"pairs_sum_to_zero not implemented yet\");\n}\n", "    let s: number[]\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (s.indexOf(-l[i])\
    \ !== -1) {\n            return true;\n        }\n        s.push(l[i]);\n    }\n\
    \    return false;\n}\n", "    const seen: number[] = [];\n    for (const i of\
    \ l) {\n        if (seen.includes(-i)) {\n            return true;\n        }\n\
    \        seen.push(i);\n    }\n    return false;\n}\n", "    let seen: number[]\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ !== -1) {\n            return true;\n        }\n        seen.push(l[i]);\n \
    \   }\n    return false;\n}\n", "    let seen: number[] = [];\n    for (let i\
    \ = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n     \
    \       return true;\n        }\n        seen.push(l[i]);\n    }\n    return false;\n\
    }\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (seen.indexOf(-l[i]) !== -1) {\n            return true;\n       \
    \ }\n        seen.push(l[i]);\n    }\n    return false;\n}\n", "    // YOUR CODE\
    \ HERE\n    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (seen.includes(-l[i])) {\n            return true;\n        }\n  \
    \      seen.push(l[i]);\n    }\n    return false;\n    //throw new Error(\"Not\
    \ implemented yet.\");\n}\n", "    let i: number = 0;\n    let j: number = 0;\n\
    \    let n: number = l.length;\n    let found: boolean = false;\n    while (i\
    \ < n && !found) {\n        j = i + 1;\n        while (j < n && !found) {\n  \
    \          if (l[i] + l[j] === 0) {\n                found = true;\n         \
    \   }\n            j = j + 1;\n        }\n        i = i + 1;\n    }\n    return\
    \ found;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero\
    \ not implemented yet\");\n}\n", "    let seen: number[] = [];\n    for (let i\
    \ = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n     \
    \       return true;\n        }\n        seen.push(l[i]);\n    }\n    return false;\n\
    }\n", "    let s: Set<number> = new Set();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (s.has(l[i])) {\n            return true;\n        }\n  \
    \      s.add(-l[i]);\n    }\n    return false;\n}\n", "    let seen: number[]\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ !== -1) {\n            return true;\n        }\n        seen.push(l[i]);\n \
    \   }\n    return false;\n}\n", "  // Your code here\n  return false;\n}\n", " \
    \   // YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero not implemented\
    \ yet\");\n}\n", "    // TODO: implement this function\n    return false;\n}\n",
  "    // TODO: implement this function\n    return false;\n}\n", "    // TODO: implement\
    \ this function\n    return false;\n}\n", "    let i: number = 0;\n    let j:\
    \ number = 0;\n    let sum: number = 0;\n    let found: boolean = false;\n   \
    \ while (i < l.length && !found) {\n        j = i + 1;\n        while (j < l.length\
    \ && !found) {\n            sum = l[i] + l[j];\n            if (sum === 0) {\n\
    \                found = true;\n            }\n            j = j + 1;\n      \
    \  }\n        i = i + 1;\n    }\n    return found;\n}\n", "    let s: Set<number>\
    \ = new Set();\n    for (let i = 0; i < l.length; i++) {\n        if (s.has(l[i]))\
    \ {\n            return true;\n        }\n        s.add(-l[i]);\n    }\n    return\
    \ false;\n}\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        let x = l[i];\n        if (seen.indexOf(-x) !== -1) {\n    \
    \        return true;\n        }\n        seen.push(x);\n    }\n    return false;\n\
    }\n", "    // YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero not implemented\
    \ yet\");\n}\n", "    let result: boolean = false;\n    for (let i = 0; i < l.length;\
    \ i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            if (l[i]\
    \ + l[j] === 0) {\n                result = true;\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let seen: number[] = [];\n    for (let\
    \ i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n   \
    \         return true;\n        }\n        seen.push(l[i]);\n    }\n    return\
    \ false;\n}\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n            return true;\n\
    \        }\n        seen.push(l[i]);\n    }\n    return false;\n}\n", "    let\
    \ seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ !== -1) {\n            return true;\n        }\n        seen.push(l[i]);\n \
    \   }\n    return false;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"\
    pairs_sum_to_zero not implemented\");\n}\n", "    // YOUR CODE HERE\n    throw\
    \ new Error(\"pairs_sum_to_zero not implemented yet\");\n}\n", "    // YOUR CODE\
    \ HERE\n    throw new Error(\"pairs_sum_to_zero not implemented yet\");\n}\n",
  "    let s = new Set();\n    for (let i = 0; i < l.length; i++) {\n        if (s.has(-l[i]))\
    \ {\n            return true;\n        }\n        s.add(l[i]);\n    }\n    return\
    \ false;\n}\n", "    let seen = new Set();\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (seen.has(-l[i])) {\n            return true;\n        }\n\
    \        seen.add(l[i]);\n    }\n    return false;\n}\n", "    let i: number =\
    \ 0;\n    let j: number = 0;\n    let sum: number = 0;\n    for (i = 0; i < l.length;\
    \ i++) {\n        for (j = i + 1; j < l.length; j++) {\n            sum = l[i]\
    \ + l[j];\n            if (sum === 0) {\n                return true;\n      \
    \      }\n        }\n    }\n    return false;\n}\n", "    let seen: number[] =\
    \ [];\n    for (let i = 0; i < l.length; i++) {\n        let x = l[i];\n     \
    \   if (seen.indexOf(-x) !== -1) {\n            return true;\n        }\n    \
    \    seen.push(x);\n    }\n    return false;\n}\n", "    let seen: number[] =\
    \ [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ !== -1) {\n            return true;\n        }\n        seen.push(l[i]);\n \
    \   }\n    return false;\n}\n", "    let seen: number[] = [];\n    for (let i\
    \ = 0; i < l.length; i++) {\n        let x = l[i];\n        if (seen.indexOf(-x)\
    \ > -1) {\n            return true;\n        }\n        seen.push(x);\n    }\n\
    \    return false;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"Not implemented\
    \ yet.\");\n}\n", "    let set: Set<number> = new Set();\n    for (let i = 0;\
    \ i < l.length; i++) {\n        if (set.has(l[i])) {\n            return true;\n\
    \        }\n        set.add(-l[i]);\n    }\n    return false;\n}\n", "    let\
    \ seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ !== -1) {\n            return true;\n        }\n        seen.push(l[i]);\n \
    \   }\n    return false;\n}\n", "    let seen: number[] = [];\n    for (let i\
    \ = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n     \
    \       return true;\n        }\n        seen.push(l[i]);\n    }\n    return false;\n\
    }\n", "    // TODO: implement this function\n    return false;\n}\n", "    //\
    \ TODO: implement this function\n    return false;\n}\n", "    // TODO: implement\
    \ this function\n    return false;\n}\n", "    // TODO: implement this function\n\
    \    return false;\n}\n", "    let s: Set<number> = new Set();\n    for (let i\
    \ = 0; i < l.length; i++) {\n        if (s.has(l[i])) {\n            return true;\n\
    \        }\n        s.add(-l[i]);\n    }\n    return false;\n}\n", "    let set\
    \ = new Set<number>();\n    for (let i = 0; i < l.length; i++) {\n        if (set.has(-l[i]))\
    \ {\n            return true;\n        }\n        set.add(l[i]);\n    }\n    return\
    \ false;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero\
    \ not implemented yet\");\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"\
    pairs_sum_to_zero not implemented\");\n}\n", "    let seen: number[] = [];\n \
    \   for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i]) !==\
    \ -1) {\n            return true;\n        }\n        seen.push(l[i]);\n    }\n\
    \    return false;\n}\n", "    let seen = new Set();\n    for (let i = 0; i <\
    \ l.length; i++) {\n        if (seen.has(-l[i])) {\n            return true;\n\
    \        }\n        seen.add(l[i]);\n    }\n    return false;\n}\n", "    let\
    \ seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ > -1) {\n            return true;\n        }\n        seen.push(l[i]);\n   \
    \ }\n    return false;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero\
    \ not implemented yet\");\n}\n", "    let seen: number[] = [];\n    for (let i\
    \ = 0; i < l.length; i++) {\n        let x = l[i];\n        if (seen.indexOf(-x)\
    \ >= 0) {\n            return true;\n        }\n        seen.push(x);\n    }\n\
    \    return false;\n}\n", "    // TODO: implement this function\n    return false;\n\
    }\n", "    // YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero not implemented\"\
    );\n}\n", "    let n = l.length;\n    for (let i = 0; i < n; i++) {\n        for\
    \ (let j = i + 1; j < n; j++) {\n            if (l[i] + l[j] === 0) {\n      \
    \          return true;\n            }\n        }\n    }\n    return false;\n\
    }\n", "    // YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero not implemented\"\
    );\n}\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (seen.indexOf(-l[i]) !== -1) {\n            return true;\n   \
    \     }\n        seen.push(l[i]);\n    }\n    return false;\n}\n", "    // TODO:\
    \ implement this function\n    return false;\n}\n", "    let s: Set<number> =\
    \ new Set();\n    for (let i = 0; i < l.length; i++) {\n        if (s.has(l[i]))\
    \ {\n            return true;\n        }\n        s.add(-l[i]);\n    }\n    return\
    \ false;\n}\n", "    let s: Set<number> = new Set();\n    for (let i = 0; i <\
    \ l.length; i++) {\n        if (s.has(l[i])) {\n            return true;\n   \
    \     }\n        s.add(-l[i]);\n    }\n    return false;\n}\n", "    let i: number\
    \ = 0;\n    let j: number = 0;\n    let n: number = l.length;\n    let found:\
    \ boolean = false;\n    while (i < n && !found) {\n        j = i + 1;\n      \
    \  while (j < n && !found) {\n            if (l[i] + l[j] === 0) {\n         \
    \       found = true;\n            }\n            j = j + 1;\n        }\n    \
    \    i = i + 1;\n    }\n    return found;\n}\n", "    // TODO: implement this\
    \ function\n    return false;\n}\n", "    let s: number[] = [];\n    for (let\
    \ i = 0; i < l.length; i++) {\n        if (s.indexOf(-l[i]) != -1) {\n       \
    \     return true;\n        }\n        s.push(l[i]);\n    }\n    return false;\n\
    }\n", "    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\");\n\
    }\n", "    // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\");\n\
    }\n", "    // TODO: implement this function\n    return false;\n}\n", "    let\
    \ seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ !== -1) {\n            return true;\n        }\n        seen.push(l[i]);\n \
    \   }\n    return false;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"\
    pairs_sum_to_zero not implemented\");\n}\n", "    let seen: number[] = [];\n \
    \   for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i]) !==\
    \ -1) {\n            return true;\n        }\n        seen.push(l[i]);\n    }\n\
    \    return false;\n}\n", "    // TODO: implement this function\n    return false;\n\
    }\n", "    // YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero not implemented\
    \ yet\");\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"Not implemented\
    \ yet.\");\n}\n", "    // TODO: implement this function\n    return false;\n}\n",
  "    let s = new Set<number>();\n    for (let i of l) {\n        if (s.has(-i))\
    \ {\n            return true;\n        }\n        s.add(i);\n    }\n    return\
    \ false;\n}\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n            return true;\n\
    \        }\n        seen.push(l[i]);\n    }\n    return false;\n}\n", "    let\
    \ s: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (s.indexOf(-l[i])\
    \ !== -1) {\n            return true;\n        }\n        s.push(l[i]);\n    }\n\
    \    return false;\n}\n", "    let i: number = 0;\n    let j: number = 0;\n  \
    \  let k: number = 0;\n    let n: number = l.length;\n    let sum: number = 0;\n\
    \    let found: boolean = false;\n    for (i = 0; i < n; i++) {\n        for (j\
    \ = i + 1; j < n; j++) {\n            sum = l[i] + l[j];\n            if (sum\
    \ === 0) {\n                found = true;\n            }\n        }\n    }\n \
    \   return found;\n}\n", "    let seen: number[] = [];\n    for (let i = 0; i\
    \ < l.length; i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n            return\
    \ true;\n        }\n        seen.push(l[i]);\n    }\n    return false;\n}\n",
  "    let s: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if\
    \ (s.indexOf(-l[i]) !== -1) {\n            return true;\n        }\n        s.push(l[i]);\n\
    \    }\n    return false;\n}\n", "    // TODO: implement this function\n    return\
    \ false;\n}\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n            return true;\n\
    \        }\n        seen.push(l[i]);\n    }\n    return false;\n}\n", "    let\
    \ seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ != -1) {\n            return true;\n        }\n        seen.push(l[i]);\n  \
    \  }\n    return false;\n}\n", "    let seen: number[] = [];\n    for (let i =\
    \ 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n       \
    \     return true;\n        }\n        seen.push(l[i]);\n    }\n    return false;\n\
    }\n", "    // YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero not implemented\"\
    );\n}\n", "    for (let i = 0; i < l.length; i++) {\n        for (let j = i +\
    \ 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\n", " \
    \   // YOUR CODE HERE\n    throw new Error(\"Not implemented yet.\");\n}\n", " \
    \   let seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n     \
    \   if (seen.indexOf(-l[i]) > -1) {\n            return true;\n        }\n   \
    \     seen.push(l[i]);\n    }\n    return false;\n}\n", "    let s = new Set();\n\
    \    for (let i = 0; i < l.length; i++) {\n        if (s.has(-l[i])) {\n     \
    \       return true;\n        }\n        s.add(l[i]);\n    }\n    return false;\n\
    }\n", "    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j\
    \ < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\n", "    let seen:\
    \ number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ !== -1) {\n            return true;\n        }\n        seen.push(l[i]);\n \
    \   }\n    return false;\n}\n", "    let seen: number[] = [];\n    for (let i\
    \ = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n     \
    \       return true;\n        }\n        seen.push(l[i]);\n    }\n    return false;\n\
    }\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (seen.indexOf(-l[i]) !== -1) {\n            return true;\n       \
    \ }\n        seen.push(l[i]);\n    }\n    return false;\n}\n", "    let s: number[]\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (s.indexOf(-l[i])\
    \ != -1) {\n            return true;\n        }\n        s.push(l[i]);\n    }\n\
    \    return false;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero\
    \ not implemented\");\n}\n", "    let seen: number[] = [];\n    for (let i = 0;\
    \ i < l.length; i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n          \
    \  return true;\n        }\n        seen.push(l[i]);\n    }\n    return false;\n\
    }\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (seen.indexOf(-l[i]) !== -1) {\n            return true;\n       \
    \ }\n        seen.push(l[i]);\n    }\n    return false;\n}\n", "    let seen:\
    \ number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ > -1) {\n            return true;\n        }\n        seen.push(l[i]);\n   \
    \ }\n    return false;\n}\n", "    let seen: number[] = [];\n    for (let i =\
    \ 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n       \
    \     return true;\n        }\n        seen.push(l[i]);\n    }\n    return false;\n\
    }\n", "    let i: number = 0;\n    let j: number = 0;\n    let sum: number = 0;\n\
    \    while (i < l.length) {\n        j = i + 1;\n        while (j < l.length)\
    \ {\n            sum = l[i] + l[j];\n            if (sum === 0) {\n          \
    \      return true;\n            }\n            j = j + 1;\n        }\n      \
    \  i = i + 1;\n    }\n    return false;\n}\n", "    let seen: number[] = [];\n\
    \    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i]) !==\
    \ -1) {\n            return true;\n        }\n        seen.push(l[i]);\n    }\n\
    \    return false;\n}\n", "    let i: number = 0;\n    let j: number = 0;\n  \
    \  let k: number = 0;\n    let sum: number = 0;\n    for (i = 0; i < l.length;\
    \ i++) {\n        for (j = 0; j < l.length; j++) {\n            if (i != j) {\n\
    \                sum = l[i] + l[j];\n                if (sum == 0) {\n       \
    \             return true;\n                }\n            }\n        }\n    }\n\
    \    return false;\n}\n", "    for (let i = 0; i < l.length; i++) {\n        for\
    \ (let j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n", "    // YOUR CODE HERE\n    throw new Error(\"pairs_sum_to_zero not implemented\
    \ yet\");\n}\n", "    let s = new Set();\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (s.has(-l[i])) {\n            return true;\n        }\n      \
    \  s.add(l[i]);\n    }\n    return false;\n}\n", "    let set: Set<number> = new\
    \ Set();\n    for (let i = 0; i < l.length; i++) {\n        if (set.has(l[i]))\
    \ {\n            return true;\n        }\n        set.add(-l[i]);\n    }\n   \
    \ return false;\n}\n", "    for (let i = 0; i < l.length; i++) {\n        for\
    \ (let j = i + 1; j < l.length; j++) {\n            if (l[i] + l[j] === 0) {\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n", "    let l1 = l.slice(0, l.length / 2);\n    let l2 = l.slice(l.length /\
    \ 2, l.length);\n    let s1 = new Set(l1);\n    let s2 = new Set(l2);\n    for\
    \ (let i of s1) {\n        if (s2.has(-i)) {\n            return true;\n     \
    \   }\n    }\n    return false;\n}\n", "    let s: number[] = [];\n    for (let\
    \ i = 0; i < l.length; i++) {\n        if (s.indexOf(-l[i]) !== -1) {\n      \
    \      return true;\n        }\n        s.push(l[i]);\n    }\n    return false;\n\
    }\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n\
    \        let x = l[i];\n        if (seen.indexOf(-x) != -1) {\n            return\
    \ true;\n        }\n        seen.push(x);\n    }\n    return false;\n}\n", " \
    \   let h: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if\
    \ (h.indexOf(-l[i]) !== -1) {\n            return true;\n        }\n        h.push(l[i]);\n\
    \    }\n    return false;\n}\n", "    let seen: number[] = [];\n    for (let i\
    \ = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n     \
    \       return true;\n        }\n        seen.push(l[i]);\n    }\n    return false;\n\
    }\n", "    let i: number = 0;\n    let j: number = 0;\n    while (i < l.length)\
    \ {\n        j = i + 1;\n        while (j < l.length) {\n            if (l[i]\
    \ + l[j] === 0) {\n                return true;\n            }\n            j\
    \ = j + 1;\n        }\n        i = i + 1;\n    }\n    return false;\n}\n", " \
    \   // TODO: implement this function\n    return false;\n}\n", "    let seen:\
    \ number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        let x = l[i];\n\
    \        if (seen.indexOf(-x) !== -1) {\n            return true;\n        }\n\
    \        seen.push(x);\n    }\n    return false;\n}\n", "    let seen: number[]\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ != -1) {\n            return true;\n        }\n        seen.push(l[i]);\n  \
    \  }\n    return false;\n}\n", "    let sum: number = 0;\n    for (let i = 0;\
    \ i < l.length; i++) {\n        sum = sum + l[i];\n    }\n    if (sum === 0) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n", "   \
    \ let seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n       \
    \ if (seen.indexOf(-l[i]) != -1) {\n            return true;\n        }\n    \
    \    seen.push(l[i]);\n    }\n    return false;\n}\n", "    let set: Set<number>\
    \ = new Set();\n    for (let i = 0; i < l.length; i++) {\n        if (set.has(l[i]))\
    \ {\n            return true;\n        }\n        set.add(-l[i]);\n    }\n   \
    \ return false;\n}\n", "    // YOUR CODE HERE\n    throw new Error(\"Not implemented\
    \ yet.\");\n}\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        let num = l[i];\n        if (seen.indexOf(-num) !== -1) {\n\
    \            return true;\n        }\n        seen.push(num);\n    }\n    return\
    \ false;\n}\n", "    let s: Set<number> = new Set();\n    for (let i = 0; i <\
    \ l.length; i++) {\n        if (s.has(l[i])) {\n            return true;\n   \
    \     }\n        s.add(-l[i]);\n    }\n    return false;\n}\n", "    // YOUR CODE\
    \ HERE\n    throw new Error(\"Not implemented yet.\");\n}\n", "    let seen: number[]\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i])\
    \ !== -1) {\n            return true;\n        }\n        seen.push(l[i]);\n \
    \   }\n    return false;\n}\n", "    // TODO: implement this function\n    return\
    \ false;\n}\n", "    let s: Set<number> = new Set();\n    for (let i = 0; i <\
    \ l.length; i++) {\n        if (s.has(l[i])) {\n            return true;\n   \
    \     }\n        s.add(-l[i]);\n    }\n    return false;\n}\n", "    // YOUR CODE\
    \ HERE\n    throw new Error(\"Not implemented\");\n}\n", "    for (let i = 0;\
    \ i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n   \
    \         if (l[i] + l[j] === 0) {\n                return true;\n           \
    \ }\n        }\n    }\n    return false;\n}\n", "    // YOUR CODE HERE\n    let\
    \ i = 0;\n    let j = 1;\n    while (i < l.length) {\n        while (j < l.length)\
    \ {\n            if (l[i] + l[j] === 0) {\n                return true;\n    \
    \        }\n            j++;\n        }\n        i++;\n        j = i + 1;\n  \
    \  }\n    return false;\n}\n", "    let seen: number[] = [];\n    for (let i =\
    \ 0; i < l.length; i++) {\n        if (seen.indexOf(-l[i]) !== -1) {\n       \
    \     return true;\n        }\n        seen.push(l[i]);\n    }\n    return false;\n\
    }\n", "    let seen: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n\
    \        if (seen.indexOf(-l[i]) !== -1) {\n            return true;\n       \
    \ }\n        seen.push(l[i]);\n    }\n    return false;\n}\n", "    let nums:\
    \ number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (nums.indexOf(-l[i])\
    \ > -1) {\n            return true;\n        }\n        nums.push(l[i]);\n   \
    \ }\n    return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
